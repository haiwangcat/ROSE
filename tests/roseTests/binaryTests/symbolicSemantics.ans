=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={} expr=v53[32] }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8} expr=0x080482c9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482c9:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9} expr=0x080482cb[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482cb:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb} expr=(add[32] (add[32] v52[32] -4[32]) -8[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9,0x080482cb} expr=0x080482ce[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482ce:call   0x08048364<call_gmon_start>
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482ce} expr=0x08048364[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=-45[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0<frame_dummy>
    registers:
        ax      = { defs={} expr=v142[32] }
        cx      = { defs={} expr=v143[32] }
        dx      = { defs={} expr=v144[32] }
        bx      = { defs={} expr=v145[32] }
        sp      = { defs={0x080482d3} expr=(add[32] v146[32] -4[32]) }
        bp      = { defs={} expr=v147[32] }
        si      = { defs={} expr=v148[32] }
        di      = { defs={} expr=v149[32] }
        es      = { defs={} expr=v150[16] }
        cs      = { defs={} expr=v151[16] }
        ss      = { defs={} expr=v152[16] }
        ds      = { defs={} expr=v153[16] }
        fs      = { defs={} expr=v154[16] }
        gs      = { defs={} expr=v155[16] }
        cf      = { defs={} expr=v156[1] }
        ?1      = { defs={} expr=v157[1] }
        pf      = { defs={} expr=v158[1] }
        ?3      = { defs={} expr=v159[1] }
        af      = { defs={} expr=v160[1] }
        ?5      = { defs={} expr=v161[1] }
        zf      = { defs={} expr=v162[1] }
        sf      = { defs={} expr=v163[1] }
        tf      = { defs={} expr=v164[1] }
        if      = { defs={} expr=v165[1] }
        df      = { defs={} expr=v166[1] }
        of      = { defs={} expr=v167[1] }
        iopl0   = { defs={} expr=v168[1] }
        iopl1   = { defs={} expr=v169[1] }
        nt      = { defs={} expr=v170[1] }
        ?15     = { defs={} expr=v171[1] }
        rf      = { defs={} expr=v172[1] }
        vm      = { defs={} expr=v173[1] }
        ac      = { defs={} expr=v174[1] }
        vif     = { defs={} expr=v175[1] }
        vip     = { defs={} expr=v176[1] }
        id      = { defs={} expr=v177[1] }
        ?22     = { defs={} expr=v178[1] }
        ?23     = { defs={} expr=v179[1] }
        ?24     = { defs={} expr=v180[1] }
        ?25     = { defs={} expr=v181[1] }
        ?26     = { defs={} expr=v182[1] }
        ?27     = { defs={} expr=v183[1] }
        ?28     = { defs={} expr=v184[1] }
        ?29     = { defs={} expr=v185[1] }
        ?30     = { defs={} expr=v186[1] }
        ?31     = { defs={} expr=v187[1] }
        ip      = { defs={0x080482d3} expr=0x080483d0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v146[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v146[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v146[32] -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d3} expr=(add[32] v146[32] -4[32]) }
          value = { defs={} expr=-40[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580<__do_global_ctors_aux>
    registers:
        ax      = { defs={} expr=v236[32] }
        cx      = { defs={} expr=v237[32] }
        dx      = { defs={} expr=v238[32] }
        bx      = { defs={} expr=v239[32] }
        sp      = { defs={0x080482d8} expr=(add[32] v240[32] -4[32]) }
        bp      = { defs={} expr=v241[32] }
        si      = { defs={} expr=v242[32] }
        di      = { defs={} expr=v243[32] }
        es      = { defs={} expr=v244[16] }
        cs      = { defs={} expr=v245[16] }
        ss      = { defs={} expr=v246[16] }
        ds      = { defs={} expr=v247[16] }
        fs      = { defs={} expr=v248[16] }
        gs      = { defs={} expr=v249[16] }
        cf      = { defs={} expr=v250[1] }
        ?1      = { defs={} expr=v251[1] }
        pf      = { defs={} expr=v252[1] }
        ?3      = { defs={} expr=v253[1] }
        af      = { defs={} expr=v254[1] }
        ?5      = { defs={} expr=v255[1] }
        zf      = { defs={} expr=v256[1] }
        sf      = { defs={} expr=v257[1] }
        tf      = { defs={} expr=v258[1] }
        if      = { defs={} expr=v259[1] }
        df      = { defs={} expr=v260[1] }
        of      = { defs={} expr=v261[1] }
        iopl0   = { defs={} expr=v262[1] }
        iopl1   = { defs={} expr=v263[1] }
        nt      = { defs={} expr=v264[1] }
        ?15     = { defs={} expr=v265[1] }
        rf      = { defs={} expr=v266[1] }
        vm      = { defs={} expr=v267[1] }
        ac      = { defs={} expr=v268[1] }
        vif     = { defs={} expr=v269[1] }
        vip     = { defs={} expr=v270[1] }
        id      = { defs={} expr=v271[1] }
        ?22     = { defs={} expr=v272[1] }
        ?23     = { defs={} expr=v273[1] }
        ?24     = { defs={} expr=v274[1] }
        ?25     = { defs={} expr=v275[1] }
        ?26     = { defs={} expr=v276[1] }
        ?27     = { defs={} expr=v277[1] }
        ?28     = { defs={} expr=v278[1] }
        ?29     = { defs={} expr=v279[1] }
        ?30     = { defs={} expr=v280[1] }
        ?31     = { defs={} expr=v281[1] }
        ip      = { defs={0x080482d8} expr=0x08048580[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v240[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v240[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v240[32] -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d8} expr=(add[32] v240[32] -4[32]) }
          value = { defs={} expr=-35[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
    registers:
        ax      = { defs={} expr=v330[32] }
        cx      = { defs={} expr=v331[32] }
        dx      = { defs={} expr=v332[32] }
        bx      = { defs={} expr=v333[32] }
        sp      = { defs={0x080482dd} expr=(add[32] v335[32] 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v378[8]) (shr0[32] 8[32] (uextend[32] 32[32] v379[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v380[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v381[8]))) }
        si      = { defs={} expr=v336[32] }
        di      = { defs={} expr=v337[32] }
        es      = { defs={} expr=v338[16] }
        cs      = { defs={} expr=v339[16] }
        ss      = { defs={} expr=v340[16] }
        ds      = { defs={} expr=v341[16] }
        fs      = { defs={} expr=v342[16] }
        gs      = { defs={} expr=v343[16] }
        cf      = { defs={} expr=v344[1] }
        ?1      = { defs={} expr=v345[1] }
        pf      = { defs={} expr=v346[1] }
        ?3      = { defs={} expr=v347[1] }
        af      = { defs={} expr=v348[1] }
        ?5      = { defs={} expr=v349[1] }
        zf      = { defs={} expr=v350[1] }
        sf      = { defs={} expr=v351[1] }
        tf      = { defs={} expr=v352[1] }
        if      = { defs={} expr=v353[1] }
        df      = { defs={} expr=v354[1] }
        of      = { defs={} expr=v355[1] }
        iopl0   = { defs={} expr=v356[1] }
        iopl1   = { defs={} expr=v357[1] }
        nt      = { defs={} expr=v358[1] }
        ?15     = { defs={} expr=v359[1] }
        rf      = { defs={} expr=v360[1] }
        vm      = { defs={} expr=v361[1] }
        ac      = { defs={} expr=v362[1] }
        vif     = { defs={} expr=v363[1] }
        vip     = { defs={} expr=v364[1] }
        id      = { defs={} expr=v365[1] }
        ?22     = { defs={} expr=v366[1] }
        ?23     = { defs={} expr=v367[1] }
        ?24     = { defs={} expr=v368[1] }
        ?25     = { defs={} expr=v369[1] }
        ?26     = { defs={} expr=v370[1] }
        ?27     = { defs={} expr=v371[1] }
        ?28     = { defs={} expr=v372[1] }
        ?29     = { defs={} expr=v373[1] }
        ?30     = { defs={} expr=v374[1] }
        ?31     = { defs={} expr=v375[1] }
        ip      = { defs={0x080482dd} expr=0x080482de[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v335[32] 3[32]) }
          value = { defs={} expr=v381[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v335[32] 2[32]) }
          value = { defs={} expr=v380[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v335[32] 1[32]) }
          value = { defs={} expr=v379[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v335[32] }
          value = { defs={} expr=v378[8] }
          flags = { rdonly }
0x80482de:ret    
    registers:
        ax      = { defs={} expr=v330[32] }
        cx      = { defs={} expr=v331[32] }
        dx      = { defs={} expr=v332[32] }
        bx      = { defs={} expr=v333[32] }
        sp      = { defs={0x080482dd,0x080482de} expr=(add[32] (add[32] v335[32] 4[32]) 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v378[8]) (shr0[32] 8[32] (uextend[32] 32[32] v379[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v380[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v381[8]))) }
        si      = { defs={} expr=v336[32] }
        di      = { defs={} expr=v337[32] }
        es      = { defs={} expr=v338[16] }
        cs      = { defs={} expr=v339[16] }
        ss      = { defs={} expr=v340[16] }
        ds      = { defs={} expr=v341[16] }
        fs      = { defs={} expr=v342[16] }
        gs      = { defs={} expr=v343[16] }
        cf      = { defs={} expr=v344[1] }
        ?1      = { defs={} expr=v345[1] }
        pf      = { defs={} expr=v346[1] }
        ?3      = { defs={} expr=v347[1] }
        af      = { defs={} expr=v348[1] }
        ?5      = { defs={} expr=v349[1] }
        zf      = { defs={} expr=v350[1] }
        sf      = { defs={} expr=v351[1] }
        tf      = { defs={} expr=v352[1] }
        if      = { defs={} expr=v353[1] }
        df      = { defs={} expr=v354[1] }
        of      = { defs={} expr=v355[1] }
        iopl0   = { defs={} expr=v356[1] }
        iopl1   = { defs={} expr=v357[1] }
        nt      = { defs={} expr=v358[1] }
        ?15     = { defs={} expr=v359[1] }
        rf      = { defs={} expr=v360[1] }
        vm      = { defs={} expr=v361[1] }
        ac      = { defs={} expr=v362[1] }
        vif     = { defs={} expr=v363[1] }
        vip     = { defs={} expr=v364[1] }
        id      = { defs={} expr=v365[1] }
        ?22     = { defs={} expr=v366[1] }
        ?23     = { defs={} expr=v367[1] }
        ?24     = { defs={} expr=v368[1] }
        ?25     = { defs={} expr=v369[1] }
        ?26     = { defs={} expr=v370[1] }
        ?27     = { defs={} expr=v371[1] }
        ?28     = { defs={} expr=v372[1] }
        ?29     = { defs={} expr=v373[1] }
        ?30     = { defs={} expr=v374[1] }
        ?31     = { defs={} expr=v375[1] }
        ip      = { defs={0x080482de} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v388[8]) (shr0[32] 8[32] (uextend[32] 32[32] v389[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v390[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v391[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v335[32] 4[32]) 3[32]) }
          value = { defs={} expr=v391[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v335[32] 4[32]) 2[32]) }
          value = { defs={} expr=v390[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v335[32] 4[32]) 1[32]) }
          value = { defs={} expr=v389[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=(add[32] v335[32] 4[32]) }
          value = { defs={} expr=v388[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v335[32] 3[32]) }
          value = { defs={} expr=v381[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v335[32] 2[32]) }
          value = { defs={} expr=v380[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v335[32] 1[32]) }
          value = { defs={} expr=v379[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v335[32] }
          value = { defs={} expr=v378[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
    registers:
        ax      = { defs={} expr=v444[32] }
        cx      = { defs={} expr=v445[32] }
        dx      = { defs={} expr=v446[32] }
        bx      = { defs={} expr=v447[32] }
        sp      = { defs={} expr=v448[32] }
        bp      = { defs={} expr=v449[32] }
        si      = { defs={} expr=v450[32] }
        di      = { defs={} expr=v451[32] }
        es      = { defs={} expr=v452[16] }
        cs      = { defs={} expr=v453[16] }
        ss      = { defs={} expr=v454[16] }
        ds      = { defs={} expr=v455[16] }
        fs      = { defs={} expr=v456[16] }
        gs      = { defs={} expr=v457[16] }
        cf      = { defs={} expr=v458[1] }
        ?1      = { defs={} expr=v459[1] }
        pf      = { defs={} expr=v460[1] }
        ?3      = { defs={} expr=v461[1] }
        af      = { defs={} expr=v462[1] }
        ?5      = { defs={} expr=v463[1] }
        zf      = { defs={} expr=v464[1] }
        sf      = { defs={} expr=v465[1] }
        tf      = { defs={} expr=v466[1] }
        if      = { defs={} expr=v467[1] }
        df      = { defs={} expr=v468[1] }
        of      = { defs={} expr=v469[1] }
        iopl0   = { defs={} expr=v470[1] }
        iopl1   = { defs={} expr=v471[1] }
        nt      = { defs={} expr=v472[1] }
        ?15     = { defs={} expr=v473[1] }
        rf      = { defs={} expr=v474[1] }
        vm      = { defs={} expr=v475[1] }
        ac      = { defs={} expr=v476[1] }
        vif     = { defs={} expr=v477[1] }
        vip     = { defs={} expr=v478[1] }
        id      = { defs={} expr=v479[1] }
        ?22     = { defs={} expr=v480[1] }
        ?23     = { defs={} expr=v481[1] }
        ?24     = { defs={} expr=v482[1] }
        ?25     = { defs={} expr=v483[1] }
        ?26     = { defs={} expr=v484[1] }
        ?27     = { defs={} expr=v485[1] }
        ?28     = { defs={} expr=v486[1] }
        ?29     = { defs={} expr=v487[1] }
        ?30     = { defs={} expr=v488[1] }
        ?31     = { defs={} expr=v489[1] }
        ip      = { defs={0x080482f0} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v492[8]) (shr0[32] 8[32] (uextend[32] 32[32] v493[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v494[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v495[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496d7[32] }
          value = { defs={} expr=v495[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d6[32] }
          value = { defs={} expr=v494[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d5[32] }
          value = { defs={} expr=v493[8] }
          flags = { rdonly }
        address = { defs={0x080482f0} expr=0x080496d4[32] }
          value = { defs={} expr=v492[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
    registers:
        ax      = { defs={} expr=v548[32] }
        cx      = { defs={} expr=v549[32] }
        dx      = { defs={} expr=v550[32] }
        bx      = { defs={} expr=v551[32] }
        sp      = { defs={} expr=v552[32] }
        bp      = { defs={} expr=v553[32] }
        si      = { defs={} expr=v554[32] }
        di      = { defs={} expr=v555[32] }
        es      = { defs={} expr=v556[16] }
        cs      = { defs={} expr=v557[16] }
        ss      = { defs={} expr=v558[16] }
        ds      = { defs={} expr=v559[16] }
        fs      = { defs={} expr=v560[16] }
        gs      = { defs={} expr=v561[16] }
        cf      = { defs={} expr=v562[1] }
        ?1      = { defs={} expr=v563[1] }
        pf      = { defs={} expr=v564[1] }
        ?3      = { defs={} expr=v565[1] }
        af      = { defs={} expr=v566[1] }
        ?5      = { defs={} expr=v567[1] }
        zf      = { defs={} expr=v568[1] }
        sf      = { defs={} expr=v569[1] }
        tf      = { defs={} expr=v570[1] }
        if      = { defs={} expr=v571[1] }
        df      = { defs={} expr=v572[1] }
        of      = { defs={} expr=v573[1] }
        iopl0   = { defs={} expr=v574[1] }
        iopl1   = { defs={} expr=v575[1] }
        nt      = { defs={} expr=v576[1] }
        ?15     = { defs={} expr=v577[1] }
        rf      = { defs={} expr=v578[1] }
        vm      = { defs={} expr=v579[1] }
        ac      = { defs={} expr=v580[1] }
        vif     = { defs={} expr=v581[1] }
        vip     = { defs={} expr=v582[1] }
        id      = { defs={} expr=v583[1] }
        ?22     = { defs={} expr=v584[1] }
        ?23     = { defs={} expr=v585[1] }
        ?24     = { defs={} expr=v586[1] }
        ?25     = { defs={} expr=v587[1] }
        ?26     = { defs={} expr=v588[1] }
        ?27     = { defs={} expr=v589[1] }
        ?28     = { defs={} expr=v590[1] }
        ?29     = { defs={} expr=v591[1] }
        ?30     = { defs={} expr=v592[1] }
        ?31     = { defs={} expr=v593[1] }
        ip      = { defs={0x08048300} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v596[8]) (shr0[32] 8[32] (uextend[32] 32[32] v597[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v598[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v599[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496db[32] }
          value = { defs={} expr=v599[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496da[32] }
          value = { defs={} expr=v598[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d9[32] }
          value = { defs={} expr=v597[8] }
          flags = { rdonly }
        address = { defs={0x08048300} expr=0x080496d8[32] }
          value = { defs={} expr=v596[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
    registers:
        ax      = { defs={} expr=v652[32] }
        cx      = { defs={} expr=v653[32] }
        dx      = { defs={} expr=v654[32] }
        bx      = { defs={} expr=v655[32] }
        sp      = { defs={} expr=v656[32] }
        bp      = { defs={} expr=v657[32] }
        si      = { defs={} expr=v658[32] }
        di      = { defs={} expr=v659[32] }
        es      = { defs={} expr=v660[16] }
        cs      = { defs={} expr=v661[16] }
        ss      = { defs={} expr=v662[16] }
        ds      = { defs={} expr=v663[16] }
        fs      = { defs={} expr=v664[16] }
        gs      = { defs={} expr=v665[16] }
        cf      = { defs={} expr=v666[1] }
        ?1      = { defs={} expr=v667[1] }
        pf      = { defs={} expr=v668[1] }
        ?3      = { defs={} expr=v669[1] }
        af      = { defs={} expr=v670[1] }
        ?5      = { defs={} expr=v671[1] }
        zf      = { defs={} expr=v672[1] }
        sf      = { defs={} expr=v673[1] }
        tf      = { defs={} expr=v674[1] }
        if      = { defs={} expr=v675[1] }
        df      = { defs={} expr=v676[1] }
        of      = { defs={} expr=v677[1] }
        iopl0   = { defs={} expr=v678[1] }
        iopl1   = { defs={} expr=v679[1] }
        nt      = { defs={} expr=v680[1] }
        ?15     = { defs={} expr=v681[1] }
        rf      = { defs={} expr=v682[1] }
        vm      = { defs={} expr=v683[1] }
        ac      = { defs={} expr=v684[1] }
        vif     = { defs={} expr=v685[1] }
        vip     = { defs={} expr=v686[1] }
        id      = { defs={} expr=v687[1] }
        ?22     = { defs={} expr=v688[1] }
        ?23     = { defs={} expr=v689[1] }
        ?24     = { defs={} expr=v690[1] }
        ?25     = { defs={} expr=v691[1] }
        ?26     = { defs={} expr=v692[1] }
        ?27     = { defs={} expr=v693[1] }
        ?28     = { defs={} expr=v694[1] }
        ?29     = { defs={} expr=v695[1] }
        ?30     = { defs={} expr=v696[1] }
        ?31     = { defs={} expr=v697[1] }
        ip      = { defs={0x08048310} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v703[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496df[32] }
          value = { defs={} expr=v703[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496de[32] }
          value = { defs={} expr=v702[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496dd[32] }
          value = { defs={} expr=v701[8] }
          flags = { rdonly }
        address = { defs={0x08048310} expr=0x080496dc[32] }
          value = { defs={} expr=v700[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
    registers:
        ax      = { defs={} expr=v756[32] }
        cx      = { defs={} expr=v757[32] }
        dx      = { defs={} expr=v758[32] }
        bx      = { defs={} expr=v759[32] }
        sp      = { defs={} expr=v760[32] }
        bp      = { defs={} expr=v761[32] }
        si      = { defs={} expr=v762[32] }
        di      = { defs={} expr=v763[32] }
        es      = { defs={} expr=v764[16] }
        cs      = { defs={} expr=v765[16] }
        ss      = { defs={} expr=v766[16] }
        ds      = { defs={} expr=v767[16] }
        fs      = { defs={} expr=v768[16] }
        gs      = { defs={} expr=v769[16] }
        cf      = { defs={} expr=v770[1] }
        ?1      = { defs={} expr=v771[1] }
        pf      = { defs={} expr=v772[1] }
        ?3      = { defs={} expr=v773[1] }
        af      = { defs={} expr=v774[1] }
        ?5      = { defs={} expr=v775[1] }
        zf      = { defs={} expr=v776[1] }
        sf      = { defs={} expr=v777[1] }
        tf      = { defs={} expr=v778[1] }
        if      = { defs={} expr=v779[1] }
        df      = { defs={} expr=v780[1] }
        of      = { defs={} expr=v781[1] }
        iopl0   = { defs={} expr=v782[1] }
        iopl1   = { defs={} expr=v783[1] }
        nt      = { defs={} expr=v784[1] }
        ?15     = { defs={} expr=v785[1] }
        rf      = { defs={} expr=v786[1] }
        vm      = { defs={} expr=v787[1] }
        ac      = { defs={} expr=v788[1] }
        vif     = { defs={} expr=v789[1] }
        vip     = { defs={} expr=v790[1] }
        id      = { defs={} expr=v791[1] }
        ?22     = { defs={} expr=v792[1] }
        ?23     = { defs={} expr=v793[1] }
        ?24     = { defs={} expr=v794[1] }
        ?25     = { defs={} expr=v795[1] }
        ?26     = { defs={} expr=v796[1] }
        ?27     = { defs={} expr=v797[1] }
        ?28     = { defs={} expr=v798[1] }
        ?29     = { defs={} expr=v799[1] }
        ?30     = { defs={} expr=v800[1] }
        ?31     = { defs={} expr=v801[1] }
        ip      = { defs={0x08048320} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v804[8]) (shr0[32] 8[32] (uextend[32] 32[32] v805[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v806[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v807[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e3[32] }
          value = { defs={} expr=v807[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e2[32] }
          value = { defs={} expr=v806[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e1[32] }
          value = { defs={} expr=v805[8] }
          flags = { rdonly }
        address = { defs={0x08048320} expr=0x080496e0[32] }
          value = { defs={} expr=v804[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
    registers:
        ax      = { defs={} expr=v860[32] }
        cx      = { defs={} expr=v861[32] }
        dx      = { defs={} expr=v862[32] }
        bx      = { defs={} expr=v863[32] }
        sp      = { defs={} expr=v864[32] }
        bp      = { defs={} expr=v865[32] }
        si      = { defs={} expr=v866[32] }
        di      = { defs={} expr=v867[32] }
        es      = { defs={} expr=v868[16] }
        cs      = { defs={} expr=v869[16] }
        ss      = { defs={} expr=v870[16] }
        ds      = { defs={} expr=v871[16] }
        fs      = { defs={} expr=v872[16] }
        gs      = { defs={} expr=v873[16] }
        cf      = { defs={} expr=v874[1] }
        ?1      = { defs={} expr=v875[1] }
        pf      = { defs={} expr=v876[1] }
        ?3      = { defs={} expr=v877[1] }
        af      = { defs={} expr=v878[1] }
        ?5      = { defs={} expr=v879[1] }
        zf      = { defs={} expr=v880[1] }
        sf      = { defs={} expr=v881[1] }
        tf      = { defs={} expr=v882[1] }
        if      = { defs={} expr=v883[1] }
        df      = { defs={} expr=v884[1] }
        of      = { defs={} expr=v885[1] }
        iopl0   = { defs={} expr=v886[1] }
        iopl1   = { defs={} expr=v887[1] }
        nt      = { defs={} expr=v888[1] }
        ?15     = { defs={} expr=v889[1] }
        rf      = { defs={} expr=v890[1] }
        vm      = { defs={} expr=v891[1] }
        ac      = { defs={} expr=v892[1] }
        vif     = { defs={} expr=v893[1] }
        vip     = { defs={} expr=v894[1] }
        id      = { defs={} expr=v895[1] }
        ?22     = { defs={} expr=v896[1] }
        ?23     = { defs={} expr=v897[1] }
        ?24     = { defs={} expr=v898[1] }
        ?25     = { defs={} expr=v899[1] }
        ?26     = { defs={} expr=v900[1] }
        ?27     = { defs={} expr=v901[1] }
        ?28     = { defs={} expr=v902[1] }
        ?29     = { defs={} expr=v903[1] }
        ?30     = { defs={} expr=v904[1] }
        ?31     = { defs={} expr=v905[1] }
        ip      = { defs={0x08048330} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v908[8]) (shr0[32] 8[32] (uextend[32] 32[32] v909[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v910[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v911[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e7[32] }
          value = { defs={} expr=v911[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e6[32] }
          value = { defs={} expr=v910[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e5[32] }
          value = { defs={} expr=v909[8] }
          flags = { rdonly }
        address = { defs={0x08048330} expr=0x080496e4[32] }
          value = { defs={} expr=v908[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={} expr=v965[32] }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={} expr=v968[32] }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={} expr=v970[32] }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048340} expr=v1010[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340} expr=0x08048342[32] }
    memory:
    init mem:
0x8048342:pop    esi
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={} expr=v965[32] }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342} expr=(add[32] v968[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048340} expr=v1010[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342} expr=0x08048343[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048343:mov    ecx, esp
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342} expr=(add[32] v968[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048340} expr=v1010[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343} expr=0x08048345[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048345:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345} expr=(bv-and[32] (add[32] v968[32] 4[32]) -16[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345} expr=0x08048348[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048348:push   eax
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348} expr=0x08048349[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048349:push   esp
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349} expr=0x0804834a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x804834a:push   edx
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a} expr=0x0804834b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x804834b:push   0x08048520<__libc_csu_fini>
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=0x08048350[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048350:push   0x080484b0<__libc_csu_init>
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=0x08048355[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048355:push   ecx
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=0x08048356[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048356:push   esi
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=0x08048357[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048357:push   0x08048410<main>
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=0x0804835c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x804835c:call   0x08048310<__libc_start_main@plt>
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x0804835c} expr=0x08048310[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=97[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
    registers:
        ax      = { defs={} expr=v1070[32] }
        cx      = { defs={} expr=v1071[32] }
        dx      = { defs={} expr=v1072[32] }
        bx      = { defs={} expr=v1073[32] }
        sp      = { defs={} expr=v1074[32] }
        bp      = { defs={} expr=v1075[32] }
        si      = { defs={} expr=v1076[32] }
        di      = { defs={} expr=v1077[32] }
        es      = { defs={} expr=v1078[16] }
        cs      = { defs={} expr=v1079[16] }
        ss      = { defs={} expr=v1080[16] }
        ds      = { defs={} expr=v1081[16] }
        fs      = { defs={} expr=v1082[16] }
        gs      = { defs={} expr=v1083[16] }
        cf      = { defs={} expr=v1084[1] }
        ?1      = { defs={} expr=v1085[1] }
        pf      = { defs={} expr=v1086[1] }
        ?3      = { defs={} expr=v1087[1] }
        af      = { defs={} expr=v1088[1] }
        ?5      = { defs={} expr=v1089[1] }
        zf      = { defs={} expr=v1090[1] }
        sf      = { defs={} expr=v1091[1] }
        tf      = { defs={} expr=v1092[1] }
        if      = { defs={} expr=v1093[1] }
        df      = { defs={} expr=v1094[1] }
        of      = { defs={} expr=v1095[1] }
        iopl0   = { defs={} expr=v1096[1] }
        iopl1   = { defs={} expr=v1097[1] }
        nt      = { defs={} expr=v1098[1] }
        ?15     = { defs={} expr=v1099[1] }
        rf      = { defs={} expr=v1100[1] }
        vm      = { defs={} expr=v1101[1] }
        ac      = { defs={} expr=v1102[1] }
        vif     = { defs={} expr=v1103[1] }
        vip     = { defs={} expr=v1104[1] }
        id      = { defs={} expr=v1105[1] }
        ?22     = { defs={} expr=v1106[1] }
        ?23     = { defs={} expr=v1107[1] }
        ?24     = { defs={} expr=v1108[1] }
        ?25     = { defs={} expr=v1109[1] }
        ?26     = { defs={} expr=v1110[1] }
        ?27     = { defs={} expr=v1111[1] }
        ?28     = { defs={} expr=v1112[1] }
        ?29     = { defs={} expr=v1113[1] }
        ?30     = { defs={} expr=v1114[1] }
        ?31     = { defs={} expr=v1115[1] }
        ip      = { defs={0x08048361} expr=0x08048361[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048364:push   ebp
    registers:
        ax      = { defs={} expr=v1164[32] }
        cx      = { defs={} expr=v1165[32] }
        dx      = { defs={} expr=v1166[32] }
        bx      = { defs={} expr=v1167[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
        bp      = { defs={} expr=v1169[32] }
        si      = { defs={} expr=v1170[32] }
        di      = { defs={} expr=v1171[32] }
        es      = { defs={} expr=v1172[16] }
        cs      = { defs={} expr=v1173[16] }
        ss      = { defs={} expr=v1174[16] }
        ds      = { defs={} expr=v1175[16] }
        fs      = { defs={} expr=v1176[16] }
        gs      = { defs={} expr=v1177[16] }
        cf      = { defs={} expr=v1178[1] }
        ?1      = { defs={} expr=v1179[1] }
        pf      = { defs={} expr=v1180[1] }
        ?3      = { defs={} expr=v1181[1] }
        af      = { defs={} expr=v1182[1] }
        ?5      = { defs={} expr=v1183[1] }
        zf      = { defs={} expr=v1184[1] }
        sf      = { defs={} expr=v1185[1] }
        tf      = { defs={} expr=v1186[1] }
        if      = { defs={} expr=v1187[1] }
        df      = { defs={} expr=v1188[1] }
        of      = { defs={} expr=v1189[1] }
        iopl0   = { defs={} expr=v1190[1] }
        iopl1   = { defs={} expr=v1191[1] }
        nt      = { defs={} expr=v1192[1] }
        ?15     = { defs={} expr=v1193[1] }
        rf      = { defs={} expr=v1194[1] }
        vm      = { defs={} expr=v1195[1] }
        ac      = { defs={} expr=v1196[1] }
        vif     = { defs={} expr=v1197[1] }
        vip     = { defs={} expr=v1198[1] }
        id      = { defs={} expr=v1199[1] }
        ?22     = { defs={} expr=v1200[1] }
        ?23     = { defs={} expr=v1201[1] }
        ?24     = { defs={} expr=v1202[1] }
        ?25     = { defs={} expr=v1203[1] }
        ?26     = { defs={} expr=v1204[1] }
        ?27     = { defs={} expr=v1205[1] }
        ?28     = { defs={} expr=v1206[1] }
        ?29     = { defs={} expr=v1207[1] }
        ?30     = { defs={} expr=v1208[1] }
        ?31     = { defs={} expr=v1209[1] }
        ip      = { defs={0x08048364} expr=0x08048365[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1169[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1169[32]) }
          flags = { }
    init mem:
0x8048365:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v1164[32] }
        cx      = { defs={} expr=v1165[32] }
        dx      = { defs={} expr=v1166[32] }
        bx      = { defs={} expr=v1167[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1168[32] -4[32]) }
        si      = { defs={} expr=v1170[32] }
        di      = { defs={} expr=v1171[32] }
        es      = { defs={} expr=v1172[16] }
        cs      = { defs={} expr=v1173[16] }
        ss      = { defs={} expr=v1174[16] }
        ds      = { defs={} expr=v1175[16] }
        fs      = { defs={} expr=v1176[16] }
        gs      = { defs={} expr=v1177[16] }
        cf      = { defs={} expr=v1178[1] }
        ?1      = { defs={} expr=v1179[1] }
        pf      = { defs={} expr=v1180[1] }
        ?3      = { defs={} expr=v1181[1] }
        af      = { defs={} expr=v1182[1] }
        ?5      = { defs={} expr=v1183[1] }
        zf      = { defs={} expr=v1184[1] }
        sf      = { defs={} expr=v1185[1] }
        tf      = { defs={} expr=v1186[1] }
        if      = { defs={} expr=v1187[1] }
        df      = { defs={} expr=v1188[1] }
        of      = { defs={} expr=v1189[1] }
        iopl0   = { defs={} expr=v1190[1] }
        iopl1   = { defs={} expr=v1191[1] }
        nt      = { defs={} expr=v1192[1] }
        ?15     = { defs={} expr=v1193[1] }
        rf      = { defs={} expr=v1194[1] }
        vm      = { defs={} expr=v1195[1] }
        ac      = { defs={} expr=v1196[1] }
        vif     = { defs={} expr=v1197[1] }
        vip     = { defs={} expr=v1198[1] }
        id      = { defs={} expr=v1199[1] }
        ?22     = { defs={} expr=v1200[1] }
        ?23     = { defs={} expr=v1201[1] }
        ?24     = { defs={} expr=v1202[1] }
        ?25     = { defs={} expr=v1203[1] }
        ?26     = { defs={} expr=v1204[1] }
        ?27     = { defs={} expr=v1205[1] }
        ?28     = { defs={} expr=v1206[1] }
        ?29     = { defs={} expr=v1207[1] }
        ?30     = { defs={} expr=v1208[1] }
        ?31     = { defs={} expr=v1209[1] }
        ip      = { defs={0x08048364,0x08048365} expr=0x08048367[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1169[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1169[32]) }
          flags = { }
    init mem:
0x8048367:push   ebx
    registers:
        ax      = { defs={} expr=v1164[32] }
        cx      = { defs={} expr=v1165[32] }
        dx      = { defs={} expr=v1166[32] }
        bx      = { defs={} expr=v1167[32] }
        sp      = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1168[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1168[32] -4[32]) }
        si      = { defs={} expr=v1170[32] }
        di      = { defs={} expr=v1171[32] }
        es      = { defs={} expr=v1172[16] }
        cs      = { defs={} expr=v1173[16] }
        ss      = { defs={} expr=v1174[16] }
        ds      = { defs={} expr=v1175[16] }
        fs      = { defs={} expr=v1176[16] }
        gs      = { defs={} expr=v1177[16] }
        cf      = { defs={} expr=v1178[1] }
        ?1      = { defs={} expr=v1179[1] }
        pf      = { defs={} expr=v1180[1] }
        ?3      = { defs={} expr=v1181[1] }
        af      = { defs={} expr=v1182[1] }
        ?5      = { defs={} expr=v1183[1] }
        zf      = { defs={} expr=v1184[1] }
        sf      = { defs={} expr=v1185[1] }
        tf      = { defs={} expr=v1186[1] }
        if      = { defs={} expr=v1187[1] }
        df      = { defs={} expr=v1188[1] }
        of      = { defs={} expr=v1189[1] }
        iopl0   = { defs={} expr=v1190[1] }
        iopl1   = { defs={} expr=v1191[1] }
        nt      = { defs={} expr=v1192[1] }
        ?15     = { defs={} expr=v1193[1] }
        rf      = { defs={} expr=v1194[1] }
        vm      = { defs={} expr=v1195[1] }
        ac      = { defs={} expr=v1196[1] }
        vif     = { defs={} expr=v1197[1] }
        vip     = { defs={} expr=v1198[1] }
        id      = { defs={} expr=v1199[1] }
        ?22     = { defs={} expr=v1200[1] }
        ?23     = { defs={} expr=v1201[1] }
        ?24     = { defs={} expr=v1202[1] }
        ?25     = { defs={} expr=v1203[1] }
        ?26     = { defs={} expr=v1204[1] }
        ?27     = { defs={} expr=v1205[1] }
        ?28     = { defs={} expr=v1206[1] }
        ?29     = { defs={} expr=v1207[1] }
        ?30     = { defs={} expr=v1208[1] }
        ?31     = { defs={} expr=v1209[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367} expr=0x08048368[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1167[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1168[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1169[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1169[32]) }
          flags = { }
    init mem:
0x8048368:push   ecx
    registers:
        ax      = { defs={} expr=v1164[32] }
        cx      = { defs={} expr=v1165[32] }
        dx      = { defs={} expr=v1166[32] }
        bx      = { defs={} expr=v1167[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1168[32] -4[32]) }
        si      = { defs={} expr=v1170[32] }
        di      = { defs={} expr=v1171[32] }
        es      = { defs={} expr=v1172[16] }
        cs      = { defs={} expr=v1173[16] }
        ss      = { defs={} expr=v1174[16] }
        ds      = { defs={} expr=v1175[16] }
        fs      = { defs={} expr=v1176[16] }
        gs      = { defs={} expr=v1177[16] }
        cf      = { defs={} expr=v1178[1] }
        ?1      = { defs={} expr=v1179[1] }
        pf      = { defs={} expr=v1180[1] }
        ?3      = { defs={} expr=v1181[1] }
        af      = { defs={} expr=v1182[1] }
        ?5      = { defs={} expr=v1183[1] }
        zf      = { defs={} expr=v1184[1] }
        sf      = { defs={} expr=v1185[1] }
        tf      = { defs={} expr=v1186[1] }
        if      = { defs={} expr=v1187[1] }
        df      = { defs={} expr=v1188[1] }
        of      = { defs={} expr=v1189[1] }
        iopl0   = { defs={} expr=v1190[1] }
        iopl1   = { defs={} expr=v1191[1] }
        nt      = { defs={} expr=v1192[1] }
        ?15     = { defs={} expr=v1193[1] }
        rf      = { defs={} expr=v1194[1] }
        vm      = { defs={} expr=v1195[1] }
        ac      = { defs={} expr=v1196[1] }
        vif     = { defs={} expr=v1197[1] }
        vip     = { defs={} expr=v1198[1] }
        id      = { defs={} expr=v1199[1] }
        ?22     = { defs={} expr=v1200[1] }
        ?23     = { defs={} expr=v1201[1] }
        ?24     = { defs={} expr=v1202[1] }
        ?25     = { defs={} expr=v1203[1] }
        ?26     = { defs={} expr=v1204[1] }
        ?27     = { defs={} expr=v1205[1] }
        ?28     = { defs={} expr=v1206[1] }
        ?29     = { defs={} expr=v1207[1] }
        ?30     = { defs={} expr=v1208[1] }
        ?31     = { defs={} expr=v1209[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367,0x08048368} expr=0x08048369[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1165[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1167[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1168[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1169[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1169[32]) }
          flags = { }
    init mem:
0x8048369:call   0x0804836e<<Insn>>
    registers:
        ax      = { defs={} expr=v1164[32] }
        cx      = { defs={} expr=v1165[32] }
        dx      = { defs={} expr=v1166[32] }
        bx      = { defs={} expr=v1167[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1168[32] -4[32]) }
        si      = { defs={} expr=v1170[32] }
        di      = { defs={} expr=v1171[32] }
        es      = { defs={} expr=v1172[16] }
        cs      = { defs={} expr=v1173[16] }
        ss      = { defs={} expr=v1174[16] }
        ds      = { defs={} expr=v1175[16] }
        fs      = { defs={} expr=v1176[16] }
        gs      = { defs={} expr=v1177[16] }
        cf      = { defs={} expr=v1178[1] }
        ?1      = { defs={} expr=v1179[1] }
        pf      = { defs={} expr=v1180[1] }
        ?3      = { defs={} expr=v1181[1] }
        af      = { defs={} expr=v1182[1] }
        ?5      = { defs={} expr=v1183[1] }
        zf      = { defs={} expr=v1184[1] }
        sf      = { defs={} expr=v1185[1] }
        tf      = { defs={} expr=v1186[1] }
        if      = { defs={} expr=v1187[1] }
        df      = { defs={} expr=v1188[1] }
        of      = { defs={} expr=v1189[1] }
        iopl0   = { defs={} expr=v1190[1] }
        iopl1   = { defs={} expr=v1191[1] }
        nt      = { defs={} expr=v1192[1] }
        ?15     = { defs={} expr=v1193[1] }
        rf      = { defs={} expr=v1194[1] }
        vm      = { defs={} expr=v1195[1] }
        ac      = { defs={} expr=v1196[1] }
        vif     = { defs={} expr=v1197[1] }
        vip     = { defs={} expr=v1198[1] }
        id      = { defs={} expr=v1199[1] }
        ?22     = { defs={} expr=v1200[1] }
        ?23     = { defs={} expr=v1201[1] }
        ?24     = { defs={} expr=v1202[1] }
        ?25     = { defs={} expr=v1203[1] }
        ?26     = { defs={} expr=v1204[1] }
        ?27     = { defs={} expr=v1205[1] }
        ?28     = { defs={} expr=v1206[1] }
        ?29     = { defs={} expr=v1207[1] }
        ?30     = { defs={} expr=v1208[1] }
        ?31     = { defs={} expr=v1209[1] }
        ip      = { defs={0x08048369} expr=0x0804836e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=110[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1165[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1167[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1168[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1169[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1169[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
    registers:
        ax      = { defs={} expr=v1258[32] }
        cx      = { defs={} expr=v1259[32] }
        dx      = { defs={} expr=v1260[32] }
        bx      = { defs={0x0804836e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) }
        sp      = { defs={0x0804836e} expr=(add[32] v1262[32] 4[32]) }
        bp      = { defs={} expr=v1263[32] }
        si      = { defs={} expr=v1264[32] }
        di      = { defs={} expr=v1265[32] }
        es      = { defs={} expr=v1266[16] }
        cs      = { defs={} expr=v1267[16] }
        ss      = { defs={} expr=v1268[16] }
        ds      = { defs={} expr=v1269[16] }
        fs      = { defs={} expr=v1270[16] }
        gs      = { defs={} expr=v1271[16] }
        cf      = { defs={} expr=v1272[1] }
        ?1      = { defs={} expr=v1273[1] }
        pf      = { defs={} expr=v1274[1] }
        ?3      = { defs={} expr=v1275[1] }
        af      = { defs={} expr=v1276[1] }
        ?5      = { defs={} expr=v1277[1] }
        zf      = { defs={} expr=v1278[1] }
        sf      = { defs={} expr=v1279[1] }
        tf      = { defs={} expr=v1280[1] }
        if      = { defs={} expr=v1281[1] }
        df      = { defs={} expr=v1282[1] }
        of      = { defs={} expr=v1283[1] }
        iopl0   = { defs={} expr=v1284[1] }
        iopl1   = { defs={} expr=v1285[1] }
        nt      = { defs={} expr=v1286[1] }
        ?15     = { defs={} expr=v1287[1] }
        rf      = { defs={} expr=v1288[1] }
        vm      = { defs={} expr=v1289[1] }
        ac      = { defs={} expr=v1290[1] }
        vif     = { defs={} expr=v1291[1] }
        vip     = { defs={} expr=v1292[1] }
        id      = { defs={} expr=v1293[1] }
        ?22     = { defs={} expr=v1294[1] }
        ?23     = { defs={} expr=v1295[1] }
        ?24     = { defs={} expr=v1296[1] }
        ?25     = { defs={} expr=v1297[1] }
        ?26     = { defs={} expr=v1298[1] }
        ?27     = { defs={} expr=v1299[1] }
        ?28     = { defs={} expr=v1300[1] }
        ?29     = { defs={} expr=v1301[1] }
        ?30     = { defs={} expr=v1302[1] }
        ?31     = { defs={} expr=v1303[1] }
        ip      = { defs={0x0804836e} expr=0x0804836f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1262[32] 3[32]) }
          value = { defs={} expr=v1309[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 2[32]) }
          value = { defs={} expr=v1308[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 1[32]) }
          value = { defs={} expr=v1307[8] }
          flags = { rdonly }
        address = { defs={} expr=v1262[32] }
          value = { defs={} expr=v1306[8] }
          flags = { rdonly }
0x804836f:add    ebx, 0x0000135a
    registers:
        ax      = { defs={} expr=v1258[32] }
        cx      = { defs={} expr=v1259[32] }
        dx      = { defs={} expr=v1260[32] }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1262[32] 4[32]) }
        bp      = { defs={} expr=v1263[32] }
        si      = { defs={} expr=v1264[32] }
        di      = { defs={} expr=v1265[32] }
        es      = { defs={} expr=v1266[16] }
        cs      = { defs={} expr=v1267[16] }
        ss      = { defs={} expr=v1268[16] }
        ds      = { defs={} expr=v1269[16] }
        fs      = { defs={} expr=v1270[16] }
        gs      = { defs={} expr=v1271[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1273[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1275[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1277[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])) }
        tf      = { defs={} expr=v1280[1] }
        if      = { defs={} expr=v1281[1] }
        df      = { defs={} expr=v1282[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33])))))) }
        iopl0   = { defs={} expr=v1284[1] }
        iopl1   = { defs={} expr=v1285[1] }
        nt      = { defs={} expr=v1286[1] }
        ?15     = { defs={} expr=v1287[1] }
        rf      = { defs={} expr=v1288[1] }
        vm      = { defs={} expr=v1289[1] }
        ac      = { defs={} expr=v1290[1] }
        vif     = { defs={} expr=v1291[1] }
        vip     = { defs={} expr=v1292[1] }
        id      = { defs={} expr=v1293[1] }
        ?22     = { defs={} expr=v1294[1] }
        ?23     = { defs={} expr=v1295[1] }
        ?24     = { defs={} expr=v1296[1] }
        ?25     = { defs={} expr=v1297[1] }
        ?26     = { defs={} expr=v1298[1] }
        ?27     = { defs={} expr=v1299[1] }
        ?28     = { defs={} expr=v1300[1] }
        ?29     = { defs={} expr=v1301[1] }
        ?30     = { defs={} expr=v1302[1] }
        ?31     = { defs={} expr=v1303[1] }
        ip      = { defs={0x0804836e,0x0804836f} expr=0x08048375[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1262[32] 3[32]) }
          value = { defs={} expr=v1309[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 2[32]) }
          value = { defs={} expr=v1308[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 1[32]) }
          value = { defs={} expr=v1307[8] }
          flags = { rdonly }
        address = { defs={} expr=v1262[32] }
          value = { defs={} expr=v1306[8] }
          flags = { rdonly }
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
    registers:
        ax      = { defs={} expr=v1258[32] }
        cx      = { defs={} expr=v1259[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1262[32] 4[32]) }
        bp      = { defs={} expr=v1263[32] }
        si      = { defs={} expr=v1264[32] }
        di      = { defs={} expr=v1265[32] }
        es      = { defs={} expr=v1266[16] }
        cs      = { defs={} expr=v1267[16] }
        ss      = { defs={} expr=v1268[16] }
        ds      = { defs={} expr=v1269[16] }
        fs      = { defs={} expr=v1270[16] }
        gs      = { defs={} expr=v1271[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1273[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1275[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1277[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])) }
        tf      = { defs={} expr=v1280[1] }
        if      = { defs={} expr=v1281[1] }
        df      = { defs={} expr=v1282[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33])))))) }
        iopl0   = { defs={} expr=v1284[1] }
        iopl1   = { defs={} expr=v1285[1] }
        nt      = { defs={} expr=v1286[1] }
        ?15     = { defs={} expr=v1287[1] }
        rf      = { defs={} expr=v1288[1] }
        vm      = { defs={} expr=v1289[1] }
        ac      = { defs={} expr=v1290[1] }
        vif     = { defs={} expr=v1291[1] }
        vip     = { defs={} expr=v1292[1] }
        id      = { defs={} expr=v1293[1] }
        ?22     = { defs={} expr=v1294[1] }
        ?23     = { defs={} expr=v1295[1] }
        ?24     = { defs={} expr=v1296[1] }
        ?25     = { defs={} expr=v1297[1] }
        ?26     = { defs={} expr=v1298[1] }
        ?27     = { defs={} expr=v1299[1] }
        ?28     = { defs={} expr=v1300[1] }
        ?29     = { defs={} expr=v1301[1] }
        ?30     = { defs={} expr=v1302[1] }
        ?31     = { defs={} expr=v1303[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375} expr=0x0804837b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1319[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1318[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1317[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1316[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 3[32]) }
          value = { defs={} expr=v1309[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 2[32]) }
          value = { defs={} expr=v1308[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 1[32]) }
          value = { defs={} expr=v1307[8] }
          flags = { rdonly }
        address = { defs={} expr=v1262[32] }
          value = { defs={} expr=v1306[8] }
          flags = { rdonly }
0x804837b:test   edx, edx
    registers:
        ax      = { defs={} expr=v1258[32] }
        cx      = { defs={} expr=v1259[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1262[32] 4[32]) }
        bp      = { defs={} expr=v1263[32] }
        si      = { defs={} expr=v1264[32] }
        di      = { defs={} expr=v1265[32] }
        es      = { defs={} expr=v1266[16] }
        cs      = { defs={} expr=v1267[16] }
        ss      = { defs={} expr=v1268[16] }
        ds      = { defs={} expr=v1269[16] }
        fs      = { defs={} expr=v1270[16] }
        gs      = { defs={} expr=v1271[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1273[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))))))) }
        ?3      = { defs={} expr=v1275[1] }
        af      = { defs={0x0804837b} expr=v1324[1] }
        ?5      = { defs={} expr=v1277[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))))) }
        tf      = { defs={} expr=v1280[1] }
        if      = { defs={} expr=v1281[1] }
        df      = { defs={} expr=v1282[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1284[1] }
        iopl1   = { defs={} expr=v1285[1] }
        nt      = { defs={} expr=v1286[1] }
        ?15     = { defs={} expr=v1287[1] }
        rf      = { defs={} expr=v1288[1] }
        vm      = { defs={} expr=v1289[1] }
        ac      = { defs={} expr=v1290[1] }
        vif     = { defs={} expr=v1291[1] }
        vip     = { defs={} expr=v1292[1] }
        id      = { defs={} expr=v1293[1] }
        ?22     = { defs={} expr=v1294[1] }
        ?23     = { defs={} expr=v1295[1] }
        ?24     = { defs={} expr=v1296[1] }
        ?25     = { defs={} expr=v1297[1] }
        ?26     = { defs={} expr=v1298[1] }
        ?27     = { defs={} expr=v1299[1] }
        ?28     = { defs={} expr=v1300[1] }
        ?29     = { defs={} expr=v1301[1] }
        ?30     = { defs={} expr=v1302[1] }
        ?31     = { defs={} expr=v1303[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b} expr=0x0804837d[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1319[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1318[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1317[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1316[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 3[32]) }
          value = { defs={} expr=v1309[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 2[32]) }
          value = { defs={} expr=v1308[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 1[32]) }
          value = { defs={} expr=v1307[8] }
          flags = { rdonly }
        address = { defs={} expr=v1262[32] }
          value = { defs={} expr=v1306[8] }
          flags = { rdonly }
0x804837d:je     0x08048384<<Insn>>
    registers:
        ax      = { defs={} expr=v1258[32] }
        cx      = { defs={} expr=v1259[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1262[32] 4[32]) }
        bp      = { defs={} expr=v1263[32] }
        si      = { defs={} expr=v1264[32] }
        di      = { defs={} expr=v1265[32] }
        es      = { defs={} expr=v1266[16] }
        cs      = { defs={} expr=v1267[16] }
        ss      = { defs={} expr=v1268[16] }
        ds      = { defs={} expr=v1269[16] }
        fs      = { defs={} expr=v1270[16] }
        gs      = { defs={} expr=v1271[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1273[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8])))))))))) }
        ?3      = { defs={} expr=v1275[1] }
        af      = { defs={0x0804837b} expr=v1324[1] }
        ?5      = { defs={} expr=v1277[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))))) }
        tf      = { defs={} expr=v1280[1] }
        if      = { defs={} expr=v1281[1] }
        df      = { defs={} expr=v1282[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1284[1] }
        iopl1   = { defs={} expr=v1285[1] }
        nt      = { defs={} expr=v1286[1] }
        ?15     = { defs={} expr=v1287[1] }
        rf      = { defs={} expr=v1288[1] }
        vm      = { defs={} expr=v1289[1] }
        ac      = { defs={} expr=v1290[1] }
        vif     = { defs={} expr=v1291[1] }
        vip     = { defs={} expr=v1292[1] }
        id      = { defs={} expr=v1293[1] }
        ?22     = { defs={} expr=v1294[1] }
        ?23     = { defs={} expr=v1295[1] }
        ?24     = { defs={} expr=v1296[1] }
        ?25     = { defs={} expr=v1297[1] }
        ?26     = { defs={} expr=v1298[1] }
        ?27     = { defs={} expr=v1299[1] }
        ?28     = { defs={} expr=v1300[1] }
        ?29     = { defs={} expr=v1301[1] }
        ?30     = { defs={} expr=v1302[1] }
        ?31     = { defs={} expr=v1303[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b,0x0804837d} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1319[8]))))) 0x08048384[32] 0x0804837f[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1319[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1318[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1317[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1316[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 3[32]) }
          value = { defs={} expr=v1309[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 2[32]) }
          value = { defs={} expr=v1308[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 1[32]) }
          value = { defs={} expr=v1307[8] }
          flags = { rdonly }
        address = { defs={} expr=v1262[32] }
          value = { defs={} expr=v1306[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330<__gmon_start__@plt>
    registers:
        ax      = { defs={} expr=v1373[32] }
        cx      = { defs={} expr=v1374[32] }
        dx      = { defs={} expr=v1375[32] }
        bx      = { defs={} expr=v1376[32] }
        sp      = { defs={0x0804837f} expr=(add[32] v1377[32] -4[32]) }
        bp      = { defs={} expr=v1378[32] }
        si      = { defs={} expr=v1379[32] }
        di      = { defs={} expr=v1380[32] }
        es      = { defs={} expr=v1381[16] }
        cs      = { defs={} expr=v1382[16] }
        ss      = { defs={} expr=v1383[16] }
        ds      = { defs={} expr=v1384[16] }
        fs      = { defs={} expr=v1385[16] }
        gs      = { defs={} expr=v1386[16] }
        cf      = { defs={} expr=v1387[1] }
        ?1      = { defs={} expr=v1388[1] }
        pf      = { defs={} expr=v1389[1] }
        ?3      = { defs={} expr=v1390[1] }
        af      = { defs={} expr=v1391[1] }
        ?5      = { defs={} expr=v1392[1] }
        zf      = { defs={} expr=v1393[1] }
        sf      = { defs={} expr=v1394[1] }
        tf      = { defs={} expr=v1395[1] }
        if      = { defs={} expr=v1396[1] }
        df      = { defs={} expr=v1397[1] }
        of      = { defs={} expr=v1398[1] }
        iopl0   = { defs={} expr=v1399[1] }
        iopl1   = { defs={} expr=v1400[1] }
        nt      = { defs={} expr=v1401[1] }
        ?15     = { defs={} expr=v1402[1] }
        rf      = { defs={} expr=v1403[1] }
        vm      = { defs={} expr=v1404[1] }
        ac      = { defs={} expr=v1405[1] }
        vif     = { defs={} expr=v1406[1] }
        vip     = { defs={} expr=v1407[1] }
        id      = { defs={} expr=v1408[1] }
        ?22     = { defs={} expr=v1409[1] }
        ?23     = { defs={} expr=v1410[1] }
        ?24     = { defs={} expr=v1411[1] }
        ?25     = { defs={} expr=v1412[1] }
        ?26     = { defs={} expr=v1413[1] }
        ?27     = { defs={} expr=v1414[1] }
        ?28     = { defs={} expr=v1415[1] }
        ?29     = { defs={} expr=v1416[1] }
        ?30     = { defs={} expr=v1417[1] }
        ?31     = { defs={} expr=v1418[1] }
        ip      = { defs={0x0804837f} expr=0x08048330[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1377[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1377[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1377[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x0804837f} expr=(add[32] v1377[32] -4[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1515[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1516[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1517[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1518[8]))) }
        cx      = { defs={} expr=v1468[32] }
        dx      = { defs={} expr=v1469[32] }
        bx      = { defs={} expr=v1470[32] }
        sp      = { defs={0x08048384} expr=(add[32] v1471[32] 4[32]) }
        bp      = { defs={} expr=v1472[32] }
        si      = { defs={} expr=v1473[32] }
        di      = { defs={} expr=v1474[32] }
        es      = { defs={} expr=v1475[16] }
        cs      = { defs={} expr=v1476[16] }
        ss      = { defs={} expr=v1477[16] }
        ds      = { defs={} expr=v1478[16] }
        fs      = { defs={} expr=v1479[16] }
        gs      = { defs={} expr=v1480[16] }
        cf      = { defs={} expr=v1481[1] }
        ?1      = { defs={} expr=v1482[1] }
        pf      = { defs={} expr=v1483[1] }
        ?3      = { defs={} expr=v1484[1] }
        af      = { defs={} expr=v1485[1] }
        ?5      = { defs={} expr=v1486[1] }
        zf      = { defs={} expr=v1487[1] }
        sf      = { defs={} expr=v1488[1] }
        tf      = { defs={} expr=v1489[1] }
        if      = { defs={} expr=v1490[1] }
        df      = { defs={} expr=v1491[1] }
        of      = { defs={} expr=v1492[1] }
        iopl0   = { defs={} expr=v1493[1] }
        iopl1   = { defs={} expr=v1494[1] }
        nt      = { defs={} expr=v1495[1] }
        ?15     = { defs={} expr=v1496[1] }
        rf      = { defs={} expr=v1497[1] }
        vm      = { defs={} expr=v1498[1] }
        ac      = { defs={} expr=v1499[1] }
        vif     = { defs={} expr=v1500[1] }
        vip     = { defs={} expr=v1501[1] }
        id      = { defs={} expr=v1502[1] }
        ?22     = { defs={} expr=v1503[1] }
        ?23     = { defs={} expr=v1504[1] }
        ?24     = { defs={} expr=v1505[1] }
        ?25     = { defs={} expr=v1506[1] }
        ?26     = { defs={} expr=v1507[1] }
        ?27     = { defs={} expr=v1508[1] }
        ?28     = { defs={} expr=v1509[1] }
        ?29     = { defs={} expr=v1510[1] }
        ?30     = { defs={} expr=v1511[1] }
        ?31     = { defs={} expr=v1512[1] }
        ip      = { defs={0x08048384} expr=0x08048385[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1471[32] 3[32]) }
          value = { defs={} expr=v1518[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 2[32]) }
          value = { defs={} expr=v1517[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 1[32]) }
          value = { defs={} expr=v1516[8] }
          flags = { rdonly }
        address = { defs={} expr=v1471[32] }
          value = { defs={} expr=v1515[8] }
          flags = { rdonly }
0x8048385:pop    ebx
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1515[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1516[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1517[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1518[8]))) }
        cx      = { defs={} expr=v1468[32] }
        dx      = { defs={} expr=v1469[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1528[8]))) }
        sp      = { defs={0x08048384,0x08048385} expr=(add[32] (add[32] v1471[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v1472[32] }
        si      = { defs={} expr=v1473[32] }
        di      = { defs={} expr=v1474[32] }
        es      = { defs={} expr=v1475[16] }
        cs      = { defs={} expr=v1476[16] }
        ss      = { defs={} expr=v1477[16] }
        ds      = { defs={} expr=v1478[16] }
        fs      = { defs={} expr=v1479[16] }
        gs      = { defs={} expr=v1480[16] }
        cf      = { defs={} expr=v1481[1] }
        ?1      = { defs={} expr=v1482[1] }
        pf      = { defs={} expr=v1483[1] }
        ?3      = { defs={} expr=v1484[1] }
        af      = { defs={} expr=v1485[1] }
        ?5      = { defs={} expr=v1486[1] }
        zf      = { defs={} expr=v1487[1] }
        sf      = { defs={} expr=v1488[1] }
        tf      = { defs={} expr=v1489[1] }
        if      = { defs={} expr=v1490[1] }
        df      = { defs={} expr=v1491[1] }
        of      = { defs={} expr=v1492[1] }
        iopl0   = { defs={} expr=v1493[1] }
        iopl1   = { defs={} expr=v1494[1] }
        nt      = { defs={} expr=v1495[1] }
        ?15     = { defs={} expr=v1496[1] }
        rf      = { defs={} expr=v1497[1] }
        vm      = { defs={} expr=v1498[1] }
        ac      = { defs={} expr=v1499[1] }
        vif     = { defs={} expr=v1500[1] }
        vip     = { defs={} expr=v1501[1] }
        id      = { defs={} expr=v1502[1] }
        ?22     = { defs={} expr=v1503[1] }
        ?23     = { defs={} expr=v1504[1] }
        ?24     = { defs={} expr=v1505[1] }
        ?25     = { defs={} expr=v1506[1] }
        ?26     = { defs={} expr=v1507[1] }
        ?27     = { defs={} expr=v1508[1] }
        ?28     = { defs={} expr=v1509[1] }
        ?29     = { defs={} expr=v1510[1] }
        ?30     = { defs={} expr=v1511[1] }
        ?31     = { defs={} expr=v1512[1] }
        ip      = { defs={0x08048384,0x08048385} expr=0x08048386[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1471[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1528[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1471[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1527[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1471[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1526[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=(add[32] v1471[32] 4[32]) }
          value = { defs={} expr=v1525[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 3[32]) }
          value = { defs={} expr=v1518[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 2[32]) }
          value = { defs={} expr=v1517[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 1[32]) }
          value = { defs={} expr=v1516[8] }
          flags = { rdonly }
        address = { defs={} expr=v1471[32] }
          value = { defs={} expr=v1515[8] }
          flags = { rdonly }
0x8048386:leave  
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1515[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1516[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1517[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1518[8]))) }
        cx      = { defs={} expr=v1468[32] }
        dx      = { defs={} expr=v1469[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1528[8]))) }
        sp      = { defs={0x08048386} expr=(add[32] v1472[32] 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1535[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1536[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1537[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1538[8]))) }
        si      = { defs={} expr=v1473[32] }
        di      = { defs={} expr=v1474[32] }
        es      = { defs={} expr=v1475[16] }
        cs      = { defs={} expr=v1476[16] }
        ss      = { defs={} expr=v1477[16] }
        ds      = { defs={} expr=v1478[16] }
        fs      = { defs={} expr=v1479[16] }
        gs      = { defs={} expr=v1480[16] }
        cf      = { defs={} expr=v1481[1] }
        ?1      = { defs={} expr=v1482[1] }
        pf      = { defs={} expr=v1483[1] }
        ?3      = { defs={} expr=v1484[1] }
        af      = { defs={} expr=v1485[1] }
        ?5      = { defs={} expr=v1486[1] }
        zf      = { defs={} expr=v1487[1] }
        sf      = { defs={} expr=v1488[1] }
        tf      = { defs={} expr=v1489[1] }
        if      = { defs={} expr=v1490[1] }
        df      = { defs={} expr=v1491[1] }
        of      = { defs={} expr=v1492[1] }
        iopl0   = { defs={} expr=v1493[1] }
        iopl1   = { defs={} expr=v1494[1] }
        nt      = { defs={} expr=v1495[1] }
        ?15     = { defs={} expr=v1496[1] }
        rf      = { defs={} expr=v1497[1] }
        vm      = { defs={} expr=v1498[1] }
        ac      = { defs={} expr=v1499[1] }
        vif     = { defs={} expr=v1500[1] }
        vip     = { defs={} expr=v1501[1] }
        id      = { defs={} expr=v1502[1] }
        ?22     = { defs={} expr=v1503[1] }
        ?23     = { defs={} expr=v1504[1] }
        ?24     = { defs={} expr=v1505[1] }
        ?25     = { defs={} expr=v1506[1] }
        ?26     = { defs={} expr=v1507[1] }
        ?27     = { defs={} expr=v1508[1] }
        ?28     = { defs={} expr=v1509[1] }
        ?29     = { defs={} expr=v1510[1] }
        ?30     = { defs={} expr=v1511[1] }
        ?31     = { defs={} expr=v1512[1] }
        ip      = { defs={0x08048384,0x08048385,0x08048386} expr=0x08048387[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1472[32] 3[32]) }
          value = { defs={} expr=v1538[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1472[32] 2[32]) }
          value = { defs={} expr=v1537[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1472[32] 1[32]) }
          value = { defs={} expr=v1536[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1472[32] }
          value = { defs={} expr=v1535[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1471[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1528[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1471[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1527[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1471[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1526[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=(add[32] v1471[32] 4[32]) }
          value = { defs={} expr=v1525[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 3[32]) }
          value = { defs={} expr=v1518[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 2[32]) }
          value = { defs={} expr=v1517[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 1[32]) }
          value = { defs={} expr=v1516[8] }
          flags = { rdonly }
        address = { defs={} expr=v1471[32] }
          value = { defs={} expr=v1515[8] }
          flags = { rdonly }
0x8048387:ret    
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1515[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1516[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1517[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1518[8]))) }
        cx      = { defs={} expr=v1468[32] }
        dx      = { defs={} expr=v1469[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1525[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1526[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1527[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1528[8]))) }
        sp      = { defs={0x08048386,0x08048387} expr=(add[32] (add[32] v1472[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1535[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1536[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1537[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1538[8]))) }
        si      = { defs={} expr=v1473[32] }
        di      = { defs={} expr=v1474[32] }
        es      = { defs={} expr=v1475[16] }
        cs      = { defs={} expr=v1476[16] }
        ss      = { defs={} expr=v1477[16] }
        ds      = { defs={} expr=v1478[16] }
        fs      = { defs={} expr=v1479[16] }
        gs      = { defs={} expr=v1480[16] }
        cf      = { defs={} expr=v1481[1] }
        ?1      = { defs={} expr=v1482[1] }
        pf      = { defs={} expr=v1483[1] }
        ?3      = { defs={} expr=v1484[1] }
        af      = { defs={} expr=v1485[1] }
        ?5      = { defs={} expr=v1486[1] }
        zf      = { defs={} expr=v1487[1] }
        sf      = { defs={} expr=v1488[1] }
        tf      = { defs={} expr=v1489[1] }
        if      = { defs={} expr=v1490[1] }
        df      = { defs={} expr=v1491[1] }
        of      = { defs={} expr=v1492[1] }
        iopl0   = { defs={} expr=v1493[1] }
        iopl1   = { defs={} expr=v1494[1] }
        nt      = { defs={} expr=v1495[1] }
        ?15     = { defs={} expr=v1496[1] }
        rf      = { defs={} expr=v1497[1] }
        vm      = { defs={} expr=v1498[1] }
        ac      = { defs={} expr=v1499[1] }
        vif     = { defs={} expr=v1500[1] }
        vip     = { defs={} expr=v1501[1] }
        id      = { defs={} expr=v1502[1] }
        ?22     = { defs={} expr=v1503[1] }
        ?23     = { defs={} expr=v1504[1] }
        ?24     = { defs={} expr=v1505[1] }
        ?25     = { defs={} expr=v1506[1] }
        ?26     = { defs={} expr=v1507[1] }
        ?27     = { defs={} expr=v1508[1] }
        ?28     = { defs={} expr=v1509[1] }
        ?29     = { defs={} expr=v1510[1] }
        ?30     = { defs={} expr=v1511[1] }
        ?31     = { defs={} expr=v1512[1] }
        ip      = { defs={0x08048387} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1545[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1546[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1547[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1548[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1472[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1548[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1472[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1547[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1472[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1546[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=(add[32] v1472[32] 4[32]) }
          value = { defs={} expr=v1545[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1472[32] 3[32]) }
          value = { defs={} expr=v1538[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1472[32] 2[32]) }
          value = { defs={} expr=v1537[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1472[32] 1[32]) }
          value = { defs={} expr=v1536[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1472[32] }
          value = { defs={} expr=v1535[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1471[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1528[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1471[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1527[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1471[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1526[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=(add[32] v1471[32] 4[32]) }
          value = { defs={} expr=v1525[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 3[32]) }
          value = { defs={} expr=v1518[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 2[32]) }
          value = { defs={} expr=v1517[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1471[32] 1[32]) }
          value = { defs={} expr=v1516[8] }
          flags = { rdonly }
        address = { defs={} expr=v1471[32] }
          value = { defs={} expr=v1515[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048390:push   ebp
    registers:
        ax      = { defs={} expr=v1601[32] }
        cx      = { defs={} expr=v1602[32] }
        dx      = { defs={} expr=v1603[32] }
        bx      = { defs={} expr=v1604[32] }
        sp      = { defs={0x08048390} expr=(add[32] v1605[32] -4[32]) }
        bp      = { defs={} expr=v1606[32] }
        si      = { defs={} expr=v1607[32] }
        di      = { defs={} expr=v1608[32] }
        es      = { defs={} expr=v1609[16] }
        cs      = { defs={} expr=v1610[16] }
        ss      = { defs={} expr=v1611[16] }
        ds      = { defs={} expr=v1612[16] }
        fs      = { defs={} expr=v1613[16] }
        gs      = { defs={} expr=v1614[16] }
        cf      = { defs={} expr=v1615[1] }
        ?1      = { defs={} expr=v1616[1] }
        pf      = { defs={} expr=v1617[1] }
        ?3      = { defs={} expr=v1618[1] }
        af      = { defs={} expr=v1619[1] }
        ?5      = { defs={} expr=v1620[1] }
        zf      = { defs={} expr=v1621[1] }
        sf      = { defs={} expr=v1622[1] }
        tf      = { defs={} expr=v1623[1] }
        if      = { defs={} expr=v1624[1] }
        df      = { defs={} expr=v1625[1] }
        of      = { defs={} expr=v1626[1] }
        iopl0   = { defs={} expr=v1627[1] }
        iopl1   = { defs={} expr=v1628[1] }
        nt      = { defs={} expr=v1629[1] }
        ?15     = { defs={} expr=v1630[1] }
        rf      = { defs={} expr=v1631[1] }
        vm      = { defs={} expr=v1632[1] }
        ac      = { defs={} expr=v1633[1] }
        vif     = { defs={} expr=v1634[1] }
        vip     = { defs={} expr=v1635[1] }
        id      = { defs={} expr=v1636[1] }
        ?22     = { defs={} expr=v1637[1] }
        ?23     = { defs={} expr=v1638[1] }
        ?24     = { defs={} expr=v1639[1] }
        ?25     = { defs={} expr=v1640[1] }
        ?26     = { defs={} expr=v1641[1] }
        ?27     = { defs={} expr=v1642[1] }
        ?28     = { defs={} expr=v1643[1] }
        ?29     = { defs={} expr=v1644[1] }
        ?30     = { defs={} expr=v1645[1] }
        ?31     = { defs={} expr=v1646[1] }
        ip      = { defs={0x08048390} expr=0x08048391[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1606[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1606[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1606[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v1605[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1606[32]) }
          flags = { }
    init mem:
0x8048391:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v1601[32] }
        cx      = { defs={} expr=v1602[32] }
        dx      = { defs={} expr=v1603[32] }
        bx      = { defs={} expr=v1604[32] }
        sp      = { defs={0x08048390} expr=(add[32] v1605[32] -4[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v1605[32] -4[32]) }
        si      = { defs={} expr=v1607[32] }
        di      = { defs={} expr=v1608[32] }
        es      = { defs={} expr=v1609[16] }
        cs      = { defs={} expr=v1610[16] }
        ss      = { defs={} expr=v1611[16] }
        ds      = { defs={} expr=v1612[16] }
        fs      = { defs={} expr=v1613[16] }
        gs      = { defs={} expr=v1614[16] }
        cf      = { defs={} expr=v1615[1] }
        ?1      = { defs={} expr=v1616[1] }
        pf      = { defs={} expr=v1617[1] }
        ?3      = { defs={} expr=v1618[1] }
        af      = { defs={} expr=v1619[1] }
        ?5      = { defs={} expr=v1620[1] }
        zf      = { defs={} expr=v1621[1] }
        sf      = { defs={} expr=v1622[1] }
        tf      = { defs={} expr=v1623[1] }
        if      = { defs={} expr=v1624[1] }
        df      = { defs={} expr=v1625[1] }
        of      = { defs={} expr=v1626[1] }
        iopl0   = { defs={} expr=v1627[1] }
        iopl1   = { defs={} expr=v1628[1] }
        nt      = { defs={} expr=v1629[1] }
        ?15     = { defs={} expr=v1630[1] }
        rf      = { defs={} expr=v1631[1] }
        vm      = { defs={} expr=v1632[1] }
        ac      = { defs={} expr=v1633[1] }
        vif     = { defs={} expr=v1634[1] }
        vip     = { defs={} expr=v1635[1] }
        id      = { defs={} expr=v1636[1] }
        ?22     = { defs={} expr=v1637[1] }
        ?23     = { defs={} expr=v1638[1] }
        ?24     = { defs={} expr=v1639[1] }
        ?25     = { defs={} expr=v1640[1] }
        ?26     = { defs={} expr=v1641[1] }
        ?27     = { defs={} expr=v1642[1] }
        ?28     = { defs={} expr=v1643[1] }
        ?29     = { defs={} expr=v1644[1] }
        ?30     = { defs={} expr=v1645[1] }
        ?31     = { defs={} expr=v1646[1] }
        ip      = { defs={0x08048390,0x08048391} expr=0x08048393[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1606[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1606[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1606[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v1605[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1606[32]) }
          flags = { }
    init mem:
0x8048393:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v1601[32] }
        cx      = { defs={} expr=v1602[32] }
        dx      = { defs={} expr=v1603[32] }
        bx      = { defs={} expr=v1604[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v1605[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v1605[32] -4[32]) }
        si      = { defs={} expr=v1607[32] }
        di      = { defs={} expr=v1608[32] }
        es      = { defs={} expr=v1609[16] }
        cs      = { defs={} expr=v1610[16] }
        ss      = { defs={} expr=v1611[16] }
        ds      = { defs={} expr=v1612[16] }
        fs      = { defs={} expr=v1613[16] }
        gs      = { defs={} expr=v1614[16] }
        cf      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1605[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1605[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v1616[1] }
        pf      = { defs={0x08048390,0x08048393} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1605[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1605[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1605[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1605[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1605[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1605[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1605[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1605[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v1618[1] }
        af      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1605[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1605[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v1620[1] }
        zf      = { defs={0x08048390,0x08048393} expr=(zerop[1] (add[32] (add[32] v1605[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048390,0x08048393} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1605[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v1623[1] }
        if      = { defs={} expr=v1624[1] }
        df      = { defs={} expr=v1625[1] }
        of      = { defs={0x08048390,0x08048393} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1605[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1605[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1605[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1605[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v1627[1] }
        iopl1   = { defs={} expr=v1628[1] }
        nt      = { defs={} expr=v1629[1] }
        ?15     = { defs={} expr=v1630[1] }
        rf      = { defs={} expr=v1631[1] }
        vm      = { defs={} expr=v1632[1] }
        ac      = { defs={} expr=v1633[1] }
        vif     = { defs={} expr=v1634[1] }
        vip     = { defs={} expr=v1635[1] }
        id      = { defs={} expr=v1636[1] }
        ?22     = { defs={} expr=v1637[1] }
        ?23     = { defs={} expr=v1638[1] }
        ?24     = { defs={} expr=v1639[1] }
        ?25     = { defs={} expr=v1640[1] }
        ?26     = { defs={} expr=v1641[1] }
        ?27     = { defs={} expr=v1642[1] }
        ?28     = { defs={} expr=v1643[1] }
        ?29     = { defs={} expr=v1644[1] }
        ?30     = { defs={} expr=v1645[1] }
        ?31     = { defs={} expr=v1646[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393} expr=0x08048396[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1606[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1606[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1606[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v1605[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1606[32]) }
          flags = { }
    init mem:
0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
    registers:
        ax      = { defs={} expr=v1601[32] }
        cx      = { defs={} expr=v1602[32] }
        dx      = { defs={} expr=v1603[32] }
        bx      = { defs={} expr=v1604[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v1605[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v1605[32] -4[32]) }
        si      = { defs={} expr=v1607[32] }
        di      = { defs={} expr=v1608[32] }
        es      = { defs={} expr=v1609[16] }
        cs      = { defs={} expr=v1610[16] }
        ss      = { defs={} expr=v1611[16] }
        ds      = { defs={} expr=v1612[16] }
        fs      = { defs={} expr=v1613[16] }
        gs      = { defs={} expr=v1614[16] }
        cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v1649[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v1649[8]) -256[9])))))) }
        ?1      = { defs={} expr=v1616[1] }
        pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v1649[8]) (extract[1] 1[32] 2[32] v1649[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v1649[8]) (extract[1] 3[32] 4[32] v1649[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v1649[8]) (extract[1] 5[32] 6[32] v1649[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v1649[8]) (extract[1] 7[32] 8[32] v1649[8]))))) }
        ?3      = { defs={} expr=v1618[1] }
        af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v1649[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v1649[8]) -256[9])))))) }
        ?5      = { defs={} expr=v1620[1] }
        zf      = { defs={0x08048396} expr=(zerop[1] v1649[8]) }
        sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] v1649[8]) }
        tf      = { defs={} expr=v1623[1] }
        if      = { defs={} expr=v1624[1] }
        df      = { defs={} expr=v1625[1] }
        of      = { defs={0x08048396} expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v1649[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v1649[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v1649[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v1649[8]) -256[9])))))) }
        iopl0   = { defs={} expr=v1627[1] }
        iopl1   = { defs={} expr=v1628[1] }
        nt      = { defs={} expr=v1629[1] }
        ?15     = { defs={} expr=v1630[1] }
        rf      = { defs={} expr=v1631[1] }
        vm      = { defs={} expr=v1632[1] }
        ac      = { defs={} expr=v1633[1] }
        vif     = { defs={} expr=v1634[1] }
        vip     = { defs={} expr=v1635[1] }
        id      = { defs={} expr=v1636[1] }
        ?22     = { defs={} expr=v1637[1] }
        ?23     = { defs={} expr=v1638[1] }
        ?24     = { defs={} expr=v1639[1] }
        ?25     = { defs={} expr=v1640[1] }
        ?26     = { defs={} expr=v1641[1] }
        ?27     = { defs={} expr=v1642[1] }
        ?28     = { defs={} expr=v1643[1] }
        ?29     = { defs={} expr=v1644[1] }
        ?30     = { defs={} expr=v1645[1] }
        ?31     = { defs={} expr=v1646[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396} expr=0x0804839d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1606[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1606[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1606[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v1605[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1606[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v1649[8] }
          flags = { rdonly }
0x804839d:jne    0x080483cc<<Insn>>
    registers:
        ax      = { defs={} expr=v1601[32] }
        cx      = { defs={} expr=v1602[32] }
        dx      = { defs={} expr=v1603[32] }
        bx      = { defs={} expr=v1604[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v1605[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v1605[32] -4[32]) }
        si      = { defs={} expr=v1607[32] }
        di      = { defs={} expr=v1608[32] }
        es      = { defs={} expr=v1609[16] }
        cs      = { defs={} expr=v1610[16] }
        ss      = { defs={} expr=v1611[16] }
        ds      = { defs={} expr=v1612[16] }
        fs      = { defs={} expr=v1613[16] }
        gs      = { defs={} expr=v1614[16] }
        cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v1649[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v1649[8]) -256[9])))))) }
        ?1      = { defs={} expr=v1616[1] }
        pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v1649[8]) (extract[1] 1[32] 2[32] v1649[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v1649[8]) (extract[1] 3[32] 4[32] v1649[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v1649[8]) (extract[1] 5[32] 6[32] v1649[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v1649[8]) (extract[1] 7[32] 8[32] v1649[8]))))) }
        ?3      = { defs={} expr=v1618[1] }
        af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v1649[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v1649[8]) -256[9])))))) }
        ?5      = { defs={} expr=v1620[1] }
        zf      = { defs={0x08048396} expr=(zerop[1] v1649[8]) }
        sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] v1649[8]) }
        tf      = { defs={} expr=v1623[1] }
        if      = { defs={} expr=v1624[1] }
        df      = { defs={} expr=v1625[1] }
        of      = { defs={0x08048396} expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v1649[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v1649[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v1649[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v1649[8]) -256[9])))))) }
        iopl0   = { defs={} expr=v1627[1] }
        iopl1   = { defs={} expr=v1628[1] }
        nt      = { defs={} expr=v1629[1] }
        ?15     = { defs={} expr=v1630[1] }
        rf      = { defs={} expr=v1631[1] }
        vm      = { defs={} expr=v1632[1] }
        ac      = { defs={} expr=v1633[1] }
        vif     = { defs={} expr=v1634[1] }
        vip     = { defs={} expr=v1635[1] }
        id      = { defs={} expr=v1636[1] }
        ?22     = { defs={} expr=v1637[1] }
        ?23     = { defs={} expr=v1638[1] }
        ?24     = { defs={} expr=v1639[1] }
        ?25     = { defs={} expr=v1640[1] }
        ?26     = { defs={} expr=v1641[1] }
        ?27     = { defs={} expr=v1642[1] }
        ?28     = { defs={} expr=v1643[1] }
        ?29     = { defs={} expr=v1644[1] }
        ?30     = { defs={} expr=v1645[1] }
        ?31     = { defs={} expr=v1646[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396,0x0804839d} expr=(ite[32] (invert[1] (zerop[1] v1649[8])) 0x080483cc[32] 0x0804839f[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1606[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1606[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1605[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1606[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v1605[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1606[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v1649[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) }
        cx      = { defs={} expr=v1700[32] }
        dx      = { defs={} expr=v1701[32] }
        bx      = { defs={} expr=v1702[32] }
        sp      = { defs={} expr=v1703[32] }
        bp      = { defs={} expr=v1704[32] }
        si      = { defs={} expr=v1705[32] }
        di      = { defs={} expr=v1706[32] }
        es      = { defs={} expr=v1707[16] }
        cs      = { defs={} expr=v1708[16] }
        ss      = { defs={} expr=v1709[16] }
        ds      = { defs={} expr=v1710[16] }
        fs      = { defs={} expr=v1711[16] }
        gs      = { defs={} expr=v1712[16] }
        cf      = { defs={} expr=v1713[1] }
        ?1      = { defs={} expr=v1714[1] }
        pf      = { defs={} expr=v1715[1] }
        ?3      = { defs={} expr=v1716[1] }
        af      = { defs={} expr=v1717[1] }
        ?5      = { defs={} expr=v1718[1] }
        zf      = { defs={} expr=v1719[1] }
        sf      = { defs={} expr=v1720[1] }
        tf      = { defs={} expr=v1721[1] }
        if      = { defs={} expr=v1722[1] }
        df      = { defs={} expr=v1723[1] }
        of      = { defs={} expr=v1724[1] }
        iopl0   = { defs={} expr=v1725[1] }
        iopl1   = { defs={} expr=v1726[1] }
        nt      = { defs={} expr=v1727[1] }
        ?15     = { defs={} expr=v1728[1] }
        rf      = { defs={} expr=v1729[1] }
        vm      = { defs={} expr=v1730[1] }
        ac      = { defs={} expr=v1731[1] }
        vif     = { defs={} expr=v1732[1] }
        vip     = { defs={} expr=v1733[1] }
        id      = { defs={} expr=v1734[1] }
        ?22     = { defs={} expr=v1735[1] }
        ?23     = { defs={} expr=v1736[1] }
        ?24     = { defs={} expr=v1737[1] }
        ?25     = { defs={} expr=v1738[1] }
        ?26     = { defs={} expr=v1739[1] }
        ?27     = { defs={} expr=v1740[1] }
        ?28     = { defs={} expr=v1741[1] }
        ?29     = { defs={} expr=v1742[1] }
        ?30     = { defs={} expr=v1743[1] }
        ?31     = { defs={} expr=v1744[1] }
        ip      = { defs={0x0804839f} expr=0x080483a4[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1750[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1749[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1748[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v1747[8] }
          flags = { rdonly }
0x80483a4:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) }
        cx      = { defs={} expr=v1700[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) }
        bx      = { defs={} expr=v1702[32] }
        sp      = { defs={} expr=v1703[32] }
        bp      = { defs={} expr=v1704[32] }
        si      = { defs={} expr=v1705[32] }
        di      = { defs={} expr=v1706[32] }
        es      = { defs={} expr=v1707[16] }
        cs      = { defs={} expr=v1708[16] }
        ss      = { defs={} expr=v1709[16] }
        ds      = { defs={} expr=v1710[16] }
        fs      = { defs={} expr=v1711[16] }
        gs      = { defs={} expr=v1712[16] }
        cf      = { defs={} expr=v1713[1] }
        ?1      = { defs={} expr=v1714[1] }
        pf      = { defs={} expr=v1715[1] }
        ?3      = { defs={} expr=v1716[1] }
        af      = { defs={} expr=v1717[1] }
        ?5      = { defs={} expr=v1718[1] }
        zf      = { defs={} expr=v1719[1] }
        sf      = { defs={} expr=v1720[1] }
        tf      = { defs={} expr=v1721[1] }
        if      = { defs={} expr=v1722[1] }
        df      = { defs={} expr=v1723[1] }
        of      = { defs={} expr=v1724[1] }
        iopl0   = { defs={} expr=v1725[1] }
        iopl1   = { defs={} expr=v1726[1] }
        nt      = { defs={} expr=v1727[1] }
        ?15     = { defs={} expr=v1728[1] }
        rf      = { defs={} expr=v1729[1] }
        vm      = { defs={} expr=v1730[1] }
        ac      = { defs={} expr=v1731[1] }
        vif     = { defs={} expr=v1732[1] }
        vip     = { defs={} expr=v1733[1] }
        id      = { defs={} expr=v1734[1] }
        ?22     = { defs={} expr=v1735[1] }
        ?23     = { defs={} expr=v1736[1] }
        ?24     = { defs={} expr=v1737[1] }
        ?25     = { defs={} expr=v1738[1] }
        ?26     = { defs={} expr=v1739[1] }
        ?27     = { defs={} expr=v1740[1] }
        ?28     = { defs={} expr=v1741[1] }
        ?29     = { defs={} expr=v1742[1] }
        ?30     = { defs={} expr=v1743[1] }
        ?31     = { defs={} expr=v1744[1] }
        ip      = { defs={0x0804839f,0x080483a4} expr=0x080483a6[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) 3[32]) }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) 2[32]) }
          value = { defs={} expr=v1759[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) 1[32]) }
          value = { defs={} expr=v1758[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) }
          value = { defs={} expr=v1757[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1750[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1749[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1748[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v1747[8] }
          flags = { rdonly }
0x80483a6:test   edx, edx
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) }
        cx      = { defs={} expr=v1700[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) }
        bx      = { defs={} expr=v1702[32] }
        sp      = { defs={} expr=v1703[32] }
        bp      = { defs={} expr=v1704[32] }
        si      = { defs={} expr=v1705[32] }
        di      = { defs={} expr=v1706[32] }
        es      = { defs={} expr=v1707[16] }
        cs      = { defs={} expr=v1708[16] }
        ss      = { defs={} expr=v1709[16] }
        ds      = { defs={} expr=v1710[16] }
        fs      = { defs={} expr=v1711[16] }
        gs      = { defs={} expr=v1712[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v1714[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))))))) }
        ?3      = { defs={} expr=v1716[1] }
        af      = { defs={0x080483a6} expr=v1765[1] }
        ?5      = { defs={} expr=v1718[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))))) }
        tf      = { defs={} expr=v1721[1] }
        if      = { defs={} expr=v1722[1] }
        df      = { defs={} expr=v1723[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v1725[1] }
        iopl1   = { defs={} expr=v1726[1] }
        nt      = { defs={} expr=v1727[1] }
        ?15     = { defs={} expr=v1728[1] }
        rf      = { defs={} expr=v1729[1] }
        vm      = { defs={} expr=v1730[1] }
        ac      = { defs={} expr=v1731[1] }
        vif     = { defs={} expr=v1732[1] }
        vip     = { defs={} expr=v1733[1] }
        id      = { defs={} expr=v1734[1] }
        ?22     = { defs={} expr=v1735[1] }
        ?23     = { defs={} expr=v1736[1] }
        ?24     = { defs={} expr=v1737[1] }
        ?25     = { defs={} expr=v1738[1] }
        ?26     = { defs={} expr=v1739[1] }
        ?27     = { defs={} expr=v1740[1] }
        ?28     = { defs={} expr=v1741[1] }
        ?29     = { defs={} expr=v1742[1] }
        ?30     = { defs={} expr=v1743[1] }
        ?31     = { defs={} expr=v1744[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6} expr=0x080483a8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) 3[32]) }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) 2[32]) }
          value = { defs={} expr=v1759[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) 1[32]) }
          value = { defs={} expr=v1758[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) }
          value = { defs={} expr=v1757[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1750[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1749[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1748[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v1747[8] }
          flags = { rdonly }
0x80483a8:je     0x080483c5<<Insn>>
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) }
        cx      = { defs={} expr=v1700[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) }
        bx      = { defs={} expr=v1702[32] }
        sp      = { defs={} expr=v1703[32] }
        bp      = { defs={} expr=v1704[32] }
        si      = { defs={} expr=v1705[32] }
        di      = { defs={} expr=v1706[32] }
        es      = { defs={} expr=v1707[16] }
        cs      = { defs={} expr=v1708[16] }
        ss      = { defs={} expr=v1709[16] }
        ds      = { defs={} expr=v1710[16] }
        fs      = { defs={} expr=v1711[16] }
        gs      = { defs={} expr=v1712[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v1714[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8])))))))))) }
        ?3      = { defs={} expr=v1716[1] }
        af      = { defs={0x080483a6} expr=v1765[1] }
        ?5      = { defs={} expr=v1718[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))))) }
        tf      = { defs={} expr=v1721[1] }
        if      = { defs={} expr=v1722[1] }
        df      = { defs={} expr=v1723[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v1725[1] }
        iopl1   = { defs={} expr=v1726[1] }
        nt      = { defs={} expr=v1727[1] }
        ?15     = { defs={} expr=v1728[1] }
        rf      = { defs={} expr=v1729[1] }
        vm      = { defs={} expr=v1730[1] }
        ac      = { defs={} expr=v1731[1] }
        vif     = { defs={} expr=v1732[1] }
        vip     = { defs={} expr=v1733[1] }
        id      = { defs={} expr=v1734[1] }
        ?22     = { defs={} expr=v1735[1] }
        ?23     = { defs={} expr=v1736[1] }
        ?24     = { defs={} expr=v1737[1] }
        ?25     = { defs={} expr=v1738[1] }
        ?26     = { defs={} expr=v1739[1] }
        ?27     = { defs={} expr=v1740[1] }
        ?28     = { defs={} expr=v1741[1] }
        ?29     = { defs={} expr=v1742[1] }
        ?30     = { defs={} expr=v1743[1] }
        ?31     = { defs={} expr=v1744[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6,0x080483a8} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1757[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1758[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1759[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1760[8]))))) 0x080483c5[32] 0x080483aa[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) 3[32]) }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) 2[32]) }
          value = { defs={} expr=v1759[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) 1[32]) }
          value = { defs={} expr=v1758[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1747[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1748[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1749[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1750[8]))) }
          value = { defs={} expr=v1757[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1750[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1749[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1748[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v1747[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v1814[32] }
        cx      = { defs={} expr=v1815[32] }
        dx      = { defs={} expr=v1816[32] }
        bx      = { defs={} expr=v1817[32] }
        sp      = { defs={} expr=v1818[32] }
        bp      = { defs={} expr=v1819[32] }
        si      = { defs={0x080483aa} expr=v1820[32] }
        di      = { defs={} expr=v1821[32] }
        es      = { defs={} expr=v1822[16] }
        cs      = { defs={} expr=v1823[16] }
        ss      = { defs={} expr=v1824[16] }
        ds      = { defs={} expr=v1825[16] }
        fs      = { defs={} expr=v1826[16] }
        gs      = { defs={} expr=v1827[16] }
        cf      = { defs={} expr=v1828[1] }
        ?1      = { defs={} expr=v1829[1] }
        pf      = { defs={} expr=v1830[1] }
        ?3      = { defs={} expr=v1831[1] }
        af      = { defs={} expr=v1832[1] }
        ?5      = { defs={} expr=v1833[1] }
        zf      = { defs={} expr=v1834[1] }
        sf      = { defs={} expr=v1835[1] }
        tf      = { defs={} expr=v1836[1] }
        if      = { defs={} expr=v1837[1] }
        df      = { defs={} expr=v1838[1] }
        of      = { defs={} expr=v1839[1] }
        iopl0   = { defs={} expr=v1840[1] }
        iopl1   = { defs={} expr=v1841[1] }
        nt      = { defs={} expr=v1842[1] }
        ?15     = { defs={} expr=v1843[1] }
        rf      = { defs={} expr=v1844[1] }
        vm      = { defs={} expr=v1845[1] }
        ac      = { defs={} expr=v1846[1] }
        vif     = { defs={} expr=v1847[1] }
        vip     = { defs={} expr=v1848[1] }
        id      = { defs={} expr=v1849[1] }
        ?22     = { defs={} expr=v1850[1] }
        ?23     = { defs={} expr=v1851[1] }
        ?24     = { defs={} expr=v1852[1] }
        ?25     = { defs={} expr=v1853[1] }
        ?26     = { defs={} expr=v1854[1] }
        ?27     = { defs={} expr=v1855[1] }
        ?28     = { defs={} expr=v1856[1] }
        ?29     = { defs={} expr=v1857[1] }
        ?30     = { defs={} expr=v1858[1] }
        ?31     = { defs={} expr=v1859[1] }
        ip      = { defs={0x080483aa} expr=0x080483b0[32] }
    memory:
    init mem:
0x80483b0:add    eax, 0x04
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v1814[32] 4[32]) }
        cx      = { defs={} expr=v1815[32] }
        dx      = { defs={} expr=v1816[32] }
        bx      = { defs={} expr=v1817[32] }
        sp      = { defs={} expr=v1818[32] }
        bp      = { defs={} expr=v1819[32] }
        si      = { defs={0x080483aa} expr=v1820[32] }
        di      = { defs={} expr=v1821[32] }
        es      = { defs={} expr=v1822[16] }
        cs      = { defs={} expr=v1823[16] }
        ss      = { defs={} expr=v1824[16] }
        ds      = { defs={} expr=v1825[16] }
        fs      = { defs={} expr=v1826[16] }
        gs      = { defs={} expr=v1827[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33]))))) }
        ?1      = { defs={} expr=v1829[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))))))) }
        ?3      = { defs={} expr=v1831[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33]))))) }
        ?5      = { defs={} expr=v1833[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v1814[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v1814[32] 4[32])) }
        tf      = { defs={} expr=v1836[1] }
        if      = { defs={} expr=v1837[1] }
        df      = { defs={} expr=v1838[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v1840[1] }
        iopl1   = { defs={} expr=v1841[1] }
        nt      = { defs={} expr=v1842[1] }
        ?15     = { defs={} expr=v1843[1] }
        rf      = { defs={} expr=v1844[1] }
        vm      = { defs={} expr=v1845[1] }
        ac      = { defs={} expr=v1846[1] }
        vif     = { defs={} expr=v1847[1] }
        vip     = { defs={} expr=v1848[1] }
        id      = { defs={} expr=v1849[1] }
        ?22     = { defs={} expr=v1850[1] }
        ?23     = { defs={} expr=v1851[1] }
        ?24     = { defs={} expr=v1852[1] }
        ?25     = { defs={} expr=v1853[1] }
        ?26     = { defs={} expr=v1854[1] }
        ?27     = { defs={} expr=v1855[1] }
        ?28     = { defs={} expr=v1856[1] }
        ?29     = { defs={} expr=v1857[1] }
        ?30     = { defs={} expr=v1858[1] }
        ?31     = { defs={} expr=v1859[1] }
        ip      = { defs={0x080483aa,0x080483b0} expr=0x080483b3[32] }
    memory:
    init mem:
0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v1814[32] 4[32]) }
        cx      = { defs={} expr=v1815[32] }
        dx      = { defs={} expr=v1816[32] }
        bx      = { defs={} expr=v1817[32] }
        sp      = { defs={} expr=v1818[32] }
        bp      = { defs={} expr=v1819[32] }
        si      = { defs={0x080483aa} expr=v1820[32] }
        di      = { defs={} expr=v1821[32] }
        es      = { defs={} expr=v1822[16] }
        cs      = { defs={} expr=v1823[16] }
        ss      = { defs={} expr=v1824[16] }
        ds      = { defs={} expr=v1825[16] }
        fs      = { defs={} expr=v1826[16] }
        gs      = { defs={} expr=v1827[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33]))))) }
        ?1      = { defs={} expr=v1829[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))))))) }
        ?3      = { defs={} expr=v1831[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33]))))) }
        ?5      = { defs={} expr=v1833[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v1814[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v1814[32] 4[32])) }
        tf      = { defs={} expr=v1836[1] }
        if      = { defs={} expr=v1837[1] }
        df      = { defs={} expr=v1838[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v1840[1] }
        iopl1   = { defs={} expr=v1841[1] }
        nt      = { defs={} expr=v1842[1] }
        ?15     = { defs={} expr=v1843[1] }
        rf      = { defs={} expr=v1844[1] }
        vm      = { defs={} expr=v1845[1] }
        ac      = { defs={} expr=v1846[1] }
        vif     = { defs={} expr=v1847[1] }
        vip     = { defs={} expr=v1848[1] }
        id      = { defs={} expr=v1849[1] }
        ?22     = { defs={} expr=v1850[1] }
        ?23     = { defs={} expr=v1851[1] }
        ?24     = { defs={} expr=v1852[1] }
        ?25     = { defs={} expr=v1853[1] }
        ?26     = { defs={} expr=v1854[1] }
        ?27     = { defs={} expr=v1855[1] }
        ?28     = { defs={} expr=v1856[1] }
        ?29     = { defs={} expr=v1857[1] }
        ?30     = { defs={} expr=v1858[1] }
        ?31     = { defs={} expr=v1859[1] }
        ip      = { defs={0x080483aa,0x080483b0,0x080483b3} expr=0x080483b8[32] }
    memory:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1814[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1814[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1814[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32])) }
          flags = { }
    init mem:
0x80483b8:call   edx
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v1814[32] 4[32]) }
        cx      = { defs={} expr=v1815[32] }
        dx      = { defs={} expr=v1816[32] }
        bx      = { defs={} expr=v1817[32] }
        sp      = { defs={0x080483b8} expr=(add[32] v1818[32] -4[32]) }
        bp      = { defs={} expr=v1819[32] }
        si      = { defs={0x080483aa} expr=v1820[32] }
        di      = { defs={} expr=v1821[32] }
        es      = { defs={} expr=v1822[16] }
        cs      = { defs={} expr=v1823[16] }
        ss      = { defs={} expr=v1824[16] }
        ds      = { defs={} expr=v1825[16] }
        fs      = { defs={} expr=v1826[16] }
        gs      = { defs={} expr=v1827[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33]))))) }
        ?1      = { defs={} expr=v1829[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32]))))))) }
        ?3      = { defs={} expr=v1831[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33]))))) }
        ?5      = { defs={} expr=v1833[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v1814[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v1814[32] 4[32])) }
        tf      = { defs={} expr=v1836[1] }
        if      = { defs={} expr=v1837[1] }
        df      = { defs={} expr=v1838[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1814[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1814[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v1840[1] }
        iopl1   = { defs={} expr=v1841[1] }
        nt      = { defs={} expr=v1842[1] }
        ?15     = { defs={} expr=v1843[1] }
        rf      = { defs={} expr=v1844[1] }
        vm      = { defs={} expr=v1845[1] }
        ac      = { defs={} expr=v1846[1] }
        vif     = { defs={} expr=v1847[1] }
        vip     = { defs={} expr=v1848[1] }
        id      = { defs={} expr=v1849[1] }
        ?22     = { defs={} expr=v1850[1] }
        ?23     = { defs={} expr=v1851[1] }
        ?24     = { defs={} expr=v1852[1] }
        ?25     = { defs={} expr=v1853[1] }
        ?26     = { defs={} expr=v1854[1] }
        ?27     = { defs={} expr=v1855[1] }
        ?28     = { defs={} expr=v1856[1] }
        ?29     = { defs={} expr=v1857[1] }
        ?30     = { defs={} expr=v1858[1] }
        ?31     = { defs={} expr=v1859[1] }
        ip      = { defs={0x080483b8} expr=v1816[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1818[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1818[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1818[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x080483b8} expr=(add[32] v1818[32] -4[32]) }
          value = { defs={} expr=-70[8] }
          flags = { }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1814[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1814[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1814[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1814[32] 4[32])) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) }
        cx      = { defs={} expr=v1909[32] }
        dx      = { defs={} expr=v1910[32] }
        bx      = { defs={} expr=v1911[32] }
        sp      = { defs={} expr=v1912[32] }
        bp      = { defs={} expr=v1913[32] }
        si      = { defs={} expr=v1914[32] }
        di      = { defs={} expr=v1915[32] }
        es      = { defs={} expr=v1916[16] }
        cs      = { defs={} expr=v1917[16] }
        ss      = { defs={} expr=v1918[16] }
        ds      = { defs={} expr=v1919[16] }
        fs      = { defs={} expr=v1920[16] }
        gs      = { defs={} expr=v1921[16] }
        cf      = { defs={} expr=v1922[1] }
        ?1      = { defs={} expr=v1923[1] }
        pf      = { defs={} expr=v1924[1] }
        ?3      = { defs={} expr=v1925[1] }
        af      = { defs={} expr=v1926[1] }
        ?5      = { defs={} expr=v1927[1] }
        zf      = { defs={} expr=v1928[1] }
        sf      = { defs={} expr=v1929[1] }
        tf      = { defs={} expr=v1930[1] }
        if      = { defs={} expr=v1931[1] }
        df      = { defs={} expr=v1932[1] }
        of      = { defs={} expr=v1933[1] }
        iopl0   = { defs={} expr=v1934[1] }
        iopl1   = { defs={} expr=v1935[1] }
        nt      = { defs={} expr=v1936[1] }
        ?15     = { defs={} expr=v1937[1] }
        rf      = { defs={} expr=v1938[1] }
        vm      = { defs={} expr=v1939[1] }
        ac      = { defs={} expr=v1940[1] }
        vif     = { defs={} expr=v1941[1] }
        vip     = { defs={} expr=v1942[1] }
        id      = { defs={} expr=v1943[1] }
        ?22     = { defs={} expr=v1944[1] }
        ?23     = { defs={} expr=v1945[1] }
        ?24     = { defs={} expr=v1946[1] }
        ?25     = { defs={} expr=v1947[1] }
        ?26     = { defs={} expr=v1948[1] }
        ?27     = { defs={} expr=v1949[1] }
        ?28     = { defs={} expr=v1950[1] }
        ?29     = { defs={} expr=v1951[1] }
        ?30     = { defs={} expr=v1952[1] }
        ?31     = { defs={} expr=v1953[1] }
        ip      = { defs={0x080483ba} expr=0x080483bf[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1959[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1958[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1957[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v1956[8] }
          flags = { rdonly }
0x80483bf:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) }
        cx      = { defs={} expr=v1909[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) }
        bx      = { defs={} expr=v1911[32] }
        sp      = { defs={} expr=v1912[32] }
        bp      = { defs={} expr=v1913[32] }
        si      = { defs={} expr=v1914[32] }
        di      = { defs={} expr=v1915[32] }
        es      = { defs={} expr=v1916[16] }
        cs      = { defs={} expr=v1917[16] }
        ss      = { defs={} expr=v1918[16] }
        ds      = { defs={} expr=v1919[16] }
        fs      = { defs={} expr=v1920[16] }
        gs      = { defs={} expr=v1921[16] }
        cf      = { defs={} expr=v1922[1] }
        ?1      = { defs={} expr=v1923[1] }
        pf      = { defs={} expr=v1924[1] }
        ?3      = { defs={} expr=v1925[1] }
        af      = { defs={} expr=v1926[1] }
        ?5      = { defs={} expr=v1927[1] }
        zf      = { defs={} expr=v1928[1] }
        sf      = { defs={} expr=v1929[1] }
        tf      = { defs={} expr=v1930[1] }
        if      = { defs={} expr=v1931[1] }
        df      = { defs={} expr=v1932[1] }
        of      = { defs={} expr=v1933[1] }
        iopl0   = { defs={} expr=v1934[1] }
        iopl1   = { defs={} expr=v1935[1] }
        nt      = { defs={} expr=v1936[1] }
        ?15     = { defs={} expr=v1937[1] }
        rf      = { defs={} expr=v1938[1] }
        vm      = { defs={} expr=v1939[1] }
        ac      = { defs={} expr=v1940[1] }
        vif     = { defs={} expr=v1941[1] }
        vip     = { defs={} expr=v1942[1] }
        id      = { defs={} expr=v1943[1] }
        ?22     = { defs={} expr=v1944[1] }
        ?23     = { defs={} expr=v1945[1] }
        ?24     = { defs={} expr=v1946[1] }
        ?25     = { defs={} expr=v1947[1] }
        ?26     = { defs={} expr=v1948[1] }
        ?27     = { defs={} expr=v1949[1] }
        ?28     = { defs={} expr=v1950[1] }
        ?29     = { defs={} expr=v1951[1] }
        ?30     = { defs={} expr=v1952[1] }
        ?31     = { defs={} expr=v1953[1] }
        ip      = { defs={0x080483ba,0x080483bf} expr=0x080483c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) 3[32]) }
          value = { defs={} expr=v1969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) 2[32]) }
          value = { defs={} expr=v1968[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) 1[32]) }
          value = { defs={} expr=v1967[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) }
          value = { defs={} expr=v1966[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1959[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1958[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1957[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v1956[8] }
          flags = { rdonly }
0x80483c1:test   edx, edx
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) }
        cx      = { defs={} expr=v1909[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) }
        bx      = { defs={} expr=v1911[32] }
        sp      = { defs={} expr=v1912[32] }
        bp      = { defs={} expr=v1913[32] }
        si      = { defs={} expr=v1914[32] }
        di      = { defs={} expr=v1915[32] }
        es      = { defs={} expr=v1916[16] }
        cs      = { defs={} expr=v1917[16] }
        ss      = { defs={} expr=v1918[16] }
        ds      = { defs={} expr=v1919[16] }
        fs      = { defs={} expr=v1920[16] }
        gs      = { defs={} expr=v1921[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v1923[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))))))) }
        ?3      = { defs={} expr=v1925[1] }
        af      = { defs={0x080483c1} expr=v1974[1] }
        ?5      = { defs={} expr=v1927[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))))) }
        tf      = { defs={} expr=v1930[1] }
        if      = { defs={} expr=v1931[1] }
        df      = { defs={} expr=v1932[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v1934[1] }
        iopl1   = { defs={} expr=v1935[1] }
        nt      = { defs={} expr=v1936[1] }
        ?15     = { defs={} expr=v1937[1] }
        rf      = { defs={} expr=v1938[1] }
        vm      = { defs={} expr=v1939[1] }
        ac      = { defs={} expr=v1940[1] }
        vif     = { defs={} expr=v1941[1] }
        vip     = { defs={} expr=v1942[1] }
        id      = { defs={} expr=v1943[1] }
        ?22     = { defs={} expr=v1944[1] }
        ?23     = { defs={} expr=v1945[1] }
        ?24     = { defs={} expr=v1946[1] }
        ?25     = { defs={} expr=v1947[1] }
        ?26     = { defs={} expr=v1948[1] }
        ?27     = { defs={} expr=v1949[1] }
        ?28     = { defs={} expr=v1950[1] }
        ?29     = { defs={} expr=v1951[1] }
        ?30     = { defs={} expr=v1952[1] }
        ?31     = { defs={} expr=v1953[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1} expr=0x080483c3[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) 3[32]) }
          value = { defs={} expr=v1969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) 2[32]) }
          value = { defs={} expr=v1968[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) 1[32]) }
          value = { defs={} expr=v1967[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) }
          value = { defs={} expr=v1966[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1959[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1958[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1957[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v1956[8] }
          flags = { rdonly }
0x80483c3:jne    0x080483b0<<Insn>>
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) }
        cx      = { defs={} expr=v1909[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) }
        bx      = { defs={} expr=v1911[32] }
        sp      = { defs={} expr=v1912[32] }
        bp      = { defs={} expr=v1913[32] }
        si      = { defs={} expr=v1914[32] }
        di      = { defs={} expr=v1915[32] }
        es      = { defs={} expr=v1916[16] }
        cs      = { defs={} expr=v1917[16] }
        ss      = { defs={} expr=v1918[16] }
        ds      = { defs={} expr=v1919[16] }
        fs      = { defs={} expr=v1920[16] }
        gs      = { defs={} expr=v1921[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v1923[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))))))) }
        ?3      = { defs={} expr=v1925[1] }
        af      = { defs={0x080483c1} expr=v1974[1] }
        ?5      = { defs={} expr=v1927[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))))) }
        tf      = { defs={} expr=v1930[1] }
        if      = { defs={} expr=v1931[1] }
        df      = { defs={} expr=v1932[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v1934[1] }
        iopl1   = { defs={} expr=v1935[1] }
        nt      = { defs={} expr=v1936[1] }
        ?15     = { defs={} expr=v1937[1] }
        rf      = { defs={} expr=v1938[1] }
        vm      = { defs={} expr=v1939[1] }
        ac      = { defs={} expr=v1940[1] }
        vif     = { defs={} expr=v1941[1] }
        vip     = { defs={} expr=v1942[1] }
        id      = { defs={} expr=v1943[1] }
        ?22     = { defs={} expr=v1944[1] }
        ?23     = { defs={} expr=v1945[1] }
        ?24     = { defs={} expr=v1946[1] }
        ?25     = { defs={} expr=v1947[1] }
        ?26     = { defs={} expr=v1948[1] }
        ?27     = { defs={} expr=v1949[1] }
        ?28     = { defs={} expr=v1950[1] }
        ?29     = { defs={} expr=v1951[1] }
        ?30     = { defs={} expr=v1952[1] }
        ?31     = { defs={} expr=v1953[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1,0x080483c3} expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1966[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1967[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1968[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1969[8])))))) 0x080483b0[32] 0x080483c5[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) 3[32]) }
          value = { defs={} expr=v1969[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) 2[32]) }
          value = { defs={} expr=v1968[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) 1[32]) }
          value = { defs={} expr=v1967[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1956[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1957[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1958[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1959[8]))) }
          value = { defs={} expr=v1966[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1959[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1958[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1957[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v1956[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
    registers:
        ax      = { defs={} expr=v2023[32] }
        cx      = { defs={} expr=v2024[32] }
        dx      = { defs={} expr=v2025[32] }
        bx      = { defs={} expr=v2026[32] }
        sp      = { defs={} expr=v2027[32] }
        bp      = { defs={} expr=v2028[32] }
        si      = { defs={} expr=v2029[32] }
        di      = { defs={} expr=v2030[32] }
        es      = { defs={} expr=v2031[16] }
        cs      = { defs={} expr=v2032[16] }
        ss      = { defs={} expr=v2033[16] }
        ds      = { defs={} expr=v2034[16] }
        fs      = { defs={} expr=v2035[16] }
        gs      = { defs={} expr=v2036[16] }
        cf      = { defs={} expr=v2037[1] }
        ?1      = { defs={} expr=v2038[1] }
        pf      = { defs={} expr=v2039[1] }
        ?3      = { defs={} expr=v2040[1] }
        af      = { defs={} expr=v2041[1] }
        ?5      = { defs={} expr=v2042[1] }
        zf      = { defs={} expr=v2043[1] }
        sf      = { defs={} expr=v2044[1] }
        tf      = { defs={} expr=v2045[1] }
        if      = { defs={} expr=v2046[1] }
        df      = { defs={} expr=v2047[1] }
        of      = { defs={} expr=v2048[1] }
        iopl0   = { defs={} expr=v2049[1] }
        iopl1   = { defs={} expr=v2050[1] }
        nt      = { defs={} expr=v2051[1] }
        ?15     = { defs={} expr=v2052[1] }
        rf      = { defs={} expr=v2053[1] }
        vm      = { defs={} expr=v2054[1] }
        ac      = { defs={} expr=v2055[1] }
        vif     = { defs={} expr=v2056[1] }
        vip     = { defs={} expr=v2057[1] }
        id      = { defs={} expr=v2058[1] }
        ?22     = { defs={} expr=v2059[1] }
        ?23     = { defs={} expr=v2060[1] }
        ?24     = { defs={} expr=v2061[1] }
        ?25     = { defs={} expr=v2062[1] }
        ?26     = { defs={} expr=v2063[1] }
        ?27     = { defs={} expr=v2064[1] }
        ?28     = { defs={} expr=v2065[1] }
        ?29     = { defs={} expr=v2066[1] }
        ?30     = { defs={} expr=v2067[1] }
        ?31     = { defs={} expr=v2068[1] }
        ip      = { defs={0x080483c5} expr=0x080483cc[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
0x80483cc:leave  
    registers:
        ax      = { defs={} expr=v2023[32] }
        cx      = { defs={} expr=v2024[32] }
        dx      = { defs={} expr=v2025[32] }
        bx      = { defs={} expr=v2026[32] }
        sp      = { defs={0x080483cc} expr=(add[32] v2028[32] 4[32]) }
        bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2071[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2072[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2073[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2074[8]))) }
        si      = { defs={} expr=v2029[32] }
        di      = { defs={} expr=v2030[32] }
        es      = { defs={} expr=v2031[16] }
        cs      = { defs={} expr=v2032[16] }
        ss      = { defs={} expr=v2033[16] }
        ds      = { defs={} expr=v2034[16] }
        fs      = { defs={} expr=v2035[16] }
        gs      = { defs={} expr=v2036[16] }
        cf      = { defs={} expr=v2037[1] }
        ?1      = { defs={} expr=v2038[1] }
        pf      = { defs={} expr=v2039[1] }
        ?3      = { defs={} expr=v2040[1] }
        af      = { defs={} expr=v2041[1] }
        ?5      = { defs={} expr=v2042[1] }
        zf      = { defs={} expr=v2043[1] }
        sf      = { defs={} expr=v2044[1] }
        tf      = { defs={} expr=v2045[1] }
        if      = { defs={} expr=v2046[1] }
        df      = { defs={} expr=v2047[1] }
        of      = { defs={} expr=v2048[1] }
        iopl0   = { defs={} expr=v2049[1] }
        iopl1   = { defs={} expr=v2050[1] }
        nt      = { defs={} expr=v2051[1] }
        ?15     = { defs={} expr=v2052[1] }
        rf      = { defs={} expr=v2053[1] }
        vm      = { defs={} expr=v2054[1] }
        ac      = { defs={} expr=v2055[1] }
        vif     = { defs={} expr=v2056[1] }
        vip     = { defs={} expr=v2057[1] }
        id      = { defs={} expr=v2058[1] }
        ?22     = { defs={} expr=v2059[1] }
        ?23     = { defs={} expr=v2060[1] }
        ?24     = { defs={} expr=v2061[1] }
        ?25     = { defs={} expr=v2062[1] }
        ?26     = { defs={} expr=v2063[1] }
        ?27     = { defs={} expr=v2064[1] }
        ?28     = { defs={} expr=v2065[1] }
        ?29     = { defs={} expr=v2066[1] }
        ?30     = { defs={} expr=v2067[1] }
        ?31     = { defs={} expr=v2068[1] }
        ip      = { defs={0x080483c5,0x080483cc} expr=0x080483cd[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v2028[32] 3[32]) }
          value = { defs={} expr=v2074[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2028[32] 2[32]) }
          value = { defs={} expr=v2073[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2028[32] 1[32]) }
          value = { defs={} expr=v2072[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2028[32] }
          value = { defs={} expr=v2071[8] }
          flags = { rdonly }
0x80483cd:ret    
    registers:
        ax      = { defs={} expr=v2023[32] }
        cx      = { defs={} expr=v2024[32] }
        dx      = { defs={} expr=v2025[32] }
        bx      = { defs={} expr=v2026[32] }
        sp      = { defs={0x080483cc,0x080483cd} expr=(add[32] (add[32] v2028[32] 4[32]) 4[32]) }
        bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2071[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2072[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2073[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2074[8]))) }
        si      = { defs={} expr=v2029[32] }
        di      = { defs={} expr=v2030[32] }
        es      = { defs={} expr=v2031[16] }
        cs      = { defs={} expr=v2032[16] }
        ss      = { defs={} expr=v2033[16] }
        ds      = { defs={} expr=v2034[16] }
        fs      = { defs={} expr=v2035[16] }
        gs      = { defs={} expr=v2036[16] }
        cf      = { defs={} expr=v2037[1] }
        ?1      = { defs={} expr=v2038[1] }
        pf      = { defs={} expr=v2039[1] }
        ?3      = { defs={} expr=v2040[1] }
        af      = { defs={} expr=v2041[1] }
        ?5      = { defs={} expr=v2042[1] }
        zf      = { defs={} expr=v2043[1] }
        sf      = { defs={} expr=v2044[1] }
        tf      = { defs={} expr=v2045[1] }
        if      = { defs={} expr=v2046[1] }
        df      = { defs={} expr=v2047[1] }
        of      = { defs={} expr=v2048[1] }
        iopl0   = { defs={} expr=v2049[1] }
        iopl1   = { defs={} expr=v2050[1] }
        nt      = { defs={} expr=v2051[1] }
        ?15     = { defs={} expr=v2052[1] }
        rf      = { defs={} expr=v2053[1] }
        vm      = { defs={} expr=v2054[1] }
        ac      = { defs={} expr=v2055[1] }
        vif     = { defs={} expr=v2056[1] }
        vip     = { defs={} expr=v2057[1] }
        id      = { defs={} expr=v2058[1] }
        ?22     = { defs={} expr=v2059[1] }
        ?23     = { defs={} expr=v2060[1] }
        ?24     = { defs={} expr=v2061[1] }
        ?25     = { defs={} expr=v2062[1] }
        ?26     = { defs={} expr=v2063[1] }
        ?27     = { defs={} expr=v2064[1] }
        ?28     = { defs={} expr=v2065[1] }
        ?29     = { defs={} expr=v2066[1] }
        ?30     = { defs={} expr=v2067[1] }
        ?31     = { defs={} expr=v2068[1] }
        ip      = { defs={0x080483cd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2081[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2082[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2083[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2084[8]))) }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2028[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2084[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2028[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2083[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2028[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2082[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=(add[32] v2028[32] 4[32]) }
          value = { defs={} expr=v2081[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2028[32] 3[32]) }
          value = { defs={} expr=v2074[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2028[32] 2[32]) }
          value = { defs={} expr=v2073[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2028[32] 1[32]) }
          value = { defs={} expr=v2072[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2028[32] }
          value = { defs={} expr=v2071[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483d0:push   ebp
    registers:
        ax      = { defs={} expr=v2137[32] }
        cx      = { defs={} expr=v2138[32] }
        dx      = { defs={} expr=v2139[32] }
        bx      = { defs={} expr=v2140[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v2141[32] -4[32]) }
        bp      = { defs={} expr=v2142[32] }
        si      = { defs={} expr=v2143[32] }
        di      = { defs={} expr=v2144[32] }
        es      = { defs={} expr=v2145[16] }
        cs      = { defs={} expr=v2146[16] }
        ss      = { defs={} expr=v2147[16] }
        ds      = { defs={} expr=v2148[16] }
        fs      = { defs={} expr=v2149[16] }
        gs      = { defs={} expr=v2150[16] }
        cf      = { defs={} expr=v2151[1] }
        ?1      = { defs={} expr=v2152[1] }
        pf      = { defs={} expr=v2153[1] }
        ?3      = { defs={} expr=v2154[1] }
        af      = { defs={} expr=v2155[1] }
        ?5      = { defs={} expr=v2156[1] }
        zf      = { defs={} expr=v2157[1] }
        sf      = { defs={} expr=v2158[1] }
        tf      = { defs={} expr=v2159[1] }
        if      = { defs={} expr=v2160[1] }
        df      = { defs={} expr=v2161[1] }
        of      = { defs={} expr=v2162[1] }
        iopl0   = { defs={} expr=v2163[1] }
        iopl1   = { defs={} expr=v2164[1] }
        nt      = { defs={} expr=v2165[1] }
        ?15     = { defs={} expr=v2166[1] }
        rf      = { defs={} expr=v2167[1] }
        vm      = { defs={} expr=v2168[1] }
        ac      = { defs={} expr=v2169[1] }
        vif     = { defs={} expr=v2170[1] }
        vip     = { defs={} expr=v2171[1] }
        id      = { defs={} expr=v2172[1] }
        ?22     = { defs={} expr=v2173[1] }
        ?23     = { defs={} expr=v2174[1] }
        ?24     = { defs={} expr=v2175[1] }
        ?25     = { defs={} expr=v2176[1] }
        ?26     = { defs={} expr=v2177[1] }
        ?27     = { defs={} expr=v2178[1] }
        ?28     = { defs={} expr=v2179[1] }
        ?29     = { defs={} expr=v2180[1] }
        ?30     = { defs={} expr=v2181[1] }
        ?31     = { defs={} expr=v2182[1] }
        ip      = { defs={0x080483d0} expr=0x080483d1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2142[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2141[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2142[32]) }
          flags = { }
    init mem:
0x80483d1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2137[32] }
        cx      = { defs={} expr=v2138[32] }
        dx      = { defs={} expr=v2139[32] }
        bx      = { defs={} expr=v2140[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v2141[32] -4[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2141[32] -4[32]) }
        si      = { defs={} expr=v2143[32] }
        di      = { defs={} expr=v2144[32] }
        es      = { defs={} expr=v2145[16] }
        cs      = { defs={} expr=v2146[16] }
        ss      = { defs={} expr=v2147[16] }
        ds      = { defs={} expr=v2148[16] }
        fs      = { defs={} expr=v2149[16] }
        gs      = { defs={} expr=v2150[16] }
        cf      = { defs={} expr=v2151[1] }
        ?1      = { defs={} expr=v2152[1] }
        pf      = { defs={} expr=v2153[1] }
        ?3      = { defs={} expr=v2154[1] }
        af      = { defs={} expr=v2155[1] }
        ?5      = { defs={} expr=v2156[1] }
        zf      = { defs={} expr=v2157[1] }
        sf      = { defs={} expr=v2158[1] }
        tf      = { defs={} expr=v2159[1] }
        if      = { defs={} expr=v2160[1] }
        df      = { defs={} expr=v2161[1] }
        of      = { defs={} expr=v2162[1] }
        iopl0   = { defs={} expr=v2163[1] }
        iopl1   = { defs={} expr=v2164[1] }
        nt      = { defs={} expr=v2165[1] }
        ?15     = { defs={} expr=v2166[1] }
        rf      = { defs={} expr=v2167[1] }
        vm      = { defs={} expr=v2168[1] }
        ac      = { defs={} expr=v2169[1] }
        vif     = { defs={} expr=v2170[1] }
        vip     = { defs={} expr=v2171[1] }
        id      = { defs={} expr=v2172[1] }
        ?22     = { defs={} expr=v2173[1] }
        ?23     = { defs={} expr=v2174[1] }
        ?24     = { defs={} expr=v2175[1] }
        ?25     = { defs={} expr=v2176[1] }
        ?26     = { defs={} expr=v2177[1] }
        ?27     = { defs={} expr=v2178[1] }
        ?28     = { defs={} expr=v2179[1] }
        ?29     = { defs={} expr=v2180[1] }
        ?30     = { defs={} expr=v2181[1] }
        ?31     = { defs={} expr=v2182[1] }
        ip      = { defs={0x080483d0,0x080483d1} expr=0x080483d3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2142[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2141[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2142[32]) }
          flags = { }
    init mem:
0x80483d3:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2137[32] }
        cx      = { defs={} expr=v2138[32] }
        dx      = { defs={} expr=v2139[32] }
        bx      = { defs={} expr=v2140[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2141[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2141[32] -4[32]) }
        si      = { defs={} expr=v2143[32] }
        di      = { defs={} expr=v2144[32] }
        es      = { defs={} expr=v2145[16] }
        cs      = { defs={} expr=v2146[16] }
        ss      = { defs={} expr=v2147[16] }
        ds      = { defs={} expr=v2148[16] }
        fs      = { defs={} expr=v2149[16] }
        gs      = { defs={} expr=v2150[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2152[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2154[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2156[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2141[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2141[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2159[1] }
        if      = { defs={} expr=v2160[1] }
        df      = { defs={} expr=v2161[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2163[1] }
        iopl1   = { defs={} expr=v2164[1] }
        nt      = { defs={} expr=v2165[1] }
        ?15     = { defs={} expr=v2166[1] }
        rf      = { defs={} expr=v2167[1] }
        vm      = { defs={} expr=v2168[1] }
        ac      = { defs={} expr=v2169[1] }
        vif     = { defs={} expr=v2170[1] }
        vip     = { defs={} expr=v2171[1] }
        id      = { defs={} expr=v2172[1] }
        ?22     = { defs={} expr=v2173[1] }
        ?23     = { defs={} expr=v2174[1] }
        ?24     = { defs={} expr=v2175[1] }
        ?25     = { defs={} expr=v2176[1] }
        ?26     = { defs={} expr=v2177[1] }
        ?27     = { defs={} expr=v2178[1] }
        ?28     = { defs={} expr=v2179[1] }
        ?29     = { defs={} expr=v2180[1] }
        ?30     = { defs={} expr=v2181[1] }
        ?31     = { defs={} expr=v2182[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3} expr=0x080483d6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2142[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2141[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2142[32]) }
          flags = { }
    init mem:
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) }
        cx      = { defs={} expr=v2138[32] }
        dx      = { defs={} expr=v2139[32] }
        bx      = { defs={} expr=v2140[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2141[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2141[32] -4[32]) }
        si      = { defs={} expr=v2143[32] }
        di      = { defs={} expr=v2144[32] }
        es      = { defs={} expr=v2145[16] }
        cs      = { defs={} expr=v2146[16] }
        ss      = { defs={} expr=v2147[16] }
        ds      = { defs={} expr=v2148[16] }
        fs      = { defs={} expr=v2149[16] }
        gs      = { defs={} expr=v2150[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2152[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2141[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2154[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2156[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2141[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2141[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2159[1] }
        if      = { defs={} expr=v2160[1] }
        df      = { defs={} expr=v2161[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2141[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2163[1] }
        iopl1   = { defs={} expr=v2164[1] }
        nt      = { defs={} expr=v2165[1] }
        ?15     = { defs={} expr=v2166[1] }
        rf      = { defs={} expr=v2167[1] }
        vm      = { defs={} expr=v2168[1] }
        ac      = { defs={} expr=v2169[1] }
        vif     = { defs={} expr=v2170[1] }
        vip     = { defs={} expr=v2171[1] }
        id      = { defs={} expr=v2172[1] }
        ?22     = { defs={} expr=v2173[1] }
        ?23     = { defs={} expr=v2174[1] }
        ?24     = { defs={} expr=v2175[1] }
        ?25     = { defs={} expr=v2176[1] }
        ?26     = { defs={} expr=v2177[1] }
        ?27     = { defs={} expr=v2178[1] }
        ?28     = { defs={} expr=v2179[1] }
        ?29     = { defs={} expr=v2180[1] }
        ?30     = { defs={} expr=v2181[1] }
        ?31     = { defs={} expr=v2182[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6} expr=0x080483db[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2142[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2141[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2142[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v2188[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v2187[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v2186[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v2185[8] }
          flags = { rdonly }
0x80483db:test   eax, eax
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) }
        cx      = { defs={} expr=v2138[32] }
        dx      = { defs={} expr=v2139[32] }
        bx      = { defs={} expr=v2140[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2141[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2141[32] -4[32]) }
        si      = { defs={} expr=v2143[32] }
        di      = { defs={} expr=v2144[32] }
        es      = { defs={} expr=v2145[16] }
        cs      = { defs={} expr=v2146[16] }
        ss      = { defs={} expr=v2147[16] }
        ds      = { defs={} expr=v2148[16] }
        fs      = { defs={} expr=v2149[16] }
        gs      = { defs={} expr=v2150[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v2152[1] }
        pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))))))) }
        ?3      = { defs={} expr=v2154[1] }
        af      = { defs={0x080483db} expr=v2193[1] }
        ?5      = { defs={} expr=v2156[1] }
        zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))))) }
        sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))))) }
        tf      = { defs={} expr=v2159[1] }
        if      = { defs={} expr=v2160[1] }
        df      = { defs={} expr=v2161[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v2163[1] }
        iopl1   = { defs={} expr=v2164[1] }
        nt      = { defs={} expr=v2165[1] }
        ?15     = { defs={} expr=v2166[1] }
        rf      = { defs={} expr=v2167[1] }
        vm      = { defs={} expr=v2168[1] }
        ac      = { defs={} expr=v2169[1] }
        vif     = { defs={} expr=v2170[1] }
        vip     = { defs={} expr=v2171[1] }
        id      = { defs={} expr=v2172[1] }
        ?22     = { defs={} expr=v2173[1] }
        ?23     = { defs={} expr=v2174[1] }
        ?24     = { defs={} expr=v2175[1] }
        ?25     = { defs={} expr=v2176[1] }
        ?26     = { defs={} expr=v2177[1] }
        ?27     = { defs={} expr=v2178[1] }
        ?28     = { defs={} expr=v2179[1] }
        ?29     = { defs={} expr=v2180[1] }
        ?30     = { defs={} expr=v2181[1] }
        ?31     = { defs={} expr=v2182[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db} expr=0x080483dd[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2142[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2141[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2142[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v2188[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v2187[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v2186[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v2185[8] }
          flags = { rdonly }
0x80483dd:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) }
        cx      = { defs={} expr=v2138[32] }
        dx      = { defs={} expr=v2139[32] }
        bx      = { defs={} expr=v2140[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2141[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2141[32] -4[32]) }
        si      = { defs={} expr=v2143[32] }
        di      = { defs={} expr=v2144[32] }
        es      = { defs={} expr=v2145[16] }
        cs      = { defs={} expr=v2146[16] }
        ss      = { defs={} expr=v2147[16] }
        ds      = { defs={} expr=v2148[16] }
        fs      = { defs={} expr=v2149[16] }
        gs      = { defs={} expr=v2150[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v2152[1] }
        pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8])))))))))) }
        ?3      = { defs={} expr=v2154[1] }
        af      = { defs={0x080483db} expr=v2193[1] }
        ?5      = { defs={} expr=v2156[1] }
        zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))))) }
        sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))))) }
        tf      = { defs={} expr=v2159[1] }
        if      = { defs={} expr=v2160[1] }
        df      = { defs={} expr=v2161[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v2163[1] }
        iopl1   = { defs={} expr=v2164[1] }
        nt      = { defs={} expr=v2165[1] }
        ?15     = { defs={} expr=v2166[1] }
        rf      = { defs={} expr=v2167[1] }
        vm      = { defs={} expr=v2168[1] }
        ac      = { defs={} expr=v2169[1] }
        vif     = { defs={} expr=v2170[1] }
        vip     = { defs={} expr=v2171[1] }
        id      = { defs={} expr=v2172[1] }
        ?22     = { defs={} expr=v2173[1] }
        ?23     = { defs={} expr=v2174[1] }
        ?24     = { defs={} expr=v2175[1] }
        ?25     = { defs={} expr=v2176[1] }
        ?26     = { defs={} expr=v2177[1] }
        ?27     = { defs={} expr=v2178[1] }
        ?28     = { defs={} expr=v2179[1] }
        ?29     = { defs={} expr=v2180[1] }
        ?30     = { defs={} expr=v2181[1] }
        ?31     = { defs={} expr=v2182[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db,0x080483dd} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2185[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2186[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2187[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2188[8]))))) 0x08048400[32] 0x080483df[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2142[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2141[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2142[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2141[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2142[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v2188[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v2187[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v2186[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v2185[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2243[32] }
        dx      = { defs={} expr=v2244[32] }
        bx      = { defs={} expr=v2245[32] }
        sp      = { defs={} expr=v2246[32] }
        bp      = { defs={} expr=v2247[32] }
        si      = { defs={} expr=v2248[32] }
        di      = { defs={} expr=v2249[32] }
        es      = { defs={} expr=v2250[16] }
        cs      = { defs={} expr=v2251[16] }
        ss      = { defs={} expr=v2252[16] }
        ds      = { defs={} expr=v2253[16] }
        fs      = { defs={} expr=v2254[16] }
        gs      = { defs={} expr=v2255[16] }
        cf      = { defs={} expr=v2256[1] }
        ?1      = { defs={} expr=v2257[1] }
        pf      = { defs={} expr=v2258[1] }
        ?3      = { defs={} expr=v2259[1] }
        af      = { defs={} expr=v2260[1] }
        ?5      = { defs={} expr=v2261[1] }
        zf      = { defs={} expr=v2262[1] }
        sf      = { defs={} expr=v2263[1] }
        tf      = { defs={} expr=v2264[1] }
        if      = { defs={} expr=v2265[1] }
        df      = { defs={} expr=v2266[1] }
        of      = { defs={} expr=v2267[1] }
        iopl0   = { defs={} expr=v2268[1] }
        iopl1   = { defs={} expr=v2269[1] }
        nt      = { defs={} expr=v2270[1] }
        ?15     = { defs={} expr=v2271[1] }
        rf      = { defs={} expr=v2272[1] }
        vm      = { defs={} expr=v2273[1] }
        ac      = { defs={} expr=v2274[1] }
        vif     = { defs={} expr=v2275[1] }
        vip     = { defs={} expr=v2276[1] }
        id      = { defs={} expr=v2277[1] }
        ?22     = { defs={} expr=v2278[1] }
        ?23     = { defs={} expr=v2279[1] }
        ?24     = { defs={} expr=v2280[1] }
        ?25     = { defs={} expr=v2281[1] }
        ?26     = { defs={} expr=v2282[1] }
        ?27     = { defs={} expr=v2283[1] }
        ?28     = { defs={} expr=v2284[1] }
        ?29     = { defs={} expr=v2285[1] }
        ?30     = { defs={} expr=v2286[1] }
        ?31     = { defs={} expr=v2287[1] }
        ip      = { defs={0x080483df} expr=0x080483e4[32] }
    memory:
    init mem:
0x80483e4:test   eax, eax
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2243[32] }
        dx      = { defs={} expr=v2244[32] }
        bx      = { defs={} expr=v2245[32] }
        sp      = { defs={} expr=v2246[32] }
        bp      = { defs={} expr=v2247[32] }
        si      = { defs={} expr=v2248[32] }
        di      = { defs={} expr=v2249[32] }
        es      = { defs={} expr=v2250[16] }
        cs      = { defs={} expr=v2251[16] }
        ss      = { defs={} expr=v2252[16] }
        ds      = { defs={} expr=v2253[16] }
        fs      = { defs={} expr=v2254[16] }
        gs      = { defs={} expr=v2255[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v2257[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v2259[1] }
        af      = { defs={0x080483e4} expr=v2288[1] }
        ?5      = { defs={} expr=v2261[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v2264[1] }
        if      = { defs={} expr=v2265[1] }
        df      = { defs={} expr=v2266[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v2268[1] }
        iopl1   = { defs={} expr=v2269[1] }
        nt      = { defs={} expr=v2270[1] }
        ?15     = { defs={} expr=v2271[1] }
        rf      = { defs={} expr=v2272[1] }
        vm      = { defs={} expr=v2273[1] }
        ac      = { defs={} expr=v2274[1] }
        vif     = { defs={} expr=v2275[1] }
        vip     = { defs={} expr=v2276[1] }
        id      = { defs={} expr=v2277[1] }
        ?22     = { defs={} expr=v2278[1] }
        ?23     = { defs={} expr=v2279[1] }
        ?24     = { defs={} expr=v2280[1] }
        ?25     = { defs={} expr=v2281[1] }
        ?26     = { defs={} expr=v2282[1] }
        ?27     = { defs={} expr=v2283[1] }
        ?28     = { defs={} expr=v2284[1] }
        ?29     = { defs={} expr=v2285[1] }
        ?30     = { defs={} expr=v2286[1] }
        ?31     = { defs={} expr=v2287[1] }
        ip      = { defs={0x080483df,0x080483e4} expr=0x080483e6[32] }
    memory:
    init mem:
0x80483e6:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2243[32] }
        dx      = { defs={} expr=v2244[32] }
        bx      = { defs={} expr=v2245[32] }
        sp      = { defs={} expr=v2246[32] }
        bp      = { defs={} expr=v2247[32] }
        si      = { defs={} expr=v2248[32] }
        di      = { defs={} expr=v2249[32] }
        es      = { defs={} expr=v2250[16] }
        cs      = { defs={} expr=v2251[16] }
        ss      = { defs={} expr=v2252[16] }
        ds      = { defs={} expr=v2253[16] }
        fs      = { defs={} expr=v2254[16] }
        gs      = { defs={} expr=v2255[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v2257[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v2259[1] }
        af      = { defs={0x080483e4} expr=v2288[1] }
        ?5      = { defs={} expr=v2261[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v2264[1] }
        if      = { defs={} expr=v2265[1] }
        df      = { defs={} expr=v2266[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v2268[1] }
        iopl1   = { defs={} expr=v2269[1] }
        nt      = { defs={} expr=v2270[1] }
        ?15     = { defs={} expr=v2271[1] }
        rf      = { defs={} expr=v2272[1] }
        vm      = { defs={} expr=v2273[1] }
        ac      = { defs={} expr=v2274[1] }
        vif     = { defs={} expr=v2275[1] }
        vip     = { defs={} expr=v2276[1] }
        id      = { defs={} expr=v2277[1] }
        ?22     = { defs={} expr=v2278[1] }
        ?23     = { defs={} expr=v2279[1] }
        ?24     = { defs={} expr=v2280[1] }
        ?25     = { defs={} expr=v2281[1] }
        ?26     = { defs={} expr=v2282[1] }
        ?27     = { defs={} expr=v2283[1] }
        ?28     = { defs={} expr=v2284[1] }
        ?29     = { defs={} expr=v2285[1] }
        ?30     = { defs={} expr=v2286[1] }
        ?31     = { defs={} expr=v2287[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6} expr=0x08048400[32] }
    memory:
    init mem:
0x8048400:mov    esp, ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2243[32] }
        dx      = { defs={} expr=v2244[32] }
        bx      = { defs={} expr=v2245[32] }
        sp      = { defs={0x08048400} expr=v2247[32] }
        bp      = { defs={} expr=v2247[32] }
        si      = { defs={} expr=v2248[32] }
        di      = { defs={} expr=v2249[32] }
        es      = { defs={} expr=v2250[16] }
        cs      = { defs={} expr=v2251[16] }
        ss      = { defs={} expr=v2252[16] }
        ds      = { defs={} expr=v2253[16] }
        fs      = { defs={} expr=v2254[16] }
        gs      = { defs={} expr=v2255[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v2257[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v2259[1] }
        af      = { defs={0x080483e4} expr=v2288[1] }
        ?5      = { defs={} expr=v2261[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v2264[1] }
        if      = { defs={} expr=v2265[1] }
        df      = { defs={} expr=v2266[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v2268[1] }
        iopl1   = { defs={} expr=v2269[1] }
        nt      = { defs={} expr=v2270[1] }
        ?15     = { defs={} expr=v2271[1] }
        rf      = { defs={} expr=v2272[1] }
        vm      = { defs={} expr=v2273[1] }
        ac      = { defs={} expr=v2274[1] }
        vif     = { defs={} expr=v2275[1] }
        vip     = { defs={} expr=v2276[1] }
        id      = { defs={} expr=v2277[1] }
        ?22     = { defs={} expr=v2278[1] }
        ?23     = { defs={} expr=v2279[1] }
        ?24     = { defs={} expr=v2280[1] }
        ?25     = { defs={} expr=v2281[1] }
        ?26     = { defs={} expr=v2282[1] }
        ?27     = { defs={} expr=v2283[1] }
        ?28     = { defs={} expr=v2284[1] }
        ?29     = { defs={} expr=v2285[1] }
        ?30     = { defs={} expr=v2286[1] }
        ?31     = { defs={} expr=v2287[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400} expr=0x08048402[32] }
    memory:
    init mem:
0x8048402:pop    ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2243[32] }
        dx      = { defs={} expr=v2244[32] }
        bx      = { defs={} expr=v2245[32] }
        sp      = { defs={0x08048400,0x08048402} expr=(add[32] v2247[32] 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2291[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2292[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2293[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2294[8]))) }
        si      = { defs={} expr=v2248[32] }
        di      = { defs={} expr=v2249[32] }
        es      = { defs={} expr=v2250[16] }
        cs      = { defs={} expr=v2251[16] }
        ss      = { defs={} expr=v2252[16] }
        ds      = { defs={} expr=v2253[16] }
        fs      = { defs={} expr=v2254[16] }
        gs      = { defs={} expr=v2255[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v2257[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v2259[1] }
        af      = { defs={0x080483e4} expr=v2288[1] }
        ?5      = { defs={} expr=v2261[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v2264[1] }
        if      = { defs={} expr=v2265[1] }
        df      = { defs={} expr=v2266[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v2268[1] }
        iopl1   = { defs={} expr=v2269[1] }
        nt      = { defs={} expr=v2270[1] }
        ?15     = { defs={} expr=v2271[1] }
        rf      = { defs={} expr=v2272[1] }
        vm      = { defs={} expr=v2273[1] }
        ac      = { defs={} expr=v2274[1] }
        vif     = { defs={} expr=v2275[1] }
        vip     = { defs={} expr=v2276[1] }
        id      = { defs={} expr=v2277[1] }
        ?22     = { defs={} expr=v2278[1] }
        ?23     = { defs={} expr=v2279[1] }
        ?24     = { defs={} expr=v2280[1] }
        ?25     = { defs={} expr=v2281[1] }
        ?26     = { defs={} expr=v2282[1] }
        ?27     = { defs={} expr=v2283[1] }
        ?28     = { defs={} expr=v2284[1] }
        ?29     = { defs={} expr=v2285[1] }
        ?30     = { defs={} expr=v2286[1] }
        ?31     = { defs={} expr=v2287[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400,0x08048402} expr=0x08048403[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v2247[32] 3[32]) }
          value = { defs={} expr=v2294[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2247[32] 2[32]) }
          value = { defs={} expr=v2293[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2247[32] 1[32]) }
          value = { defs={} expr=v2292[8] }
          flags = { rdonly }
        address = { defs={0x08048400} expr=v2247[32] }
          value = { defs={} expr=v2291[8] }
          flags = { rdonly }
0x8048403:ret    
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2243[32] }
        dx      = { defs={} expr=v2244[32] }
        bx      = { defs={} expr=v2245[32] }
        sp      = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] (add[32] v2247[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2291[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2292[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2293[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2294[8]))) }
        si      = { defs={} expr=v2248[32] }
        di      = { defs={} expr=v2249[32] }
        es      = { defs={} expr=v2250[16] }
        cs      = { defs={} expr=v2251[16] }
        ss      = { defs={} expr=v2252[16] }
        ds      = { defs={} expr=v2253[16] }
        fs      = { defs={} expr=v2254[16] }
        gs      = { defs={} expr=v2255[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v2257[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v2259[1] }
        af      = { defs={0x080483e4} expr=v2288[1] }
        ?5      = { defs={} expr=v2261[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v2264[1] }
        if      = { defs={} expr=v2265[1] }
        df      = { defs={} expr=v2266[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v2268[1] }
        iopl1   = { defs={} expr=v2269[1] }
        nt      = { defs={} expr=v2270[1] }
        ?15     = { defs={} expr=v2271[1] }
        rf      = { defs={} expr=v2272[1] }
        vm      = { defs={} expr=v2273[1] }
        ac      = { defs={} expr=v2274[1] }
        vif     = { defs={} expr=v2275[1] }
        vip     = { defs={} expr=v2276[1] }
        id      = { defs={} expr=v2277[1] }
        ?22     = { defs={} expr=v2278[1] }
        ?23     = { defs={} expr=v2279[1] }
        ?24     = { defs={} expr=v2280[1] }
        ?25     = { defs={} expr=v2281[1] }
        ?26     = { defs={} expr=v2282[1] }
        ?27     = { defs={} expr=v2283[1] }
        ?28     = { defs={} expr=v2284[1] }
        ?29     = { defs={} expr=v2285[1] }
        ?30     = { defs={} expr=v2286[1] }
        ?31     = { defs={} expr=v2287[1] }
        ip      = { defs={0x08048403} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2301[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2302[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2303[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2304[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2247[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2304[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2247[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2303[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2247[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2302[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402} expr=(add[32] v2247[32] 4[32]) }
          value = { defs={} expr=v2301[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2247[32] 3[32]) }
          value = { defs={} expr=v2294[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2247[32] 2[32]) }
          value = { defs={} expr=v2293[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2247[32] 1[32]) }
          value = { defs={} expr=v2292[8] }
          flags = { rdonly }
        address = { defs={0x08048400} expr=v2247[32] }
          value = { defs={} expr=v2291[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
    registers:
        ax      = { defs={} expr=v2357[32] }
        cx      = { defs={} expr=v2358[32] }
        dx      = { defs={} expr=v2359[32] }
        bx      = { defs={} expr=v2360[32] }
        sp      = { defs={} expr=v2361[32] }
        bp      = { defs={} expr=v2362[32] }
        si      = { defs={} expr=v2363[32] }
        di      = { defs={} expr=v2364[32] }
        es      = { defs={} expr=v2365[16] }
        cs      = { defs={} expr=v2366[16] }
        ss      = { defs={} expr=v2367[16] }
        ds      = { defs={} expr=v2368[16] }
        fs      = { defs={} expr=v2369[16] }
        gs      = { defs={} expr=v2370[16] }
        cf      = { defs={} expr=v2371[1] }
        ?1      = { defs={} expr=v2372[1] }
        pf      = { defs={} expr=v2373[1] }
        ?3      = { defs={} expr=v2374[1] }
        af      = { defs={} expr=v2375[1] }
        ?5      = { defs={} expr=v2376[1] }
        zf      = { defs={} expr=v2377[1] }
        sf      = { defs={} expr=v2378[1] }
        tf      = { defs={} expr=v2379[1] }
        if      = { defs={} expr=v2380[1] }
        df      = { defs={} expr=v2381[1] }
        of      = { defs={} expr=v2382[1] }
        iopl0   = { defs={} expr=v2383[1] }
        iopl1   = { defs={} expr=v2384[1] }
        nt      = { defs={} expr=v2385[1] }
        ?15     = { defs={} expr=v2386[1] }
        rf      = { defs={} expr=v2387[1] }
        vm      = { defs={} expr=v2388[1] }
        ac      = { defs={} expr=v2389[1] }
        vif     = { defs={} expr=v2390[1] }
        vip     = { defs={} expr=v2391[1] }
        id      = { defs={} expr=v2392[1] }
        ?22     = { defs={} expr=v2393[1] }
        ?23     = { defs={} expr=v2394[1] }
        ?24     = { defs={} expr=v2395[1] }
        ?25     = { defs={} expr=v2396[1] }
        ?26     = { defs={} expr=v2397[1] }
        ?27     = { defs={} expr=v2398[1] }
        ?28     = { defs={} expr=v2399[1] }
        ?29     = { defs={} expr=v2400[1] }
        ?30     = { defs={} expr=v2401[1] }
        ?31     = { defs={} expr=v2402[1] }
        ip      = { defs={0x080483e8} expr=0x080483ef[32] }
    memory:
        address = { defs={} expr=(add[32] v2361[32] 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v2361[32] 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v2361[32] 1[32]) }
          value = { defs={} expr=-107[8] }
          flags = { }
        address = { defs={} expr=v2361[32] }
          value = { defs={} expr=-8[8] }
          flags = { }
    init mem:
0x80483ef:call   0x00000000
    registers:
        ax      = { defs={} expr=v2357[32] }
        cx      = { defs={} expr=v2358[32] }
        dx      = { defs={} expr=v2359[32] }
        bx      = { defs={} expr=v2360[32] }
        sp      = { defs={0x080483ef} expr=(add[32] v2361[32] -4[32]) }
        bp      = { defs={} expr=v2362[32] }
        si      = { defs={} expr=v2363[32] }
        di      = { defs={} expr=v2364[32] }
        es      = { defs={} expr=v2365[16] }
        cs      = { defs={} expr=v2366[16] }
        ss      = { defs={} expr=v2367[16] }
        ds      = { defs={} expr=v2368[16] }
        fs      = { defs={} expr=v2369[16] }
        gs      = { defs={} expr=v2370[16] }
        cf      = { defs={} expr=v2371[1] }
        ?1      = { defs={} expr=v2372[1] }
        pf      = { defs={} expr=v2373[1] }
        ?3      = { defs={} expr=v2374[1] }
        af      = { defs={} expr=v2375[1] }
        ?5      = { defs={} expr=v2376[1] }
        zf      = { defs={} expr=v2377[1] }
        sf      = { defs={} expr=v2378[1] }
        tf      = { defs={} expr=v2379[1] }
        if      = { defs={} expr=v2380[1] }
        df      = { defs={} expr=v2381[1] }
        of      = { defs={} expr=v2382[1] }
        iopl0   = { defs={} expr=v2383[1] }
        iopl1   = { defs={} expr=v2384[1] }
        nt      = { defs={} expr=v2385[1] }
        ?15     = { defs={} expr=v2386[1] }
        rf      = { defs={} expr=v2387[1] }
        vm      = { defs={} expr=v2388[1] }
        ac      = { defs={} expr=v2389[1] }
        vif     = { defs={} expr=v2390[1] }
        vip     = { defs={} expr=v2391[1] }
        id      = { defs={} expr=v2392[1] }
        ?22     = { defs={} expr=v2393[1] }
        ?23     = { defs={} expr=v2394[1] }
        ?24     = { defs={} expr=v2395[1] }
        ?25     = { defs={} expr=v2396[1] }
        ?26     = { defs={} expr=v2397[1] }
        ?27     = { defs={} expr=v2398[1] }
        ?28     = { defs={} expr=v2399[1] }
        ?29     = { defs={} expr=v2400[1] }
        ?30     = { defs={} expr=v2401[1] }
        ?31     = { defs={} expr=v2402[1] }
        ip      = { defs={0x080483ef} expr=0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2361[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2361[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2361[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x080483ef} expr=(add[32] v2361[32] -4[32]) }
          value = { defs={} expr=-12[8] }
          flags = { }
        address = { defs={} expr=(add[32] v2361[32] 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v2361[32] 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v2361[32] 1[32]) }
          value = { defs={} expr=-107[8] }
          flags = { }
        address = { defs={} expr=v2361[32] }
          value = { defs={} expr=-8[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v2451[32] }
        cx      = { defs={} expr=v2452[32] }
        dx      = { defs={} expr=v2453[32] }
        bx      = { defs={} expr=v2454[32] }
        sp      = { defs={} expr=v2455[32] }
        bp      = { defs={} expr=v2456[32] }
        si      = { defs={0x080483f4} expr=v2457[32] }
        di      = { defs={} expr=v2458[32] }
        es      = { defs={} expr=v2459[16] }
        cs      = { defs={} expr=v2460[16] }
        ss      = { defs={} expr=v2461[16] }
        ds      = { defs={} expr=v2462[16] }
        fs      = { defs={} expr=v2463[16] }
        gs      = { defs={} expr=v2464[16] }
        cf      = { defs={} expr=v2465[1] }
        ?1      = { defs={} expr=v2466[1] }
        pf      = { defs={} expr=v2467[1] }
        ?3      = { defs={} expr=v2468[1] }
        af      = { defs={} expr=v2469[1] }
        ?5      = { defs={} expr=v2470[1] }
        zf      = { defs={} expr=v2471[1] }
        sf      = { defs={} expr=v2472[1] }
        tf      = { defs={} expr=v2473[1] }
        if      = { defs={} expr=v2474[1] }
        df      = { defs={} expr=v2475[1] }
        of      = { defs={} expr=v2476[1] }
        iopl0   = { defs={} expr=v2477[1] }
        iopl1   = { defs={} expr=v2478[1] }
        nt      = { defs={} expr=v2479[1] }
        ?15     = { defs={} expr=v2480[1] }
        rf      = { defs={} expr=v2481[1] }
        vm      = { defs={} expr=v2482[1] }
        ac      = { defs={} expr=v2483[1] }
        vif     = { defs={} expr=v2484[1] }
        vip     = { defs={} expr=v2485[1] }
        id      = { defs={} expr=v2486[1] }
        ?22     = { defs={} expr=v2487[1] }
        ?23     = { defs={} expr=v2488[1] }
        ?24     = { defs={} expr=v2489[1] }
        ?25     = { defs={} expr=v2490[1] }
        ?26     = { defs={} expr=v2491[1] }
        ?27     = { defs={} expr=v2492[1] }
        ?28     = { defs={} expr=v2493[1] }
        ?29     = { defs={} expr=v2494[1] }
        ?30     = { defs={} expr=v2495[1] }
        ?31     = { defs={} expr=v2496[1] }
        ip      = { defs={0x080483f4} expr=0x080483fa[32] }
    memory:
    init mem:
0x80483fa:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v2451[32] }
        cx      = { defs={} expr=v2452[32] }
        dx      = { defs={} expr=v2453[32] }
        bx      = { defs={} expr=v2454[32] }
        sp      = { defs={} expr=v2455[32] }
        bp      = { defs={} expr=v2456[32] }
        si      = { defs={0x080483f4} expr=v2457[32] }
        di      = { defs={0x080483fa} expr=v2458[32] }
        es      = { defs={} expr=v2459[16] }
        cs      = { defs={} expr=v2460[16] }
        ss      = { defs={} expr=v2461[16] }
        ds      = { defs={} expr=v2462[16] }
        fs      = { defs={} expr=v2463[16] }
        gs      = { defs={} expr=v2464[16] }
        cf      = { defs={} expr=v2465[1] }
        ?1      = { defs={} expr=v2466[1] }
        pf      = { defs={} expr=v2467[1] }
        ?3      = { defs={} expr=v2468[1] }
        af      = { defs={} expr=v2469[1] }
        ?5      = { defs={} expr=v2470[1] }
        zf      = { defs={} expr=v2471[1] }
        sf      = { defs={} expr=v2472[1] }
        tf      = { defs={} expr=v2473[1] }
        if      = { defs={} expr=v2474[1] }
        df      = { defs={} expr=v2475[1] }
        of      = { defs={} expr=v2476[1] }
        iopl0   = { defs={} expr=v2477[1] }
        iopl1   = { defs={} expr=v2478[1] }
        nt      = { defs={} expr=v2479[1] }
        ?15     = { defs={} expr=v2480[1] }
        rf      = { defs={} expr=v2481[1] }
        vm      = { defs={} expr=v2482[1] }
        ac      = { defs={} expr=v2483[1] }
        vif     = { defs={} expr=v2484[1] }
        vip     = { defs={} expr=v2485[1] }
        id      = { defs={} expr=v2486[1] }
        ?22     = { defs={} expr=v2487[1] }
        ?23     = { defs={} expr=v2488[1] }
        ?24     = { defs={} expr=v2489[1] }
        ?25     = { defs={} expr=v2490[1] }
        ?26     = { defs={} expr=v2491[1] }
        ?27     = { defs={} expr=v2492[1] }
        ?28     = { defs={} expr=v2493[1] }
        ?29     = { defs={} expr=v2494[1] }
        ?30     = { defs={} expr=v2495[1] }
        ?31     = { defs={} expr=v2496[1] }
        ip      = { defs={0x080483f4,0x080483fa} expr=0x08048400[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048410:push   ebp
    registers:
        ax      = { defs={} expr=v2545[32] }
        cx      = { defs={} expr=v2546[32] }
        dx      = { defs={} expr=v2547[32] }
        bx      = { defs={} expr=v2548[32] }
        sp      = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
        bp      = { defs={} expr=v2550[32] }
        si      = { defs={} expr=v2551[32] }
        di      = { defs={} expr=v2552[32] }
        es      = { defs={} expr=v2553[16] }
        cs      = { defs={} expr=v2554[16] }
        ss      = { defs={} expr=v2555[16] }
        ds      = { defs={} expr=v2556[16] }
        fs      = { defs={} expr=v2557[16] }
        gs      = { defs={} expr=v2558[16] }
        cf      = { defs={} expr=v2559[1] }
        ?1      = { defs={} expr=v2560[1] }
        pf      = { defs={} expr=v2561[1] }
        ?3      = { defs={} expr=v2562[1] }
        af      = { defs={} expr=v2563[1] }
        ?5      = { defs={} expr=v2564[1] }
        zf      = { defs={} expr=v2565[1] }
        sf      = { defs={} expr=v2566[1] }
        tf      = { defs={} expr=v2567[1] }
        if      = { defs={} expr=v2568[1] }
        df      = { defs={} expr=v2569[1] }
        of      = { defs={} expr=v2570[1] }
        iopl0   = { defs={} expr=v2571[1] }
        iopl1   = { defs={} expr=v2572[1] }
        nt      = { defs={} expr=v2573[1] }
        ?15     = { defs={} expr=v2574[1] }
        rf      = { defs={} expr=v2575[1] }
        vm      = { defs={} expr=v2576[1] }
        ac      = { defs={} expr=v2577[1] }
        vif     = { defs={} expr=v2578[1] }
        vip     = { defs={} expr=v2579[1] }
        id      = { defs={} expr=v2580[1] }
        ?22     = { defs={} expr=v2581[1] }
        ?23     = { defs={} expr=v2582[1] }
        ?24     = { defs={} expr=v2583[1] }
        ?25     = { defs={} expr=v2584[1] }
        ?26     = { defs={} expr=v2585[1] }
        ?27     = { defs={} expr=v2586[1] }
        ?28     = { defs={} expr=v2587[1] }
        ?29     = { defs={} expr=v2588[1] }
        ?30     = { defs={} expr=v2589[1] }
        ?31     = { defs={} expr=v2590[1] }
        ip      = { defs={0x08048410} expr=0x08048411[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2550[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2550[32]) }
          flags = { }
    init mem:
0x8048411:mov    edx, 0x08048480<handler>
    registers:
        ax      = { defs={} expr=v2545[32] }
        cx      = { defs={} expr=v2546[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2548[32] }
        sp      = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
        bp      = { defs={} expr=v2550[32] }
        si      = { defs={} expr=v2551[32] }
        di      = { defs={} expr=v2552[32] }
        es      = { defs={} expr=v2553[16] }
        cs      = { defs={} expr=v2554[16] }
        ss      = { defs={} expr=v2555[16] }
        ds      = { defs={} expr=v2556[16] }
        fs      = { defs={} expr=v2557[16] }
        gs      = { defs={} expr=v2558[16] }
        cf      = { defs={} expr=v2559[1] }
        ?1      = { defs={} expr=v2560[1] }
        pf      = { defs={} expr=v2561[1] }
        ?3      = { defs={} expr=v2562[1] }
        af      = { defs={} expr=v2563[1] }
        ?5      = { defs={} expr=v2564[1] }
        zf      = { defs={} expr=v2565[1] }
        sf      = { defs={} expr=v2566[1] }
        tf      = { defs={} expr=v2567[1] }
        if      = { defs={} expr=v2568[1] }
        df      = { defs={} expr=v2569[1] }
        of      = { defs={} expr=v2570[1] }
        iopl0   = { defs={} expr=v2571[1] }
        iopl1   = { defs={} expr=v2572[1] }
        nt      = { defs={} expr=v2573[1] }
        ?15     = { defs={} expr=v2574[1] }
        rf      = { defs={} expr=v2575[1] }
        vm      = { defs={} expr=v2576[1] }
        ac      = { defs={} expr=v2577[1] }
        vif     = { defs={} expr=v2578[1] }
        vip     = { defs={} expr=v2579[1] }
        id      = { defs={} expr=v2580[1] }
        ?22     = { defs={} expr=v2581[1] }
        ?23     = { defs={} expr=v2582[1] }
        ?24     = { defs={} expr=v2583[1] }
        ?25     = { defs={} expr=v2584[1] }
        ?26     = { defs={} expr=v2585[1] }
        ?27     = { defs={} expr=v2586[1] }
        ?28     = { defs={} expr=v2587[1] }
        ?29     = { defs={} expr=v2588[1] }
        ?30     = { defs={} expr=v2589[1] }
        ?31     = { defs={} expr=v2590[1] }
        ip      = { defs={0x08048410,0x08048411} expr=0x08048416[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2550[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2550[32]) }
          flags = { }
    init mem:
0x8048416:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2545[32] }
        cx      = { defs={} expr=v2546[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2548[32] }
        sp      = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2549[32] -4[32]) }
        si      = { defs={} expr=v2551[32] }
        di      = { defs={} expr=v2552[32] }
        es      = { defs={} expr=v2553[16] }
        cs      = { defs={} expr=v2554[16] }
        ss      = { defs={} expr=v2555[16] }
        ds      = { defs={} expr=v2556[16] }
        fs      = { defs={} expr=v2557[16] }
        gs      = { defs={} expr=v2558[16] }
        cf      = { defs={} expr=v2559[1] }
        ?1      = { defs={} expr=v2560[1] }
        pf      = { defs={} expr=v2561[1] }
        ?3      = { defs={} expr=v2562[1] }
        af      = { defs={} expr=v2563[1] }
        ?5      = { defs={} expr=v2564[1] }
        zf      = { defs={} expr=v2565[1] }
        sf      = { defs={} expr=v2566[1] }
        tf      = { defs={} expr=v2567[1] }
        if      = { defs={} expr=v2568[1] }
        df      = { defs={} expr=v2569[1] }
        of      = { defs={} expr=v2570[1] }
        iopl0   = { defs={} expr=v2571[1] }
        iopl1   = { defs={} expr=v2572[1] }
        nt      = { defs={} expr=v2573[1] }
        ?15     = { defs={} expr=v2574[1] }
        rf      = { defs={} expr=v2575[1] }
        vm      = { defs={} expr=v2576[1] }
        ac      = { defs={} expr=v2577[1] }
        vif     = { defs={} expr=v2578[1] }
        vip     = { defs={} expr=v2579[1] }
        id      = { defs={} expr=v2580[1] }
        ?22     = { defs={} expr=v2581[1] }
        ?23     = { defs={} expr=v2582[1] }
        ?24     = { defs={} expr=v2583[1] }
        ?25     = { defs={} expr=v2584[1] }
        ?26     = { defs={} expr=v2585[1] }
        ?27     = { defs={} expr=v2586[1] }
        ?28     = { defs={} expr=v2587[1] }
        ?29     = { defs={} expr=v2588[1] }
        ?30     = { defs={} expr=v2589[1] }
        ?31     = { defs={} expr=v2590[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416} expr=0x08048418[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2550[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2550[32]) }
          flags = { }
    init mem:
0x8048418:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2545[32] }
        cx      = { defs={} expr=v2546[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2548[32] }
        sp      = { defs={0x08048410,0x08048418} expr=(add[32] (add[32] v2549[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2549[32] -4[32]) }
        si      = { defs={} expr=v2551[32] }
        di      = { defs={} expr=v2552[32] }
        es      = { defs={} expr=v2553[16] }
        cs      = { defs={} expr=v2554[16] }
        ss      = { defs={} expr=v2555[16] }
        ds      = { defs={} expr=v2556[16] }
        fs      = { defs={} expr=v2557[16] }
        gs      = { defs={} expr=v2558[16] }
        cf      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2549[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2549[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2560[1] }
        pf      = { defs={0x08048410,0x08048418} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2549[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2549[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2562[1] }
        af      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2549[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2549[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2564[1] }
        zf      = { defs={0x08048410,0x08048418} expr=(zerop[1] (add[32] (add[32] v2549[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048410,0x08048418} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2549[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2567[1] }
        if      = { defs={} expr=v2568[1] }
        df      = { defs={} expr=v2569[1] }
        of      = { defs={0x08048410,0x08048418} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2549[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2549[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2549[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2549[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2571[1] }
        iopl1   = { defs={} expr=v2572[1] }
        nt      = { defs={} expr=v2573[1] }
        ?15     = { defs={} expr=v2574[1] }
        rf      = { defs={} expr=v2575[1] }
        vm      = { defs={} expr=v2576[1] }
        ac      = { defs={} expr=v2577[1] }
        vif     = { defs={} expr=v2578[1] }
        vip     = { defs={} expr=v2579[1] }
        id      = { defs={} expr=v2580[1] }
        ?22     = { defs={} expr=v2581[1] }
        ?23     = { defs={} expr=v2582[1] }
        ?24     = { defs={} expr=v2583[1] }
        ?25     = { defs={} expr=v2584[1] }
        ?26     = { defs={} expr=v2585[1] }
        ?27     = { defs={} expr=v2586[1] }
        ?28     = { defs={} expr=v2587[1] }
        ?29     = { defs={} expr=v2588[1] }
        ?30     = { defs={} expr=v2589[1] }
        ?31     = { defs={} expr=v2590[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418} expr=0x0804841b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2550[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2550[32]) }
          flags = { }
    init mem:
0x804841b:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v2545[32] }
        cx      = { defs={} expr=v2546[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2548[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2549[32] -4[32]) }
        si      = { defs={} expr=v2551[32] }
        di      = { defs={} expr=v2552[32] }
        es      = { defs={} expr=v2553[16] }
        cs      = { defs={} expr=v2554[16] }
        ss      = { defs={} expr=v2555[16] }
        ds      = { defs={} expr=v2556[16] }
        fs      = { defs={} expr=v2557[16] }
        gs      = { defs={} expr=v2558[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v2560[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v2562[1] }
        af      = { defs={0x0804841b} expr=v2591[1] }
        ?5      = { defs={} expr=v2564[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v2567[1] }
        if      = { defs={} expr=v2568[1] }
        df      = { defs={} expr=v2569[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v2571[1] }
        iopl1   = { defs={} expr=v2572[1] }
        nt      = { defs={} expr=v2573[1] }
        ?15     = { defs={} expr=v2574[1] }
        rf      = { defs={} expr=v2575[1] }
        vm      = { defs={} expr=v2576[1] }
        ac      = { defs={} expr=v2577[1] }
        vif     = { defs={} expr=v2578[1] }
        vip     = { defs={} expr=v2579[1] }
        id      = { defs={} expr=v2580[1] }
        ?22     = { defs={} expr=v2581[1] }
        ?23     = { defs={} expr=v2582[1] }
        ?24     = { defs={} expr=v2583[1] }
        ?25     = { defs={} expr=v2584[1] }
        ?26     = { defs={} expr=v2585[1] }
        ?27     = { defs={} expr=v2586[1] }
        ?28     = { defs={} expr=v2587[1] }
        ?29     = { defs={} expr=v2588[1] }
        ?30     = { defs={} expr=v2589[1] }
        ?31     = { defs={} expr=v2590[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b} expr=0x0804841e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2550[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2550[32]) }
          flags = { }
    init mem:
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
    registers:
        ax      = { defs={} expr=v2545[32] }
        cx      = { defs={} expr=v2546[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2548[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2549[32] -4[32]) }
        si      = { defs={} expr=v2551[32] }
        di      = { defs={} expr=v2552[32] }
        es      = { defs={} expr=v2553[16] }
        cs      = { defs={} expr=v2554[16] }
        ss      = { defs={} expr=v2555[16] }
        ds      = { defs={} expr=v2556[16] }
        fs      = { defs={} expr=v2557[16] }
        gs      = { defs={} expr=v2558[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v2560[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v2562[1] }
        af      = { defs={0x0804841b} expr=v2591[1] }
        ?5      = { defs={} expr=v2564[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v2567[1] }
        if      = { defs={} expr=v2568[1] }
        df      = { defs={} expr=v2569[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v2571[1] }
        iopl1   = { defs={} expr=v2572[1] }
        nt      = { defs={} expr=v2573[1] }
        ?15     = { defs={} expr=v2574[1] }
        rf      = { defs={} expr=v2575[1] }
        vm      = { defs={} expr=v2576[1] }
        ac      = { defs={} expr=v2577[1] }
        vif     = { defs={} expr=v2578[1] }
        vip     = { defs={} expr=v2579[1] }
        id      = { defs={} expr=v2580[1] }
        ?22     = { defs={} expr=v2581[1] }
        ?23     = { defs={} expr=v2582[1] }
        ?24     = { defs={} expr=v2583[1] }
        ?25     = { defs={} expr=v2584[1] }
        ?26     = { defs={} expr=v2585[1] }
        ?27     = { defs={} expr=v2586[1] }
        ?28     = { defs={} expr=v2587[1] }
        ?29     = { defs={} expr=v2588[1] }
        ?30     = { defs={} expr=v2589[1] }
        ?31     = { defs={} expr=v2590[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e} expr=0x08048422[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2550[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2550[32]) }
          flags = { }
    init mem:
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
    registers:
        ax      = { defs={} expr=v2545[32] }
        cx      = { defs={} expr=v2546[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2548[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2549[32] -4[32]) }
        si      = { defs={} expr=v2551[32] }
        di      = { defs={} expr=v2552[32] }
        es      = { defs={} expr=v2553[16] }
        cs      = { defs={} expr=v2554[16] }
        ss      = { defs={} expr=v2555[16] }
        ds      = { defs={} expr=v2556[16] }
        fs      = { defs={} expr=v2557[16] }
        gs      = { defs={} expr=v2558[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v2560[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v2562[1] }
        af      = { defs={0x0804841b} expr=v2591[1] }
        ?5      = { defs={} expr=v2564[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v2567[1] }
        if      = { defs={} expr=v2568[1] }
        df      = { defs={} expr=v2569[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v2571[1] }
        iopl1   = { defs={} expr=v2572[1] }
        nt      = { defs={} expr=v2573[1] }
        ?15     = { defs={} expr=v2574[1] }
        rf      = { defs={} expr=v2575[1] }
        vm      = { defs={} expr=v2576[1] }
        ac      = { defs={} expr=v2577[1] }
        vif     = { defs={} expr=v2578[1] }
        vip     = { defs={} expr=v2579[1] }
        id      = { defs={} expr=v2580[1] }
        ?22     = { defs={} expr=v2581[1] }
        ?23     = { defs={} expr=v2582[1] }
        ?24     = { defs={} expr=v2583[1] }
        ?25     = { defs={} expr=v2584[1] }
        ?26     = { defs={} expr=v2585[1] }
        ?27     = { defs={} expr=v2586[1] }
        ?28     = { defs={} expr=v2587[1] }
        ?29     = { defs={} expr=v2588[1] }
        ?30     = { defs={} expr=v2589[1] }
        ?31     = { defs={} expr=v2590[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422} expr=0x08048429[32] }
    memory:
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2550[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2550[32]) }
          flags = { }
    init mem:
0x8048429:call   0x080482f0<signal@plt>
    registers:
        ax      = { defs={} expr=v2545[32] }
        cx      = { defs={} expr=v2546[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2548[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2549[32] -4[32]) }
        si      = { defs={} expr=v2551[32] }
        di      = { defs={} expr=v2552[32] }
        es      = { defs={} expr=v2553[16] }
        cs      = { defs={} expr=v2554[16] }
        ss      = { defs={} expr=v2555[16] }
        ds      = { defs={} expr=v2556[16] }
        fs      = { defs={} expr=v2557[16] }
        gs      = { defs={} expr=v2558[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v2560[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v2562[1] }
        af      = { defs={0x0804841b} expr=v2591[1] }
        ?5      = { defs={} expr=v2564[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v2567[1] }
        if      = { defs={} expr=v2568[1] }
        df      = { defs={} expr=v2569[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v2571[1] }
        iopl1   = { defs={} expr=v2572[1] }
        nt      = { defs={} expr=v2573[1] }
        ?15     = { defs={} expr=v2574[1] }
        rf      = { defs={} expr=v2575[1] }
        vm      = { defs={} expr=v2576[1] }
        ac      = { defs={} expr=v2577[1] }
        vif     = { defs={} expr=v2578[1] }
        vip     = { defs={} expr=v2579[1] }
        id      = { defs={} expr=v2580[1] }
        ?22     = { defs={} expr=v2581[1] }
        ?23     = { defs={} expr=v2582[1] }
        ?24     = { defs={} expr=v2583[1] }
        ?25     = { defs={} expr=v2584[1] }
        ?26     = { defs={} expr=v2585[1] }
        ?27     = { defs={} expr=v2586[1] }
        ?28     = { defs={} expr=v2587[1] }
        ?29     = { defs={} expr=v2588[1] }
        ?30     = { defs={} expr=v2589[1] }
        ?31     = { defs={} expr=v2590[1] }
        ip      = { defs={0x08048429} expr=0x080482f0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) -4[32]) }
          value = { defs={} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v2549[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2550[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2549[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2550[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2549[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2550[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v2640[32] }
        cx      = { defs={} expr=v2641[32] }
        dx      = { defs={} expr=v2642[32] }
        bx      = { defs={} expr=v2643[32] }
        sp      = { defs={0x0804842e} expr=v2645[32] }
        bp      = { defs={} expr=v2645[32] }
        si      = { defs={} expr=v2646[32] }
        di      = { defs={} expr=v2647[32] }
        es      = { defs={} expr=v2648[16] }
        cs      = { defs={} expr=v2649[16] }
        ss      = { defs={} expr=v2650[16] }
        ds      = { defs={} expr=v2651[16] }
        fs      = { defs={} expr=v2652[16] }
        gs      = { defs={} expr=v2653[16] }
        cf      = { defs={} expr=v2654[1] }
        ?1      = { defs={} expr=v2655[1] }
        pf      = { defs={} expr=v2656[1] }
        ?3      = { defs={} expr=v2657[1] }
        af      = { defs={} expr=v2658[1] }
        ?5      = { defs={} expr=v2659[1] }
        zf      = { defs={} expr=v2660[1] }
        sf      = { defs={} expr=v2661[1] }
        tf      = { defs={} expr=v2662[1] }
        if      = { defs={} expr=v2663[1] }
        df      = { defs={} expr=v2664[1] }
        of      = { defs={} expr=v2665[1] }
        iopl0   = { defs={} expr=v2666[1] }
        iopl1   = { defs={} expr=v2667[1] }
        nt      = { defs={} expr=v2668[1] }
        ?15     = { defs={} expr=v2669[1] }
        rf      = { defs={} expr=v2670[1] }
        vm      = { defs={} expr=v2671[1] }
        ac      = { defs={} expr=v2672[1] }
        vif     = { defs={} expr=v2673[1] }
        vip     = { defs={} expr=v2674[1] }
        id      = { defs={} expr=v2675[1] }
        ?22     = { defs={} expr=v2676[1] }
        ?23     = { defs={} expr=v2677[1] }
        ?24     = { defs={} expr=v2678[1] }
        ?25     = { defs={} expr=v2679[1] }
        ?26     = { defs={} expr=v2680[1] }
        ?27     = { defs={} expr=v2681[1] }
        ?28     = { defs={} expr=v2682[1] }
        ?29     = { defs={} expr=v2683[1] }
        ?30     = { defs={} expr=v2684[1] }
        ?31     = { defs={} expr=v2685[1] }
        ip      = { defs={0x0804842e} expr=0x08048430[32] }
    memory:
    init mem:
0x8048430:xor    eax, eax
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v2641[32] }
        dx      = { defs={} expr=v2642[32] }
        bx      = { defs={} expr=v2643[32] }
        sp      = { defs={0x0804842e} expr=v2645[32] }
        bp      = { defs={} expr=v2645[32] }
        si      = { defs={} expr=v2646[32] }
        di      = { defs={} expr=v2647[32] }
        es      = { defs={} expr=v2648[16] }
        cs      = { defs={} expr=v2649[16] }
        ss      = { defs={} expr=v2650[16] }
        ds      = { defs={} expr=v2651[16] }
        fs      = { defs={} expr=v2652[16] }
        gs      = { defs={} expr=v2653[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v2655[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v2657[1] }
        af      = { defs={0x08048430} expr=v2686[1] }
        ?5      = { defs={} expr=v2659[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v2662[1] }
        if      = { defs={} expr=v2663[1] }
        df      = { defs={} expr=v2664[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v2666[1] }
        iopl1   = { defs={} expr=v2667[1] }
        nt      = { defs={} expr=v2668[1] }
        ?15     = { defs={} expr=v2669[1] }
        rf      = { defs={} expr=v2670[1] }
        vm      = { defs={} expr=v2671[1] }
        ac      = { defs={} expr=v2672[1] }
        vif     = { defs={} expr=v2673[1] }
        vip     = { defs={} expr=v2674[1] }
        id      = { defs={} expr=v2675[1] }
        ?22     = { defs={} expr=v2676[1] }
        ?23     = { defs={} expr=v2677[1] }
        ?24     = { defs={} expr=v2678[1] }
        ?25     = { defs={} expr=v2679[1] }
        ?26     = { defs={} expr=v2680[1] }
        ?27     = { defs={} expr=v2681[1] }
        ?28     = { defs={} expr=v2682[1] }
        ?29     = { defs={} expr=v2683[1] }
        ?30     = { defs={} expr=v2684[1] }
        ?31     = { defs={} expr=v2685[1] }
        ip      = { defs={0x0804842e,0x08048430} expr=0x08048432[32] }
    memory:
    init mem:
0x8048432:pop    ebp
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v2641[32] }
        dx      = { defs={} expr=v2642[32] }
        bx      = { defs={} expr=v2643[32] }
        sp      = { defs={0x0804842e,0x08048432} expr=(add[32] v2645[32] 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2689[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2690[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2691[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2692[8]))) }
        si      = { defs={} expr=v2646[32] }
        di      = { defs={} expr=v2647[32] }
        es      = { defs={} expr=v2648[16] }
        cs      = { defs={} expr=v2649[16] }
        ss      = { defs={} expr=v2650[16] }
        ds      = { defs={} expr=v2651[16] }
        fs      = { defs={} expr=v2652[16] }
        gs      = { defs={} expr=v2653[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v2655[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v2657[1] }
        af      = { defs={0x08048430} expr=v2686[1] }
        ?5      = { defs={} expr=v2659[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v2662[1] }
        if      = { defs={} expr=v2663[1] }
        df      = { defs={} expr=v2664[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v2666[1] }
        iopl1   = { defs={} expr=v2667[1] }
        nt      = { defs={} expr=v2668[1] }
        ?15     = { defs={} expr=v2669[1] }
        rf      = { defs={} expr=v2670[1] }
        vm      = { defs={} expr=v2671[1] }
        ac      = { defs={} expr=v2672[1] }
        vif     = { defs={} expr=v2673[1] }
        vip     = { defs={} expr=v2674[1] }
        id      = { defs={} expr=v2675[1] }
        ?22     = { defs={} expr=v2676[1] }
        ?23     = { defs={} expr=v2677[1] }
        ?24     = { defs={} expr=v2678[1] }
        ?25     = { defs={} expr=v2679[1] }
        ?26     = { defs={} expr=v2680[1] }
        ?27     = { defs={} expr=v2681[1] }
        ?28     = { defs={} expr=v2682[1] }
        ?29     = { defs={} expr=v2683[1] }
        ?30     = { defs={} expr=v2684[1] }
        ?31     = { defs={} expr=v2685[1] }
        ip      = { defs={0x0804842e,0x08048430,0x08048432} expr=0x08048433[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v2645[32] 3[32]) }
          value = { defs={} expr=v2692[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2645[32] 2[32]) }
          value = { defs={} expr=v2691[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2645[32] 1[32]) }
          value = { defs={} expr=v2690[8] }
          flags = { rdonly }
        address = { defs={0x0804842e} expr=v2645[32] }
          value = { defs={} expr=v2689[8] }
          flags = { rdonly }
0x8048433:ret    
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v2641[32] }
        dx      = { defs={} expr=v2642[32] }
        bx      = { defs={} expr=v2643[32] }
        sp      = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] (add[32] v2645[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2689[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2690[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2691[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2692[8]))) }
        si      = { defs={} expr=v2646[32] }
        di      = { defs={} expr=v2647[32] }
        es      = { defs={} expr=v2648[16] }
        cs      = { defs={} expr=v2649[16] }
        ss      = { defs={} expr=v2650[16] }
        ds      = { defs={} expr=v2651[16] }
        fs      = { defs={} expr=v2652[16] }
        gs      = { defs={} expr=v2653[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v2655[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v2657[1] }
        af      = { defs={0x08048430} expr=v2686[1] }
        ?5      = { defs={} expr=v2659[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v2662[1] }
        if      = { defs={} expr=v2663[1] }
        df      = { defs={} expr=v2664[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v2666[1] }
        iopl1   = { defs={} expr=v2667[1] }
        nt      = { defs={} expr=v2668[1] }
        ?15     = { defs={} expr=v2669[1] }
        rf      = { defs={} expr=v2670[1] }
        vm      = { defs={} expr=v2671[1] }
        ac      = { defs={} expr=v2672[1] }
        vif     = { defs={} expr=v2673[1] }
        vip     = { defs={} expr=v2674[1] }
        id      = { defs={} expr=v2675[1] }
        ?22     = { defs={} expr=v2676[1] }
        ?23     = { defs={} expr=v2677[1] }
        ?24     = { defs={} expr=v2678[1] }
        ?25     = { defs={} expr=v2679[1] }
        ?26     = { defs={} expr=v2680[1] }
        ?27     = { defs={} expr=v2681[1] }
        ?28     = { defs={} expr=v2682[1] }
        ?29     = { defs={} expr=v2683[1] }
        ?30     = { defs={} expr=v2684[1] }
        ?31     = { defs={} expr=v2685[1] }
        ip      = { defs={0x08048433} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2699[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2700[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2701[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2702[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2645[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2702[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2645[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2701[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2645[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2700[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432} expr=(add[32] v2645[32] 4[32]) }
          value = { defs={} expr=v2699[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2645[32] 3[32]) }
          value = { defs={} expr=v2692[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2645[32] 2[32]) }
          value = { defs={} expr=v2691[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2645[32] 1[32]) }
          value = { defs={} expr=v2690[8] }
          flags = { rdonly }
        address = { defs={0x0804842e} expr=v2645[32] }
          value = { defs={} expr=v2689[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048440:push   ebp
    registers:
        ax      = { defs={} expr=v2755[32] }
        cx      = { defs={} expr=v2756[32] }
        dx      = { defs={} expr=v2757[32] }
        bx      = { defs={} expr=v2758[32] }
        sp      = { defs={0x08048440} expr=(add[32] v2759[32] -4[32]) }
        bp      = { defs={} expr=v2760[32] }
        si      = { defs={} expr=v2761[32] }
        di      = { defs={} expr=v2762[32] }
        es      = { defs={} expr=v2763[16] }
        cs      = { defs={} expr=v2764[16] }
        ss      = { defs={} expr=v2765[16] }
        ds      = { defs={} expr=v2766[16] }
        fs      = { defs={} expr=v2767[16] }
        gs      = { defs={} expr=v2768[16] }
        cf      = { defs={} expr=v2769[1] }
        ?1      = { defs={} expr=v2770[1] }
        pf      = { defs={} expr=v2771[1] }
        ?3      = { defs={} expr=v2772[1] }
        af      = { defs={} expr=v2773[1] }
        ?5      = { defs={} expr=v2774[1] }
        zf      = { defs={} expr=v2775[1] }
        sf      = { defs={} expr=v2776[1] }
        tf      = { defs={} expr=v2777[1] }
        if      = { defs={} expr=v2778[1] }
        df      = { defs={} expr=v2779[1] }
        of      = { defs={} expr=v2780[1] }
        iopl0   = { defs={} expr=v2781[1] }
        iopl1   = { defs={} expr=v2782[1] }
        nt      = { defs={} expr=v2783[1] }
        ?15     = { defs={} expr=v2784[1] }
        rf      = { defs={} expr=v2785[1] }
        vm      = { defs={} expr=v2786[1] }
        ac      = { defs={} expr=v2787[1] }
        vif     = { defs={} expr=v2788[1] }
        vip     = { defs={} expr=v2789[1] }
        id      = { defs={} expr=v2790[1] }
        ?22     = { defs={} expr=v2791[1] }
        ?23     = { defs={} expr=v2792[1] }
        ?24     = { defs={} expr=v2793[1] }
        ?25     = { defs={} expr=v2794[1] }
        ?26     = { defs={} expr=v2795[1] }
        ?27     = { defs={} expr=v2796[1] }
        ?28     = { defs={} expr=v2797[1] }
        ?29     = { defs={} expr=v2798[1] }
        ?30     = { defs={} expr=v2799[1] }
        ?31     = { defs={} expr=v2800[1] }
        ip      = { defs={0x08048440} expr=0x08048441[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2760[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v2759[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2760[32]) }
          flags = { }
    init mem:
0x8048441:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2755[32] }
        cx      = { defs={} expr=v2756[32] }
        dx      = { defs={} expr=v2757[32] }
        bx      = { defs={} expr=v2758[32] }
        sp      = { defs={0x08048440} expr=(add[32] v2759[32] -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v2759[32] -4[32]) }
        si      = { defs={} expr=v2761[32] }
        di      = { defs={} expr=v2762[32] }
        es      = { defs={} expr=v2763[16] }
        cs      = { defs={} expr=v2764[16] }
        ss      = { defs={} expr=v2765[16] }
        ds      = { defs={} expr=v2766[16] }
        fs      = { defs={} expr=v2767[16] }
        gs      = { defs={} expr=v2768[16] }
        cf      = { defs={} expr=v2769[1] }
        ?1      = { defs={} expr=v2770[1] }
        pf      = { defs={} expr=v2771[1] }
        ?3      = { defs={} expr=v2772[1] }
        af      = { defs={} expr=v2773[1] }
        ?5      = { defs={} expr=v2774[1] }
        zf      = { defs={} expr=v2775[1] }
        sf      = { defs={} expr=v2776[1] }
        tf      = { defs={} expr=v2777[1] }
        if      = { defs={} expr=v2778[1] }
        df      = { defs={} expr=v2779[1] }
        of      = { defs={} expr=v2780[1] }
        iopl0   = { defs={} expr=v2781[1] }
        iopl1   = { defs={} expr=v2782[1] }
        nt      = { defs={} expr=v2783[1] }
        ?15     = { defs={} expr=v2784[1] }
        rf      = { defs={} expr=v2785[1] }
        vm      = { defs={} expr=v2786[1] }
        ac      = { defs={} expr=v2787[1] }
        vif     = { defs={} expr=v2788[1] }
        vip     = { defs={} expr=v2789[1] }
        id      = { defs={} expr=v2790[1] }
        ?22     = { defs={} expr=v2791[1] }
        ?23     = { defs={} expr=v2792[1] }
        ?24     = { defs={} expr=v2793[1] }
        ?25     = { defs={} expr=v2794[1] }
        ?26     = { defs={} expr=v2795[1] }
        ?27     = { defs={} expr=v2796[1] }
        ?28     = { defs={} expr=v2797[1] }
        ?29     = { defs={} expr=v2798[1] }
        ?30     = { defs={} expr=v2799[1] }
        ?31     = { defs={} expr=v2800[1] }
        ip      = { defs={0x08048440,0x08048441} expr=0x08048443[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2760[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v2759[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2760[32]) }
          flags = { }
    init mem:
0x8048443:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2755[32] }
        cx      = { defs={} expr=v2756[32] }
        dx      = { defs={} expr=v2757[32] }
        bx      = { defs={} expr=v2758[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v2759[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v2759[32] -4[32]) }
        si      = { defs={} expr=v2761[32] }
        di      = { defs={} expr=v2762[32] }
        es      = { defs={} expr=v2763[16] }
        cs      = { defs={} expr=v2764[16] }
        ss      = { defs={} expr=v2765[16] }
        ds      = { defs={} expr=v2766[16] }
        fs      = { defs={} expr=v2767[16] }
        gs      = { defs={} expr=v2768[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2770[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2772[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2774[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v2759[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2759[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2777[1] }
        if      = { defs={} expr=v2778[1] }
        df      = { defs={} expr=v2779[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2781[1] }
        iopl1   = { defs={} expr=v2782[1] }
        nt      = { defs={} expr=v2783[1] }
        ?15     = { defs={} expr=v2784[1] }
        rf      = { defs={} expr=v2785[1] }
        vm      = { defs={} expr=v2786[1] }
        ac      = { defs={} expr=v2787[1] }
        vif     = { defs={} expr=v2788[1] }
        vip     = { defs={} expr=v2789[1] }
        id      = { defs={} expr=v2790[1] }
        ?22     = { defs={} expr=v2791[1] }
        ?23     = { defs={} expr=v2792[1] }
        ?24     = { defs={} expr=v2793[1] }
        ?25     = { defs={} expr=v2794[1] }
        ?26     = { defs={} expr=v2795[1] }
        ?27     = { defs={} expr=v2796[1] }
        ?28     = { defs={} expr=v2797[1] }
        ?29     = { defs={} expr=v2798[1] }
        ?30     = { defs={} expr=v2799[1] }
        ?31     = { defs={} expr=v2800[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443} expr=0x08048446[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2760[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v2759[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2760[32]) }
          flags = { }
    init mem:
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v2755[32] }
        cx      = { defs={} expr=v2756[32] }
        dx      = { defs={} expr=v2757[32] }
        bx      = { defs={} expr=v2758[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v2759[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v2759[32] -4[32]) }
        si      = { defs={} expr=v2761[32] }
        di      = { defs={} expr=v2762[32] }
        es      = { defs={} expr=v2763[16] }
        cs      = { defs={} expr=v2764[16] }
        ss      = { defs={} expr=v2765[16] }
        ds      = { defs={} expr=v2766[16] }
        fs      = { defs={} expr=v2767[16] }
        gs      = { defs={} expr=v2768[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2770[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2772[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2774[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v2759[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2759[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2777[1] }
        if      = { defs={} expr=v2778[1] }
        df      = { defs={} expr=v2779[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2781[1] }
        iopl1   = { defs={} expr=v2782[1] }
        nt      = { defs={} expr=v2783[1] }
        ?15     = { defs={} expr=v2784[1] }
        rf      = { defs={} expr=v2785[1] }
        vm      = { defs={} expr=v2786[1] }
        ac      = { defs={} expr=v2787[1] }
        vif     = { defs={} expr=v2788[1] }
        vip     = { defs={} expr=v2789[1] }
        id      = { defs={} expr=v2790[1] }
        ?22     = { defs={} expr=v2791[1] }
        ?23     = { defs={} expr=v2792[1] }
        ?24     = { defs={} expr=v2793[1] }
        ?25     = { defs={} expr=v2794[1] }
        ?26     = { defs={} expr=v2795[1] }
        ?27     = { defs={} expr=v2796[1] }
        ?28     = { defs={} expr=v2797[1] }
        ?29     = { defs={} expr=v2798[1] }
        ?30     = { defs={} expr=v2799[1] }
        ?31     = { defs={} expr=v2800[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443,0x08048446} expr=0x0804844d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v2759[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2760[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v2759[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2760[32]) }
          flags = { }
    init mem:
0x804844d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v2755[32] }
        cx      = { defs={} expr=v2756[32] }
        dx      = { defs={} expr=v2757[32] }
        bx      = { defs={} expr=v2758[32] }
        sp      = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v2759[32] -4[32]) }
        si      = { defs={} expr=v2761[32] }
        di      = { defs={} expr=v2762[32] }
        es      = { defs={} expr=v2763[16] }
        cs      = { defs={} expr=v2764[16] }
        ss      = { defs={} expr=v2765[16] }
        ds      = { defs={} expr=v2766[16] }
        fs      = { defs={} expr=v2767[16] }
        gs      = { defs={} expr=v2768[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2770[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2772[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2774[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v2759[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2759[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2777[1] }
        if      = { defs={} expr=v2778[1] }
        df      = { defs={} expr=v2779[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2759[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2781[1] }
        iopl1   = { defs={} expr=v2782[1] }
        nt      = { defs={} expr=v2783[1] }
        ?15     = { defs={} expr=v2784[1] }
        rf      = { defs={} expr=v2785[1] }
        vm      = { defs={} expr=v2786[1] }
        ac      = { defs={} expr=v2787[1] }
        vif     = { defs={} expr=v2788[1] }
        vip     = { defs={} expr=v2789[1] }
        id      = { defs={} expr=v2790[1] }
        ?22     = { defs={} expr=v2791[1] }
        ?23     = { defs={} expr=v2792[1] }
        ?24     = { defs={} expr=v2793[1] }
        ?25     = { defs={} expr=v2794[1] }
        ?26     = { defs={} expr=v2795[1] }
        ?27     = { defs={} expr=v2796[1] }
        ?28     = { defs={} expr=v2797[1] }
        ?29     = { defs={} expr=v2798[1] }
        ?30     = { defs={} expr=v2799[1] }
        ?31     = { defs={} expr=v2800[1] }
        ip      = { defs={0x0804844d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=82[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2759[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v2759[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2760[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2759[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2760[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v2759[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2760[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v2849[32] }
        cx      = { defs={} expr=v2850[32] }
        dx      = { defs={} expr=v2851[32] }
        bx      = { defs={} expr=v2852[32] }
        sp      = { defs={0x08048452} expr=v2854[32] }
        bp      = { defs={} expr=v2854[32] }
        si      = { defs={} expr=v2855[32] }
        di      = { defs={} expr=v2856[32] }
        es      = { defs={} expr=v2857[16] }
        cs      = { defs={} expr=v2858[16] }
        ss      = { defs={} expr=v2859[16] }
        ds      = { defs={} expr=v2860[16] }
        fs      = { defs={} expr=v2861[16] }
        gs      = { defs={} expr=v2862[16] }
        cf      = { defs={} expr=v2863[1] }
        ?1      = { defs={} expr=v2864[1] }
        pf      = { defs={} expr=v2865[1] }
        ?3      = { defs={} expr=v2866[1] }
        af      = { defs={} expr=v2867[1] }
        ?5      = { defs={} expr=v2868[1] }
        zf      = { defs={} expr=v2869[1] }
        sf      = { defs={} expr=v2870[1] }
        tf      = { defs={} expr=v2871[1] }
        if      = { defs={} expr=v2872[1] }
        df      = { defs={} expr=v2873[1] }
        of      = { defs={} expr=v2874[1] }
        iopl0   = { defs={} expr=v2875[1] }
        iopl1   = { defs={} expr=v2876[1] }
        nt      = { defs={} expr=v2877[1] }
        ?15     = { defs={} expr=v2878[1] }
        rf      = { defs={} expr=v2879[1] }
        vm      = { defs={} expr=v2880[1] }
        ac      = { defs={} expr=v2881[1] }
        vif     = { defs={} expr=v2882[1] }
        vip     = { defs={} expr=v2883[1] }
        id      = { defs={} expr=v2884[1] }
        ?22     = { defs={} expr=v2885[1] }
        ?23     = { defs={} expr=v2886[1] }
        ?24     = { defs={} expr=v2887[1] }
        ?25     = { defs={} expr=v2888[1] }
        ?26     = { defs={} expr=v2889[1] }
        ?27     = { defs={} expr=v2890[1] }
        ?28     = { defs={} expr=v2891[1] }
        ?29     = { defs={} expr=v2892[1] }
        ?30     = { defs={} expr=v2893[1] }
        ?31     = { defs={} expr=v2894[1] }
        ip      = { defs={0x08048452} expr=0x08048454[32] }
    memory:
    init mem:
0x8048454:pop    ebp
    registers:
        ax      = { defs={} expr=v2849[32] }
        cx      = { defs={} expr=v2850[32] }
        dx      = { defs={} expr=v2851[32] }
        bx      = { defs={} expr=v2852[32] }
        sp      = { defs={0x08048452,0x08048454} expr=(add[32] v2854[32] 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2897[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2898[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2899[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2900[8]))) }
        si      = { defs={} expr=v2855[32] }
        di      = { defs={} expr=v2856[32] }
        es      = { defs={} expr=v2857[16] }
        cs      = { defs={} expr=v2858[16] }
        ss      = { defs={} expr=v2859[16] }
        ds      = { defs={} expr=v2860[16] }
        fs      = { defs={} expr=v2861[16] }
        gs      = { defs={} expr=v2862[16] }
        cf      = { defs={} expr=v2863[1] }
        ?1      = { defs={} expr=v2864[1] }
        pf      = { defs={} expr=v2865[1] }
        ?3      = { defs={} expr=v2866[1] }
        af      = { defs={} expr=v2867[1] }
        ?5      = { defs={} expr=v2868[1] }
        zf      = { defs={} expr=v2869[1] }
        sf      = { defs={} expr=v2870[1] }
        tf      = { defs={} expr=v2871[1] }
        if      = { defs={} expr=v2872[1] }
        df      = { defs={} expr=v2873[1] }
        of      = { defs={} expr=v2874[1] }
        iopl0   = { defs={} expr=v2875[1] }
        iopl1   = { defs={} expr=v2876[1] }
        nt      = { defs={} expr=v2877[1] }
        ?15     = { defs={} expr=v2878[1] }
        rf      = { defs={} expr=v2879[1] }
        vm      = { defs={} expr=v2880[1] }
        ac      = { defs={} expr=v2881[1] }
        vif     = { defs={} expr=v2882[1] }
        vip     = { defs={} expr=v2883[1] }
        id      = { defs={} expr=v2884[1] }
        ?22     = { defs={} expr=v2885[1] }
        ?23     = { defs={} expr=v2886[1] }
        ?24     = { defs={} expr=v2887[1] }
        ?25     = { defs={} expr=v2888[1] }
        ?26     = { defs={} expr=v2889[1] }
        ?27     = { defs={} expr=v2890[1] }
        ?28     = { defs={} expr=v2891[1] }
        ?29     = { defs={} expr=v2892[1] }
        ?30     = { defs={} expr=v2893[1] }
        ?31     = { defs={} expr=v2894[1] }
        ip      = { defs={0x08048452,0x08048454} expr=0x08048455[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v2854[32] 3[32]) }
          value = { defs={} expr=v2900[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2854[32] 2[32]) }
          value = { defs={} expr=v2899[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2854[32] 1[32]) }
          value = { defs={} expr=v2898[8] }
          flags = { rdonly }
        address = { defs={0x08048452} expr=v2854[32] }
          value = { defs={} expr=v2897[8] }
          flags = { rdonly }
0x8048455:ret    
    registers:
        ax      = { defs={} expr=v2849[32] }
        cx      = { defs={} expr=v2850[32] }
        dx      = { defs={} expr=v2851[32] }
        bx      = { defs={} expr=v2852[32] }
        sp      = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] (add[32] v2854[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2897[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2898[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2899[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2900[8]))) }
        si      = { defs={} expr=v2855[32] }
        di      = { defs={} expr=v2856[32] }
        es      = { defs={} expr=v2857[16] }
        cs      = { defs={} expr=v2858[16] }
        ss      = { defs={} expr=v2859[16] }
        ds      = { defs={} expr=v2860[16] }
        fs      = { defs={} expr=v2861[16] }
        gs      = { defs={} expr=v2862[16] }
        cf      = { defs={} expr=v2863[1] }
        ?1      = { defs={} expr=v2864[1] }
        pf      = { defs={} expr=v2865[1] }
        ?3      = { defs={} expr=v2866[1] }
        af      = { defs={} expr=v2867[1] }
        ?5      = { defs={} expr=v2868[1] }
        zf      = { defs={} expr=v2869[1] }
        sf      = { defs={} expr=v2870[1] }
        tf      = { defs={} expr=v2871[1] }
        if      = { defs={} expr=v2872[1] }
        df      = { defs={} expr=v2873[1] }
        of      = { defs={} expr=v2874[1] }
        iopl0   = { defs={} expr=v2875[1] }
        iopl1   = { defs={} expr=v2876[1] }
        nt      = { defs={} expr=v2877[1] }
        ?15     = { defs={} expr=v2878[1] }
        rf      = { defs={} expr=v2879[1] }
        vm      = { defs={} expr=v2880[1] }
        ac      = { defs={} expr=v2881[1] }
        vif     = { defs={} expr=v2882[1] }
        vip     = { defs={} expr=v2883[1] }
        id      = { defs={} expr=v2884[1] }
        ?22     = { defs={} expr=v2885[1] }
        ?23     = { defs={} expr=v2886[1] }
        ?24     = { defs={} expr=v2887[1] }
        ?25     = { defs={} expr=v2888[1] }
        ?26     = { defs={} expr=v2889[1] }
        ?27     = { defs={} expr=v2890[1] }
        ?28     = { defs={} expr=v2891[1] }
        ?29     = { defs={} expr=v2892[1] }
        ?30     = { defs={} expr=v2893[1] }
        ?31     = { defs={} expr=v2894[1] }
        ip      = { defs={0x08048455} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2907[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2908[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2909[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2910[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2854[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2910[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2854[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2909[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2854[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2908[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454} expr=(add[32] v2854[32] 4[32]) }
          value = { defs={} expr=v2907[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2854[32] 3[32]) }
          value = { defs={} expr=v2900[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2854[32] 2[32]) }
          value = { defs={} expr=v2899[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2854[32] 1[32]) }
          value = { defs={} expr=v2898[8] }
          flags = { rdonly }
        address = { defs={0x08048452} expr=v2854[32] }
          value = { defs={} expr=v2897[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048460:push   ebp
    registers:
        ax      = { defs={} expr=v2963[32] }
        cx      = { defs={} expr=v2964[32] }
        dx      = { defs={} expr=v2965[32] }
        bx      = { defs={} expr=v2966[32] }
        sp      = { defs={0x08048460} expr=(add[32] v2967[32] -4[32]) }
        bp      = { defs={} expr=v2968[32] }
        si      = { defs={} expr=v2969[32] }
        di      = { defs={} expr=v2970[32] }
        es      = { defs={} expr=v2971[16] }
        cs      = { defs={} expr=v2972[16] }
        ss      = { defs={} expr=v2973[16] }
        ds      = { defs={} expr=v2974[16] }
        fs      = { defs={} expr=v2975[16] }
        gs      = { defs={} expr=v2976[16] }
        cf      = { defs={} expr=v2977[1] }
        ?1      = { defs={} expr=v2978[1] }
        pf      = { defs={} expr=v2979[1] }
        ?3      = { defs={} expr=v2980[1] }
        af      = { defs={} expr=v2981[1] }
        ?5      = { defs={} expr=v2982[1] }
        zf      = { defs={} expr=v2983[1] }
        sf      = { defs={} expr=v2984[1] }
        tf      = { defs={} expr=v2985[1] }
        if      = { defs={} expr=v2986[1] }
        df      = { defs={} expr=v2987[1] }
        of      = { defs={} expr=v2988[1] }
        iopl0   = { defs={} expr=v2989[1] }
        iopl1   = { defs={} expr=v2990[1] }
        nt      = { defs={} expr=v2991[1] }
        ?15     = { defs={} expr=v2992[1] }
        rf      = { defs={} expr=v2993[1] }
        vm      = { defs={} expr=v2994[1] }
        ac      = { defs={} expr=v2995[1] }
        vif     = { defs={} expr=v2996[1] }
        vip     = { defs={} expr=v2997[1] }
        id      = { defs={} expr=v2998[1] }
        ?22     = { defs={} expr=v2999[1] }
        ?23     = { defs={} expr=v3000[1] }
        ?24     = { defs={} expr=v3001[1] }
        ?25     = { defs={} expr=v3002[1] }
        ?26     = { defs={} expr=v3003[1] }
        ?27     = { defs={} expr=v3004[1] }
        ?28     = { defs={} expr=v3005[1] }
        ?29     = { defs={} expr=v3006[1] }
        ?30     = { defs={} expr=v3007[1] }
        ?31     = { defs={} expr=v3008[1] }
        ip      = { defs={0x08048460} expr=0x08048461[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2968[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2968[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2968[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v2967[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2968[32]) }
          flags = { }
    init mem:
0x8048461:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2963[32] }
        cx      = { defs={} expr=v2964[32] }
        dx      = { defs={} expr=v2965[32] }
        bx      = { defs={} expr=v2966[32] }
        sp      = { defs={0x08048460} expr=(add[32] v2967[32] -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v2967[32] -4[32]) }
        si      = { defs={} expr=v2969[32] }
        di      = { defs={} expr=v2970[32] }
        es      = { defs={} expr=v2971[16] }
        cs      = { defs={} expr=v2972[16] }
        ss      = { defs={} expr=v2973[16] }
        ds      = { defs={} expr=v2974[16] }
        fs      = { defs={} expr=v2975[16] }
        gs      = { defs={} expr=v2976[16] }
        cf      = { defs={} expr=v2977[1] }
        ?1      = { defs={} expr=v2978[1] }
        pf      = { defs={} expr=v2979[1] }
        ?3      = { defs={} expr=v2980[1] }
        af      = { defs={} expr=v2981[1] }
        ?5      = { defs={} expr=v2982[1] }
        zf      = { defs={} expr=v2983[1] }
        sf      = { defs={} expr=v2984[1] }
        tf      = { defs={} expr=v2985[1] }
        if      = { defs={} expr=v2986[1] }
        df      = { defs={} expr=v2987[1] }
        of      = { defs={} expr=v2988[1] }
        iopl0   = { defs={} expr=v2989[1] }
        iopl1   = { defs={} expr=v2990[1] }
        nt      = { defs={} expr=v2991[1] }
        ?15     = { defs={} expr=v2992[1] }
        rf      = { defs={} expr=v2993[1] }
        vm      = { defs={} expr=v2994[1] }
        ac      = { defs={} expr=v2995[1] }
        vif     = { defs={} expr=v2996[1] }
        vip     = { defs={} expr=v2997[1] }
        id      = { defs={} expr=v2998[1] }
        ?22     = { defs={} expr=v2999[1] }
        ?23     = { defs={} expr=v3000[1] }
        ?24     = { defs={} expr=v3001[1] }
        ?25     = { defs={} expr=v3002[1] }
        ?26     = { defs={} expr=v3003[1] }
        ?27     = { defs={} expr=v3004[1] }
        ?28     = { defs={} expr=v3005[1] }
        ?29     = { defs={} expr=v3006[1] }
        ?30     = { defs={} expr=v3007[1] }
        ?31     = { defs={} expr=v3008[1] }
        ip      = { defs={0x08048460,0x08048461} expr=0x08048463[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2968[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2968[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2968[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v2967[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2968[32]) }
          flags = { }
    init mem:
0x8048463:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2963[32] }
        cx      = { defs={} expr=v2964[32] }
        dx      = { defs={} expr=v2965[32] }
        bx      = { defs={} expr=v2966[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v2967[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v2967[32] -4[32]) }
        si      = { defs={} expr=v2969[32] }
        di      = { defs={} expr=v2970[32] }
        es      = { defs={} expr=v2971[16] }
        cs      = { defs={} expr=v2972[16] }
        ss      = { defs={} expr=v2973[16] }
        ds      = { defs={} expr=v2974[16] }
        fs      = { defs={} expr=v2975[16] }
        gs      = { defs={} expr=v2976[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2978[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2980[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2982[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v2967[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2967[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2985[1] }
        if      = { defs={} expr=v2986[1] }
        df      = { defs={} expr=v2987[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2989[1] }
        iopl1   = { defs={} expr=v2990[1] }
        nt      = { defs={} expr=v2991[1] }
        ?15     = { defs={} expr=v2992[1] }
        rf      = { defs={} expr=v2993[1] }
        vm      = { defs={} expr=v2994[1] }
        ac      = { defs={} expr=v2995[1] }
        vif     = { defs={} expr=v2996[1] }
        vip     = { defs={} expr=v2997[1] }
        id      = { defs={} expr=v2998[1] }
        ?22     = { defs={} expr=v2999[1] }
        ?23     = { defs={} expr=v3000[1] }
        ?24     = { defs={} expr=v3001[1] }
        ?25     = { defs={} expr=v3002[1] }
        ?26     = { defs={} expr=v3003[1] }
        ?27     = { defs={} expr=v3004[1] }
        ?28     = { defs={} expr=v3005[1] }
        ?29     = { defs={} expr=v3006[1] }
        ?30     = { defs={} expr=v3007[1] }
        ?31     = { defs={} expr=v3008[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463} expr=0x08048466[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2968[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2968[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2968[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v2967[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2968[32]) }
          flags = { }
    init mem:
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v2963[32] }
        cx      = { defs={} expr=v2964[32] }
        dx      = { defs={} expr=v2965[32] }
        bx      = { defs={} expr=v2966[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v2967[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v2967[32] -4[32]) }
        si      = { defs={} expr=v2969[32] }
        di      = { defs={} expr=v2970[32] }
        es      = { defs={} expr=v2971[16] }
        cs      = { defs={} expr=v2972[16] }
        ss      = { defs={} expr=v2973[16] }
        ds      = { defs={} expr=v2974[16] }
        fs      = { defs={} expr=v2975[16] }
        gs      = { defs={} expr=v2976[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2978[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2980[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2982[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v2967[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2967[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2985[1] }
        if      = { defs={} expr=v2986[1] }
        df      = { defs={} expr=v2987[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2989[1] }
        iopl1   = { defs={} expr=v2990[1] }
        nt      = { defs={} expr=v2991[1] }
        ?15     = { defs={} expr=v2992[1] }
        rf      = { defs={} expr=v2993[1] }
        vm      = { defs={} expr=v2994[1] }
        ac      = { defs={} expr=v2995[1] }
        vif     = { defs={} expr=v2996[1] }
        vip     = { defs={} expr=v2997[1] }
        id      = { defs={} expr=v2998[1] }
        ?22     = { defs={} expr=v2999[1] }
        ?23     = { defs={} expr=v3000[1] }
        ?24     = { defs={} expr=v3001[1] }
        ?25     = { defs={} expr=v3002[1] }
        ?26     = { defs={} expr=v3003[1] }
        ?27     = { defs={} expr=v3004[1] }
        ?28     = { defs={} expr=v3005[1] }
        ?29     = { defs={} expr=v3006[1] }
        ?30     = { defs={} expr=v3007[1] }
        ?31     = { defs={} expr=v3008[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463,0x08048466} expr=0x0804846d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v2967[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2968[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2968[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2968[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v2967[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2968[32]) }
          flags = { }
    init mem:
0x804846d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v2963[32] }
        cx      = { defs={} expr=v2964[32] }
        dx      = { defs={} expr=v2965[32] }
        bx      = { defs={} expr=v2966[32] }
        sp      = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v2967[32] -4[32]) }
        si      = { defs={} expr=v2969[32] }
        di      = { defs={} expr=v2970[32] }
        es      = { defs={} expr=v2971[16] }
        cs      = { defs={} expr=v2972[16] }
        ss      = { defs={} expr=v2973[16] }
        ds      = { defs={} expr=v2974[16] }
        fs      = { defs={} expr=v2975[16] }
        gs      = { defs={} expr=v2976[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2978[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2980[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2982[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v2967[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2967[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2985[1] }
        if      = { defs={} expr=v2986[1] }
        df      = { defs={} expr=v2987[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2967[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2989[1] }
        iopl1   = { defs={} expr=v2990[1] }
        nt      = { defs={} expr=v2991[1] }
        ?15     = { defs={} expr=v2992[1] }
        rf      = { defs={} expr=v2993[1] }
        vm      = { defs={} expr=v2994[1] }
        ac      = { defs={} expr=v2995[1] }
        vif     = { defs={} expr=v2996[1] }
        vip     = { defs={} expr=v2997[1] }
        id      = { defs={} expr=v2998[1] }
        ?22     = { defs={} expr=v2999[1] }
        ?23     = { defs={} expr=v3000[1] }
        ?24     = { defs={} expr=v3001[1] }
        ?25     = { defs={} expr=v3002[1] }
        ?26     = { defs={} expr=v3003[1] }
        ?27     = { defs={} expr=v3004[1] }
        ?28     = { defs={} expr=v3005[1] }
        ?29     = { defs={} expr=v3006[1] }
        ?30     = { defs={} expr=v3007[1] }
        ?31     = { defs={} expr=v3008[1] }
        ip      = { defs={0x0804846d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=114[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2967[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v2967[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2968[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2968[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2967[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2968[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v2967[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2968[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v3057[32] }
        cx      = { defs={} expr=v3058[32] }
        dx      = { defs={} expr=v3059[32] }
        bx      = { defs={} expr=v3060[32] }
        sp      = { defs={} expr=v3061[32] }
        bp      = { defs={} expr=v3062[32] }
        si      = { defs={} expr=v3063[32] }
        di      = { defs={} expr=v3064[32] }
        es      = { defs={} expr=v3065[16] }
        cs      = { defs={} expr=v3066[16] }
        ss      = { defs={} expr=v3067[16] }
        ds      = { defs={} expr=v3068[16] }
        fs      = { defs={} expr=v3069[16] }
        gs      = { defs={} expr=v3070[16] }
        cf      = { defs={} expr=v3071[1] }
        ?1      = { defs={} expr=v3072[1] }
        pf      = { defs={} expr=v3073[1] }
        ?3      = { defs={} expr=v3074[1] }
        af      = { defs={} expr=v3075[1] }
        ?5      = { defs={} expr=v3076[1] }
        zf      = { defs={} expr=v3077[1] }
        sf      = { defs={} expr=v3078[1] }
        tf      = { defs={} expr=v3079[1] }
        if      = { defs={} expr=v3080[1] }
        df      = { defs={} expr=v3081[1] }
        of      = { defs={} expr=v3082[1] }
        iopl0   = { defs={} expr=v3083[1] }
        iopl1   = { defs={} expr=v3084[1] }
        nt      = { defs={} expr=v3085[1] }
        ?15     = { defs={} expr=v3086[1] }
        rf      = { defs={} expr=v3087[1] }
        vm      = { defs={} expr=v3088[1] }
        ac      = { defs={} expr=v3089[1] }
        vif     = { defs={} expr=v3090[1] }
        vip     = { defs={} expr=v3091[1] }
        id      = { defs={} expr=v3092[1] }
        ?22     = { defs={} expr=v3093[1] }
        ?23     = { defs={} expr=v3094[1] }
        ?24     = { defs={} expr=v3095[1] }
        ?25     = { defs={} expr=v3096[1] }
        ?26     = { defs={} expr=v3097[1] }
        ?27     = { defs={} expr=v3098[1] }
        ?28     = { defs={} expr=v3099[1] }
        ?29     = { defs={} expr=v3100[1] }
        ?30     = { defs={} expr=v3101[1] }
        ?31     = { defs={} expr=v3102[1] }
        ip      = { defs={0x08048472} expr=0x08048479[32] }
    memory:
        address = { defs={} expr=(add[32] v3061[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3061[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3061[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=v3061[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
0x8048479:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v3057[32] }
        cx      = { defs={} expr=v3058[32] }
        dx      = { defs={} expr=v3059[32] }
        bx      = { defs={} expr=v3060[32] }
        sp      = { defs={0x08048479} expr=(add[32] v3061[32] -4[32]) }
        bp      = { defs={} expr=v3062[32] }
        si      = { defs={} expr=v3063[32] }
        di      = { defs={} expr=v3064[32] }
        es      = { defs={} expr=v3065[16] }
        cs      = { defs={} expr=v3066[16] }
        ss      = { defs={} expr=v3067[16] }
        ds      = { defs={} expr=v3068[16] }
        fs      = { defs={} expr=v3069[16] }
        gs      = { defs={} expr=v3070[16] }
        cf      = { defs={} expr=v3071[1] }
        ?1      = { defs={} expr=v3072[1] }
        pf      = { defs={} expr=v3073[1] }
        ?3      = { defs={} expr=v3074[1] }
        af      = { defs={} expr=v3075[1] }
        ?5      = { defs={} expr=v3076[1] }
        zf      = { defs={} expr=v3077[1] }
        sf      = { defs={} expr=v3078[1] }
        tf      = { defs={} expr=v3079[1] }
        if      = { defs={} expr=v3080[1] }
        df      = { defs={} expr=v3081[1] }
        of      = { defs={} expr=v3082[1] }
        iopl0   = { defs={} expr=v3083[1] }
        iopl1   = { defs={} expr=v3084[1] }
        nt      = { defs={} expr=v3085[1] }
        ?15     = { defs={} expr=v3086[1] }
        rf      = { defs={} expr=v3087[1] }
        vm      = { defs={} expr=v3088[1] }
        ac      = { defs={} expr=v3089[1] }
        vif     = { defs={} expr=v3090[1] }
        vip     = { defs={} expr=v3091[1] }
        id      = { defs={} expr=v3092[1] }
        ?22     = { defs={} expr=v3093[1] }
        ?23     = { defs={} expr=v3094[1] }
        ?24     = { defs={} expr=v3095[1] }
        ?25     = { defs={} expr=v3096[1] }
        ?26     = { defs={} expr=v3097[1] }
        ?27     = { defs={} expr=v3098[1] }
        ?28     = { defs={} expr=v3099[1] }
        ?29     = { defs={} expr=v3100[1] }
        ?30     = { defs={} expr=v3101[1] }
        ?31     = { defs={} expr=v3102[1] }
        ip      = { defs={0x08048479} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3061[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3061[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3061[32] -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048479} expr=(add[32] v3061[32] -4[32]) }
          value = { defs={} expr=126[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3061[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3061[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3061[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=v3061[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048480:push   ebp
    registers:
        ax      = { defs={} expr=v3151[32] }
        cx      = { defs={} expr=v3152[32] }
        dx      = { defs={} expr=v3153[32] }
        bx      = { defs={} expr=v3154[32] }
        sp      = { defs={0x08048480} expr=(add[32] v3155[32] -4[32]) }
        bp      = { defs={} expr=v3156[32] }
        si      = { defs={} expr=v3157[32] }
        di      = { defs={} expr=v3158[32] }
        es      = { defs={} expr=v3159[16] }
        cs      = { defs={} expr=v3160[16] }
        ss      = { defs={} expr=v3161[16] }
        ds      = { defs={} expr=v3162[16] }
        fs      = { defs={} expr=v3163[16] }
        gs      = { defs={} expr=v3164[16] }
        cf      = { defs={} expr=v3165[1] }
        ?1      = { defs={} expr=v3166[1] }
        pf      = { defs={} expr=v3167[1] }
        ?3      = { defs={} expr=v3168[1] }
        af      = { defs={} expr=v3169[1] }
        ?5      = { defs={} expr=v3170[1] }
        zf      = { defs={} expr=v3171[1] }
        sf      = { defs={} expr=v3172[1] }
        tf      = { defs={} expr=v3173[1] }
        if      = { defs={} expr=v3174[1] }
        df      = { defs={} expr=v3175[1] }
        of      = { defs={} expr=v3176[1] }
        iopl0   = { defs={} expr=v3177[1] }
        iopl1   = { defs={} expr=v3178[1] }
        nt      = { defs={} expr=v3179[1] }
        ?15     = { defs={} expr=v3180[1] }
        rf      = { defs={} expr=v3181[1] }
        vm      = { defs={} expr=v3182[1] }
        ac      = { defs={} expr=v3183[1] }
        vif     = { defs={} expr=v3184[1] }
        vip     = { defs={} expr=v3185[1] }
        id      = { defs={} expr=v3186[1] }
        ?22     = { defs={} expr=v3187[1] }
        ?23     = { defs={} expr=v3188[1] }
        ?24     = { defs={} expr=v3189[1] }
        ?25     = { defs={} expr=v3190[1] }
        ?26     = { defs={} expr=v3191[1] }
        ?27     = { defs={} expr=v3192[1] }
        ?28     = { defs={} expr=v3193[1] }
        ?29     = { defs={} expr=v3194[1] }
        ?30     = { defs={} expr=v3195[1] }
        ?31     = { defs={} expr=v3196[1] }
        ip      = { defs={0x08048480} expr=0x08048481[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3156[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3155[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3156[32]) }
          flags = { }
    init mem:
0x8048481:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3151[32] }
        cx      = { defs={} expr=v3152[32] }
        dx      = { defs={} expr=v3153[32] }
        bx      = { defs={} expr=v3154[32] }
        sp      = { defs={0x08048480} expr=(add[32] v3155[32] -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v3155[32] -4[32]) }
        si      = { defs={} expr=v3157[32] }
        di      = { defs={} expr=v3158[32] }
        es      = { defs={} expr=v3159[16] }
        cs      = { defs={} expr=v3160[16] }
        ss      = { defs={} expr=v3161[16] }
        ds      = { defs={} expr=v3162[16] }
        fs      = { defs={} expr=v3163[16] }
        gs      = { defs={} expr=v3164[16] }
        cf      = { defs={} expr=v3165[1] }
        ?1      = { defs={} expr=v3166[1] }
        pf      = { defs={} expr=v3167[1] }
        ?3      = { defs={} expr=v3168[1] }
        af      = { defs={} expr=v3169[1] }
        ?5      = { defs={} expr=v3170[1] }
        zf      = { defs={} expr=v3171[1] }
        sf      = { defs={} expr=v3172[1] }
        tf      = { defs={} expr=v3173[1] }
        if      = { defs={} expr=v3174[1] }
        df      = { defs={} expr=v3175[1] }
        of      = { defs={} expr=v3176[1] }
        iopl0   = { defs={} expr=v3177[1] }
        iopl1   = { defs={} expr=v3178[1] }
        nt      = { defs={} expr=v3179[1] }
        ?15     = { defs={} expr=v3180[1] }
        rf      = { defs={} expr=v3181[1] }
        vm      = { defs={} expr=v3182[1] }
        ac      = { defs={} expr=v3183[1] }
        vif     = { defs={} expr=v3184[1] }
        vip     = { defs={} expr=v3185[1] }
        id      = { defs={} expr=v3186[1] }
        ?22     = { defs={} expr=v3187[1] }
        ?23     = { defs={} expr=v3188[1] }
        ?24     = { defs={} expr=v3189[1] }
        ?25     = { defs={} expr=v3190[1] }
        ?26     = { defs={} expr=v3191[1] }
        ?27     = { defs={} expr=v3192[1] }
        ?28     = { defs={} expr=v3193[1] }
        ?29     = { defs={} expr=v3194[1] }
        ?30     = { defs={} expr=v3195[1] }
        ?31     = { defs={} expr=v3196[1] }
        ip      = { defs={0x08048480,0x08048481} expr=0x08048483[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3156[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3155[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3156[32]) }
          flags = { }
    init mem:
0x8048483:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v3151[32] }
        cx      = { defs={} expr=v3152[32] }
        dx      = { defs={} expr=v3153[32] }
        bx      = { defs={} expr=v3154[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v3155[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v3155[32] -4[32]) }
        si      = { defs={} expr=v3157[32] }
        di      = { defs={} expr=v3158[32] }
        es      = { defs={} expr=v3159[16] }
        cs      = { defs={} expr=v3160[16] }
        ss      = { defs={} expr=v3161[16] }
        ds      = { defs={} expr=v3162[16] }
        fs      = { defs={} expr=v3163[16] }
        gs      = { defs={} expr=v3164[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3166[1] }
        pf      = { defs={0x08048480,0x08048483} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3155[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3155[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3168[1] }
        af      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3170[1] }
        zf      = { defs={0x08048480,0x08048483} expr=(zerop[1] (add[32] (add[32] v3155[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048480,0x08048483} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3155[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3173[1] }
        if      = { defs={} expr=v3174[1] }
        df      = { defs={} expr=v3175[1] }
        of      = { defs={0x08048480,0x08048483} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3177[1] }
        iopl1   = { defs={} expr=v3178[1] }
        nt      = { defs={} expr=v3179[1] }
        ?15     = { defs={} expr=v3180[1] }
        rf      = { defs={} expr=v3181[1] }
        vm      = { defs={} expr=v3182[1] }
        ac      = { defs={} expr=v3183[1] }
        vif     = { defs={} expr=v3184[1] }
        vip     = { defs={} expr=v3185[1] }
        id      = { defs={} expr=v3186[1] }
        ?22     = { defs={} expr=v3187[1] }
        ?23     = { defs={} expr=v3188[1] }
        ?24     = { defs={} expr=v3189[1] }
        ?25     = { defs={} expr=v3190[1] }
        ?26     = { defs={} expr=v3191[1] }
        ?27     = { defs={} expr=v3192[1] }
        ?28     = { defs={} expr=v3193[1] }
        ?29     = { defs={} expr=v3194[1] }
        ?30     = { defs={} expr=v3195[1] }
        ?31     = { defs={} expr=v3196[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483} expr=0x08048486[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3156[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3155[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3156[32]) }
          flags = { }
    init mem:
0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
    registers:
        ax      = { defs={} expr=v3151[32] }
        cx      = { defs={} expr=v3152[32] }
        dx      = { defs={} expr=v3153[32] }
        bx      = { defs={} expr=v3154[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v3155[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v3155[32] -4[32]) }
        si      = { defs={} expr=v3157[32] }
        di      = { defs={} expr=v3158[32] }
        es      = { defs={} expr=v3159[16] }
        cs      = { defs={} expr=v3160[16] }
        ss      = { defs={} expr=v3161[16] }
        ds      = { defs={} expr=v3162[16] }
        fs      = { defs={} expr=v3163[16] }
        gs      = { defs={} expr=v3164[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3166[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v3168[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) 1[33]))))) }
        ?5      = { defs={} expr=v3170[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
        tf      = { defs={} expr=v3173[1] }
        if      = { defs={} expr=v3174[1] }
        df      = { defs={} expr=v3175[1] }
        of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v3177[1] }
        iopl1   = { defs={} expr=v3178[1] }
        nt      = { defs={} expr=v3179[1] }
        ?15     = { defs={} expr=v3180[1] }
        rf      = { defs={} expr=v3181[1] }
        vm      = { defs={} expr=v3182[1] }
        ac      = { defs={} expr=v3183[1] }
        vif     = { defs={} expr=v3184[1] }
        vip     = { defs={} expr=v3185[1] }
        id      = { defs={} expr=v3186[1] }
        ?22     = { defs={} expr=v3187[1] }
        ?23     = { defs={} expr=v3188[1] }
        ?24     = { defs={} expr=v3189[1] }
        ?25     = { defs={} expr=v3190[1] }
        ?26     = { defs={} expr=v3191[1] }
        ?27     = { defs={} expr=v3192[1] }
        ?28     = { defs={} expr=v3193[1] }
        ?29     = { defs={} expr=v3194[1] }
        ?30     = { defs={} expr=v3195[1] }
        ?31     = { defs={} expr=v3196[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486} expr=0x0804848c[32] }
    memory:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3156[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3155[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3156[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v3202[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v3201[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v3200[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v3199[8] }
          flags = { rdonly }
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v3151[32] }
        cx      = { defs={} expr=v3152[32] }
        dx      = { defs={} expr=v3153[32] }
        bx      = { defs={} expr=v3154[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v3155[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v3155[32] -4[32]) }
        si      = { defs={} expr=v3157[32] }
        di      = { defs={} expr=v3158[32] }
        es      = { defs={} expr=v3159[16] }
        cs      = { defs={} expr=v3160[16] }
        ss      = { defs={} expr=v3161[16] }
        ds      = { defs={} expr=v3162[16] }
        fs      = { defs={} expr=v3163[16] }
        gs      = { defs={} expr=v3164[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3166[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v3168[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) 1[33]))))) }
        ?5      = { defs={} expr=v3170[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
        tf      = { defs={} expr=v3173[1] }
        if      = { defs={} expr=v3174[1] }
        df      = { defs={} expr=v3175[1] }
        of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v3177[1] }
        iopl1   = { defs={} expr=v3178[1] }
        nt      = { defs={} expr=v3179[1] }
        ?15     = { defs={} expr=v3180[1] }
        rf      = { defs={} expr=v3181[1] }
        vm      = { defs={} expr=v3182[1] }
        ac      = { defs={} expr=v3183[1] }
        vif     = { defs={} expr=v3184[1] }
        vip     = { defs={} expr=v3185[1] }
        id      = { defs={} expr=v3186[1] }
        ?22     = { defs={} expr=v3187[1] }
        ?23     = { defs={} expr=v3188[1] }
        ?24     = { defs={} expr=v3189[1] }
        ?25     = { defs={} expr=v3190[1] }
        ?26     = { defs={} expr=v3191[1] }
        ?27     = { defs={} expr=v3192[1] }
        ?28     = { defs={} expr=v3193[1] }
        ?29     = { defs={} expr=v3194[1] }
        ?30     = { defs={} expr=v3195[1] }
        ?31     = { defs={} expr=v3196[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c} expr=0x08048493[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v3155[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3156[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3155[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3156[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v3202[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v3201[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v3200[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v3199[8] }
          flags = { rdonly }
0x8048493:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v3151[32] }
        cx      = { defs={} expr=v3152[32] }
        dx      = { defs={} expr=v3153[32] }
        bx      = { defs={} expr=v3154[32] }
        sp      = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v3155[32] -4[32]) }
        si      = { defs={} expr=v3157[32] }
        di      = { defs={} expr=v3158[32] }
        es      = { defs={} expr=v3159[16] }
        cs      = { defs={} expr=v3160[16] }
        ss      = { defs={} expr=v3161[16] }
        ds      = { defs={} expr=v3162[16] }
        fs      = { defs={} expr=v3163[16] }
        gs      = { defs={} expr=v3164[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3155[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3166[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v3168[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) 1[33]))))) }
        ?5      = { defs={} expr=v3170[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
        tf      = { defs={} expr=v3173[1] }
        if      = { defs={} expr=v3174[1] }
        df      = { defs={} expr=v3175[1] }
        of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v3177[1] }
        iopl1   = { defs={} expr=v3178[1] }
        nt      = { defs={} expr=v3179[1] }
        ?15     = { defs={} expr=v3180[1] }
        rf      = { defs={} expr=v3181[1] }
        vm      = { defs={} expr=v3182[1] }
        ac      = { defs={} expr=v3183[1] }
        vif     = { defs={} expr=v3184[1] }
        vip     = { defs={} expr=v3185[1] }
        id      = { defs={} expr=v3186[1] }
        ?22     = { defs={} expr=v3187[1] }
        ?23     = { defs={} expr=v3188[1] }
        ?24     = { defs={} expr=v3189[1] }
        ?25     = { defs={} expr=v3190[1] }
        ?26     = { defs={} expr=v3191[1] }
        ?27     = { defs={} expr=v3192[1] }
        ?28     = { defs={} expr=v3193[1] }
        ?29     = { defs={} expr=v3194[1] }
        ?30     = { defs={} expr=v3195[1] }
        ?31     = { defs={} expr=v3196[1] }
        ip      = { defs={0x08048493} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=-104[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3155[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v3155[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3199[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3200[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3201[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3202[8]))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3156[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3155[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3156[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3155[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3156[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v3202[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v3201[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v3200[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v3199[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v3255[32] }
        cx      = { defs={} expr=v3256[32] }
        dx      = { defs={} expr=v3257[32] }
        bx      = { defs={} expr=v3258[32] }
        sp      = { defs={} expr=v3259[32] }
        bp      = { defs={} expr=v3260[32] }
        si      = { defs={} expr=v3261[32] }
        di      = { defs={} expr=v3262[32] }
        es      = { defs={} expr=v3263[16] }
        cs      = { defs={} expr=v3264[16] }
        ss      = { defs={} expr=v3265[16] }
        ds      = { defs={} expr=v3266[16] }
        fs      = { defs={} expr=v3267[16] }
        gs      = { defs={} expr=v3268[16] }
        cf      = { defs={} expr=v3269[1] }
        ?1      = { defs={} expr=v3270[1] }
        pf      = { defs={} expr=v3271[1] }
        ?3      = { defs={} expr=v3272[1] }
        af      = { defs={} expr=v3273[1] }
        ?5      = { defs={} expr=v3274[1] }
        zf      = { defs={} expr=v3275[1] }
        sf      = { defs={} expr=v3276[1] }
        tf      = { defs={} expr=v3277[1] }
        if      = { defs={} expr=v3278[1] }
        df      = { defs={} expr=v3279[1] }
        of      = { defs={} expr=v3280[1] }
        iopl0   = { defs={} expr=v3281[1] }
        iopl1   = { defs={} expr=v3282[1] }
        nt      = { defs={} expr=v3283[1] }
        ?15     = { defs={} expr=v3284[1] }
        rf      = { defs={} expr=v3285[1] }
        vm      = { defs={} expr=v3286[1] }
        ac      = { defs={} expr=v3287[1] }
        vif     = { defs={} expr=v3288[1] }
        vip     = { defs={} expr=v3289[1] }
        id      = { defs={} expr=v3290[1] }
        ?22     = { defs={} expr=v3291[1] }
        ?23     = { defs={} expr=v3292[1] }
        ?24     = { defs={} expr=v3293[1] }
        ?25     = { defs={} expr=v3294[1] }
        ?26     = { defs={} expr=v3295[1] }
        ?27     = { defs={} expr=v3296[1] }
        ?28     = { defs={} expr=v3297[1] }
        ?29     = { defs={} expr=v3298[1] }
        ?30     = { defs={} expr=v3299[1] }
        ?31     = { defs={} expr=v3300[1] }
        ip      = { defs={0x08048498} expr=0x0804849f[32] }
    memory:
        address = { defs={} expr=(add[32] v3259[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3259[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3259[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=v3259[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
0x804849f:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v3255[32] }
        cx      = { defs={} expr=v3256[32] }
        dx      = { defs={} expr=v3257[32] }
        bx      = { defs={} expr=v3258[32] }
        sp      = { defs={0x0804849f} expr=(add[32] v3259[32] -4[32]) }
        bp      = { defs={} expr=v3260[32] }
        si      = { defs={} expr=v3261[32] }
        di      = { defs={} expr=v3262[32] }
        es      = { defs={} expr=v3263[16] }
        cs      = { defs={} expr=v3264[16] }
        ss      = { defs={} expr=v3265[16] }
        ds      = { defs={} expr=v3266[16] }
        fs      = { defs={} expr=v3267[16] }
        gs      = { defs={} expr=v3268[16] }
        cf      = { defs={} expr=v3269[1] }
        ?1      = { defs={} expr=v3270[1] }
        pf      = { defs={} expr=v3271[1] }
        ?3      = { defs={} expr=v3272[1] }
        af      = { defs={} expr=v3273[1] }
        ?5      = { defs={} expr=v3274[1] }
        zf      = { defs={} expr=v3275[1] }
        sf      = { defs={} expr=v3276[1] }
        tf      = { defs={} expr=v3277[1] }
        if      = { defs={} expr=v3278[1] }
        df      = { defs={} expr=v3279[1] }
        of      = { defs={} expr=v3280[1] }
        iopl0   = { defs={} expr=v3281[1] }
        iopl1   = { defs={} expr=v3282[1] }
        nt      = { defs={} expr=v3283[1] }
        ?15     = { defs={} expr=v3284[1] }
        rf      = { defs={} expr=v3285[1] }
        vm      = { defs={} expr=v3286[1] }
        ac      = { defs={} expr=v3287[1] }
        vif     = { defs={} expr=v3288[1] }
        vip     = { defs={} expr=v3289[1] }
        id      = { defs={} expr=v3290[1] }
        ?22     = { defs={} expr=v3291[1] }
        ?23     = { defs={} expr=v3292[1] }
        ?24     = { defs={} expr=v3293[1] }
        ?25     = { defs={} expr=v3294[1] }
        ?26     = { defs={} expr=v3295[1] }
        ?27     = { defs={} expr=v3296[1] }
        ?28     = { defs={} expr=v3297[1] }
        ?29     = { defs={} expr=v3298[1] }
        ?30     = { defs={} expr=v3299[1] }
        ?31     = { defs={} expr=v3300[1] }
        ip      = { defs={0x0804849f} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3259[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3259[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3259[32] -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x0804849f} expr=(add[32] v3259[32] -4[32]) }
          value = { defs={} expr=-92[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3259[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3259[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3259[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=v3259[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484b0:push   ebp
    registers:
        ax      = { defs={} expr=v3349[32] }
        cx      = { defs={} expr=v3350[32] }
        dx      = { defs={} expr=v3351[32] }
        bx      = { defs={} expr=v3352[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v3353[32] -4[32]) }
        bp      = { defs={} expr=v3354[32] }
        si      = { defs={} expr=v3355[32] }
        di      = { defs={} expr=v3356[32] }
        es      = { defs={} expr=v3357[16] }
        cs      = { defs={} expr=v3358[16] }
        ss      = { defs={} expr=v3359[16] }
        ds      = { defs={} expr=v3360[16] }
        fs      = { defs={} expr=v3361[16] }
        gs      = { defs={} expr=v3362[16] }
        cf      = { defs={} expr=v3363[1] }
        ?1      = { defs={} expr=v3364[1] }
        pf      = { defs={} expr=v3365[1] }
        ?3      = { defs={} expr=v3366[1] }
        af      = { defs={} expr=v3367[1] }
        ?5      = { defs={} expr=v3368[1] }
        zf      = { defs={} expr=v3369[1] }
        sf      = { defs={} expr=v3370[1] }
        tf      = { defs={} expr=v3371[1] }
        if      = { defs={} expr=v3372[1] }
        df      = { defs={} expr=v3373[1] }
        of      = { defs={} expr=v3374[1] }
        iopl0   = { defs={} expr=v3375[1] }
        iopl1   = { defs={} expr=v3376[1] }
        nt      = { defs={} expr=v3377[1] }
        ?15     = { defs={} expr=v3378[1] }
        rf      = { defs={} expr=v3379[1] }
        vm      = { defs={} expr=v3380[1] }
        ac      = { defs={} expr=v3381[1] }
        vif     = { defs={} expr=v3382[1] }
        vip     = { defs={} expr=v3383[1] }
        id      = { defs={} expr=v3384[1] }
        ?22     = { defs={} expr=v3385[1] }
        ?23     = { defs={} expr=v3386[1] }
        ?24     = { defs={} expr=v3387[1] }
        ?25     = { defs={} expr=v3388[1] }
        ?26     = { defs={} expr=v3389[1] }
        ?27     = { defs={} expr=v3390[1] }
        ?28     = { defs={} expr=v3391[1] }
        ?29     = { defs={} expr=v3392[1] }
        ?30     = { defs={} expr=v3393[1] }
        ?31     = { defs={} expr=v3394[1] }
        ip      = { defs={0x080484b0} expr=0x080484b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3354[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3353[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3354[32]) }
          flags = { }
    init mem:
0x80484b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3349[32] }
        cx      = { defs={} expr=v3350[32] }
        dx      = { defs={} expr=v3351[32] }
        bx      = { defs={} expr=v3352[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v3353[32] -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3353[32] -4[32]) }
        si      = { defs={} expr=v3355[32] }
        di      = { defs={} expr=v3356[32] }
        es      = { defs={} expr=v3357[16] }
        cs      = { defs={} expr=v3358[16] }
        ss      = { defs={} expr=v3359[16] }
        ds      = { defs={} expr=v3360[16] }
        fs      = { defs={} expr=v3361[16] }
        gs      = { defs={} expr=v3362[16] }
        cf      = { defs={} expr=v3363[1] }
        ?1      = { defs={} expr=v3364[1] }
        pf      = { defs={} expr=v3365[1] }
        ?3      = { defs={} expr=v3366[1] }
        af      = { defs={} expr=v3367[1] }
        ?5      = { defs={} expr=v3368[1] }
        zf      = { defs={} expr=v3369[1] }
        sf      = { defs={} expr=v3370[1] }
        tf      = { defs={} expr=v3371[1] }
        if      = { defs={} expr=v3372[1] }
        df      = { defs={} expr=v3373[1] }
        of      = { defs={} expr=v3374[1] }
        iopl0   = { defs={} expr=v3375[1] }
        iopl1   = { defs={} expr=v3376[1] }
        nt      = { defs={} expr=v3377[1] }
        ?15     = { defs={} expr=v3378[1] }
        rf      = { defs={} expr=v3379[1] }
        vm      = { defs={} expr=v3380[1] }
        ac      = { defs={} expr=v3381[1] }
        vif     = { defs={} expr=v3382[1] }
        vip     = { defs={} expr=v3383[1] }
        id      = { defs={} expr=v3384[1] }
        ?22     = { defs={} expr=v3385[1] }
        ?23     = { defs={} expr=v3386[1] }
        ?24     = { defs={} expr=v3387[1] }
        ?25     = { defs={} expr=v3388[1] }
        ?26     = { defs={} expr=v3389[1] }
        ?27     = { defs={} expr=v3390[1] }
        ?28     = { defs={} expr=v3391[1] }
        ?29     = { defs={} expr=v3392[1] }
        ?30     = { defs={} expr=v3393[1] }
        ?31     = { defs={} expr=v3394[1] }
        ip      = { defs={0x080484b0,0x080484b1} expr=0x080484b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3354[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3353[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3354[32]) }
          flags = { }
    init mem:
0x80484b3:push   edi
    registers:
        ax      = { defs={} expr=v3349[32] }
        cx      = { defs={} expr=v3350[32] }
        dx      = { defs={} expr=v3351[32] }
        bx      = { defs={} expr=v3352[32] }
        sp      = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3353[32] -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3353[32] -4[32]) }
        si      = { defs={} expr=v3355[32] }
        di      = { defs={} expr=v3356[32] }
        es      = { defs={} expr=v3357[16] }
        cs      = { defs={} expr=v3358[16] }
        ss      = { defs={} expr=v3359[16] }
        ds      = { defs={} expr=v3360[16] }
        fs      = { defs={} expr=v3361[16] }
        gs      = { defs={} expr=v3362[16] }
        cf      = { defs={} expr=v3363[1] }
        ?1      = { defs={} expr=v3364[1] }
        pf      = { defs={} expr=v3365[1] }
        ?3      = { defs={} expr=v3366[1] }
        af      = { defs={} expr=v3367[1] }
        ?5      = { defs={} expr=v3368[1] }
        zf      = { defs={} expr=v3369[1] }
        sf      = { defs={} expr=v3370[1] }
        tf      = { defs={} expr=v3371[1] }
        if      = { defs={} expr=v3372[1] }
        df      = { defs={} expr=v3373[1] }
        of      = { defs={} expr=v3374[1] }
        iopl0   = { defs={} expr=v3375[1] }
        iopl1   = { defs={} expr=v3376[1] }
        nt      = { defs={} expr=v3377[1] }
        ?15     = { defs={} expr=v3378[1] }
        rf      = { defs={} expr=v3379[1] }
        vm      = { defs={} expr=v3380[1] }
        ac      = { defs={} expr=v3381[1] }
        vif     = { defs={} expr=v3382[1] }
        vip     = { defs={} expr=v3383[1] }
        id      = { defs={} expr=v3384[1] }
        ?22     = { defs={} expr=v3385[1] }
        ?23     = { defs={} expr=v3386[1] }
        ?24     = { defs={} expr=v3387[1] }
        ?25     = { defs={} expr=v3388[1] }
        ?26     = { defs={} expr=v3389[1] }
        ?27     = { defs={} expr=v3390[1] }
        ?28     = { defs={} expr=v3391[1] }
        ?29     = { defs={} expr=v3392[1] }
        ?30     = { defs={} expr=v3393[1] }
        ?31     = { defs={} expr=v3394[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3} expr=0x080484b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3356[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3353[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3354[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3353[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3354[32]) }
          flags = { }
    init mem:
0x80484b4:push   esi
    registers:
        ax      = { defs={} expr=v3349[32] }
        cx      = { defs={} expr=v3350[32] }
        dx      = { defs={} expr=v3351[32] }
        bx      = { defs={} expr=v3352[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3353[32] -4[32]) }
        si      = { defs={} expr=v3355[32] }
        di      = { defs={} expr=v3356[32] }
        es      = { defs={} expr=v3357[16] }
        cs      = { defs={} expr=v3358[16] }
        ss      = { defs={} expr=v3359[16] }
        ds      = { defs={} expr=v3360[16] }
        fs      = { defs={} expr=v3361[16] }
        gs      = { defs={} expr=v3362[16] }
        cf      = { defs={} expr=v3363[1] }
        ?1      = { defs={} expr=v3364[1] }
        pf      = { defs={} expr=v3365[1] }
        ?3      = { defs={} expr=v3366[1] }
        af      = { defs={} expr=v3367[1] }
        ?5      = { defs={} expr=v3368[1] }
        zf      = { defs={} expr=v3369[1] }
        sf      = { defs={} expr=v3370[1] }
        tf      = { defs={} expr=v3371[1] }
        if      = { defs={} expr=v3372[1] }
        df      = { defs={} expr=v3373[1] }
        of      = { defs={} expr=v3374[1] }
        iopl0   = { defs={} expr=v3375[1] }
        iopl1   = { defs={} expr=v3376[1] }
        nt      = { defs={} expr=v3377[1] }
        ?15     = { defs={} expr=v3378[1] }
        rf      = { defs={} expr=v3379[1] }
        vm      = { defs={} expr=v3380[1] }
        ac      = { defs={} expr=v3381[1] }
        vif     = { defs={} expr=v3382[1] }
        vip     = { defs={} expr=v3383[1] }
        id      = { defs={} expr=v3384[1] }
        ?22     = { defs={} expr=v3385[1] }
        ?23     = { defs={} expr=v3386[1] }
        ?24     = { defs={} expr=v3387[1] }
        ?25     = { defs={} expr=v3388[1] }
        ?26     = { defs={} expr=v3389[1] }
        ?27     = { defs={} expr=v3390[1] }
        ?28     = { defs={} expr=v3391[1] }
        ?29     = { defs={} expr=v3392[1] }
        ?30     = { defs={} expr=v3393[1] }
        ?31     = { defs={} expr=v3394[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4} expr=0x080484b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3355[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3356[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3353[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3354[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3353[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3354[32]) }
          flags = { }
    init mem:
0x80484b5:push   ebx
    registers:
        ax      = { defs={} expr=v3349[32] }
        cx      = { defs={} expr=v3350[32] }
        dx      = { defs={} expr=v3351[32] }
        bx      = { defs={} expr=v3352[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3353[32] -4[32]) }
        si      = { defs={} expr=v3355[32] }
        di      = { defs={} expr=v3356[32] }
        es      = { defs={} expr=v3357[16] }
        cs      = { defs={} expr=v3358[16] }
        ss      = { defs={} expr=v3359[16] }
        ds      = { defs={} expr=v3360[16] }
        fs      = { defs={} expr=v3361[16] }
        gs      = { defs={} expr=v3362[16] }
        cf      = { defs={} expr=v3363[1] }
        ?1      = { defs={} expr=v3364[1] }
        pf      = { defs={} expr=v3365[1] }
        ?3      = { defs={} expr=v3366[1] }
        af      = { defs={} expr=v3367[1] }
        ?5      = { defs={} expr=v3368[1] }
        zf      = { defs={} expr=v3369[1] }
        sf      = { defs={} expr=v3370[1] }
        tf      = { defs={} expr=v3371[1] }
        if      = { defs={} expr=v3372[1] }
        df      = { defs={} expr=v3373[1] }
        of      = { defs={} expr=v3374[1] }
        iopl0   = { defs={} expr=v3375[1] }
        iopl1   = { defs={} expr=v3376[1] }
        nt      = { defs={} expr=v3377[1] }
        ?15     = { defs={} expr=v3378[1] }
        rf      = { defs={} expr=v3379[1] }
        vm      = { defs={} expr=v3380[1] }
        ac      = { defs={} expr=v3381[1] }
        vif     = { defs={} expr=v3382[1] }
        vip     = { defs={} expr=v3383[1] }
        id      = { defs={} expr=v3384[1] }
        ?22     = { defs={} expr=v3385[1] }
        ?23     = { defs={} expr=v3386[1] }
        ?24     = { defs={} expr=v3387[1] }
        ?25     = { defs={} expr=v3388[1] }
        ?26     = { defs={} expr=v3389[1] }
        ?27     = { defs={} expr=v3390[1] }
        ?28     = { defs={} expr=v3391[1] }
        ?29     = { defs={} expr=v3392[1] }
        ?30     = { defs={} expr=v3393[1] }
        ?31     = { defs={} expr=v3394[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5} expr=0x080484b6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3352[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3352[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3352[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3352[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3355[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3356[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3353[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3354[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3353[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3354[32]) }
          flags = { }
    init mem:
0x80484b6:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v3349[32] }
        cx      = { defs={} expr=v3350[32] }
        dx      = { defs={} expr=v3351[32] }
        bx      = { defs={} expr=v3352[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3353[32] -4[32]) }
        si      = { defs={} expr=v3355[32] }
        di      = { defs={} expr=v3356[32] }
        es      = { defs={} expr=v3357[16] }
        cs      = { defs={} expr=v3358[16] }
        ss      = { defs={} expr=v3359[16] }
        ds      = { defs={} expr=v3360[16] }
        fs      = { defs={} expr=v3361[16] }
        gs      = { defs={} expr=v3362[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v3364[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v3366[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v3368[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v3371[1] }
        if      = { defs={} expr=v3372[1] }
        df      = { defs={} expr=v3373[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v3375[1] }
        iopl1   = { defs={} expr=v3376[1] }
        nt      = { defs={} expr=v3377[1] }
        ?15     = { defs={} expr=v3378[1] }
        rf      = { defs={} expr=v3379[1] }
        vm      = { defs={} expr=v3380[1] }
        ac      = { defs={} expr=v3381[1] }
        vif     = { defs={} expr=v3382[1] }
        vip     = { defs={} expr=v3383[1] }
        id      = { defs={} expr=v3384[1] }
        ?22     = { defs={} expr=v3385[1] }
        ?23     = { defs={} expr=v3386[1] }
        ?24     = { defs={} expr=v3387[1] }
        ?25     = { defs={} expr=v3388[1] }
        ?26     = { defs={} expr=v3389[1] }
        ?27     = { defs={} expr=v3390[1] }
        ?28     = { defs={} expr=v3391[1] }
        ?29     = { defs={} expr=v3392[1] }
        ?30     = { defs={} expr=v3393[1] }
        ?31     = { defs={} expr=v3394[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=0x080484b9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3352[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3352[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3352[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3352[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3355[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3356[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3353[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3354[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3353[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3354[32]) }
          flags = { }
    init mem:
0x80484b9:call   0x080484be<<Insn>>
    registers:
        ax      = { defs={} expr=v3349[32] }
        cx      = { defs={} expr=v3350[32] }
        dx      = { defs={} expr=v3351[32] }
        bx      = { defs={} expr=v3352[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3353[32] -4[32]) }
        si      = { defs={} expr=v3355[32] }
        di      = { defs={} expr=v3356[32] }
        es      = { defs={} expr=v3357[16] }
        cs      = { defs={} expr=v3358[16] }
        ss      = { defs={} expr=v3359[16] }
        ds      = { defs={} expr=v3360[16] }
        fs      = { defs={} expr=v3361[16] }
        gs      = { defs={} expr=v3362[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v3364[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v3366[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v3368[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v3371[1] }
        if      = { defs={} expr=v3372[1] }
        df      = { defs={} expr=v3373[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v3375[1] }
        iopl1   = { defs={} expr=v3376[1] }
        nt      = { defs={} expr=v3377[1] }
        ?15     = { defs={} expr=v3378[1] }
        rf      = { defs={} expr=v3379[1] }
        vm      = { defs={} expr=v3380[1] }
        ac      = { defs={} expr=v3381[1] }
        vif     = { defs={} expr=v3382[1] }
        vip     = { defs={} expr=v3383[1] }
        id      = { defs={} expr=v3384[1] }
        ?22     = { defs={} expr=v3385[1] }
        ?23     = { defs={} expr=v3386[1] }
        ?24     = { defs={} expr=v3387[1] }
        ?25     = { defs={} expr=v3388[1] }
        ?26     = { defs={} expr=v3389[1] }
        ?27     = { defs={} expr=v3390[1] }
        ?28     = { defs={} expr=v3391[1] }
        ?29     = { defs={} expr=v3392[1] }
        ?30     = { defs={} expr=v3393[1] }
        ?31     = { defs={} expr=v3394[1] }
        ip      = { defs={0x080484b9} expr=0x080484be[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={} expr=-66[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3352[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3352[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3352[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3352[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3355[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3355[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3353[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3356[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3353[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3356[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3354[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3353[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3354[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3353[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3354[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
    registers:
        ax      = { defs={} expr=v3443[32] }
        cx      = { defs={} expr=v3444[32] }
        dx      = { defs={} expr=v3445[32] }
        bx      = { defs={0x080484be} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) }
        sp      = { defs={0x080484be} expr=(add[32] v3447[32] 4[32]) }
        bp      = { defs={} expr=v3448[32] }
        si      = { defs={} expr=v3449[32] }
        di      = { defs={} expr=v3450[32] }
        es      = { defs={} expr=v3451[16] }
        cs      = { defs={} expr=v3452[16] }
        ss      = { defs={} expr=v3453[16] }
        ds      = { defs={} expr=v3454[16] }
        fs      = { defs={} expr=v3455[16] }
        gs      = { defs={} expr=v3456[16] }
        cf      = { defs={} expr=v3457[1] }
        ?1      = { defs={} expr=v3458[1] }
        pf      = { defs={} expr=v3459[1] }
        ?3      = { defs={} expr=v3460[1] }
        af      = { defs={} expr=v3461[1] }
        ?5      = { defs={} expr=v3462[1] }
        zf      = { defs={} expr=v3463[1] }
        sf      = { defs={} expr=v3464[1] }
        tf      = { defs={} expr=v3465[1] }
        if      = { defs={} expr=v3466[1] }
        df      = { defs={} expr=v3467[1] }
        of      = { defs={} expr=v3468[1] }
        iopl0   = { defs={} expr=v3469[1] }
        iopl1   = { defs={} expr=v3470[1] }
        nt      = { defs={} expr=v3471[1] }
        ?15     = { defs={} expr=v3472[1] }
        rf      = { defs={} expr=v3473[1] }
        vm      = { defs={} expr=v3474[1] }
        ac      = { defs={} expr=v3475[1] }
        vif     = { defs={} expr=v3476[1] }
        vip     = { defs={} expr=v3477[1] }
        id      = { defs={} expr=v3478[1] }
        ?22     = { defs={} expr=v3479[1] }
        ?23     = { defs={} expr=v3480[1] }
        ?24     = { defs={} expr=v3481[1] }
        ?25     = { defs={} expr=v3482[1] }
        ?26     = { defs={} expr=v3483[1] }
        ?27     = { defs={} expr=v3484[1] }
        ?28     = { defs={} expr=v3485[1] }
        ?29     = { defs={} expr=v3486[1] }
        ?30     = { defs={} expr=v3487[1] }
        ?31     = { defs={} expr=v3488[1] }
        ip      = { defs={0x080484be} expr=0x080484bf[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3447[32] 3[32]) }
          value = { defs={} expr=v3494[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3447[32] 2[32]) }
          value = { defs={} expr=v3493[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3447[32] 1[32]) }
          value = { defs={} expr=v3492[8] }
          flags = { rdonly }
        address = { defs={} expr=v3447[32] }
          value = { defs={} expr=v3491[8] }
          flags = { rdonly }
0x80484bf:add    ebx, 0x0000120a
    registers:
        ax      = { defs={} expr=v3443[32] }
        cx      = { defs={} expr=v3444[32] }
        dx      = { defs={} expr=v3445[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]) }
        sp      = { defs={0x080484be} expr=(add[32] v3447[32] 4[32]) }
        bp      = { defs={} expr=v3448[32] }
        si      = { defs={} expr=v3449[32] }
        di      = { defs={} expr=v3450[32] }
        es      = { defs={} expr=v3451[16] }
        cs      = { defs={} expr=v3452[16] }
        ss      = { defs={} expr=v3453[16] }
        ds      = { defs={} expr=v3454[16] }
        fs      = { defs={} expr=v3455[16] }
        gs      = { defs={} expr=v3456[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v3458[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v3460[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v3462[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32])) }
        tf      = { defs={} expr=v3465[1] }
        if      = { defs={} expr=v3466[1] }
        df      = { defs={} expr=v3467[1] }
        of      = { defs={0x080484be,0x080484bf} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) 4618[33])))))) }
        iopl0   = { defs={} expr=v3469[1] }
        iopl1   = { defs={} expr=v3470[1] }
        nt      = { defs={} expr=v3471[1] }
        ?15     = { defs={} expr=v3472[1] }
        rf      = { defs={} expr=v3473[1] }
        vm      = { defs={} expr=v3474[1] }
        ac      = { defs={} expr=v3475[1] }
        vif     = { defs={} expr=v3476[1] }
        vip     = { defs={} expr=v3477[1] }
        id      = { defs={} expr=v3478[1] }
        ?22     = { defs={} expr=v3479[1] }
        ?23     = { defs={} expr=v3480[1] }
        ?24     = { defs={} expr=v3481[1] }
        ?25     = { defs={} expr=v3482[1] }
        ?26     = { defs={} expr=v3483[1] }
        ?27     = { defs={} expr=v3484[1] }
        ?28     = { defs={} expr=v3485[1] }
        ?29     = { defs={} expr=v3486[1] }
        ?30     = { defs={} expr=v3487[1] }
        ?31     = { defs={} expr=v3488[1] }
        ip      = { defs={0x080484be,0x080484bf} expr=0x080484c5[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3447[32] 3[32]) }
          value = { defs={} expr=v3494[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3447[32] 2[32]) }
          value = { defs={} expr=v3493[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3447[32] 1[32]) }
          value = { defs={} expr=v3492[8] }
          flags = { rdonly }
        address = { defs={} expr=v3447[32] }
          value = { defs={} expr=v3491[8] }
          flags = { rdonly }
0x80484c5:call   0x080482c8<_init>
    registers:
        ax      = { defs={} expr=v3443[32] }
        cx      = { defs={} expr=v3444[32] }
        dx      = { defs={} expr=v3445[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]) }
        sp      = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v3447[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v3448[32] }
        si      = { defs={} expr=v3449[32] }
        di      = { defs={} expr=v3450[32] }
        es      = { defs={} expr=v3451[16] }
        cs      = { defs={} expr=v3452[16] }
        ss      = { defs={} expr=v3453[16] }
        ds      = { defs={} expr=v3454[16] }
        fs      = { defs={} expr=v3455[16] }
        gs      = { defs={} expr=v3456[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v3458[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v3460[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v3462[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8]))) 4618[32])) }
        tf      = { defs={} expr=v3465[1] }
        if      = { defs={} expr=v3466[1] }
        df      = { defs={} expr=v3467[1] }
        of      = { defs={0x080484be,0x080484bf} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3491[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3492[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3493[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3494[8])))) 4618[33])))))) }
        iopl0   = { defs={} expr=v3469[1] }
        iopl1   = { defs={} expr=v3470[1] }
        nt      = { defs={} expr=v3471[1] }
        ?15     = { defs={} expr=v3472[1] }
        rf      = { defs={} expr=v3473[1] }
        vm      = { defs={} expr=v3474[1] }
        ac      = { defs={} expr=v3475[1] }
        vif     = { defs={} expr=v3476[1] }
        vip     = { defs={} expr=v3477[1] }
        id      = { defs={} expr=v3478[1] }
        ?22     = { defs={} expr=v3479[1] }
        ?23     = { defs={} expr=v3480[1] }
        ?24     = { defs={} expr=v3481[1] }
        ?25     = { defs={} expr=v3482[1] }
        ?26     = { defs={} expr=v3483[1] }
        ?27     = { defs={} expr=v3484[1] }
        ?28     = { defs={} expr=v3485[1] }
        ?29     = { defs={} expr=v3486[1] }
        ?30     = { defs={} expr=v3487[1] }
        ?31     = { defs={} expr=v3488[1] }
        ip      = { defs={0x080484c5} expr=0x080482c8[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3447[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3447[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3447[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v3447[32] 4[32]) -4[32]) }
          value = { defs={} expr=-54[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3447[32] 3[32]) }
          value = { defs={} expr=v3494[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3447[32] 2[32]) }
          value = { defs={} expr=v3493[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3447[32] 1[32]) }
          value = { defs={} expr=v3492[8] }
          flags = { rdonly }
        address = { defs={} expr=v3447[32] }
          value = { defs={} expr=v3491[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v3550[32] -224[32]) }
        cx      = { defs={} expr=v3548[32] }
        dx      = { defs={} expr=v3549[32] }
        bx      = { defs={} expr=v3550[32] }
        sp      = { defs={} expr=v3551[32] }
        bp      = { defs={} expr=v3552[32] }
        si      = { defs={} expr=v3553[32] }
        di      = { defs={} expr=v3554[32] }
        es      = { defs={} expr=v3555[16] }
        cs      = { defs={} expr=v3556[16] }
        ss      = { defs={} expr=v3557[16] }
        ds      = { defs={} expr=v3558[16] }
        fs      = { defs={} expr=v3559[16] }
        gs      = { defs={} expr=v3560[16] }
        cf      = { defs={} expr=v3561[1] }
        ?1      = { defs={} expr=v3562[1] }
        pf      = { defs={} expr=v3563[1] }
        ?3      = { defs={} expr=v3564[1] }
        af      = { defs={} expr=v3565[1] }
        ?5      = { defs={} expr=v3566[1] }
        zf      = { defs={} expr=v3567[1] }
        sf      = { defs={} expr=v3568[1] }
        tf      = { defs={} expr=v3569[1] }
        if      = { defs={} expr=v3570[1] }
        df      = { defs={} expr=v3571[1] }
        of      = { defs={} expr=v3572[1] }
        iopl0   = { defs={} expr=v3573[1] }
        iopl1   = { defs={} expr=v3574[1] }
        nt      = { defs={} expr=v3575[1] }
        ?15     = { defs={} expr=v3576[1] }
        rf      = { defs={} expr=v3577[1] }
        vm      = { defs={} expr=v3578[1] }
        ac      = { defs={} expr=v3579[1] }
        vif     = { defs={} expr=v3580[1] }
        vip     = { defs={} expr=v3581[1] }
        id      = { defs={} expr=v3582[1] }
        ?22     = { defs={} expr=v3583[1] }
        ?23     = { defs={} expr=v3584[1] }
        ?24     = { defs={} expr=v3585[1] }
        ?25     = { defs={} expr=v3586[1] }
        ?26     = { defs={} expr=v3587[1] }
        ?27     = { defs={} expr=v3588[1] }
        ?28     = { defs={} expr=v3589[1] }
        ?29     = { defs={} expr=v3590[1] }
        ?30     = { defs={} expr=v3591[1] }
        ?31     = { defs={} expr=v3592[1] }
        ip      = { defs={0x080484ca} expr=0x080484d0[32] }
    memory:
    init mem:
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v3550[32] -224[32]) }
        cx      = { defs={} expr=v3548[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3550[32] -224[32]) }
        bx      = { defs={} expr=v3550[32] }
        sp      = { defs={} expr=v3551[32] }
        bp      = { defs={} expr=v3552[32] }
        si      = { defs={} expr=v3553[32] }
        di      = { defs={} expr=v3554[32] }
        es      = { defs={} expr=v3555[16] }
        cs      = { defs={} expr=v3556[16] }
        ss      = { defs={} expr=v3557[16] }
        ds      = { defs={} expr=v3558[16] }
        fs      = { defs={} expr=v3559[16] }
        gs      = { defs={} expr=v3560[16] }
        cf      = { defs={} expr=v3561[1] }
        ?1      = { defs={} expr=v3562[1] }
        pf      = { defs={} expr=v3563[1] }
        ?3      = { defs={} expr=v3564[1] }
        af      = { defs={} expr=v3565[1] }
        ?5      = { defs={} expr=v3566[1] }
        zf      = { defs={} expr=v3567[1] }
        sf      = { defs={} expr=v3568[1] }
        tf      = { defs={} expr=v3569[1] }
        if      = { defs={} expr=v3570[1] }
        df      = { defs={} expr=v3571[1] }
        of      = { defs={} expr=v3572[1] }
        iopl0   = { defs={} expr=v3573[1] }
        iopl1   = { defs={} expr=v3574[1] }
        nt      = { defs={} expr=v3575[1] }
        ?15     = { defs={} expr=v3576[1] }
        rf      = { defs={} expr=v3577[1] }
        vm      = { defs={} expr=v3578[1] }
        ac      = { defs={} expr=v3579[1] }
        vif     = { defs={} expr=v3580[1] }
        vip     = { defs={} expr=v3581[1] }
        id      = { defs={} expr=v3582[1] }
        ?22     = { defs={} expr=v3583[1] }
        ?23     = { defs={} expr=v3584[1] }
        ?24     = { defs={} expr=v3585[1] }
        ?25     = { defs={} expr=v3586[1] }
        ?26     = { defs={} expr=v3587[1] }
        ?27     = { defs={} expr=v3588[1] }
        ?28     = { defs={} expr=v3589[1] }
        ?29     = { defs={} expr=v3590[1] }
        ?30     = { defs={} expr=v3591[1] }
        ?31     = { defs={} expr=v3592[1] }
        ip      = { defs={0x080484ca,0x080484d0} expr=0x080484d6[32] }
    memory:
    init mem:
0x80484d6:sub    eax, edx
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])) }
        cx      = { defs={} expr=v3548[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3550[32] -224[32]) }
        bx      = { defs={} expr=v3550[32] }
        sp      = { defs={} expr=v3551[32] }
        bp      = { defs={} expr=v3552[32] }
        si      = { defs={} expr=v3553[32] }
        di      = { defs={} expr=v3554[32] }
        es      = { defs={} expr=v3555[16] }
        cs      = { defs={} expr=v3556[16] }
        ss      = { defs={} expr=v3557[16] }
        ds      = { defs={} expr=v3558[16] }
        fs      = { defs={} expr=v3559[16] }
        gs      = { defs={} expr=v3560[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3550[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3550[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v3550[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3550[32] -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v3562[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v3564[1] }
        af      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3550[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3550[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v3550[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3550[32] -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v3566[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(zerop[1] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))) }
        tf      = { defs={} expr=v3569[1] }
        if      = { defs={} expr=v3570[1] }
        df      = { defs={} expr=v3571[1] }
        of      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3550[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3550[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v3550[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3550[32] -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3550[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3550[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v3550[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3550[32] -224[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v3573[1] }
        iopl1   = { defs={} expr=v3574[1] }
        nt      = { defs={} expr=v3575[1] }
        ?15     = { defs={} expr=v3576[1] }
        rf      = { defs={} expr=v3577[1] }
        vm      = { defs={} expr=v3578[1] }
        ac      = { defs={} expr=v3579[1] }
        vif     = { defs={} expr=v3580[1] }
        vip     = { defs={} expr=v3581[1] }
        id      = { defs={} expr=v3582[1] }
        ?22     = { defs={} expr=v3583[1] }
        ?23     = { defs={} expr=v3584[1] }
        ?24     = { defs={} expr=v3585[1] }
        ?25     = { defs={} expr=v3586[1] }
        ?26     = { defs={} expr=v3587[1] }
        ?27     = { defs={} expr=v3588[1] }
        ?28     = { defs={} expr=v3589[1] }
        ?29     = { defs={} expr=v3590[1] }
        ?30     = { defs={} expr=v3591[1] }
        ?31     = { defs={} expr=v3592[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0x080484d8[32] }
    memory:
    init mem:
0x80484d8:sar    eax, 0x02
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3548[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3550[32] -224[32]) }
        bx      = { defs={} expr=v3550[32] }
        sp      = { defs={} expr=v3551[32] }
        bp      = { defs={} expr=v3552[32] }
        si      = { defs={} expr=v3553[32] }
        di      = { defs={} expr=v3554[32] }
        es      = { defs={} expr=v3555[16] }
        cs      = { defs={} expr=v3556[16] }
        ss      = { defs={} expr=v3557[16] }
        ds      = { defs={} expr=v3558[16] }
        fs      = { defs={} expr=v3559[16] }
        gs      = { defs={} expr=v3560[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3562[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v3564[1] }
        af      = { defs={0x080484d8} expr=v3594[1] }
        ?5      = { defs={} expr=v3566[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v3569[1] }
        if      = { defs={} expr=v3570[1] }
        df      = { defs={} expr=v3571[1] }
        of      = { defs={0x080484d8} expr=v3597[1] }
        iopl0   = { defs={} expr=v3573[1] }
        iopl1   = { defs={} expr=v3574[1] }
        nt      = { defs={} expr=v3575[1] }
        ?15     = { defs={} expr=v3576[1] }
        rf      = { defs={} expr=v3577[1] }
        vm      = { defs={} expr=v3578[1] }
        ac      = { defs={} expr=v3579[1] }
        vif     = { defs={} expr=v3580[1] }
        vip     = { defs={} expr=v3581[1] }
        id      = { defs={} expr=v3582[1] }
        ?22     = { defs={} expr=v3583[1] }
        ?23     = { defs={} expr=v3584[1] }
        ?24     = { defs={} expr=v3585[1] }
        ?25     = { defs={} expr=v3586[1] }
        ?26     = { defs={} expr=v3587[1] }
        ?27     = { defs={} expr=v3588[1] }
        ?28     = { defs={} expr=v3589[1] }
        ?29     = { defs={} expr=v3590[1] }
        ?30     = { defs={} expr=v3591[1] }
        ?31     = { defs={} expr=v3592[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=0x080484db[32] }
    memory:
    init mem:
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3548[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3550[32] -224[32]) }
        bx      = { defs={} expr=v3550[32] }
        sp      = { defs={} expr=v3551[32] }
        bp      = { defs={} expr=v3552[32] }
        si      = { defs={} expr=v3553[32] }
        di      = { defs={} expr=v3554[32] }
        es      = { defs={} expr=v3555[16] }
        cs      = { defs={} expr=v3556[16] }
        ss      = { defs={} expr=v3557[16] }
        ds      = { defs={} expr=v3558[16] }
        fs      = { defs={} expr=v3559[16] }
        gs      = { defs={} expr=v3560[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3562[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v3564[1] }
        af      = { defs={0x080484d8} expr=v3594[1] }
        ?5      = { defs={} expr=v3566[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v3569[1] }
        if      = { defs={} expr=v3570[1] }
        df      = { defs={} expr=v3571[1] }
        of      = { defs={0x080484d8} expr=v3597[1] }
        iopl0   = { defs={} expr=v3573[1] }
        iopl1   = { defs={} expr=v3574[1] }
        nt      = { defs={} expr=v3575[1] }
        ?15     = { defs={} expr=v3576[1] }
        rf      = { defs={} expr=v3577[1] }
        vm      = { defs={} expr=v3578[1] }
        ac      = { defs={} expr=v3579[1] }
        vif     = { defs={} expr=v3580[1] }
        vip     = { defs={} expr=v3581[1] }
        id      = { defs={} expr=v3582[1] }
        ?22     = { defs={} expr=v3583[1] }
        ?23     = { defs={} expr=v3584[1] }
        ?24     = { defs={} expr=v3585[1] }
        ?25     = { defs={} expr=v3586[1] }
        ?26     = { defs={} expr=v3587[1] }
        ?27     = { defs={} expr=v3588[1] }
        ?28     = { defs={} expr=v3589[1] }
        ?29     = { defs={} expr=v3590[1] }
        ?30     = { defs={} expr=v3591[1] }
        ?31     = { defs={} expr=v3592[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=0x080484de[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3552[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3552[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3552[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v3552[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3548[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3550[32] -224[32]) }
        bx      = { defs={} expr=v3550[32] }
        sp      = { defs={} expr=v3551[32] }
        bp      = { defs={} expr=v3552[32] }
        si      = { defs={} expr=v3553[32] }
        di      = { defs={} expr=v3554[32] }
        es      = { defs={} expr=v3555[16] }
        cs      = { defs={} expr=v3556[16] }
        ss      = { defs={} expr=v3557[16] }
        ds      = { defs={} expr=v3558[16] }
        fs      = { defs={} expr=v3559[16] }
        gs      = { defs={} expr=v3560[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3562[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v3564[1] }
        af      = { defs={0x080484d8} expr=v3594[1] }
        ?5      = { defs={} expr=v3566[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v3569[1] }
        if      = { defs={} expr=v3570[1] }
        df      = { defs={} expr=v3571[1] }
        of      = { defs={0x080484d8} expr=v3597[1] }
        iopl0   = { defs={} expr=v3573[1] }
        iopl1   = { defs={} expr=v3574[1] }
        nt      = { defs={} expr=v3575[1] }
        ?15     = { defs={} expr=v3576[1] }
        rf      = { defs={} expr=v3577[1] }
        vm      = { defs={} expr=v3578[1] }
        ac      = { defs={} expr=v3579[1] }
        vif     = { defs={} expr=v3580[1] }
        vip     = { defs={} expr=v3581[1] }
        id      = { defs={} expr=v3582[1] }
        ?22     = { defs={} expr=v3583[1] }
        ?23     = { defs={} expr=v3584[1] }
        ?24     = { defs={} expr=v3585[1] }
        ?25     = { defs={} expr=v3586[1] }
        ?26     = { defs={} expr=v3587[1] }
        ?27     = { defs={} expr=v3588[1] }
        ?28     = { defs={} expr=v3589[1] }
        ?29     = { defs={} expr=v3590[1] }
        ?30     = { defs={} expr=v3591[1] }
        ?31     = { defs={} expr=v3592[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de} expr=(ite[32] (invert[1] (zerop[1] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32]))))) 0x080484f0[32] 0x080484e0[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3552[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3552[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3552[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v3552[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3550[32] -224[32]) (add[32] (invert[32] (add[32] v3550[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484e0:add    esp, 0x0c
    registers:
        ax      = { defs={} expr=v3646[32] }
        cx      = { defs={} expr=v3647[32] }
        dx      = { defs={} expr=v3648[32] }
        bx      = { defs={} expr=v3649[32] }
        sp      = { defs={0x080484e0} expr=(add[32] v3650[32] 12[32]) }
        bp      = { defs={} expr=v3651[32] }
        si      = { defs={} expr=v3652[32] }
        di      = { defs={} expr=v3653[32] }
        es      = { defs={} expr=v3654[16] }
        cs      = { defs={} expr=v3655[16] }
        ss      = { defs={} expr=v3656[16] }
        ds      = { defs={} expr=v3657[16] }
        fs      = { defs={} expr=v3658[16] }
        gs      = { defs={} expr=v3659[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3661[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3663[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3665[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3650[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3650[32] 12[32])) }
        tf      = { defs={} expr=v3668[1] }
        if      = { defs={} expr=v3669[1] }
        df      = { defs={} expr=v3670[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3672[1] }
        iopl1   = { defs={} expr=v3673[1] }
        nt      = { defs={} expr=v3674[1] }
        ?15     = { defs={} expr=v3675[1] }
        rf      = { defs={} expr=v3676[1] }
        vm      = { defs={} expr=v3677[1] }
        ac      = { defs={} expr=v3678[1] }
        vif     = { defs={} expr=v3679[1] }
        vip     = { defs={} expr=v3680[1] }
        id      = { defs={} expr=v3681[1] }
        ?22     = { defs={} expr=v3682[1] }
        ?23     = { defs={} expr=v3683[1] }
        ?24     = { defs={} expr=v3684[1] }
        ?25     = { defs={} expr=v3685[1] }
        ?26     = { defs={} expr=v3686[1] }
        ?27     = { defs={} expr=v3687[1] }
        ?28     = { defs={} expr=v3688[1] }
        ?29     = { defs={} expr=v3689[1] }
        ?30     = { defs={} expr=v3690[1] }
        ?31     = { defs={} expr=v3691[1] }
        ip      = { defs={0x080484e0} expr=0x080484e3[32] }
    memory:
    init mem:
0x80484e3:pop    ebx
    registers:
        ax      = { defs={} expr=v3646[32] }
        cx      = { defs={} expr=v3647[32] }
        dx      = { defs={} expr=v3648[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3694[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3695[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3696[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3697[8]))) }
        sp      = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v3650[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v3651[32] }
        si      = { defs={} expr=v3652[32] }
        di      = { defs={} expr=v3653[32] }
        es      = { defs={} expr=v3654[16] }
        cs      = { defs={} expr=v3655[16] }
        ss      = { defs={} expr=v3656[16] }
        ds      = { defs={} expr=v3657[16] }
        fs      = { defs={} expr=v3658[16] }
        gs      = { defs={} expr=v3659[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3661[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3663[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3665[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3650[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3650[32] 12[32])) }
        tf      = { defs={} expr=v3668[1] }
        if      = { defs={} expr=v3669[1] }
        df      = { defs={} expr=v3670[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3672[1] }
        iopl1   = { defs={} expr=v3673[1] }
        nt      = { defs={} expr=v3674[1] }
        ?15     = { defs={} expr=v3675[1] }
        rf      = { defs={} expr=v3676[1] }
        vm      = { defs={} expr=v3677[1] }
        ac      = { defs={} expr=v3678[1] }
        vif     = { defs={} expr=v3679[1] }
        vip     = { defs={} expr=v3680[1] }
        id      = { defs={} expr=v3681[1] }
        ?22     = { defs={} expr=v3682[1] }
        ?23     = { defs={} expr=v3683[1] }
        ?24     = { defs={} expr=v3684[1] }
        ?25     = { defs={} expr=v3685[1] }
        ?26     = { defs={} expr=v3686[1] }
        ?27     = { defs={} expr=v3687[1] }
        ?28     = { defs={} expr=v3688[1] }
        ?29     = { defs={} expr=v3689[1] }
        ?30     = { defs={} expr=v3690[1] }
        ?31     = { defs={} expr=v3691[1] }
        ip      = { defs={0x080484e0,0x080484e3} expr=0x080484e4[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 3[32]) }
          value = { defs={} expr=v3697[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 2[32]) }
          value = { defs={} expr=v3696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 1[32]) }
          value = { defs={} expr=v3695[8] }
          flags = { rdonly }
        address = { defs={0x080484e0} expr=(add[32] v3650[32] 12[32]) }
          value = { defs={} expr=v3694[8] }
          flags = { rdonly }
0x80484e4:pop    esi
    registers:
        ax      = { defs={} expr=v3646[32] }
        cx      = { defs={} expr=v3647[32] }
        dx      = { defs={} expr=v3648[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3694[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3695[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3696[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3697[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v3651[32] }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3704[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3705[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3706[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3707[8]))) }
        di      = { defs={} expr=v3653[32] }
        es      = { defs={} expr=v3654[16] }
        cs      = { defs={} expr=v3655[16] }
        ss      = { defs={} expr=v3656[16] }
        ds      = { defs={} expr=v3657[16] }
        fs      = { defs={} expr=v3658[16] }
        gs      = { defs={} expr=v3659[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3661[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3663[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3665[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3650[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3650[32] 12[32])) }
        tf      = { defs={} expr=v3668[1] }
        if      = { defs={} expr=v3669[1] }
        df      = { defs={} expr=v3670[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3672[1] }
        iopl1   = { defs={} expr=v3673[1] }
        nt      = { defs={} expr=v3674[1] }
        ?15     = { defs={} expr=v3675[1] }
        rf      = { defs={} expr=v3676[1] }
        vm      = { defs={} expr=v3677[1] }
        ac      = { defs={} expr=v3678[1] }
        vif     = { defs={} expr=v3679[1] }
        vip     = { defs={} expr=v3680[1] }
        id      = { defs={} expr=v3681[1] }
        ?22     = { defs={} expr=v3682[1] }
        ?23     = { defs={} expr=v3683[1] }
        ?24     = { defs={} expr=v3684[1] }
        ?25     = { defs={} expr=v3685[1] }
        ?26     = { defs={} expr=v3686[1] }
        ?27     = { defs={} expr=v3687[1] }
        ?28     = { defs={} expr=v3688[1] }
        ?29     = { defs={} expr=v3689[1] }
        ?30     = { defs={} expr=v3690[1] }
        ?31     = { defs={} expr=v3691[1] }
        ip      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=0x080484e5[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3707[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3706[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3705[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v3650[32] 12[32]) 4[32]) }
          value = { defs={} expr=v3704[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 3[32]) }
          value = { defs={} expr=v3697[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 2[32]) }
          value = { defs={} expr=v3696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 1[32]) }
          value = { defs={} expr=v3695[8] }
          flags = { rdonly }
        address = { defs={0x080484e0} expr=(add[32] v3650[32] 12[32]) }
          value = { defs={} expr=v3694[8] }
          flags = { rdonly }
0x80484e5:pop    edi
    registers:
        ax      = { defs={} expr=v3646[32] }
        cx      = { defs={} expr=v3647[32] }
        dx      = { defs={} expr=v3648[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3694[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3695[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3696[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3697[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v3651[32] }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3704[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3705[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3706[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3707[8]))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3717[8]))) }
        es      = { defs={} expr=v3654[16] }
        cs      = { defs={} expr=v3655[16] }
        ss      = { defs={} expr=v3656[16] }
        ds      = { defs={} expr=v3657[16] }
        fs      = { defs={} expr=v3658[16] }
        gs      = { defs={} expr=v3659[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3661[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3663[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3665[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3650[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3650[32] 12[32])) }
        tf      = { defs={} expr=v3668[1] }
        if      = { defs={} expr=v3669[1] }
        df      = { defs={} expr=v3670[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3672[1] }
        iopl1   = { defs={} expr=v3673[1] }
        nt      = { defs={} expr=v3674[1] }
        ?15     = { defs={} expr=v3675[1] }
        rf      = { defs={} expr=v3676[1] }
        vm      = { defs={} expr=v3677[1] }
        ac      = { defs={} expr=v3678[1] }
        vif     = { defs={} expr=v3679[1] }
        vip     = { defs={} expr=v3680[1] }
        id      = { defs={} expr=v3681[1] }
        ?22     = { defs={} expr=v3682[1] }
        ?23     = { defs={} expr=v3683[1] }
        ?24     = { defs={} expr=v3684[1] }
        ?25     = { defs={} expr=v3685[1] }
        ?26     = { defs={} expr=v3686[1] }
        ?27     = { defs={} expr=v3687[1] }
        ?28     = { defs={} expr=v3688[1] }
        ?29     = { defs={} expr=v3689[1] }
        ?30     = { defs={} expr=v3690[1] }
        ?31     = { defs={} expr=v3691[1] }
        ip      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=0x080484e6[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3716[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3715[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3714[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3707[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3706[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3705[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v3650[32] 12[32]) 4[32]) }
          value = { defs={} expr=v3704[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 3[32]) }
          value = { defs={} expr=v3697[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 2[32]) }
          value = { defs={} expr=v3696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 1[32]) }
          value = { defs={} expr=v3695[8] }
          flags = { rdonly }
        address = { defs={0x080484e0} expr=(add[32] v3650[32] 12[32]) }
          value = { defs={} expr=v3694[8] }
          flags = { rdonly }
0x80484e6:pop    ebp
    registers:
        ax      = { defs={} expr=v3646[32] }
        cx      = { defs={} expr=v3647[32] }
        dx      = { defs={} expr=v3648[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3694[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3695[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3696[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3697[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3727[8]))) }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3704[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3705[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3706[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3707[8]))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3717[8]))) }
        es      = { defs={} expr=v3654[16] }
        cs      = { defs={} expr=v3655[16] }
        ss      = { defs={} expr=v3656[16] }
        ds      = { defs={} expr=v3657[16] }
        fs      = { defs={} expr=v3658[16] }
        gs      = { defs={} expr=v3659[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3661[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3663[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3665[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3650[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3650[32] 12[32])) }
        tf      = { defs={} expr=v3668[1] }
        if      = { defs={} expr=v3669[1] }
        df      = { defs={} expr=v3670[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3672[1] }
        iopl1   = { defs={} expr=v3673[1] }
        nt      = { defs={} expr=v3674[1] }
        ?15     = { defs={} expr=v3675[1] }
        rf      = { defs={} expr=v3676[1] }
        vm      = { defs={} expr=v3677[1] }
        ac      = { defs={} expr=v3678[1] }
        vif     = { defs={} expr=v3679[1] }
        vip     = { defs={} expr=v3680[1] }
        id      = { defs={} expr=v3681[1] }
        ?22     = { defs={} expr=v3682[1] }
        ?23     = { defs={} expr=v3683[1] }
        ?24     = { defs={} expr=v3684[1] }
        ?25     = { defs={} expr=v3685[1] }
        ?26     = { defs={} expr=v3686[1] }
        ?27     = { defs={} expr=v3687[1] }
        ?28     = { defs={} expr=v3688[1] }
        ?29     = { defs={} expr=v3689[1] }
        ?30     = { defs={} expr=v3690[1] }
        ?31     = { defs={} expr=v3691[1] }
        ip      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=0x080484e7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3727[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3726[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3725[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3724[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3716[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3715[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3714[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3707[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3706[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3705[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v3650[32] 12[32]) 4[32]) }
          value = { defs={} expr=v3704[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 3[32]) }
          value = { defs={} expr=v3697[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 2[32]) }
          value = { defs={} expr=v3696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 1[32]) }
          value = { defs={} expr=v3695[8] }
          flags = { rdonly }
        address = { defs={0x080484e0} expr=(add[32] v3650[32] 12[32]) }
          value = { defs={} expr=v3694[8] }
          flags = { rdonly }
0x80484e7:ret    
    registers:
        ax      = { defs={} expr=v3646[32] }
        cx      = { defs={} expr=v3647[32] }
        dx      = { defs={} expr=v3648[32] }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3694[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3695[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3696[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3697[8]))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3727[8]))) }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3704[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3705[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3706[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3707[8]))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3717[8]))) }
        es      = { defs={} expr=v3654[16] }
        cs      = { defs={} expr=v3655[16] }
        ss      = { defs={} expr=v3656[16] }
        ds      = { defs={} expr=v3657[16] }
        fs      = { defs={} expr=v3658[16] }
        gs      = { defs={} expr=v3659[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3661[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3650[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3663[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3665[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3650[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3650[32] 12[32])) }
        tf      = { defs={} expr=v3668[1] }
        if      = { defs={} expr=v3669[1] }
        df      = { defs={} expr=v3670[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3650[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3650[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3672[1] }
        iopl1   = { defs={} expr=v3673[1] }
        nt      = { defs={} expr=v3674[1] }
        ?15     = { defs={} expr=v3675[1] }
        rf      = { defs={} expr=v3676[1] }
        vm      = { defs={} expr=v3677[1] }
        ac      = { defs={} expr=v3678[1] }
        vif     = { defs={} expr=v3679[1] }
        vip     = { defs={} expr=v3680[1] }
        id      = { defs={} expr=v3681[1] }
        ?22     = { defs={} expr=v3682[1] }
        ?23     = { defs={} expr=v3683[1] }
        ?24     = { defs={} expr=v3684[1] }
        ?25     = { defs={} expr=v3685[1] }
        ?26     = { defs={} expr=v3686[1] }
        ?27     = { defs={} expr=v3687[1] }
        ?28     = { defs={} expr=v3688[1] }
        ?29     = { defs={} expr=v3689[1] }
        ?30     = { defs={} expr=v3690[1] }
        ?31     = { defs={} expr=v3691[1] }
        ip      = { defs={0x080484e7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3734[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3735[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3736[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3737[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3737[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3736[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3735[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3734[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3727[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3726[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3725[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3724[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3716[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3715[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3714[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3707[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3706[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3650[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3705[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v3650[32] 12[32]) 4[32]) }
          value = { defs={} expr=v3704[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 3[32]) }
          value = { defs={} expr=v3697[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 2[32]) }
          value = { defs={} expr=v3696[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3650[32] 12[32]) 1[32]) }
          value = { defs={} expr=v3695[8] }
          flags = { rdonly }
        address = { defs={0x080484e0} expr=(add[32] v3650[32] 12[32]) }
          value = { defs={} expr=v3694[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048520:push   ebp
    registers:
        ax      = { defs={} expr=v3790[32] }
        cx      = { defs={} expr=v3791[32] }
        dx      = { defs={} expr=v3792[32] }
        bx      = { defs={} expr=v3793[32] }
        sp      = { defs={0x08048520} expr=(add[32] v3794[32] -4[32]) }
        bp      = { defs={} expr=v3795[32] }
        si      = { defs={} expr=v3796[32] }
        di      = { defs={} expr=v3797[32] }
        es      = { defs={} expr=v3798[16] }
        cs      = { defs={} expr=v3799[16] }
        ss      = { defs={} expr=v3800[16] }
        ds      = { defs={} expr=v3801[16] }
        fs      = { defs={} expr=v3802[16] }
        gs      = { defs={} expr=v3803[16] }
        cf      = { defs={} expr=v3804[1] }
        ?1      = { defs={} expr=v3805[1] }
        pf      = { defs={} expr=v3806[1] }
        ?3      = { defs={} expr=v3807[1] }
        af      = { defs={} expr=v3808[1] }
        ?5      = { defs={} expr=v3809[1] }
        zf      = { defs={} expr=v3810[1] }
        sf      = { defs={} expr=v3811[1] }
        tf      = { defs={} expr=v3812[1] }
        if      = { defs={} expr=v3813[1] }
        df      = { defs={} expr=v3814[1] }
        of      = { defs={} expr=v3815[1] }
        iopl0   = { defs={} expr=v3816[1] }
        iopl1   = { defs={} expr=v3817[1] }
        nt      = { defs={} expr=v3818[1] }
        ?15     = { defs={} expr=v3819[1] }
        rf      = { defs={} expr=v3820[1] }
        vm      = { defs={} expr=v3821[1] }
        ac      = { defs={} expr=v3822[1] }
        vif     = { defs={} expr=v3823[1] }
        vip     = { defs={} expr=v3824[1] }
        id      = { defs={} expr=v3825[1] }
        ?22     = { defs={} expr=v3826[1] }
        ?23     = { defs={} expr=v3827[1] }
        ?24     = { defs={} expr=v3828[1] }
        ?25     = { defs={} expr=v3829[1] }
        ?26     = { defs={} expr=v3830[1] }
        ?27     = { defs={} expr=v3831[1] }
        ?28     = { defs={} expr=v3832[1] }
        ?29     = { defs={} expr=v3833[1] }
        ?30     = { defs={} expr=v3834[1] }
        ?31     = { defs={} expr=v3835[1] }
        ip      = { defs={0x08048520} expr=0x08048521[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3795[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3794[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3795[32]) }
          flags = { }
    init mem:
0x8048521:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3790[32] }
        cx      = { defs={} expr=v3791[32] }
        dx      = { defs={} expr=v3792[32] }
        bx      = { defs={} expr=v3793[32] }
        sp      = { defs={0x08048520} expr=(add[32] v3794[32] -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3794[32] -4[32]) }
        si      = { defs={} expr=v3796[32] }
        di      = { defs={} expr=v3797[32] }
        es      = { defs={} expr=v3798[16] }
        cs      = { defs={} expr=v3799[16] }
        ss      = { defs={} expr=v3800[16] }
        ds      = { defs={} expr=v3801[16] }
        fs      = { defs={} expr=v3802[16] }
        gs      = { defs={} expr=v3803[16] }
        cf      = { defs={} expr=v3804[1] }
        ?1      = { defs={} expr=v3805[1] }
        pf      = { defs={} expr=v3806[1] }
        ?3      = { defs={} expr=v3807[1] }
        af      = { defs={} expr=v3808[1] }
        ?5      = { defs={} expr=v3809[1] }
        zf      = { defs={} expr=v3810[1] }
        sf      = { defs={} expr=v3811[1] }
        tf      = { defs={} expr=v3812[1] }
        if      = { defs={} expr=v3813[1] }
        df      = { defs={} expr=v3814[1] }
        of      = { defs={} expr=v3815[1] }
        iopl0   = { defs={} expr=v3816[1] }
        iopl1   = { defs={} expr=v3817[1] }
        nt      = { defs={} expr=v3818[1] }
        ?15     = { defs={} expr=v3819[1] }
        rf      = { defs={} expr=v3820[1] }
        vm      = { defs={} expr=v3821[1] }
        ac      = { defs={} expr=v3822[1] }
        vif     = { defs={} expr=v3823[1] }
        vip     = { defs={} expr=v3824[1] }
        id      = { defs={} expr=v3825[1] }
        ?22     = { defs={} expr=v3826[1] }
        ?23     = { defs={} expr=v3827[1] }
        ?24     = { defs={} expr=v3828[1] }
        ?25     = { defs={} expr=v3829[1] }
        ?26     = { defs={} expr=v3830[1] }
        ?27     = { defs={} expr=v3831[1] }
        ?28     = { defs={} expr=v3832[1] }
        ?29     = { defs={} expr=v3833[1] }
        ?30     = { defs={} expr=v3834[1] }
        ?31     = { defs={} expr=v3835[1] }
        ip      = { defs={0x08048520,0x08048521} expr=0x08048523[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3795[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3794[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3795[32]) }
          flags = { }
    init mem:
0x8048523:push   edi
    registers:
        ax      = { defs={} expr=v3790[32] }
        cx      = { defs={} expr=v3791[32] }
        dx      = { defs={} expr=v3792[32] }
        bx      = { defs={} expr=v3793[32] }
        sp      = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3794[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3794[32] -4[32]) }
        si      = { defs={} expr=v3796[32] }
        di      = { defs={} expr=v3797[32] }
        es      = { defs={} expr=v3798[16] }
        cs      = { defs={} expr=v3799[16] }
        ss      = { defs={} expr=v3800[16] }
        ds      = { defs={} expr=v3801[16] }
        fs      = { defs={} expr=v3802[16] }
        gs      = { defs={} expr=v3803[16] }
        cf      = { defs={} expr=v3804[1] }
        ?1      = { defs={} expr=v3805[1] }
        pf      = { defs={} expr=v3806[1] }
        ?3      = { defs={} expr=v3807[1] }
        af      = { defs={} expr=v3808[1] }
        ?5      = { defs={} expr=v3809[1] }
        zf      = { defs={} expr=v3810[1] }
        sf      = { defs={} expr=v3811[1] }
        tf      = { defs={} expr=v3812[1] }
        if      = { defs={} expr=v3813[1] }
        df      = { defs={} expr=v3814[1] }
        of      = { defs={} expr=v3815[1] }
        iopl0   = { defs={} expr=v3816[1] }
        iopl1   = { defs={} expr=v3817[1] }
        nt      = { defs={} expr=v3818[1] }
        ?15     = { defs={} expr=v3819[1] }
        rf      = { defs={} expr=v3820[1] }
        vm      = { defs={} expr=v3821[1] }
        ac      = { defs={} expr=v3822[1] }
        vif     = { defs={} expr=v3823[1] }
        vip     = { defs={} expr=v3824[1] }
        id      = { defs={} expr=v3825[1] }
        ?22     = { defs={} expr=v3826[1] }
        ?23     = { defs={} expr=v3827[1] }
        ?24     = { defs={} expr=v3828[1] }
        ?25     = { defs={} expr=v3829[1] }
        ?26     = { defs={} expr=v3830[1] }
        ?27     = { defs={} expr=v3831[1] }
        ?28     = { defs={} expr=v3832[1] }
        ?29     = { defs={} expr=v3833[1] }
        ?30     = { defs={} expr=v3834[1] }
        ?31     = { defs={} expr=v3835[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523} expr=0x08048524[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3797[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3794[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3795[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3794[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3795[32]) }
          flags = { }
    init mem:
0x8048524:push   esi
    registers:
        ax      = { defs={} expr=v3790[32] }
        cx      = { defs={} expr=v3791[32] }
        dx      = { defs={} expr=v3792[32] }
        bx      = { defs={} expr=v3793[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3794[32] -4[32]) }
        si      = { defs={} expr=v3796[32] }
        di      = { defs={} expr=v3797[32] }
        es      = { defs={} expr=v3798[16] }
        cs      = { defs={} expr=v3799[16] }
        ss      = { defs={} expr=v3800[16] }
        ds      = { defs={} expr=v3801[16] }
        fs      = { defs={} expr=v3802[16] }
        gs      = { defs={} expr=v3803[16] }
        cf      = { defs={} expr=v3804[1] }
        ?1      = { defs={} expr=v3805[1] }
        pf      = { defs={} expr=v3806[1] }
        ?3      = { defs={} expr=v3807[1] }
        af      = { defs={} expr=v3808[1] }
        ?5      = { defs={} expr=v3809[1] }
        zf      = { defs={} expr=v3810[1] }
        sf      = { defs={} expr=v3811[1] }
        tf      = { defs={} expr=v3812[1] }
        if      = { defs={} expr=v3813[1] }
        df      = { defs={} expr=v3814[1] }
        of      = { defs={} expr=v3815[1] }
        iopl0   = { defs={} expr=v3816[1] }
        iopl1   = { defs={} expr=v3817[1] }
        nt      = { defs={} expr=v3818[1] }
        ?15     = { defs={} expr=v3819[1] }
        rf      = { defs={} expr=v3820[1] }
        vm      = { defs={} expr=v3821[1] }
        ac      = { defs={} expr=v3822[1] }
        vif     = { defs={} expr=v3823[1] }
        vip     = { defs={} expr=v3824[1] }
        id      = { defs={} expr=v3825[1] }
        ?22     = { defs={} expr=v3826[1] }
        ?23     = { defs={} expr=v3827[1] }
        ?24     = { defs={} expr=v3828[1] }
        ?25     = { defs={} expr=v3829[1] }
        ?26     = { defs={} expr=v3830[1] }
        ?27     = { defs={} expr=v3831[1] }
        ?28     = { defs={} expr=v3832[1] }
        ?29     = { defs={} expr=v3833[1] }
        ?30     = { defs={} expr=v3834[1] }
        ?31     = { defs={} expr=v3835[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524} expr=0x08048525[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3796[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3797[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3794[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3795[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3794[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3795[32]) }
          flags = { }
    init mem:
0x8048525:push   ebx
    registers:
        ax      = { defs={} expr=v3790[32] }
        cx      = { defs={} expr=v3791[32] }
        dx      = { defs={} expr=v3792[32] }
        bx      = { defs={} expr=v3793[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3794[32] -4[32]) }
        si      = { defs={} expr=v3796[32] }
        di      = { defs={} expr=v3797[32] }
        es      = { defs={} expr=v3798[16] }
        cs      = { defs={} expr=v3799[16] }
        ss      = { defs={} expr=v3800[16] }
        ds      = { defs={} expr=v3801[16] }
        fs      = { defs={} expr=v3802[16] }
        gs      = { defs={} expr=v3803[16] }
        cf      = { defs={} expr=v3804[1] }
        ?1      = { defs={} expr=v3805[1] }
        pf      = { defs={} expr=v3806[1] }
        ?3      = { defs={} expr=v3807[1] }
        af      = { defs={} expr=v3808[1] }
        ?5      = { defs={} expr=v3809[1] }
        zf      = { defs={} expr=v3810[1] }
        sf      = { defs={} expr=v3811[1] }
        tf      = { defs={} expr=v3812[1] }
        if      = { defs={} expr=v3813[1] }
        df      = { defs={} expr=v3814[1] }
        of      = { defs={} expr=v3815[1] }
        iopl0   = { defs={} expr=v3816[1] }
        iopl1   = { defs={} expr=v3817[1] }
        nt      = { defs={} expr=v3818[1] }
        ?15     = { defs={} expr=v3819[1] }
        rf      = { defs={} expr=v3820[1] }
        vm      = { defs={} expr=v3821[1] }
        ac      = { defs={} expr=v3822[1] }
        vif     = { defs={} expr=v3823[1] }
        vip     = { defs={} expr=v3824[1] }
        id      = { defs={} expr=v3825[1] }
        ?22     = { defs={} expr=v3826[1] }
        ?23     = { defs={} expr=v3827[1] }
        ?24     = { defs={} expr=v3828[1] }
        ?25     = { defs={} expr=v3829[1] }
        ?26     = { defs={} expr=v3830[1] }
        ?27     = { defs={} expr=v3831[1] }
        ?28     = { defs={} expr=v3832[1] }
        ?29     = { defs={} expr=v3833[1] }
        ?30     = { defs={} expr=v3834[1] }
        ?31     = { defs={} expr=v3835[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525} expr=0x08048526[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3793[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3793[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3793[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3793[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3796[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3797[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3794[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3795[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3794[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3795[32]) }
          flags = { }
    init mem:
0x8048526:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v3790[32] }
        cx      = { defs={} expr=v3791[32] }
        dx      = { defs={} expr=v3792[32] }
        bx      = { defs={} expr=v3793[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3794[32] -4[32]) }
        si      = { defs={} expr=v3796[32] }
        di      = { defs={} expr=v3797[32] }
        es      = { defs={} expr=v3798[16] }
        cs      = { defs={} expr=v3799[16] }
        ss      = { defs={} expr=v3800[16] }
        ds      = { defs={} expr=v3801[16] }
        fs      = { defs={} expr=v3802[16] }
        gs      = { defs={} expr=v3803[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v3805[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v3807[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v3809[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v3812[1] }
        if      = { defs={} expr=v3813[1] }
        df      = { defs={} expr=v3814[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v3816[1] }
        iopl1   = { defs={} expr=v3817[1] }
        nt      = { defs={} expr=v3818[1] }
        ?15     = { defs={} expr=v3819[1] }
        rf      = { defs={} expr=v3820[1] }
        vm      = { defs={} expr=v3821[1] }
        ac      = { defs={} expr=v3822[1] }
        vif     = { defs={} expr=v3823[1] }
        vip     = { defs={} expr=v3824[1] }
        id      = { defs={} expr=v3825[1] }
        ?22     = { defs={} expr=v3826[1] }
        ?23     = { defs={} expr=v3827[1] }
        ?24     = { defs={} expr=v3828[1] }
        ?25     = { defs={} expr=v3829[1] }
        ?26     = { defs={} expr=v3830[1] }
        ?27     = { defs={} expr=v3831[1] }
        ?28     = { defs={} expr=v3832[1] }
        ?29     = { defs={} expr=v3833[1] }
        ?30     = { defs={} expr=v3834[1] }
        ?31     = { defs={} expr=v3835[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526} expr=0x08048529[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3793[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3793[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3793[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3793[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3796[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3797[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3794[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3795[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3794[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3795[32]) }
          flags = { }
    init mem:
0x8048529:call   0x0804852e<<Insn>>
    registers:
        ax      = { defs={} expr=v3790[32] }
        cx      = { defs={} expr=v3791[32] }
        dx      = { defs={} expr=v3792[32] }
        bx      = { defs={} expr=v3793[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3794[32] -4[32]) }
        si      = { defs={} expr=v3796[32] }
        di      = { defs={} expr=v3797[32] }
        es      = { defs={} expr=v3798[16] }
        cs      = { defs={} expr=v3799[16] }
        ss      = { defs={} expr=v3800[16] }
        ds      = { defs={} expr=v3801[16] }
        fs      = { defs={} expr=v3802[16] }
        gs      = { defs={} expr=v3803[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v3805[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v3807[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v3809[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v3812[1] }
        if      = { defs={} expr=v3813[1] }
        df      = { defs={} expr=v3814[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v3816[1] }
        iopl1   = { defs={} expr=v3817[1] }
        nt      = { defs={} expr=v3818[1] }
        ?15     = { defs={} expr=v3819[1] }
        rf      = { defs={} expr=v3820[1] }
        vm      = { defs={} expr=v3821[1] }
        ac      = { defs={} expr=v3822[1] }
        vif     = { defs={} expr=v3823[1] }
        vip     = { defs={} expr=v3824[1] }
        id      = { defs={} expr=v3825[1] }
        ?22     = { defs={} expr=v3826[1] }
        ?23     = { defs={} expr=v3827[1] }
        ?24     = { defs={} expr=v3828[1] }
        ?25     = { defs={} expr=v3829[1] }
        ?26     = { defs={} expr=v3830[1] }
        ?27     = { defs={} expr=v3831[1] }
        ?28     = { defs={} expr=v3832[1] }
        ?29     = { defs={} expr=v3833[1] }
        ?30     = { defs={} expr=v3834[1] }
        ?31     = { defs={} expr=v3835[1] }
        ip      = { defs={0x08048529} expr=0x0804852e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3793[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3793[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3793[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3793[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3796[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3796[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3794[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3797[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3794[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3797[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3795[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3794[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3795[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3794[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3795[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
    registers:
        ax      = { defs={} expr=v3884[32] }
        cx      = { defs={} expr=v3885[32] }
        dx      = { defs={} expr=v3886[32] }
        bx      = { defs={0x0804852e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) }
        sp      = { defs={0x0804852e} expr=(add[32] v3888[32] 4[32]) }
        bp      = { defs={} expr=v3889[32] }
        si      = { defs={} expr=v3890[32] }
        di      = { defs={} expr=v3891[32] }
        es      = { defs={} expr=v3892[16] }
        cs      = { defs={} expr=v3893[16] }
        ss      = { defs={} expr=v3894[16] }
        ds      = { defs={} expr=v3895[16] }
        fs      = { defs={} expr=v3896[16] }
        gs      = { defs={} expr=v3897[16] }
        cf      = { defs={} expr=v3898[1] }
        ?1      = { defs={} expr=v3899[1] }
        pf      = { defs={} expr=v3900[1] }
        ?3      = { defs={} expr=v3901[1] }
        af      = { defs={} expr=v3902[1] }
        ?5      = { defs={} expr=v3903[1] }
        zf      = { defs={} expr=v3904[1] }
        sf      = { defs={} expr=v3905[1] }
        tf      = { defs={} expr=v3906[1] }
        if      = { defs={} expr=v3907[1] }
        df      = { defs={} expr=v3908[1] }
        of      = { defs={} expr=v3909[1] }
        iopl0   = { defs={} expr=v3910[1] }
        iopl1   = { defs={} expr=v3911[1] }
        nt      = { defs={} expr=v3912[1] }
        ?15     = { defs={} expr=v3913[1] }
        rf      = { defs={} expr=v3914[1] }
        vm      = { defs={} expr=v3915[1] }
        ac      = { defs={} expr=v3916[1] }
        vif     = { defs={} expr=v3917[1] }
        vip     = { defs={} expr=v3918[1] }
        id      = { defs={} expr=v3919[1] }
        ?22     = { defs={} expr=v3920[1] }
        ?23     = { defs={} expr=v3921[1] }
        ?24     = { defs={} expr=v3922[1] }
        ?25     = { defs={} expr=v3923[1] }
        ?26     = { defs={} expr=v3924[1] }
        ?27     = { defs={} expr=v3925[1] }
        ?28     = { defs={} expr=v3926[1] }
        ?29     = { defs={} expr=v3927[1] }
        ?30     = { defs={} expr=v3928[1] }
        ?31     = { defs={} expr=v3929[1] }
        ip      = { defs={0x0804852e} expr=0x0804852f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3888[32] 3[32]) }
          value = { defs={} expr=v3935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 2[32]) }
          value = { defs={} expr=v3934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 1[32]) }
          value = { defs={} expr=v3933[8] }
          flags = { rdonly }
        address = { defs={} expr=v3888[32] }
          value = { defs={} expr=v3932[8] }
          flags = { rdonly }
0x804852f:add    ebx, 0x0000119a
    registers:
        ax      = { defs={} expr=v3884[32] }
        cx      = { defs={} expr=v3885[32] }
        dx      = { defs={} expr=v3886[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3888[32] 4[32]) }
        bp      = { defs={} expr=v3889[32] }
        si      = { defs={} expr=v3890[32] }
        di      = { defs={} expr=v3891[32] }
        es      = { defs={} expr=v3892[16] }
        cs      = { defs={} expr=v3893[16] }
        ss      = { defs={} expr=v3894[16] }
        ds      = { defs={} expr=v3895[16] }
        fs      = { defs={} expr=v3896[16] }
        gs      = { defs={} expr=v3897[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v3899[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v3901[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v3903[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])) }
        tf      = { defs={} expr=v3906[1] }
        if      = { defs={} expr=v3907[1] }
        df      = { defs={} expr=v3908[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33])))))) }
        iopl0   = { defs={} expr=v3910[1] }
        iopl1   = { defs={} expr=v3911[1] }
        nt      = { defs={} expr=v3912[1] }
        ?15     = { defs={} expr=v3913[1] }
        rf      = { defs={} expr=v3914[1] }
        vm      = { defs={} expr=v3915[1] }
        ac      = { defs={} expr=v3916[1] }
        vif     = { defs={} expr=v3917[1] }
        vip     = { defs={} expr=v3918[1] }
        id      = { defs={} expr=v3919[1] }
        ?22     = { defs={} expr=v3920[1] }
        ?23     = { defs={} expr=v3921[1] }
        ?24     = { defs={} expr=v3922[1] }
        ?25     = { defs={} expr=v3923[1] }
        ?26     = { defs={} expr=v3924[1] }
        ?27     = { defs={} expr=v3925[1] }
        ?28     = { defs={} expr=v3926[1] }
        ?29     = { defs={} expr=v3927[1] }
        ?30     = { defs={} expr=v3928[1] }
        ?31     = { defs={} expr=v3929[1] }
        ip      = { defs={0x0804852e,0x0804852f} expr=0x08048535[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3888[32] 3[32]) }
          value = { defs={} expr=v3935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 2[32]) }
          value = { defs={} expr=v3934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 1[32]) }
          value = { defs={} expr=v3933[8] }
          flags = { rdonly }
        address = { defs={} expr=v3888[32] }
          value = { defs={} expr=v3932[8] }
          flags = { rdonly }
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v3885[32] }
        dx      = { defs={} expr=v3886[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3888[32] 4[32]) }
        bp      = { defs={} expr=v3889[32] }
        si      = { defs={} expr=v3890[32] }
        di      = { defs={} expr=v3891[32] }
        es      = { defs={} expr=v3892[16] }
        cs      = { defs={} expr=v3893[16] }
        ss      = { defs={} expr=v3894[16] }
        ds      = { defs={} expr=v3895[16] }
        fs      = { defs={} expr=v3896[16] }
        gs      = { defs={} expr=v3897[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v3899[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v3901[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v3903[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])) }
        tf      = { defs={} expr=v3906[1] }
        if      = { defs={} expr=v3907[1] }
        df      = { defs={} expr=v3908[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33])))))) }
        iopl0   = { defs={} expr=v3910[1] }
        iopl1   = { defs={} expr=v3911[1] }
        nt      = { defs={} expr=v3912[1] }
        ?15     = { defs={} expr=v3913[1] }
        rf      = { defs={} expr=v3914[1] }
        vm      = { defs={} expr=v3915[1] }
        ac      = { defs={} expr=v3916[1] }
        vif     = { defs={} expr=v3917[1] }
        vip     = { defs={} expr=v3918[1] }
        id      = { defs={} expr=v3919[1] }
        ?22     = { defs={} expr=v3920[1] }
        ?23     = { defs={} expr=v3921[1] }
        ?24     = { defs={} expr=v3922[1] }
        ?25     = { defs={} expr=v3923[1] }
        ?26     = { defs={} expr=v3924[1] }
        ?27     = { defs={} expr=v3925[1] }
        ?28     = { defs={} expr=v3926[1] }
        ?29     = { defs={} expr=v3927[1] }
        ?30     = { defs={} expr=v3928[1] }
        ?31     = { defs={} expr=v3929[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535} expr=0x0804853b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3888[32] 3[32]) }
          value = { defs={} expr=v3935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 2[32]) }
          value = { defs={} expr=v3934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 1[32]) }
          value = { defs={} expr=v3933[8] }
          flags = { rdonly }
        address = { defs={} expr=v3888[32] }
          value = { defs={} expr=v3932[8] }
          flags = { rdonly }
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v3885[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3888[32] 4[32]) }
        bp      = { defs={} expr=v3889[32] }
        si      = { defs={} expr=v3890[32] }
        di      = { defs={} expr=v3891[32] }
        es      = { defs={} expr=v3892[16] }
        cs      = { defs={} expr=v3893[16] }
        ss      = { defs={} expr=v3894[16] }
        ds      = { defs={} expr=v3895[16] }
        fs      = { defs={} expr=v3896[16] }
        gs      = { defs={} expr=v3897[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v3899[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v3901[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v3903[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32])) }
        tf      = { defs={} expr=v3906[1] }
        if      = { defs={} expr=v3907[1] }
        df      = { defs={} expr=v3908[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8])))) 4506[33])))))) }
        iopl0   = { defs={} expr=v3910[1] }
        iopl1   = { defs={} expr=v3911[1] }
        nt      = { defs={} expr=v3912[1] }
        ?15     = { defs={} expr=v3913[1] }
        rf      = { defs={} expr=v3914[1] }
        vm      = { defs={} expr=v3915[1] }
        ac      = { defs={} expr=v3916[1] }
        vif     = { defs={} expr=v3917[1] }
        vip     = { defs={} expr=v3918[1] }
        id      = { defs={} expr=v3919[1] }
        ?22     = { defs={} expr=v3920[1] }
        ?23     = { defs={} expr=v3921[1] }
        ?24     = { defs={} expr=v3922[1] }
        ?25     = { defs={} expr=v3923[1] }
        ?26     = { defs={} expr=v3924[1] }
        ?27     = { defs={} expr=v3925[1] }
        ?28     = { defs={} expr=v3926[1] }
        ?29     = { defs={} expr=v3927[1] }
        ?30     = { defs={} expr=v3928[1] }
        ?31     = { defs={} expr=v3929[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b} expr=0x08048541[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3888[32] 3[32]) }
          value = { defs={} expr=v3935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 2[32]) }
          value = { defs={} expr=v3934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 1[32]) }
          value = { defs={} expr=v3933[8] }
          flags = { rdonly }
        address = { defs={} expr=v3888[32] }
          value = { defs={} expr=v3932[8] }
          flags = { rdonly }
0x8048541:sub    eax, edx
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])) }
        cx      = { defs={} expr=v3885[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3888[32] 4[32]) }
        bp      = { defs={} expr=v3889[32] }
        si      = { defs={} expr=v3890[32] }
        di      = { defs={} expr=v3891[32] }
        es      = { defs={} expr=v3892[16] }
        cs      = { defs={} expr=v3893[16] }
        ss      = { defs={} expr=v3894[16] }
        ds      = { defs={} expr=v3895[16] }
        fs      = { defs={} expr=v3896[16] }
        gs      = { defs={} expr=v3897[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v3899[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v3901[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v3903[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(zerop[1] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) }
        tf      = { defs={} expr=v3906[1] }
        if      = { defs={} expr=v3907[1] }
        df      = { defs={} expr=v3908[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v3910[1] }
        iopl1   = { defs={} expr=v3911[1] }
        nt      = { defs={} expr=v3912[1] }
        ?15     = { defs={} expr=v3913[1] }
        rf      = { defs={} expr=v3914[1] }
        vm      = { defs={} expr=v3915[1] }
        ac      = { defs={} expr=v3916[1] }
        vif     = { defs={} expr=v3917[1] }
        vip     = { defs={} expr=v3918[1] }
        id      = { defs={} expr=v3919[1] }
        ?22     = { defs={} expr=v3920[1] }
        ?23     = { defs={} expr=v3921[1] }
        ?24     = { defs={} expr=v3922[1] }
        ?25     = { defs={} expr=v3923[1] }
        ?26     = { defs={} expr=v3924[1] }
        ?27     = { defs={} expr=v3925[1] }
        ?28     = { defs={} expr=v3926[1] }
        ?29     = { defs={} expr=v3927[1] }
        ?30     = { defs={} expr=v3928[1] }
        ?31     = { defs={} expr=v3929[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0x08048543[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3888[32] 3[32]) }
          value = { defs={} expr=v3935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 2[32]) }
          value = { defs={} expr=v3934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 1[32]) }
          value = { defs={} expr=v3933[8] }
          flags = { rdonly }
        address = { defs={} expr=v3888[32] }
          value = { defs={} expr=v3932[8] }
          flags = { rdonly }
0x8048543:sar    eax, 0x02
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3885[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3888[32] 4[32]) }
        bp      = { defs={} expr=v3889[32] }
        si      = { defs={} expr=v3890[32] }
        di      = { defs={} expr=v3891[32] }
        es      = { defs={} expr=v3892[16] }
        cs      = { defs={} expr=v3893[16] }
        ss      = { defs={} expr=v3894[16] }
        ds      = { defs={} expr=v3895[16] }
        fs      = { defs={} expr=v3896[16] }
        gs      = { defs={} expr=v3897[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3899[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v3901[1] }
        af      = { defs={0x08048543} expr=v3941[1] }
        ?5      = { defs={} expr=v3903[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v3906[1] }
        if      = { defs={} expr=v3907[1] }
        df      = { defs={} expr=v3908[1] }
        of      = { defs={0x08048543} expr=v3944[1] }
        iopl0   = { defs={} expr=v3910[1] }
        iopl1   = { defs={} expr=v3911[1] }
        nt      = { defs={} expr=v3912[1] }
        ?15     = { defs={} expr=v3913[1] }
        rf      = { defs={} expr=v3914[1] }
        vm      = { defs={} expr=v3915[1] }
        ac      = { defs={} expr=v3916[1] }
        vif     = { defs={} expr=v3917[1] }
        vip     = { defs={} expr=v3918[1] }
        id      = { defs={} expr=v3919[1] }
        ?22     = { defs={} expr=v3920[1] }
        ?23     = { defs={} expr=v3921[1] }
        ?24     = { defs={} expr=v3922[1] }
        ?25     = { defs={} expr=v3923[1] }
        ?26     = { defs={} expr=v3924[1] }
        ?27     = { defs={} expr=v3925[1] }
        ?28     = { defs={} expr=v3926[1] }
        ?29     = { defs={} expr=v3927[1] }
        ?30     = { defs={} expr=v3928[1] }
        ?31     = { defs={} expr=v3929[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=0x08048546[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3888[32] 3[32]) }
          value = { defs={} expr=v3935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 2[32]) }
          value = { defs={} expr=v3934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 1[32]) }
          value = { defs={} expr=v3933[8] }
          flags = { rdonly }
        address = { defs={} expr=v3888[32] }
          value = { defs={} expr=v3932[8] }
          flags = { rdonly }
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3885[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3888[32] 4[32]) }
        bp      = { defs={} expr=v3889[32] }
        si      = { defs={} expr=v3890[32] }
        di      = { defs={} expr=v3891[32] }
        es      = { defs={} expr=v3892[16] }
        cs      = { defs={} expr=v3893[16] }
        ss      = { defs={} expr=v3894[16] }
        ds      = { defs={} expr=v3895[16] }
        fs      = { defs={} expr=v3896[16] }
        gs      = { defs={} expr=v3897[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3899[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))))))))) }
        ?3      = { defs={} expr=v3901[1] }
        af      = { defs={0x08048543} expr=v3941[1] }
        ?5      = { defs={} expr=v3903[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v3906[1] }
        if      = { defs={} expr=v3907[1] }
        df      = { defs={} expr=v3908[1] }
        of      = { defs={0x08048543} expr=v3944[1] }
        iopl0   = { defs={} expr=v3910[1] }
        iopl1   = { defs={} expr=v3911[1] }
        nt      = { defs={} expr=v3912[1] }
        ?15     = { defs={} expr=v3913[1] }
        rf      = { defs={} expr=v3914[1] }
        vm      = { defs={} expr=v3915[1] }
        ac      = { defs={} expr=v3916[1] }
        vif     = { defs={} expr=v3917[1] }
        vip     = { defs={} expr=v3918[1] }
        id      = { defs={} expr=v3919[1] }
        ?22     = { defs={} expr=v3920[1] }
        ?23     = { defs={} expr=v3921[1] }
        ?24     = { defs={} expr=v3922[1] }
        ?25     = { defs={} expr=v3923[1] }
        ?26     = { defs={} expr=v3924[1] }
        ?27     = { defs={} expr=v3925[1] }
        ?28     = { defs={} expr=v3926[1] }
        ?29     = { defs={} expr=v3927[1] }
        ?30     = { defs={} expr=v3928[1] }
        ?31     = { defs={} expr=v3929[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=0x08048549[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v3889[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3888[32] 3[32]) }
          value = { defs={} expr=v3935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 2[32]) }
          value = { defs={} expr=v3934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 1[32]) }
          value = { defs={} expr=v3933[8] }
          flags = { rdonly }
        address = { defs={} expr=v3888[32] }
          value = { defs={} expr=v3932[8] }
          flags = { rdonly }
0x8048549:dec    eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v3885[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3888[32] 4[32]) }
        bp      = { defs={} expr=v3889[32] }
        si      = { defs={} expr=v3890[32] }
        di      = { defs={} expr=v3891[32] }
        es      = { defs={} expr=v3892[16] }
        cs      = { defs={} expr=v3893[16] }
        ss      = { defs={} expr=v3894[16] }
        ds      = { defs={} expr=v3895[16] }
        fs      = { defs={} expr=v3896[16] }
        gs      = { defs={} expr=v3897[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3899[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))))))) }
        ?3      = { defs={} expr=v3901[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33])))))) }
        ?5      = { defs={} expr=v3903[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        tf      = { defs={} expr=v3906[1] }
        if      = { defs={} expr=v3907[1] }
        df      = { defs={} expr=v3908[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33])))))) }
        iopl0   = { defs={} expr=v3910[1] }
        iopl1   = { defs={} expr=v3911[1] }
        nt      = { defs={} expr=v3912[1] }
        ?15     = { defs={} expr=v3913[1] }
        rf      = { defs={} expr=v3914[1] }
        vm      = { defs={} expr=v3915[1] }
        ac      = { defs={} expr=v3916[1] }
        vif     = { defs={} expr=v3917[1] }
        vip     = { defs={} expr=v3918[1] }
        id      = { defs={} expr=v3919[1] }
        ?22     = { defs={} expr=v3920[1] }
        ?23     = { defs={} expr=v3921[1] }
        ?24     = { defs={} expr=v3922[1] }
        ?25     = { defs={} expr=v3923[1] }
        ?26     = { defs={} expr=v3924[1] }
        ?27     = { defs={} expr=v3925[1] }
        ?28     = { defs={} expr=v3926[1] }
        ?29     = { defs={} expr=v3927[1] }
        ?30     = { defs={} expr=v3928[1] }
        ?31     = { defs={} expr=v3929[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549} expr=0x0804854a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v3889[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3888[32] 3[32]) }
          value = { defs={} expr=v3935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 2[32]) }
          value = { defs={} expr=v3934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 1[32]) }
          value = { defs={} expr=v3933[8] }
          flags = { rdonly }
        address = { defs={} expr=v3888[32] }
          value = { defs={} expr=v3932[8] }
          flags = { rdonly }
0x804854a:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v3885[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3888[32] 4[32]) }
        bp      = { defs={} expr=v3889[32] }
        si      = { defs={} expr=v3890[32] }
        di      = { defs={} expr=v3891[32] }
        es      = { defs={} expr=v3892[16] }
        cs      = { defs={} expr=v3893[16] }
        ss      = { defs={} expr=v3894[16] }
        ds      = { defs={} expr=v3895[16] }
        fs      = { defs={} expr=v3896[16] }
        gs      = { defs={} expr=v3897[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v3899[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
        ?3      = { defs={} expr=v3901[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v3903[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v3906[1] }
        if      = { defs={} expr=v3907[1] }
        df      = { defs={} expr=v3908[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        iopl0   = { defs={} expr=v3910[1] }
        iopl1   = { defs={} expr=v3911[1] }
        nt      = { defs={} expr=v3912[1] }
        ?15     = { defs={} expr=v3913[1] }
        rf      = { defs={} expr=v3914[1] }
        vm      = { defs={} expr=v3915[1] }
        ac      = { defs={} expr=v3916[1] }
        vif     = { defs={} expr=v3917[1] }
        vip     = { defs={} expr=v3918[1] }
        id      = { defs={} expr=v3919[1] }
        ?22     = { defs={} expr=v3920[1] }
        ?23     = { defs={} expr=v3921[1] }
        ?24     = { defs={} expr=v3922[1] }
        ?25     = { defs={} expr=v3923[1] }
        ?26     = { defs={} expr=v3924[1] }
        ?27     = { defs={} expr=v3925[1] }
        ?28     = { defs={} expr=v3926[1] }
        ?29     = { defs={} expr=v3927[1] }
        ?30     = { defs={} expr=v3928[1] }
        ?31     = { defs={} expr=v3929[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a} expr=0x0804854d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v3889[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3888[32] 3[32]) }
          value = { defs={} expr=v3935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 2[32]) }
          value = { defs={} expr=v3934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 1[32]) }
          value = { defs={} expr=v3933[8] }
          flags = { rdonly }
        address = { defs={} expr=v3888[32] }
          value = { defs={} expr=v3932[8] }
          flags = { rdonly }
0x804854d:je     0x0804856b<<Insn>>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v3885[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3888[32] 4[32]) }
        bp      = { defs={} expr=v3889[32] }
        si      = { defs={} expr=v3890[32] }
        di      = { defs={} expr=v3891[32] }
        es      = { defs={} expr=v3892[16] }
        cs      = { defs={} expr=v3893[16] }
        ss      = { defs={} expr=v3894[16] }
        ds      = { defs={} expr=v3895[16] }
        fs      = { defs={} expr=v3896[16] }
        gs      = { defs={} expr=v3897[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v3899[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
        ?3      = { defs={} expr=v3901[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v3903[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v3906[1] }
        if      = { defs={} expr=v3907[1] }
        df      = { defs={} expr=v3908[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        iopl0   = { defs={} expr=v3910[1] }
        iopl1   = { defs={} expr=v3911[1] }
        nt      = { defs={} expr=v3912[1] }
        ?15     = { defs={} expr=v3913[1] }
        rf      = { defs={} expr=v3914[1] }
        vm      = { defs={} expr=v3915[1] }
        ac      = { defs={} expr=v3916[1] }
        vif     = { defs={} expr=v3917[1] }
        vip     = { defs={} expr=v3918[1] }
        id      = { defs={} expr=v3919[1] }
        ?22     = { defs={} expr=v3920[1] }
        ?23     = { defs={} expr=v3921[1] }
        ?24     = { defs={} expr=v3922[1] }
        ?25     = { defs={} expr=v3923[1] }
        ?26     = { defs={} expr=v3924[1] }
        ?27     = { defs={} expr=v3925[1] }
        ?28     = { defs={} expr=v3926[1] }
        ?29     = { defs={} expr=v3927[1] }
        ?30     = { defs={} expr=v3928[1] }
        ?31     = { defs={} expr=v3929[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a,0x0804854d} expr=(ite[32] (zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) 0x0804856b[32] 0x0804854f[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3889[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v3889[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3935[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3888[32] 3[32]) }
          value = { defs={} expr=v3935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 2[32]) }
          value = { defs={} expr=v3934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3888[32] 1[32]) }
          value = { defs={} expr=v3933[8] }
          flags = { rdonly }
        address = { defs={} expr=v3888[32] }
          value = { defs={} expr=v3932[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
    registers:
        ax      = { defs={} expr=v3993[32] }
        cx      = { defs={} expr=v3994[32] }
        dx      = { defs={} expr=v3995[32] }
        bx      = { defs={} expr=v3996[32] }
        sp      = { defs={} expr=v3997[32] }
        bp      = { defs={} expr=v3998[32] }
        si      = { defs={0x0804854f} expr=(add[32] v3995[32] (extract[32] 0[32] 32[32] (umul[40] v3993[32] 4[8]))) }
        di      = { defs={} expr=v4000[32] }
        es      = { defs={} expr=v4001[16] }
        cs      = { defs={} expr=v4002[16] }
        ss      = { defs={} expr=v4003[16] }
        ds      = { defs={} expr=v4004[16] }
        fs      = { defs={} expr=v4005[16] }
        gs      = { defs={} expr=v4006[16] }
        cf      = { defs={} expr=v4007[1] }
        ?1      = { defs={} expr=v4008[1] }
        pf      = { defs={} expr=v4009[1] }
        ?3      = { defs={} expr=v4010[1] }
        af      = { defs={} expr=v4011[1] }
        ?5      = { defs={} expr=v4012[1] }
        zf      = { defs={} expr=v4013[1] }
        sf      = { defs={} expr=v4014[1] }
        tf      = { defs={} expr=v4015[1] }
        if      = { defs={} expr=v4016[1] }
        df      = { defs={} expr=v4017[1] }
        of      = { defs={} expr=v4018[1] }
        iopl0   = { defs={} expr=v4019[1] }
        iopl1   = { defs={} expr=v4020[1] }
        nt      = { defs={} expr=v4021[1] }
        ?15     = { defs={} expr=v4022[1] }
        rf      = { defs={} expr=v4023[1] }
        vm      = { defs={} expr=v4024[1] }
        ac      = { defs={} expr=v4025[1] }
        vif     = { defs={} expr=v4026[1] }
        vip     = { defs={} expr=v4027[1] }
        id      = { defs={} expr=v4028[1] }
        ?22     = { defs={} expr=v4029[1] }
        ?23     = { defs={} expr=v4030[1] }
        ?24     = { defs={} expr=v4031[1] }
        ?25     = { defs={} expr=v4032[1] }
        ?26     = { defs={} expr=v4033[1] }
        ?27     = { defs={} expr=v4034[1] }
        ?28     = { defs={} expr=v4035[1] }
        ?29     = { defs={} expr=v4036[1] }
        ?30     = { defs={} expr=v4037[1] }
        ?31     = { defs={} expr=v4038[1] }
        ip      = { defs={0x0804854f} expr=0x08048552[32] }
    memory:
    init mem:
0x8048552:xor    edi, edi
    registers:
        ax      = { defs={} expr=v3993[32] }
        cx      = { defs={} expr=v3994[32] }
        dx      = { defs={} expr=v3995[32] }
        bx      = { defs={} expr=v3996[32] }
        sp      = { defs={} expr=v3997[32] }
        bp      = { defs={} expr=v3998[32] }
        si      = { defs={0x0804854f} expr=(add[32] v3995[32] (extract[32] 0[32] 32[32] (umul[40] v3993[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v4001[16] }
        cs      = { defs={} expr=v4002[16] }
        ss      = { defs={} expr=v4003[16] }
        ds      = { defs={} expr=v4004[16] }
        fs      = { defs={} expr=v4005[16] }
        gs      = { defs={} expr=v4006[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v4008[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v4010[1] }
        af      = { defs={0x08048552} expr=v4039[1] }
        ?5      = { defs={} expr=v4012[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v4015[1] }
        if      = { defs={} expr=v4016[1] }
        df      = { defs={} expr=v4017[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v4019[1] }
        iopl1   = { defs={} expr=v4020[1] }
        nt      = { defs={} expr=v4021[1] }
        ?15     = { defs={} expr=v4022[1] }
        rf      = { defs={} expr=v4023[1] }
        vm      = { defs={} expr=v4024[1] }
        ac      = { defs={} expr=v4025[1] }
        vif     = { defs={} expr=v4026[1] }
        vip     = { defs={} expr=v4027[1] }
        id      = { defs={} expr=v4028[1] }
        ?22     = { defs={} expr=v4029[1] }
        ?23     = { defs={} expr=v4030[1] }
        ?24     = { defs={} expr=v4031[1] }
        ?25     = { defs={} expr=v4032[1] }
        ?26     = { defs={} expr=v4033[1] }
        ?27     = { defs={} expr=v4034[1] }
        ?28     = { defs={} expr=v4035[1] }
        ?29     = { defs={} expr=v4036[1] }
        ?30     = { defs={} expr=v4037[1] }
        ?31     = { defs={} expr=v4038[1] }
        ip      = { defs={0x0804854f,0x08048552} expr=0x08048554[32] }
    memory:
    init mem:
0x8048554:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3993[32] }
        cx      = { defs={} expr=v3994[32] }
        dx      = { defs={} expr=v3995[32] }
        bx      = { defs={} expr=v3996[32] }
        sp      = { defs={} expr=v3997[32] }
        bp      = { defs={} expr=v3998[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v3995[32] (extract[32] 0[32] 32[32] (umul[40] v3993[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v4001[16] }
        cs      = { defs={} expr=v4002[16] }
        ss      = { defs={} expr=v4003[16] }
        ds      = { defs={} expr=v4004[16] }
        fs      = { defs={} expr=v4005[16] }
        gs      = { defs={} expr=v4006[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v4008[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v4010[1] }
        af      = { defs={0x08048552} expr=v4039[1] }
        ?5      = { defs={} expr=v4012[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v4015[1] }
        if      = { defs={} expr=v4016[1] }
        df      = { defs={} expr=v4017[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v4019[1] }
        iopl1   = { defs={} expr=v4020[1] }
        nt      = { defs={} expr=v4021[1] }
        ?15     = { defs={} expr=v4022[1] }
        rf      = { defs={} expr=v4023[1] }
        vm      = { defs={} expr=v4024[1] }
        ac      = { defs={} expr=v4025[1] }
        vif     = { defs={} expr=v4026[1] }
        vip     = { defs={} expr=v4027[1] }
        id      = { defs={} expr=v4028[1] }
        ?22     = { defs={} expr=v4029[1] }
        ?23     = { defs={} expr=v4030[1] }
        ?24     = { defs={} expr=v4031[1] }
        ?25     = { defs={} expr=v4032[1] }
        ?26     = { defs={} expr=v4033[1] }
        ?27     = { defs={} expr=v4034[1] }
        ?28     = { defs={} expr=v4035[1] }
        ?29     = { defs={} expr=v4036[1] }
        ?30     = { defs={} expr=v4037[1] }
        ?31     = { defs={} expr=v4038[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554} expr=0x0804855a[32] }
    memory:
    init mem:
0x804855a:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3993[32] }
        cx      = { defs={} expr=v3994[32] }
        dx      = { defs={} expr=v3995[32] }
        bx      = { defs={} expr=v3996[32] }
        sp      = { defs={} expr=v3997[32] }
        bp      = { defs={} expr=v3998[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v3995[32] (extract[32] 0[32] 32[32] (umul[40] v3993[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v4001[16] }
        cs      = { defs={} expr=v4002[16] }
        ss      = { defs={} expr=v4003[16] }
        ds      = { defs={} expr=v4004[16] }
        fs      = { defs={} expr=v4005[16] }
        gs      = { defs={} expr=v4006[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v4008[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v4010[1] }
        af      = { defs={0x08048552} expr=v4039[1] }
        ?5      = { defs={} expr=v4012[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v4015[1] }
        if      = { defs={} expr=v4016[1] }
        df      = { defs={} expr=v4017[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v4019[1] }
        iopl1   = { defs={} expr=v4020[1] }
        nt      = { defs={} expr=v4021[1] }
        ?15     = { defs={} expr=v4022[1] }
        rf      = { defs={} expr=v4023[1] }
        vm      = { defs={} expr=v4024[1] }
        ac      = { defs={} expr=v4025[1] }
        vif     = { defs={} expr=v4026[1] }
        vip     = { defs={} expr=v4027[1] }
        id      = { defs={} expr=v4028[1] }
        ?22     = { defs={} expr=v4029[1] }
        ?23     = { defs={} expr=v4030[1] }
        ?24     = { defs={} expr=v4031[1] }
        ?25     = { defs={} expr=v4032[1] }
        ?26     = { defs={} expr=v4033[1] }
        ?27     = { defs={} expr=v4034[1] }
        ?28     = { defs={} expr=v4035[1] }
        ?29     = { defs={} expr=v4036[1] }
        ?30     = { defs={} expr=v4037[1] }
        ?31     = { defs={} expr=v4038[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a} expr=0x08048560[32] }
    memory:
    init mem:
0x8048560:call   DWORD PTR ds:[esi]
    registers:
        ax      = { defs={} expr=v3993[32] }
        cx      = { defs={} expr=v3994[32] }
        dx      = { defs={} expr=v3995[32] }
        bx      = { defs={} expr=v3996[32] }
        sp      = { defs={0x08048560} expr=(add[32] v3997[32] -4[32]) }
        bp      = { defs={} expr=v3998[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v3995[32] (extract[32] 0[32] 32[32] (umul[40] v3993[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v4001[16] }
        cs      = { defs={} expr=v4002[16] }
        ss      = { defs={} expr=v4003[16] }
        ds      = { defs={} expr=v4004[16] }
        fs      = { defs={} expr=v4005[16] }
        gs      = { defs={} expr=v4006[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v4008[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v4010[1] }
        af      = { defs={0x08048552} expr=v4039[1] }
        ?5      = { defs={} expr=v4012[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v4015[1] }
        if      = { defs={} expr=v4016[1] }
        df      = { defs={} expr=v4017[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v4019[1] }
        iopl1   = { defs={} expr=v4020[1] }
        nt      = { defs={} expr=v4021[1] }
        ?15     = { defs={} expr=v4022[1] }
        rf      = { defs={} expr=v4023[1] }
        vm      = { defs={} expr=v4024[1] }
        ac      = { defs={} expr=v4025[1] }
        vif     = { defs={} expr=v4026[1] }
        vip     = { defs={} expr=v4027[1] }
        id      = { defs={} expr=v4028[1] }
        ?22     = { defs={} expr=v4029[1] }
        ?23     = { defs={} expr=v4030[1] }
        ?24     = { defs={} expr=v4031[1] }
        ?25     = { defs={} expr=v4032[1] }
        ?26     = { defs={} expr=v4033[1] }
        ?27     = { defs={} expr=v4034[1] }
        ?28     = { defs={} expr=v4035[1] }
        ?29     = { defs={} expr=v4036[1] }
        ?30     = { defs={} expr=v4037[1] }
        ?31     = { defs={} expr=v4038[1] }
        ip      = { defs={0x08048560} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4042[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4043[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4044[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4045[8]))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3997[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3997[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3997[32] -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048560} expr=(add[32] v3997[32] -4[32]) }
          value = { defs={} expr=98[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3995[32] (extract[32] 0[32] 32[32] (umul[40] v3993[32] 4[8]))) 3[32]) }
          value = { defs={} expr=v4045[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3995[32] (extract[32] 0[32] 32[32] (umul[40] v3993[32] 4[8]))) 2[32]) }
          value = { defs={} expr=v4044[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3995[32] (extract[32] 0[32] 32[32] (umul[40] v3993[32] 4[8]))) 1[32]) }
          value = { defs={} expr=v4043[8] }
          flags = { rdonly }
        address = { defs={0x0804854f,0x08048554} expr=(add[32] v3995[32] (extract[32] 0[32] 32[32] (umul[40] v3993[32] 4[8]))) }
          value = { defs={} expr=v4042[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
    registers:
        ax      = { defs={} expr=v4098[32] }
        cx      = { defs={} expr=v4099[32] }
        dx      = { defs={} expr=v4100[32] }
        bx      = { defs={} expr=v4101[32] }
        sp      = { defs={} expr=v4102[32] }
        bp      = { defs={} expr=v4103[32] }
        si      = { defs={} expr=v4104[32] }
        di      = { defs={0x08048562} expr=(add[32] v4105[32] 1[32]) }
        es      = { defs={} expr=v4106[16] }
        cs      = { defs={} expr=v4107[16] }
        ss      = { defs={} expr=v4108[16] }
        ds      = { defs={} expr=v4109[16] }
        fs      = { defs={} expr=v4110[16] }
        gs      = { defs={} expr=v4111[16] }
        cf      = { defs={} expr=v4112[1] }
        ?1      = { defs={} expr=v4113[1] }
        pf      = { defs={0x08048562} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4105[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4105[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4105[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4105[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4105[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4105[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4105[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4105[32] 1[32]))))))) }
        ?3      = { defs={} expr=v4115[1] }
        af      = { defs={0x08048562} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4105[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v4105[32]) 1[33]))))) }
        ?5      = { defs={} expr=v4117[1] }
        zf      = { defs={0x08048562} expr=(zerop[1] (add[32] v4105[32] 1[32])) }
        sf      = { defs={0x08048562} expr=(extract[1] 31[32] 32[32] (add[32] v4105[32] 1[32])) }
        tf      = { defs={} expr=v4120[1] }
        if      = { defs={} expr=v4121[1] }
        df      = { defs={} expr=v4122[1] }
        of      = { defs={0x08048562} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4105[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v4105[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4105[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v4105[32]) 1[33])))))) }
        iopl0   = { defs={} expr=v4124[1] }
        iopl1   = { defs={} expr=v4125[1] }
        nt      = { defs={} expr=v4126[1] }
        ?15     = { defs={} expr=v4127[1] }
        rf      = { defs={} expr=v4128[1] }
        vm      = { defs={} expr=v4129[1] }
        ac      = { defs={} expr=v4130[1] }
        vif     = { defs={} expr=v4131[1] }
        vip     = { defs={} expr=v4132[1] }
        id      = { defs={} expr=v4133[1] }
        ?22     = { defs={} expr=v4134[1] }
        ?23     = { defs={} expr=v4135[1] }
        ?24     = { defs={} expr=v4136[1] }
        ?25     = { defs={} expr=v4137[1] }
        ?26     = { defs={} expr=v4138[1] }
        ?27     = { defs={} expr=v4139[1] }
        ?28     = { defs={} expr=v4140[1] }
        ?29     = { defs={} expr=v4141[1] }
        ?30     = { defs={} expr=v4142[1] }
        ?31     = { defs={} expr=v4143[1] }
        ip      = { defs={0x08048562} expr=0x08048563[32] }
    memory:
    init mem:
0x8048563:sub    esi, 0x04
    registers:
        ax      = { defs={} expr=v4098[32] }
        cx      = { defs={} expr=v4099[32] }
        dx      = { defs={} expr=v4100[32] }
        bx      = { defs={} expr=v4101[32] }
        sp      = { defs={} expr=v4102[32] }
        bp      = { defs={} expr=v4103[32] }
        si      = { defs={0x08048563} expr=(add[32] v4104[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v4105[32] 1[32]) }
        es      = { defs={} expr=v4106[16] }
        cs      = { defs={} expr=v4107[16] }
        ss      = { defs={} expr=v4108[16] }
        ds      = { defs={} expr=v4109[16] }
        fs      = { defs={} expr=v4110[16] }
        gs      = { defs={} expr=v4111[16] }
        cf      = { defs={0x08048563} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4104[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4104[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v4113[1] }
        pf      = { defs={0x08048563} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4104[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4104[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4104[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4104[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4104[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4104[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4104[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4104[32] -4[32]))))))) }
        ?3      = { defs={} expr=v4115[1] }
        af      = { defs={0x08048563} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4104[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4104[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v4117[1] }
        zf      = { defs={0x08048563} expr=(zerop[1] (add[32] v4104[32] -4[32])) }
        sf      = { defs={0x08048563} expr=(extract[1] 31[32] 32[32] (add[32] v4104[32] -4[32])) }
        tf      = { defs={} expr=v4120[1] }
        if      = { defs={} expr=v4121[1] }
        df      = { defs={} expr=v4122[1] }
        of      = { defs={0x08048563} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4104[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4104[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4104[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4104[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v4124[1] }
        iopl1   = { defs={} expr=v4125[1] }
        nt      = { defs={} expr=v4126[1] }
        ?15     = { defs={} expr=v4127[1] }
        rf      = { defs={} expr=v4128[1] }
        vm      = { defs={} expr=v4129[1] }
        ac      = { defs={} expr=v4130[1] }
        vif     = { defs={} expr=v4131[1] }
        vip     = { defs={} expr=v4132[1] }
        id      = { defs={} expr=v4133[1] }
        ?22     = { defs={} expr=v4134[1] }
        ?23     = { defs={} expr=v4135[1] }
        ?24     = { defs={} expr=v4136[1] }
        ?25     = { defs={} expr=v4137[1] }
        ?26     = { defs={} expr=v4138[1] }
        ?27     = { defs={} expr=v4139[1] }
        ?28     = { defs={} expr=v4140[1] }
        ?29     = { defs={} expr=v4141[1] }
        ?30     = { defs={} expr=v4142[1] }
        ?31     = { defs={} expr=v4143[1] }
        ip      = { defs={0x08048562,0x08048563} expr=0x08048566[32] }
    memory:
    init mem:
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
    registers:
        ax      = { defs={} expr=v4098[32] }
        cx      = { defs={} expr=v4099[32] }
        dx      = { defs={} expr=v4100[32] }
        bx      = { defs={} expr=v4101[32] }
        sp      = { defs={} expr=v4102[32] }
        bp      = { defs={} expr=v4103[32] }
        si      = { defs={0x08048563} expr=(add[32] v4104[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v4105[32] 1[32]) }
        es      = { defs={} expr=v4106[16] }
        cs      = { defs={} expr=v4107[16] }
        ss      = { defs={} expr=v4108[16] }
        ds      = { defs={} expr=v4109[16] }
        fs      = { defs={} expr=v4110[16] }
        gs      = { defs={} expr=v4111[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v4113[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v4115[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v4117[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v4120[1] }
        if      = { defs={} expr=v4121[1] }
        df      = { defs={} expr=v4122[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v4124[1] }
        iopl1   = { defs={} expr=v4125[1] }
        nt      = { defs={} expr=v4126[1] }
        ?15     = { defs={} expr=v4127[1] }
        rf      = { defs={} expr=v4128[1] }
        vm      = { defs={} expr=v4129[1] }
        ac      = { defs={} expr=v4130[1] }
        vif     = { defs={} expr=v4131[1] }
        vip     = { defs={} expr=v4132[1] }
        id      = { defs={} expr=v4133[1] }
        ?22     = { defs={} expr=v4134[1] }
        ?23     = { defs={} expr=v4135[1] }
        ?24     = { defs={} expr=v4136[1] }
        ?25     = { defs={} expr=v4137[1] }
        ?26     = { defs={} expr=v4138[1] }
        ?27     = { defs={} expr=v4139[1] }
        ?28     = { defs={} expr=v4140[1] }
        ?29     = { defs={} expr=v4141[1] }
        ?30     = { defs={} expr=v4142[1] }
        ?31     = { defs={} expr=v4143[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566} expr=0x08048569[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4103[32] -16[32]) 3[32]) }
          value = { defs={} expr=v4149[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4103[32] -16[32]) 2[32]) }
          value = { defs={} expr=v4148[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4103[32] -16[32]) 1[32]) }
          value = { defs={} expr=v4147[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v4103[32] -16[32]) }
          value = { defs={} expr=v4146[8] }
          flags = { rdonly }
0x8048569:jne    0x08048560<<Insn>>
    registers:
        ax      = { defs={} expr=v4098[32] }
        cx      = { defs={} expr=v4099[32] }
        dx      = { defs={} expr=v4100[32] }
        bx      = { defs={} expr=v4101[32] }
        sp      = { defs={} expr=v4102[32] }
        bp      = { defs={} expr=v4103[32] }
        si      = { defs={0x08048563} expr=(add[32] v4104[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v4105[32] 1[32]) }
        es      = { defs={} expr=v4106[16] }
        cs      = { defs={} expr=v4107[16] }
        ss      = { defs={} expr=v4108[16] }
        ds      = { defs={} expr=v4109[16] }
        fs      = { defs={} expr=v4110[16] }
        gs      = { defs={} expr=v4111[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v4113[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v4115[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v4117[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v4120[1] }
        if      = { defs={} expr=v4121[1] }
        df      = { defs={} expr=v4122[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4105[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v4124[1] }
        iopl1   = { defs={} expr=v4125[1] }
        nt      = { defs={} expr=v4126[1] }
        ?15     = { defs={} expr=v4127[1] }
        rf      = { defs={} expr=v4128[1] }
        vm      = { defs={} expr=v4129[1] }
        ac      = { defs={} expr=v4130[1] }
        vif     = { defs={} expr=v4131[1] }
        vip     = { defs={} expr=v4132[1] }
        id      = { defs={} expr=v4133[1] }
        ?22     = { defs={} expr=v4134[1] }
        ?23     = { defs={} expr=v4135[1] }
        ?24     = { defs={} expr=v4136[1] }
        ?25     = { defs={} expr=v4137[1] }
        ?26     = { defs={} expr=v4138[1] }
        ?27     = { defs={} expr=v4139[1] }
        ?28     = { defs={} expr=v4140[1] }
        ?29     = { defs={} expr=v4141[1] }
        ?30     = { defs={} expr=v4142[1] }
        ?31     = { defs={} expr=v4143[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566,0x08048569} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4146[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4147[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4148[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4149[8]))) (add[32] (invert[32] (add[32] v4105[32] 1[32])) 1[32])))) 0x08048560[32] 0x0804856b[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4103[32] -16[32]) 3[32]) }
          value = { defs={} expr=v4149[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4103[32] -16[32]) 2[32]) }
          value = { defs={} expr=v4148[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4103[32] -16[32]) 1[32]) }
          value = { defs={} expr=v4147[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v4103[32] -16[32]) }
          value = { defs={} expr=v4146[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804856b:call   0x080485b0<_fini>
    registers:
        ax      = { defs={} expr=v4202[32] }
        cx      = { defs={} expr=v4203[32] }
        dx      = { defs={} expr=v4204[32] }
        bx      = { defs={} expr=v4205[32] }
        sp      = { defs={0x0804856b} expr=(add[32] v4206[32] -4[32]) }
        bp      = { defs={} expr=v4207[32] }
        si      = { defs={} expr=v4208[32] }
        di      = { defs={} expr=v4209[32] }
        es      = { defs={} expr=v4210[16] }
        cs      = { defs={} expr=v4211[16] }
        ss      = { defs={} expr=v4212[16] }
        ds      = { defs={} expr=v4213[16] }
        fs      = { defs={} expr=v4214[16] }
        gs      = { defs={} expr=v4215[16] }
        cf      = { defs={} expr=v4216[1] }
        ?1      = { defs={} expr=v4217[1] }
        pf      = { defs={} expr=v4218[1] }
        ?3      = { defs={} expr=v4219[1] }
        af      = { defs={} expr=v4220[1] }
        ?5      = { defs={} expr=v4221[1] }
        zf      = { defs={} expr=v4222[1] }
        sf      = { defs={} expr=v4223[1] }
        tf      = { defs={} expr=v4224[1] }
        if      = { defs={} expr=v4225[1] }
        df      = { defs={} expr=v4226[1] }
        of      = { defs={} expr=v4227[1] }
        iopl0   = { defs={} expr=v4228[1] }
        iopl1   = { defs={} expr=v4229[1] }
        nt      = { defs={} expr=v4230[1] }
        ?15     = { defs={} expr=v4231[1] }
        rf      = { defs={} expr=v4232[1] }
        vm      = { defs={} expr=v4233[1] }
        ac      = { defs={} expr=v4234[1] }
        vif     = { defs={} expr=v4235[1] }
        vip     = { defs={} expr=v4236[1] }
        id      = { defs={} expr=v4237[1] }
        ?22     = { defs={} expr=v4238[1] }
        ?23     = { defs={} expr=v4239[1] }
        ?24     = { defs={} expr=v4240[1] }
        ?25     = { defs={} expr=v4241[1] }
        ?26     = { defs={} expr=v4242[1] }
        ?27     = { defs={} expr=v4243[1] }
        ?28     = { defs={} expr=v4244[1] }
        ?29     = { defs={} expr=v4245[1] }
        ?30     = { defs={} expr=v4246[1] }
        ?31     = { defs={} expr=v4247[1] }
        ip      = { defs={0x0804856b} expr=0x080485b0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4206[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4206[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4206[32] -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x0804856b} expr=(add[32] v4206[32] -4[32]) }
          value = { defs={} expr=112[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
    registers:
        ax      = { defs={} expr=v4296[32] }
        cx      = { defs={} expr=v4297[32] }
        dx      = { defs={} expr=v4298[32] }
        bx      = { defs={} expr=v4299[32] }
        sp      = { defs={0x08048570} expr=(add[32] v4300[32] 12[32]) }
        bp      = { defs={} expr=v4301[32] }
        si      = { defs={} expr=v4302[32] }
        di      = { defs={} expr=v4303[32] }
        es      = { defs={} expr=v4304[16] }
        cs      = { defs={} expr=v4305[16] }
        ss      = { defs={} expr=v4306[16] }
        ds      = { defs={} expr=v4307[16] }
        fs      = { defs={} expr=v4308[16] }
        gs      = { defs={} expr=v4309[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4311[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4313[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4315[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4300[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4300[32] 12[32])) }
        tf      = { defs={} expr=v4318[1] }
        if      = { defs={} expr=v4319[1] }
        df      = { defs={} expr=v4320[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4322[1] }
        iopl1   = { defs={} expr=v4323[1] }
        nt      = { defs={} expr=v4324[1] }
        ?15     = { defs={} expr=v4325[1] }
        rf      = { defs={} expr=v4326[1] }
        vm      = { defs={} expr=v4327[1] }
        ac      = { defs={} expr=v4328[1] }
        vif     = { defs={} expr=v4329[1] }
        vip     = { defs={} expr=v4330[1] }
        id      = { defs={} expr=v4331[1] }
        ?22     = { defs={} expr=v4332[1] }
        ?23     = { defs={} expr=v4333[1] }
        ?24     = { defs={} expr=v4334[1] }
        ?25     = { defs={} expr=v4335[1] }
        ?26     = { defs={} expr=v4336[1] }
        ?27     = { defs={} expr=v4337[1] }
        ?28     = { defs={} expr=v4338[1] }
        ?29     = { defs={} expr=v4339[1] }
        ?30     = { defs={} expr=v4340[1] }
        ?31     = { defs={} expr=v4341[1] }
        ip      = { defs={0x08048570} expr=0x08048573[32] }
    memory:
    init mem:
0x8048573:pop    ebx
    registers:
        ax      = { defs={} expr=v4296[32] }
        cx      = { defs={} expr=v4297[32] }
        dx      = { defs={} expr=v4298[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4344[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4345[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4346[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4347[8]))) }
        sp      = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v4300[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v4301[32] }
        si      = { defs={} expr=v4302[32] }
        di      = { defs={} expr=v4303[32] }
        es      = { defs={} expr=v4304[16] }
        cs      = { defs={} expr=v4305[16] }
        ss      = { defs={} expr=v4306[16] }
        ds      = { defs={} expr=v4307[16] }
        fs      = { defs={} expr=v4308[16] }
        gs      = { defs={} expr=v4309[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4311[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4313[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4315[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4300[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4300[32] 12[32])) }
        tf      = { defs={} expr=v4318[1] }
        if      = { defs={} expr=v4319[1] }
        df      = { defs={} expr=v4320[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4322[1] }
        iopl1   = { defs={} expr=v4323[1] }
        nt      = { defs={} expr=v4324[1] }
        ?15     = { defs={} expr=v4325[1] }
        rf      = { defs={} expr=v4326[1] }
        vm      = { defs={} expr=v4327[1] }
        ac      = { defs={} expr=v4328[1] }
        vif     = { defs={} expr=v4329[1] }
        vip     = { defs={} expr=v4330[1] }
        id      = { defs={} expr=v4331[1] }
        ?22     = { defs={} expr=v4332[1] }
        ?23     = { defs={} expr=v4333[1] }
        ?24     = { defs={} expr=v4334[1] }
        ?25     = { defs={} expr=v4335[1] }
        ?26     = { defs={} expr=v4336[1] }
        ?27     = { defs={} expr=v4337[1] }
        ?28     = { defs={} expr=v4338[1] }
        ?29     = { defs={} expr=v4339[1] }
        ?30     = { defs={} expr=v4340[1] }
        ?31     = { defs={} expr=v4341[1] }
        ip      = { defs={0x08048570,0x08048573} expr=0x08048574[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 3[32]) }
          value = { defs={} expr=v4347[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 2[32]) }
          value = { defs={} expr=v4346[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 1[32]) }
          value = { defs={} expr=v4345[8] }
          flags = { rdonly }
        address = { defs={0x08048570} expr=(add[32] v4300[32] 12[32]) }
          value = { defs={} expr=v4344[8] }
          flags = { rdonly }
0x8048574:pop    esi
    registers:
        ax      = { defs={} expr=v4296[32] }
        cx      = { defs={} expr=v4297[32] }
        dx      = { defs={} expr=v4298[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4344[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4345[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4346[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4347[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v4301[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4354[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4355[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4356[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4357[8]))) }
        di      = { defs={} expr=v4303[32] }
        es      = { defs={} expr=v4304[16] }
        cs      = { defs={} expr=v4305[16] }
        ss      = { defs={} expr=v4306[16] }
        ds      = { defs={} expr=v4307[16] }
        fs      = { defs={} expr=v4308[16] }
        gs      = { defs={} expr=v4309[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4311[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4313[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4315[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4300[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4300[32] 12[32])) }
        tf      = { defs={} expr=v4318[1] }
        if      = { defs={} expr=v4319[1] }
        df      = { defs={} expr=v4320[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4322[1] }
        iopl1   = { defs={} expr=v4323[1] }
        nt      = { defs={} expr=v4324[1] }
        ?15     = { defs={} expr=v4325[1] }
        rf      = { defs={} expr=v4326[1] }
        vm      = { defs={} expr=v4327[1] }
        ac      = { defs={} expr=v4328[1] }
        vif     = { defs={} expr=v4329[1] }
        vip     = { defs={} expr=v4330[1] }
        id      = { defs={} expr=v4331[1] }
        ?22     = { defs={} expr=v4332[1] }
        ?23     = { defs={} expr=v4333[1] }
        ?24     = { defs={} expr=v4334[1] }
        ?25     = { defs={} expr=v4335[1] }
        ?26     = { defs={} expr=v4336[1] }
        ?27     = { defs={} expr=v4337[1] }
        ?28     = { defs={} expr=v4338[1] }
        ?29     = { defs={} expr=v4339[1] }
        ?30     = { defs={} expr=v4340[1] }
        ?31     = { defs={} expr=v4341[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574} expr=0x08048575[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4356[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v4300[32] 12[32]) 4[32]) }
          value = { defs={} expr=v4354[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 3[32]) }
          value = { defs={} expr=v4347[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 2[32]) }
          value = { defs={} expr=v4346[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 1[32]) }
          value = { defs={} expr=v4345[8] }
          flags = { rdonly }
        address = { defs={0x08048570} expr=(add[32] v4300[32] 12[32]) }
          value = { defs={} expr=v4344[8] }
          flags = { rdonly }
0x8048575:pop    edi
    registers:
        ax      = { defs={} expr=v4296[32] }
        cx      = { defs={} expr=v4297[32] }
        dx      = { defs={} expr=v4298[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4344[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4345[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4346[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4347[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v4301[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4354[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4355[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4356[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4357[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4364[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4365[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4366[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4367[8]))) }
        es      = { defs={} expr=v4304[16] }
        cs      = { defs={} expr=v4305[16] }
        ss      = { defs={} expr=v4306[16] }
        ds      = { defs={} expr=v4307[16] }
        fs      = { defs={} expr=v4308[16] }
        gs      = { defs={} expr=v4309[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4311[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4313[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4315[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4300[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4300[32] 12[32])) }
        tf      = { defs={} expr=v4318[1] }
        if      = { defs={} expr=v4319[1] }
        df      = { defs={} expr=v4320[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4322[1] }
        iopl1   = { defs={} expr=v4323[1] }
        nt      = { defs={} expr=v4324[1] }
        ?15     = { defs={} expr=v4325[1] }
        rf      = { defs={} expr=v4326[1] }
        vm      = { defs={} expr=v4327[1] }
        ac      = { defs={} expr=v4328[1] }
        vif     = { defs={} expr=v4329[1] }
        vip     = { defs={} expr=v4330[1] }
        id      = { defs={} expr=v4331[1] }
        ?22     = { defs={} expr=v4332[1] }
        ?23     = { defs={} expr=v4333[1] }
        ?24     = { defs={} expr=v4334[1] }
        ?25     = { defs={} expr=v4335[1] }
        ?26     = { defs={} expr=v4336[1] }
        ?27     = { defs={} expr=v4337[1] }
        ?28     = { defs={} expr=v4338[1] }
        ?29     = { defs={} expr=v4339[1] }
        ?30     = { defs={} expr=v4340[1] }
        ?31     = { defs={} expr=v4341[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=0x08048576[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4367[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4366[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4365[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4364[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4356[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v4300[32] 12[32]) 4[32]) }
          value = { defs={} expr=v4354[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 3[32]) }
          value = { defs={} expr=v4347[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 2[32]) }
          value = { defs={} expr=v4346[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 1[32]) }
          value = { defs={} expr=v4345[8] }
          flags = { rdonly }
        address = { defs={0x08048570} expr=(add[32] v4300[32] 12[32]) }
          value = { defs={} expr=v4344[8] }
          flags = { rdonly }
0x8048576:pop    ebp
    registers:
        ax      = { defs={} expr=v4296[32] }
        cx      = { defs={} expr=v4297[32] }
        dx      = { defs={} expr=v4298[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4344[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4345[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4346[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4347[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4374[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4375[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4376[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4377[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4354[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4355[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4356[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4357[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4364[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4365[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4366[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4367[8]))) }
        es      = { defs={} expr=v4304[16] }
        cs      = { defs={} expr=v4305[16] }
        ss      = { defs={} expr=v4306[16] }
        ds      = { defs={} expr=v4307[16] }
        fs      = { defs={} expr=v4308[16] }
        gs      = { defs={} expr=v4309[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4311[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4313[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4315[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4300[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4300[32] 12[32])) }
        tf      = { defs={} expr=v4318[1] }
        if      = { defs={} expr=v4319[1] }
        df      = { defs={} expr=v4320[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4322[1] }
        iopl1   = { defs={} expr=v4323[1] }
        nt      = { defs={} expr=v4324[1] }
        ?15     = { defs={} expr=v4325[1] }
        rf      = { defs={} expr=v4326[1] }
        vm      = { defs={} expr=v4327[1] }
        ac      = { defs={} expr=v4328[1] }
        vif     = { defs={} expr=v4329[1] }
        vip     = { defs={} expr=v4330[1] }
        id      = { defs={} expr=v4331[1] }
        ?22     = { defs={} expr=v4332[1] }
        ?23     = { defs={} expr=v4333[1] }
        ?24     = { defs={} expr=v4334[1] }
        ?25     = { defs={} expr=v4335[1] }
        ?26     = { defs={} expr=v4336[1] }
        ?27     = { defs={} expr=v4337[1] }
        ?28     = { defs={} expr=v4338[1] }
        ?29     = { defs={} expr=v4339[1] }
        ?30     = { defs={} expr=v4340[1] }
        ?31     = { defs={} expr=v4341[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=0x08048577[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4377[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4376[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4375[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4374[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4367[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4366[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4365[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4364[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4356[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v4300[32] 12[32]) 4[32]) }
          value = { defs={} expr=v4354[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 3[32]) }
          value = { defs={} expr=v4347[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 2[32]) }
          value = { defs={} expr=v4346[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 1[32]) }
          value = { defs={} expr=v4345[8] }
          flags = { rdonly }
        address = { defs={0x08048570} expr=(add[32] v4300[32] 12[32]) }
          value = { defs={} expr=v4344[8] }
          flags = { rdonly }
0x8048577:ret    
    registers:
        ax      = { defs={} expr=v4296[32] }
        cx      = { defs={} expr=v4297[32] }
        dx      = { defs={} expr=v4298[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4344[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4345[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4346[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4347[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4374[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4375[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4376[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4377[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4354[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4355[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4356[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4357[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4364[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4365[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4366[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4367[8]))) }
        es      = { defs={} expr=v4304[16] }
        cs      = { defs={} expr=v4305[16] }
        ss      = { defs={} expr=v4306[16] }
        ds      = { defs={} expr=v4307[16] }
        fs      = { defs={} expr=v4308[16] }
        gs      = { defs={} expr=v4309[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4311[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4300[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4313[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4315[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4300[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4300[32] 12[32])) }
        tf      = { defs={} expr=v4318[1] }
        if      = { defs={} expr=v4319[1] }
        df      = { defs={} expr=v4320[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4300[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4300[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4322[1] }
        iopl1   = { defs={} expr=v4323[1] }
        nt      = { defs={} expr=v4324[1] }
        ?15     = { defs={} expr=v4325[1] }
        rf      = { defs={} expr=v4326[1] }
        vm      = { defs={} expr=v4327[1] }
        ac      = { defs={} expr=v4328[1] }
        vif     = { defs={} expr=v4329[1] }
        vip     = { defs={} expr=v4330[1] }
        id      = { defs={} expr=v4331[1] }
        ?22     = { defs={} expr=v4332[1] }
        ?23     = { defs={} expr=v4333[1] }
        ?24     = { defs={} expr=v4334[1] }
        ?25     = { defs={} expr=v4335[1] }
        ?26     = { defs={} expr=v4336[1] }
        ?27     = { defs={} expr=v4337[1] }
        ?28     = { defs={} expr=v4338[1] }
        ?29     = { defs={} expr=v4339[1] }
        ?30     = { defs={} expr=v4340[1] }
        ?31     = { defs={} expr=v4341[1] }
        ip      = { defs={0x08048577} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4384[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4385[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4386[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4387[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4387[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4386[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4385[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4384[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4377[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4376[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4375[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4374[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4367[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4366[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4365[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4364[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4356[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4300[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v4300[32] 12[32]) 4[32]) }
          value = { defs={} expr=v4354[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 3[32]) }
          value = { defs={} expr=v4347[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 2[32]) }
          value = { defs={} expr=v4346[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4300[32] 12[32]) 1[32]) }
          value = { defs={} expr=v4345[8] }
          flags = { rdonly }
        address = { defs={0x08048570} expr=(add[32] v4300[32] 12[32]) }
          value = { defs={} expr=v4344[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048580:push   ebp
    registers:
        ax      = { defs={} expr=v4440[32] }
        cx      = { defs={} expr=v4441[32] }
        dx      = { defs={} expr=v4442[32] }
        bx      = { defs={} expr=v4443[32] }
        sp      = { defs={0x08048580} expr=(add[32] v4444[32] -4[32]) }
        bp      = { defs={} expr=v4445[32] }
        si      = { defs={} expr=v4446[32] }
        di      = { defs={} expr=v4447[32] }
        es      = { defs={} expr=v4448[16] }
        cs      = { defs={} expr=v4449[16] }
        ss      = { defs={} expr=v4450[16] }
        ds      = { defs={} expr=v4451[16] }
        fs      = { defs={} expr=v4452[16] }
        gs      = { defs={} expr=v4453[16] }
        cf      = { defs={} expr=v4454[1] }
        ?1      = { defs={} expr=v4455[1] }
        pf      = { defs={} expr=v4456[1] }
        ?3      = { defs={} expr=v4457[1] }
        af      = { defs={} expr=v4458[1] }
        ?5      = { defs={} expr=v4459[1] }
        zf      = { defs={} expr=v4460[1] }
        sf      = { defs={} expr=v4461[1] }
        tf      = { defs={} expr=v4462[1] }
        if      = { defs={} expr=v4463[1] }
        df      = { defs={} expr=v4464[1] }
        of      = { defs={} expr=v4465[1] }
        iopl0   = { defs={} expr=v4466[1] }
        iopl1   = { defs={} expr=v4467[1] }
        nt      = { defs={} expr=v4468[1] }
        ?15     = { defs={} expr=v4469[1] }
        rf      = { defs={} expr=v4470[1] }
        vm      = { defs={} expr=v4471[1] }
        ac      = { defs={} expr=v4472[1] }
        vif     = { defs={} expr=v4473[1] }
        vip     = { defs={} expr=v4474[1] }
        id      = { defs={} expr=v4475[1] }
        ?22     = { defs={} expr=v4476[1] }
        ?23     = { defs={} expr=v4477[1] }
        ?24     = { defs={} expr=v4478[1] }
        ?25     = { defs={} expr=v4479[1] }
        ?26     = { defs={} expr=v4480[1] }
        ?27     = { defs={} expr=v4481[1] }
        ?28     = { defs={} expr=v4482[1] }
        ?29     = { defs={} expr=v4483[1] }
        ?30     = { defs={} expr=v4484[1] }
        ?31     = { defs={} expr=v4485[1] }
        ip      = { defs={0x08048580} expr=0x08048581[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4445[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4444[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4445[32]) }
          flags = { }
    init mem:
0x8048581:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4440[32] }
        cx      = { defs={} expr=v4441[32] }
        dx      = { defs={} expr=v4442[32] }
        bx      = { defs={} expr=v4443[32] }
        sp      = { defs={0x08048580} expr=(add[32] v4444[32] -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4444[32] -4[32]) }
        si      = { defs={} expr=v4446[32] }
        di      = { defs={} expr=v4447[32] }
        es      = { defs={} expr=v4448[16] }
        cs      = { defs={} expr=v4449[16] }
        ss      = { defs={} expr=v4450[16] }
        ds      = { defs={} expr=v4451[16] }
        fs      = { defs={} expr=v4452[16] }
        gs      = { defs={} expr=v4453[16] }
        cf      = { defs={} expr=v4454[1] }
        ?1      = { defs={} expr=v4455[1] }
        pf      = { defs={} expr=v4456[1] }
        ?3      = { defs={} expr=v4457[1] }
        af      = { defs={} expr=v4458[1] }
        ?5      = { defs={} expr=v4459[1] }
        zf      = { defs={} expr=v4460[1] }
        sf      = { defs={} expr=v4461[1] }
        tf      = { defs={} expr=v4462[1] }
        if      = { defs={} expr=v4463[1] }
        df      = { defs={} expr=v4464[1] }
        of      = { defs={} expr=v4465[1] }
        iopl0   = { defs={} expr=v4466[1] }
        iopl1   = { defs={} expr=v4467[1] }
        nt      = { defs={} expr=v4468[1] }
        ?15     = { defs={} expr=v4469[1] }
        rf      = { defs={} expr=v4470[1] }
        vm      = { defs={} expr=v4471[1] }
        ac      = { defs={} expr=v4472[1] }
        vif     = { defs={} expr=v4473[1] }
        vip     = { defs={} expr=v4474[1] }
        id      = { defs={} expr=v4475[1] }
        ?22     = { defs={} expr=v4476[1] }
        ?23     = { defs={} expr=v4477[1] }
        ?24     = { defs={} expr=v4478[1] }
        ?25     = { defs={} expr=v4479[1] }
        ?26     = { defs={} expr=v4480[1] }
        ?27     = { defs={} expr=v4481[1] }
        ?28     = { defs={} expr=v4482[1] }
        ?29     = { defs={} expr=v4483[1] }
        ?30     = { defs={} expr=v4484[1] }
        ?31     = { defs={} expr=v4485[1] }
        ip      = { defs={0x08048580,0x08048581} expr=0x08048583[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4445[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4444[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4445[32]) }
          flags = { }
    init mem:
0x8048583:push   ebx
    registers:
        ax      = { defs={} expr=v4440[32] }
        cx      = { defs={} expr=v4441[32] }
        dx      = { defs={} expr=v4442[32] }
        bx      = { defs={} expr=v4443[32] }
        sp      = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4444[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4444[32] -4[32]) }
        si      = { defs={} expr=v4446[32] }
        di      = { defs={} expr=v4447[32] }
        es      = { defs={} expr=v4448[16] }
        cs      = { defs={} expr=v4449[16] }
        ss      = { defs={} expr=v4450[16] }
        ds      = { defs={} expr=v4451[16] }
        fs      = { defs={} expr=v4452[16] }
        gs      = { defs={} expr=v4453[16] }
        cf      = { defs={} expr=v4454[1] }
        ?1      = { defs={} expr=v4455[1] }
        pf      = { defs={} expr=v4456[1] }
        ?3      = { defs={} expr=v4457[1] }
        af      = { defs={} expr=v4458[1] }
        ?5      = { defs={} expr=v4459[1] }
        zf      = { defs={} expr=v4460[1] }
        sf      = { defs={} expr=v4461[1] }
        tf      = { defs={} expr=v4462[1] }
        if      = { defs={} expr=v4463[1] }
        df      = { defs={} expr=v4464[1] }
        of      = { defs={} expr=v4465[1] }
        iopl0   = { defs={} expr=v4466[1] }
        iopl1   = { defs={} expr=v4467[1] }
        nt      = { defs={} expr=v4468[1] }
        ?15     = { defs={} expr=v4469[1] }
        rf      = { defs={} expr=v4470[1] }
        vm      = { defs={} expr=v4471[1] }
        ac      = { defs={} expr=v4472[1] }
        vif     = { defs={} expr=v4473[1] }
        vip     = { defs={} expr=v4474[1] }
        id      = { defs={} expr=v4475[1] }
        ?22     = { defs={} expr=v4476[1] }
        ?23     = { defs={} expr=v4477[1] }
        ?24     = { defs={} expr=v4478[1] }
        ?25     = { defs={} expr=v4479[1] }
        ?26     = { defs={} expr=v4480[1] }
        ?27     = { defs={} expr=v4481[1] }
        ?28     = { defs={} expr=v4482[1] }
        ?29     = { defs={} expr=v4483[1] }
        ?30     = { defs={} expr=v4484[1] }
        ?31     = { defs={} expr=v4485[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583} expr=0x08048584[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4443[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4444[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4445[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4444[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4445[32]) }
          flags = { }
    init mem:
0x8048584:sub    esp, 0x04
    registers:
        ax      = { defs={} expr=v4440[32] }
        cx      = { defs={} expr=v4441[32] }
        dx      = { defs={} expr=v4442[32] }
        bx      = { defs={} expr=v4443[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4444[32] -4[32]) }
        si      = { defs={} expr=v4446[32] }
        di      = { defs={} expr=v4447[32] }
        es      = { defs={} expr=v4448[16] }
        cs      = { defs={} expr=v4449[16] }
        ss      = { defs={} expr=v4450[16] }
        ds      = { defs={} expr=v4451[16] }
        fs      = { defs={} expr=v4452[16] }
        gs      = { defs={} expr=v4453[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v4455[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v4457[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v4459[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v4462[1] }
        if      = { defs={} expr=v4463[1] }
        df      = { defs={} expr=v4464[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v4466[1] }
        iopl1   = { defs={} expr=v4467[1] }
        nt      = { defs={} expr=v4468[1] }
        ?15     = { defs={} expr=v4469[1] }
        rf      = { defs={} expr=v4470[1] }
        vm      = { defs={} expr=v4471[1] }
        ac      = { defs={} expr=v4472[1] }
        vif     = { defs={} expr=v4473[1] }
        vip     = { defs={} expr=v4474[1] }
        id      = { defs={} expr=v4475[1] }
        ?22     = { defs={} expr=v4476[1] }
        ?23     = { defs={} expr=v4477[1] }
        ?24     = { defs={} expr=v4478[1] }
        ?25     = { defs={} expr=v4479[1] }
        ?26     = { defs={} expr=v4480[1] }
        ?27     = { defs={} expr=v4481[1] }
        ?28     = { defs={} expr=v4482[1] }
        ?29     = { defs={} expr=v4483[1] }
        ?30     = { defs={} expr=v4484[1] }
        ?31     = { defs={} expr=v4485[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584} expr=0x08048587[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4443[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4444[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4445[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4444[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4445[32]) }
          flags = { }
    init mem:
0x8048587:mov    ebx, 0x080495e8<.ctors>
    registers:
        ax      = { defs={} expr=v4440[32] }
        cx      = { defs={} expr=v4441[32] }
        dx      = { defs={} expr=v4442[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4444[32] -4[32]) }
        si      = { defs={} expr=v4446[32] }
        di      = { defs={} expr=v4447[32] }
        es      = { defs={} expr=v4448[16] }
        cs      = { defs={} expr=v4449[16] }
        ss      = { defs={} expr=v4450[16] }
        ds      = { defs={} expr=v4451[16] }
        fs      = { defs={} expr=v4452[16] }
        gs      = { defs={} expr=v4453[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v4455[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v4457[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v4459[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v4462[1] }
        if      = { defs={} expr=v4463[1] }
        df      = { defs={} expr=v4464[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v4466[1] }
        iopl1   = { defs={} expr=v4467[1] }
        nt      = { defs={} expr=v4468[1] }
        ?15     = { defs={} expr=v4469[1] }
        rf      = { defs={} expr=v4470[1] }
        vm      = { defs={} expr=v4471[1] }
        ac      = { defs={} expr=v4472[1] }
        vif     = { defs={} expr=v4473[1] }
        vip     = { defs={} expr=v4474[1] }
        id      = { defs={} expr=v4475[1] }
        ?22     = { defs={} expr=v4476[1] }
        ?23     = { defs={} expr=v4477[1] }
        ?24     = { defs={} expr=v4478[1] }
        ?25     = { defs={} expr=v4479[1] }
        ?26     = { defs={} expr=v4480[1] }
        ?27     = { defs={} expr=v4481[1] }
        ?28     = { defs={} expr=v4482[1] }
        ?29     = { defs={} expr=v4483[1] }
        ?30     = { defs={} expr=v4484[1] }
        ?31     = { defs={} expr=v4485[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587} expr=0x0804858c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4443[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4444[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4445[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4444[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4445[32]) }
          flags = { }
    init mem:
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) }
        cx      = { defs={} expr=v4441[32] }
        dx      = { defs={} expr=v4442[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4444[32] -4[32]) }
        si      = { defs={} expr=v4446[32] }
        di      = { defs={} expr=v4447[32] }
        es      = { defs={} expr=v4448[16] }
        cs      = { defs={} expr=v4449[16] }
        ss      = { defs={} expr=v4450[16] }
        ds      = { defs={} expr=v4451[16] }
        fs      = { defs={} expr=v4452[16] }
        gs      = { defs={} expr=v4453[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v4455[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v4457[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v4459[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v4462[1] }
        if      = { defs={} expr=v4463[1] }
        df      = { defs={} expr=v4464[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4444[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v4466[1] }
        iopl1   = { defs={} expr=v4467[1] }
        nt      = { defs={} expr=v4468[1] }
        ?15     = { defs={} expr=v4469[1] }
        rf      = { defs={} expr=v4470[1] }
        vm      = { defs={} expr=v4471[1] }
        ac      = { defs={} expr=v4472[1] }
        vif     = { defs={} expr=v4473[1] }
        vip     = { defs={} expr=v4474[1] }
        id      = { defs={} expr=v4475[1] }
        ?22     = { defs={} expr=v4476[1] }
        ?23     = { defs={} expr=v4477[1] }
        ?24     = { defs={} expr=v4478[1] }
        ?25     = { defs={} expr=v4479[1] }
        ?26     = { defs={} expr=v4480[1] }
        ?27     = { defs={} expr=v4481[1] }
        ?28     = { defs={} expr=v4482[1] }
        ?29     = { defs={} expr=v4483[1] }
        ?30     = { defs={} expr=v4484[1] }
        ?31     = { defs={} expr=v4485[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c} expr=0x08048591[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4443[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4444[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4445[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4444[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4445[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v4491[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v4490[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v4489[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v4488[8] }
          flags = { rdonly }
0x8048591:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) }
        cx      = { defs={} expr=v4441[32] }
        dx      = { defs={} expr=v4442[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4444[32] -4[32]) }
        si      = { defs={} expr=v4446[32] }
        di      = { defs={} expr=v4447[32] }
        es      = { defs={} expr=v4448[16] }
        cs      = { defs={} expr=v4449[16] }
        ss      = { defs={} expr=v4450[16] }
        ds      = { defs={} expr=v4451[16] }
        fs      = { defs={} expr=v4452[16] }
        gs      = { defs={} expr=v4453[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v4455[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4457[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v4459[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32])) }
        tf      = { defs={} expr=v4462[1] }
        if      = { defs={} expr=v4463[1] }
        df      = { defs={} expr=v4464[1] }
        of      = { defs={0x0804858c,0x08048591} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v4466[1] }
        iopl1   = { defs={} expr=v4467[1] }
        nt      = { defs={} expr=v4468[1] }
        ?15     = { defs={} expr=v4469[1] }
        rf      = { defs={} expr=v4470[1] }
        vm      = { defs={} expr=v4471[1] }
        ac      = { defs={} expr=v4472[1] }
        vif     = { defs={} expr=v4473[1] }
        vip     = { defs={} expr=v4474[1] }
        id      = { defs={} expr=v4475[1] }
        ?22     = { defs={} expr=v4476[1] }
        ?23     = { defs={} expr=v4477[1] }
        ?24     = { defs={} expr=v4478[1] }
        ?25     = { defs={} expr=v4479[1] }
        ?26     = { defs={} expr=v4480[1] }
        ?27     = { defs={} expr=v4481[1] }
        ?28     = { defs={} expr=v4482[1] }
        ?29     = { defs={} expr=v4483[1] }
        ?30     = { defs={} expr=v4484[1] }
        ?31     = { defs={} expr=v4485[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591} expr=0x08048594[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4443[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4444[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4445[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4444[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4445[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v4491[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v4490[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v4489[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v4488[8] }
          flags = { rdonly }
0x8048594:je     0x080485ac<<Insn>>
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) }
        cx      = { defs={} expr=v4441[32] }
        dx      = { defs={} expr=v4442[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4444[32] -4[32]) }
        si      = { defs={} expr=v4446[32] }
        di      = { defs={} expr=v4447[32] }
        es      = { defs={} expr=v4448[16] }
        cs      = { defs={} expr=v4449[16] }
        ss      = { defs={} expr=v4450[16] }
        ds      = { defs={} expr=v4451[16] }
        fs      = { defs={} expr=v4452[16] }
        gs      = { defs={} expr=v4453[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v4455[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4457[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v4459[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32])) }
        tf      = { defs={} expr=v4462[1] }
        if      = { defs={} expr=v4463[1] }
        df      = { defs={} expr=v4464[1] }
        of      = { defs={0x0804858c,0x08048591} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v4466[1] }
        iopl1   = { defs={} expr=v4467[1] }
        nt      = { defs={} expr=v4468[1] }
        ?15     = { defs={} expr=v4469[1] }
        rf      = { defs={} expr=v4470[1] }
        vm      = { defs={} expr=v4471[1] }
        ac      = { defs={} expr=v4472[1] }
        vif     = { defs={} expr=v4473[1] }
        vip     = { defs={} expr=v4474[1] }
        id      = { defs={} expr=v4475[1] }
        ?22     = { defs={} expr=v4476[1] }
        ?23     = { defs={} expr=v4477[1] }
        ?24     = { defs={} expr=v4478[1] }
        ?25     = { defs={} expr=v4479[1] }
        ?26     = { defs={} expr=v4480[1] }
        ?27     = { defs={} expr=v4481[1] }
        ?28     = { defs={} expr=v4482[1] }
        ?29     = { defs={} expr=v4483[1] }
        ?30     = { defs={} expr=v4484[1] }
        ?31     = { defs={} expr=v4485[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594} expr=(ite[32] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4488[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4489[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4490[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4491[8]))) 1[32])) 0x080485ac[32] 0x08048596[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4444[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4443[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4444[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4443[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4445[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4444[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4445[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4444[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4445[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v4491[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v4490[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v4489[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v4488[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048596:lea    esi, [esi + 0x00]
    registers:
        ax      = { defs={} expr=v4544[32] }
        cx      = { defs={} expr=v4545[32] }
        dx      = { defs={} expr=v4546[32] }
        bx      = { defs={} expr=v4547[32] }
        sp      = { defs={} expr=v4548[32] }
        bp      = { defs={} expr=v4549[32] }
        si      = { defs={0x08048596} expr=v4550[32] }
        di      = { defs={} expr=v4551[32] }
        es      = { defs={} expr=v4552[16] }
        cs      = { defs={} expr=v4553[16] }
        ss      = { defs={} expr=v4554[16] }
        ds      = { defs={} expr=v4555[16] }
        fs      = { defs={} expr=v4556[16] }
        gs      = { defs={} expr=v4557[16] }
        cf      = { defs={} expr=v4558[1] }
        ?1      = { defs={} expr=v4559[1] }
        pf      = { defs={} expr=v4560[1] }
        ?3      = { defs={} expr=v4561[1] }
        af      = { defs={} expr=v4562[1] }
        ?5      = { defs={} expr=v4563[1] }
        zf      = { defs={} expr=v4564[1] }
        sf      = { defs={} expr=v4565[1] }
        tf      = { defs={} expr=v4566[1] }
        if      = { defs={} expr=v4567[1] }
        df      = { defs={} expr=v4568[1] }
        of      = { defs={} expr=v4569[1] }
        iopl0   = { defs={} expr=v4570[1] }
        iopl1   = { defs={} expr=v4571[1] }
        nt      = { defs={} expr=v4572[1] }
        ?15     = { defs={} expr=v4573[1] }
        rf      = { defs={} expr=v4574[1] }
        vm      = { defs={} expr=v4575[1] }
        ac      = { defs={} expr=v4576[1] }
        vif     = { defs={} expr=v4577[1] }
        vip     = { defs={} expr=v4578[1] }
        id      = { defs={} expr=v4579[1] }
        ?22     = { defs={} expr=v4580[1] }
        ?23     = { defs={} expr=v4581[1] }
        ?24     = { defs={} expr=v4582[1] }
        ?25     = { defs={} expr=v4583[1] }
        ?26     = { defs={} expr=v4584[1] }
        ?27     = { defs={} expr=v4585[1] }
        ?28     = { defs={} expr=v4586[1] }
        ?29     = { defs={} expr=v4587[1] }
        ?30     = { defs={} expr=v4588[1] }
        ?31     = { defs={} expr=v4589[1] }
        ip      = { defs={0x08048596} expr=0x08048599[32] }
    memory:
    init mem:
0x8048599:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v4544[32] }
        cx      = { defs={} expr=v4545[32] }
        dx      = { defs={} expr=v4546[32] }
        bx      = { defs={} expr=v4547[32] }
        sp      = { defs={} expr=v4548[32] }
        bp      = { defs={} expr=v4549[32] }
        si      = { defs={0x08048596} expr=v4550[32] }
        di      = { defs={0x08048599} expr=v4551[32] }
        es      = { defs={} expr=v4552[16] }
        cs      = { defs={} expr=v4553[16] }
        ss      = { defs={} expr=v4554[16] }
        ds      = { defs={} expr=v4555[16] }
        fs      = { defs={} expr=v4556[16] }
        gs      = { defs={} expr=v4557[16] }
        cf      = { defs={} expr=v4558[1] }
        ?1      = { defs={} expr=v4559[1] }
        pf      = { defs={} expr=v4560[1] }
        ?3      = { defs={} expr=v4561[1] }
        af      = { defs={} expr=v4562[1] }
        ?5      = { defs={} expr=v4563[1] }
        zf      = { defs={} expr=v4564[1] }
        sf      = { defs={} expr=v4565[1] }
        tf      = { defs={} expr=v4566[1] }
        if      = { defs={} expr=v4567[1] }
        df      = { defs={} expr=v4568[1] }
        of      = { defs={} expr=v4569[1] }
        iopl0   = { defs={} expr=v4570[1] }
        iopl1   = { defs={} expr=v4571[1] }
        nt      = { defs={} expr=v4572[1] }
        ?15     = { defs={} expr=v4573[1] }
        rf      = { defs={} expr=v4574[1] }
        vm      = { defs={} expr=v4575[1] }
        ac      = { defs={} expr=v4576[1] }
        vif     = { defs={} expr=v4577[1] }
        vip     = { defs={} expr=v4578[1] }
        id      = { defs={} expr=v4579[1] }
        ?22     = { defs={} expr=v4580[1] }
        ?23     = { defs={} expr=v4581[1] }
        ?24     = { defs={} expr=v4582[1] }
        ?25     = { defs={} expr=v4583[1] }
        ?26     = { defs={} expr=v4584[1] }
        ?27     = { defs={} expr=v4585[1] }
        ?28     = { defs={} expr=v4586[1] }
        ?29     = { defs={} expr=v4587[1] }
        ?30     = { defs={} expr=v4588[1] }
        ?31     = { defs={} expr=v4589[1] }
        ip      = { defs={0x08048596,0x08048599} expr=0x080485a0[32] }
    memory:
    init mem:
0x80485a0:sub    ebx, 0x04
    registers:
        ax      = { defs={} expr=v4544[32] }
        cx      = { defs={} expr=v4545[32] }
        dx      = { defs={} expr=v4546[32] }
        bx      = { defs={0x080485a0} expr=(add[32] v4547[32] -4[32]) }
        sp      = { defs={} expr=v4548[32] }
        bp      = { defs={} expr=v4549[32] }
        si      = { defs={0x08048596} expr=v4550[32] }
        di      = { defs={0x08048599} expr=v4551[32] }
        es      = { defs={} expr=v4552[16] }
        cs      = { defs={} expr=v4553[16] }
        ss      = { defs={} expr=v4554[16] }
        ds      = { defs={} expr=v4555[16] }
        fs      = { defs={} expr=v4556[16] }
        gs      = { defs={} expr=v4557[16] }
        cf      = { defs={0x080485a0} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4547[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4547[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v4559[1] }
        pf      = { defs={0x080485a0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))))))) }
        ?3      = { defs={} expr=v4561[1] }
        af      = { defs={0x080485a0} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4547[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4547[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v4563[1] }
        zf      = { defs={0x080485a0} expr=(zerop[1] (add[32] v4547[32] -4[32])) }
        sf      = { defs={0x080485a0} expr=(extract[1] 31[32] 32[32] (add[32] v4547[32] -4[32])) }
        tf      = { defs={} expr=v4566[1] }
        if      = { defs={} expr=v4567[1] }
        df      = { defs={} expr=v4568[1] }
        of      = { defs={0x080485a0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4547[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4547[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4547[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4547[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v4570[1] }
        iopl1   = { defs={} expr=v4571[1] }
        nt      = { defs={} expr=v4572[1] }
        ?15     = { defs={} expr=v4573[1] }
        rf      = { defs={} expr=v4574[1] }
        vm      = { defs={} expr=v4575[1] }
        ac      = { defs={} expr=v4576[1] }
        vif     = { defs={} expr=v4577[1] }
        vip     = { defs={} expr=v4578[1] }
        id      = { defs={} expr=v4579[1] }
        ?22     = { defs={} expr=v4580[1] }
        ?23     = { defs={} expr=v4581[1] }
        ?24     = { defs={} expr=v4582[1] }
        ?25     = { defs={} expr=v4583[1] }
        ?26     = { defs={} expr=v4584[1] }
        ?27     = { defs={} expr=v4585[1] }
        ?28     = { defs={} expr=v4586[1] }
        ?29     = { defs={} expr=v4587[1] }
        ?30     = { defs={} expr=v4588[1] }
        ?31     = { defs={} expr=v4589[1] }
        ip      = { defs={0x08048596,0x08048599,0x080485a0} expr=0x080485a3[32] }
    memory:
    init mem:
0x80485a3:call   eax
    registers:
        ax      = { defs={} expr=v4544[32] }
        cx      = { defs={} expr=v4545[32] }
        dx      = { defs={} expr=v4546[32] }
        bx      = { defs={0x080485a0} expr=(add[32] v4547[32] -4[32]) }
        sp      = { defs={0x080485a3} expr=(add[32] v4548[32] -4[32]) }
        bp      = { defs={} expr=v4549[32] }
        si      = { defs={0x08048596} expr=v4550[32] }
        di      = { defs={0x08048599} expr=v4551[32] }
        es      = { defs={} expr=v4552[16] }
        cs      = { defs={} expr=v4553[16] }
        ss      = { defs={} expr=v4554[16] }
        ds      = { defs={} expr=v4555[16] }
        fs      = { defs={} expr=v4556[16] }
        gs      = { defs={} expr=v4557[16] }
        cf      = { defs={0x080485a0} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4547[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4547[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v4559[1] }
        pf      = { defs={0x080485a0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4547[32] -4[32]))))))) }
        ?3      = { defs={} expr=v4561[1] }
        af      = { defs={0x080485a0} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4547[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4547[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v4563[1] }
        zf      = { defs={0x080485a0} expr=(zerop[1] (add[32] v4547[32] -4[32])) }
        sf      = { defs={0x080485a0} expr=(extract[1] 31[32] 32[32] (add[32] v4547[32] -4[32])) }
        tf      = { defs={} expr=v4566[1] }
        if      = { defs={} expr=v4567[1] }
        df      = { defs={} expr=v4568[1] }
        of      = { defs={0x080485a0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4547[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4547[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4547[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4547[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v4570[1] }
        iopl1   = { defs={} expr=v4571[1] }
        nt      = { defs={} expr=v4572[1] }
        ?15     = { defs={} expr=v4573[1] }
        rf      = { defs={} expr=v4574[1] }
        vm      = { defs={} expr=v4575[1] }
        ac      = { defs={} expr=v4576[1] }
        vif     = { defs={} expr=v4577[1] }
        vip     = { defs={} expr=v4578[1] }
        id      = { defs={} expr=v4579[1] }
        ?22     = { defs={} expr=v4580[1] }
        ?23     = { defs={} expr=v4581[1] }
        ?24     = { defs={} expr=v4582[1] }
        ?25     = { defs={} expr=v4583[1] }
        ?26     = { defs={} expr=v4584[1] }
        ?27     = { defs={} expr=v4585[1] }
        ?28     = { defs={} expr=v4586[1] }
        ?29     = { defs={} expr=v4587[1] }
        ?30     = { defs={} expr=v4588[1] }
        ?31     = { defs={} expr=v4589[1] }
        ip      = { defs={0x080485a3} expr=v4544[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4548[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4548[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4548[32] -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x080485a3} expr=(add[32] v4548[32] -4[32]) }
          value = { defs={} expr=-91[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) }
        cx      = { defs={} expr=v4639[32] }
        dx      = { defs={} expr=v4640[32] }
        bx      = { defs={} expr=v4641[32] }
        sp      = { defs={} expr=v4642[32] }
        bp      = { defs={} expr=v4643[32] }
        si      = { defs={} expr=v4644[32] }
        di      = { defs={} expr=v4645[32] }
        es      = { defs={} expr=v4646[16] }
        cs      = { defs={} expr=v4647[16] }
        ss      = { defs={} expr=v4648[16] }
        ds      = { defs={} expr=v4649[16] }
        fs      = { defs={} expr=v4650[16] }
        gs      = { defs={} expr=v4651[16] }
        cf      = { defs={} expr=v4652[1] }
        ?1      = { defs={} expr=v4653[1] }
        pf      = { defs={} expr=v4654[1] }
        ?3      = { defs={} expr=v4655[1] }
        af      = { defs={} expr=v4656[1] }
        ?5      = { defs={} expr=v4657[1] }
        zf      = { defs={} expr=v4658[1] }
        sf      = { defs={} expr=v4659[1] }
        tf      = { defs={} expr=v4660[1] }
        if      = { defs={} expr=v4661[1] }
        df      = { defs={} expr=v4662[1] }
        of      = { defs={} expr=v4663[1] }
        iopl0   = { defs={} expr=v4664[1] }
        iopl1   = { defs={} expr=v4665[1] }
        nt      = { defs={} expr=v4666[1] }
        ?15     = { defs={} expr=v4667[1] }
        rf      = { defs={} expr=v4668[1] }
        vm      = { defs={} expr=v4669[1] }
        ac      = { defs={} expr=v4670[1] }
        vif     = { defs={} expr=v4671[1] }
        vip     = { defs={} expr=v4672[1] }
        id      = { defs={} expr=v4673[1] }
        ?22     = { defs={} expr=v4674[1] }
        ?23     = { defs={} expr=v4675[1] }
        ?24     = { defs={} expr=v4676[1] }
        ?25     = { defs={} expr=v4677[1] }
        ?26     = { defs={} expr=v4678[1] }
        ?27     = { defs={} expr=v4679[1] }
        ?28     = { defs={} expr=v4680[1] }
        ?29     = { defs={} expr=v4681[1] }
        ?30     = { defs={} expr=v4682[1] }
        ?31     = { defs={} expr=v4683[1] }
        ip      = { defs={0x080485a5} expr=0x080485a7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4641[32] 3[32]) }
          value = { defs={} expr=v4689[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4641[32] 2[32]) }
          value = { defs={} expr=v4688[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4641[32] 1[32]) }
          value = { defs={} expr=v4687[8] }
          flags = { rdonly }
        address = { defs={} expr=v4641[32] }
          value = { defs={} expr=v4686[8] }
          flags = { rdonly }
0x80485a7:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) }
        cx      = { defs={} expr=v4639[32] }
        dx      = { defs={} expr=v4640[32] }
        bx      = { defs={} expr=v4641[32] }
        sp      = { defs={} expr=v4642[32] }
        bp      = { defs={} expr=v4643[32] }
        si      = { defs={} expr=v4644[32] }
        di      = { defs={} expr=v4645[32] }
        es      = { defs={} expr=v4646[16] }
        cs      = { defs={} expr=v4647[16] }
        ss      = { defs={} expr=v4648[16] }
        ds      = { defs={} expr=v4649[16] }
        fs      = { defs={} expr=v4650[16] }
        gs      = { defs={} expr=v4651[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v4653[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4655[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v4657[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32])) }
        tf      = { defs={} expr=v4660[1] }
        if      = { defs={} expr=v4661[1] }
        df      = { defs={} expr=v4662[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v4664[1] }
        iopl1   = { defs={} expr=v4665[1] }
        nt      = { defs={} expr=v4666[1] }
        ?15     = { defs={} expr=v4667[1] }
        rf      = { defs={} expr=v4668[1] }
        vm      = { defs={} expr=v4669[1] }
        ac      = { defs={} expr=v4670[1] }
        vif     = { defs={} expr=v4671[1] }
        vip     = { defs={} expr=v4672[1] }
        id      = { defs={} expr=v4673[1] }
        ?22     = { defs={} expr=v4674[1] }
        ?23     = { defs={} expr=v4675[1] }
        ?24     = { defs={} expr=v4676[1] }
        ?25     = { defs={} expr=v4677[1] }
        ?26     = { defs={} expr=v4678[1] }
        ?27     = { defs={} expr=v4679[1] }
        ?28     = { defs={} expr=v4680[1] }
        ?29     = { defs={} expr=v4681[1] }
        ?30     = { defs={} expr=v4682[1] }
        ?31     = { defs={} expr=v4683[1] }
        ip      = { defs={0x080485a5,0x080485a7} expr=0x080485aa[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4641[32] 3[32]) }
          value = { defs={} expr=v4689[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4641[32] 2[32]) }
          value = { defs={} expr=v4688[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4641[32] 1[32]) }
          value = { defs={} expr=v4687[8] }
          flags = { rdonly }
        address = { defs={} expr=v4641[32] }
          value = { defs={} expr=v4686[8] }
          flags = { rdonly }
0x80485aa:jne    0x080485a0<<Insn>>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) }
        cx      = { defs={} expr=v4639[32] }
        dx      = { defs={} expr=v4640[32] }
        bx      = { defs={} expr=v4641[32] }
        sp      = { defs={} expr=v4642[32] }
        bp      = { defs={} expr=v4643[32] }
        si      = { defs={} expr=v4644[32] }
        di      = { defs={} expr=v4645[32] }
        es      = { defs={} expr=v4646[16] }
        cs      = { defs={} expr=v4647[16] }
        ss      = { defs={} expr=v4648[16] }
        ds      = { defs={} expr=v4649[16] }
        fs      = { defs={} expr=v4650[16] }
        gs      = { defs={} expr=v4651[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v4653[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4655[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v4657[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32])) }
        tf      = { defs={} expr=v4660[1] }
        if      = { defs={} expr=v4661[1] }
        df      = { defs={} expr=v4662[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8])))) 1[33])))))) }
        iopl0   = { defs={} expr=v4664[1] }
        iopl1   = { defs={} expr=v4665[1] }
        nt      = { defs={} expr=v4666[1] }
        ?15     = { defs={} expr=v4667[1] }
        rf      = { defs={} expr=v4668[1] }
        vm      = { defs={} expr=v4669[1] }
        ac      = { defs={} expr=v4670[1] }
        vif     = { defs={} expr=v4671[1] }
        vip     = { defs={} expr=v4672[1] }
        id      = { defs={} expr=v4673[1] }
        ?22     = { defs={} expr=v4674[1] }
        ?23     = { defs={} expr=v4675[1] }
        ?24     = { defs={} expr=v4676[1] }
        ?25     = { defs={} expr=v4677[1] }
        ?26     = { defs={} expr=v4678[1] }
        ?27     = { defs={} expr=v4679[1] }
        ?28     = { defs={} expr=v4680[1] }
        ?29     = { defs={} expr=v4681[1] }
        ?30     = { defs={} expr=v4682[1] }
        ?31     = { defs={} expr=v4683[1] }
        ip      = { defs={0x080485a5,0x080485a7,0x080485aa} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4689[8]))) 1[32]))) 0x080485a0[32] 0x080485ac[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4641[32] 3[32]) }
          value = { defs={} expr=v4689[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4641[32] 2[32]) }
          value = { defs={} expr=v4688[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4641[32] 1[32]) }
          value = { defs={} expr=v4687[8] }
          flags = { rdonly }
        address = { defs={} expr=v4641[32] }
          value = { defs={} expr=v4686[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4790[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4791[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4792[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4793[8]))) }
        cx      = { defs={} expr=v4743[32] }
        dx      = { defs={} expr=v4744[32] }
        bx      = { defs={} expr=v4745[32] }
        sp      = { defs={0x080485ac} expr=(add[32] v4746[32] 4[32]) }
        bp      = { defs={} expr=v4747[32] }
        si      = { defs={} expr=v4748[32] }
        di      = { defs={} expr=v4749[32] }
        es      = { defs={} expr=v4750[16] }
        cs      = { defs={} expr=v4751[16] }
        ss      = { defs={} expr=v4752[16] }
        ds      = { defs={} expr=v4753[16] }
        fs      = { defs={} expr=v4754[16] }
        gs      = { defs={} expr=v4755[16] }
        cf      = { defs={} expr=v4756[1] }
        ?1      = { defs={} expr=v4757[1] }
        pf      = { defs={} expr=v4758[1] }
        ?3      = { defs={} expr=v4759[1] }
        af      = { defs={} expr=v4760[1] }
        ?5      = { defs={} expr=v4761[1] }
        zf      = { defs={} expr=v4762[1] }
        sf      = { defs={} expr=v4763[1] }
        tf      = { defs={} expr=v4764[1] }
        if      = { defs={} expr=v4765[1] }
        df      = { defs={} expr=v4766[1] }
        of      = { defs={} expr=v4767[1] }
        iopl0   = { defs={} expr=v4768[1] }
        iopl1   = { defs={} expr=v4769[1] }
        nt      = { defs={} expr=v4770[1] }
        ?15     = { defs={} expr=v4771[1] }
        rf      = { defs={} expr=v4772[1] }
        vm      = { defs={} expr=v4773[1] }
        ac      = { defs={} expr=v4774[1] }
        vif     = { defs={} expr=v4775[1] }
        vip     = { defs={} expr=v4776[1] }
        id      = { defs={} expr=v4777[1] }
        ?22     = { defs={} expr=v4778[1] }
        ?23     = { defs={} expr=v4779[1] }
        ?24     = { defs={} expr=v4780[1] }
        ?25     = { defs={} expr=v4781[1] }
        ?26     = { defs={} expr=v4782[1] }
        ?27     = { defs={} expr=v4783[1] }
        ?28     = { defs={} expr=v4784[1] }
        ?29     = { defs={} expr=v4785[1] }
        ?30     = { defs={} expr=v4786[1] }
        ?31     = { defs={} expr=v4787[1] }
        ip      = { defs={0x080485ac} expr=0x080485ad[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4746[32] 3[32]) }
          value = { defs={} expr=v4793[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 2[32]) }
          value = { defs={} expr=v4792[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 1[32]) }
          value = { defs={} expr=v4791[8] }
          flags = { rdonly }
        address = { defs={} expr=v4746[32] }
          value = { defs={} expr=v4790[8] }
          flags = { rdonly }
0x80485ad:pop    ebx
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4790[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4791[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4792[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4793[8]))) }
        cx      = { defs={} expr=v4743[32] }
        dx      = { defs={} expr=v4744[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4800[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4801[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4802[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4803[8]))) }
        sp      = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v4746[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v4747[32] }
        si      = { defs={} expr=v4748[32] }
        di      = { defs={} expr=v4749[32] }
        es      = { defs={} expr=v4750[16] }
        cs      = { defs={} expr=v4751[16] }
        ss      = { defs={} expr=v4752[16] }
        ds      = { defs={} expr=v4753[16] }
        fs      = { defs={} expr=v4754[16] }
        gs      = { defs={} expr=v4755[16] }
        cf      = { defs={} expr=v4756[1] }
        ?1      = { defs={} expr=v4757[1] }
        pf      = { defs={} expr=v4758[1] }
        ?3      = { defs={} expr=v4759[1] }
        af      = { defs={} expr=v4760[1] }
        ?5      = { defs={} expr=v4761[1] }
        zf      = { defs={} expr=v4762[1] }
        sf      = { defs={} expr=v4763[1] }
        tf      = { defs={} expr=v4764[1] }
        if      = { defs={} expr=v4765[1] }
        df      = { defs={} expr=v4766[1] }
        of      = { defs={} expr=v4767[1] }
        iopl0   = { defs={} expr=v4768[1] }
        iopl1   = { defs={} expr=v4769[1] }
        nt      = { defs={} expr=v4770[1] }
        ?15     = { defs={} expr=v4771[1] }
        rf      = { defs={} expr=v4772[1] }
        vm      = { defs={} expr=v4773[1] }
        ac      = { defs={} expr=v4774[1] }
        vif     = { defs={} expr=v4775[1] }
        vip     = { defs={} expr=v4776[1] }
        id      = { defs={} expr=v4777[1] }
        ?22     = { defs={} expr=v4778[1] }
        ?23     = { defs={} expr=v4779[1] }
        ?24     = { defs={} expr=v4780[1] }
        ?25     = { defs={} expr=v4781[1] }
        ?26     = { defs={} expr=v4782[1] }
        ?27     = { defs={} expr=v4783[1] }
        ?28     = { defs={} expr=v4784[1] }
        ?29     = { defs={} expr=v4785[1] }
        ?30     = { defs={} expr=v4786[1] }
        ?31     = { defs={} expr=v4787[1] }
        ip      = { defs={0x080485ac,0x080485ad} expr=0x080485ae[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4746[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4803[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4746[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4802[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4746[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4801[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=(add[32] v4746[32] 4[32]) }
          value = { defs={} expr=v4800[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 3[32]) }
          value = { defs={} expr=v4793[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 2[32]) }
          value = { defs={} expr=v4792[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 1[32]) }
          value = { defs={} expr=v4791[8] }
          flags = { rdonly }
        address = { defs={} expr=v4746[32] }
          value = { defs={} expr=v4790[8] }
          flags = { rdonly }
0x80485ae:pop    ebp
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4790[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4791[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4792[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4793[8]))) }
        cx      = { defs={} expr=v4743[32] }
        dx      = { defs={} expr=v4744[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4800[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4801[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4802[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4803[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4810[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4811[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4812[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4813[8]))) }
        si      = { defs={} expr=v4748[32] }
        di      = { defs={} expr=v4749[32] }
        es      = { defs={} expr=v4750[16] }
        cs      = { defs={} expr=v4751[16] }
        ss      = { defs={} expr=v4752[16] }
        ds      = { defs={} expr=v4753[16] }
        fs      = { defs={} expr=v4754[16] }
        gs      = { defs={} expr=v4755[16] }
        cf      = { defs={} expr=v4756[1] }
        ?1      = { defs={} expr=v4757[1] }
        pf      = { defs={} expr=v4758[1] }
        ?3      = { defs={} expr=v4759[1] }
        af      = { defs={} expr=v4760[1] }
        ?5      = { defs={} expr=v4761[1] }
        zf      = { defs={} expr=v4762[1] }
        sf      = { defs={} expr=v4763[1] }
        tf      = { defs={} expr=v4764[1] }
        if      = { defs={} expr=v4765[1] }
        df      = { defs={} expr=v4766[1] }
        of      = { defs={} expr=v4767[1] }
        iopl0   = { defs={} expr=v4768[1] }
        iopl1   = { defs={} expr=v4769[1] }
        nt      = { defs={} expr=v4770[1] }
        ?15     = { defs={} expr=v4771[1] }
        rf      = { defs={} expr=v4772[1] }
        vm      = { defs={} expr=v4773[1] }
        ac      = { defs={} expr=v4774[1] }
        vif     = { defs={} expr=v4775[1] }
        vip     = { defs={} expr=v4776[1] }
        id      = { defs={} expr=v4777[1] }
        ?22     = { defs={} expr=v4778[1] }
        ?23     = { defs={} expr=v4779[1] }
        ?24     = { defs={} expr=v4780[1] }
        ?25     = { defs={} expr=v4781[1] }
        ?26     = { defs={} expr=v4782[1] }
        ?27     = { defs={} expr=v4783[1] }
        ?28     = { defs={} expr=v4784[1] }
        ?29     = { defs={} expr=v4785[1] }
        ?30     = { defs={} expr=v4786[1] }
        ?31     = { defs={} expr=v4787[1] }
        ip      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=0x080485af[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4813[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4812[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4811[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v4746[32] 4[32]) 4[32]) }
          value = { defs={} expr=v4810[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4746[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4803[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4746[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4802[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4746[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4801[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=(add[32] v4746[32] 4[32]) }
          value = { defs={} expr=v4800[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 3[32]) }
          value = { defs={} expr=v4793[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 2[32]) }
          value = { defs={} expr=v4792[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 1[32]) }
          value = { defs={} expr=v4791[8] }
          flags = { rdonly }
        address = { defs={} expr=v4746[32] }
          value = { defs={} expr=v4790[8] }
          flags = { rdonly }
0x80485af:ret    
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4790[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4791[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4792[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4793[8]))) }
        cx      = { defs={} expr=v4743[32] }
        dx      = { defs={} expr=v4744[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4800[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4801[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4802[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4803[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4810[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4811[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4812[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4813[8]))) }
        si      = { defs={} expr=v4748[32] }
        di      = { defs={} expr=v4749[32] }
        es      = { defs={} expr=v4750[16] }
        cs      = { defs={} expr=v4751[16] }
        ss      = { defs={} expr=v4752[16] }
        ds      = { defs={} expr=v4753[16] }
        fs      = { defs={} expr=v4754[16] }
        gs      = { defs={} expr=v4755[16] }
        cf      = { defs={} expr=v4756[1] }
        ?1      = { defs={} expr=v4757[1] }
        pf      = { defs={} expr=v4758[1] }
        ?3      = { defs={} expr=v4759[1] }
        af      = { defs={} expr=v4760[1] }
        ?5      = { defs={} expr=v4761[1] }
        zf      = { defs={} expr=v4762[1] }
        sf      = { defs={} expr=v4763[1] }
        tf      = { defs={} expr=v4764[1] }
        if      = { defs={} expr=v4765[1] }
        df      = { defs={} expr=v4766[1] }
        of      = { defs={} expr=v4767[1] }
        iopl0   = { defs={} expr=v4768[1] }
        iopl1   = { defs={} expr=v4769[1] }
        nt      = { defs={} expr=v4770[1] }
        ?15     = { defs={} expr=v4771[1] }
        rf      = { defs={} expr=v4772[1] }
        vm      = { defs={} expr=v4773[1] }
        ac      = { defs={} expr=v4774[1] }
        vif     = { defs={} expr=v4775[1] }
        vip     = { defs={} expr=v4776[1] }
        id      = { defs={} expr=v4777[1] }
        ?22     = { defs={} expr=v4778[1] }
        ?23     = { defs={} expr=v4779[1] }
        ?24     = { defs={} expr=v4780[1] }
        ?25     = { defs={} expr=v4781[1] }
        ?26     = { defs={} expr=v4782[1] }
        ?27     = { defs={} expr=v4783[1] }
        ?28     = { defs={} expr=v4784[1] }
        ?29     = { defs={} expr=v4785[1] }
        ?30     = { defs={} expr=v4786[1] }
        ?31     = { defs={} expr=v4787[1] }
        ip      = { defs={0x080485af} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4820[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4821[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4822[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4823[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4823[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4822[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4821[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4820[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4813[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4812[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4746[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4811[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v4746[32] 4[32]) 4[32]) }
          value = { defs={} expr=v4810[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4746[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4803[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4746[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4802[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4746[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4801[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=(add[32] v4746[32] 4[32]) }
          value = { defs={} expr=v4800[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 3[32]) }
          value = { defs={} expr=v4793[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 2[32]) }
          value = { defs={} expr=v4792[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4746[32] 1[32]) }
          value = { defs={} expr=v4791[8] }
          flags = { rdonly }
        address = { defs={} expr=v4746[32] }
          value = { defs={} expr=v4790[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
    registers:
        ax      = { defs={} expr=v4876[32] }
        cx      = { defs={} expr=v4877[32] }
        dx      = { defs={} expr=v4878[32] }
        bx      = { defs={} expr=v4879[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v4880[32] -4[32]) }
        bp      = { defs={} expr=v4881[32] }
        si      = { defs={} expr=v4882[32] }
        di      = { defs={} expr=v4883[32] }
        es      = { defs={} expr=v4884[16] }
        cs      = { defs={} expr=v4885[16] }
        ss      = { defs={} expr=v4886[16] }
        ds      = { defs={} expr=v4887[16] }
        fs      = { defs={} expr=v4888[16] }
        gs      = { defs={} expr=v4889[16] }
        cf      = { defs={} expr=v4890[1] }
        ?1      = { defs={} expr=v4891[1] }
        pf      = { defs={} expr=v4892[1] }
        ?3      = { defs={} expr=v4893[1] }
        af      = { defs={} expr=v4894[1] }
        ?5      = { defs={} expr=v4895[1] }
        zf      = { defs={} expr=v4896[1] }
        sf      = { defs={} expr=v4897[1] }
        tf      = { defs={} expr=v4898[1] }
        if      = { defs={} expr=v4899[1] }
        df      = { defs={} expr=v4900[1] }
        of      = { defs={} expr=v4901[1] }
        iopl0   = { defs={} expr=v4902[1] }
        iopl1   = { defs={} expr=v4903[1] }
        nt      = { defs={} expr=v4904[1] }
        ?15     = { defs={} expr=v4905[1] }
        rf      = { defs={} expr=v4906[1] }
        vm      = { defs={} expr=v4907[1] }
        ac      = { defs={} expr=v4908[1] }
        vif     = { defs={} expr=v4909[1] }
        vip     = { defs={} expr=v4910[1] }
        id      = { defs={} expr=v4911[1] }
        ?22     = { defs={} expr=v4912[1] }
        ?23     = { defs={} expr=v4913[1] }
        ?24     = { defs={} expr=v4914[1] }
        ?25     = { defs={} expr=v4915[1] }
        ?26     = { defs={} expr=v4916[1] }
        ?27     = { defs={} expr=v4917[1] }
        ?28     = { defs={} expr=v4918[1] }
        ?29     = { defs={} expr=v4919[1] }
        ?30     = { defs={} expr=v4920[1] }
        ?31     = { defs={} expr=v4921[1] }
        ip      = { defs={0x080485b0} expr=0x080485b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4881[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4881[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4881[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v4880[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4881[32]) }
          flags = { }
    init mem:
0x80485b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4876[32] }
        cx      = { defs={} expr=v4877[32] }
        dx      = { defs={} expr=v4878[32] }
        bx      = { defs={} expr=v4879[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v4880[32] -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v4880[32] -4[32]) }
        si      = { defs={} expr=v4882[32] }
        di      = { defs={} expr=v4883[32] }
        es      = { defs={} expr=v4884[16] }
        cs      = { defs={} expr=v4885[16] }
        ss      = { defs={} expr=v4886[16] }
        ds      = { defs={} expr=v4887[16] }
        fs      = { defs={} expr=v4888[16] }
        gs      = { defs={} expr=v4889[16] }
        cf      = { defs={} expr=v4890[1] }
        ?1      = { defs={} expr=v4891[1] }
        pf      = { defs={} expr=v4892[1] }
        ?3      = { defs={} expr=v4893[1] }
        af      = { defs={} expr=v4894[1] }
        ?5      = { defs={} expr=v4895[1] }
        zf      = { defs={} expr=v4896[1] }
        sf      = { defs={} expr=v4897[1] }
        tf      = { defs={} expr=v4898[1] }
        if      = { defs={} expr=v4899[1] }
        df      = { defs={} expr=v4900[1] }
        of      = { defs={} expr=v4901[1] }
        iopl0   = { defs={} expr=v4902[1] }
        iopl1   = { defs={} expr=v4903[1] }
        nt      = { defs={} expr=v4904[1] }
        ?15     = { defs={} expr=v4905[1] }
        rf      = { defs={} expr=v4906[1] }
        vm      = { defs={} expr=v4907[1] }
        ac      = { defs={} expr=v4908[1] }
        vif     = { defs={} expr=v4909[1] }
        vip     = { defs={} expr=v4910[1] }
        id      = { defs={} expr=v4911[1] }
        ?22     = { defs={} expr=v4912[1] }
        ?23     = { defs={} expr=v4913[1] }
        ?24     = { defs={} expr=v4914[1] }
        ?25     = { defs={} expr=v4915[1] }
        ?26     = { defs={} expr=v4916[1] }
        ?27     = { defs={} expr=v4917[1] }
        ?28     = { defs={} expr=v4918[1] }
        ?29     = { defs={} expr=v4919[1] }
        ?30     = { defs={} expr=v4920[1] }
        ?31     = { defs={} expr=v4921[1] }
        ip      = { defs={0x080485b0,0x080485b1} expr=0x080485b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4881[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4881[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4881[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v4880[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4881[32]) }
          flags = { }
    init mem:
0x80485b3:push   ebx
    registers:
        ax      = { defs={} expr=v4876[32] }
        cx      = { defs={} expr=v4877[32] }
        dx      = { defs={} expr=v4878[32] }
        bx      = { defs={} expr=v4879[32] }
        sp      = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v4880[32] -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v4880[32] -4[32]) }
        si      = { defs={} expr=v4882[32] }
        di      = { defs={} expr=v4883[32] }
        es      = { defs={} expr=v4884[16] }
        cs      = { defs={} expr=v4885[16] }
        ss      = { defs={} expr=v4886[16] }
        ds      = { defs={} expr=v4887[16] }
        fs      = { defs={} expr=v4888[16] }
        gs      = { defs={} expr=v4889[16] }
        cf      = { defs={} expr=v4890[1] }
        ?1      = { defs={} expr=v4891[1] }
        pf      = { defs={} expr=v4892[1] }
        ?3      = { defs={} expr=v4893[1] }
        af      = { defs={} expr=v4894[1] }
        ?5      = { defs={} expr=v4895[1] }
        zf      = { defs={} expr=v4896[1] }
        sf      = { defs={} expr=v4897[1] }
        tf      = { defs={} expr=v4898[1] }
        if      = { defs={} expr=v4899[1] }
        df      = { defs={} expr=v4900[1] }
        of      = { defs={} expr=v4901[1] }
        iopl0   = { defs={} expr=v4902[1] }
        iopl1   = { defs={} expr=v4903[1] }
        nt      = { defs={} expr=v4904[1] }
        ?15     = { defs={} expr=v4905[1] }
        rf      = { defs={} expr=v4906[1] }
        vm      = { defs={} expr=v4907[1] }
        ac      = { defs={} expr=v4908[1] }
        vif     = { defs={} expr=v4909[1] }
        vip     = { defs={} expr=v4910[1] }
        id      = { defs={} expr=v4911[1] }
        ?22     = { defs={} expr=v4912[1] }
        ?23     = { defs={} expr=v4913[1] }
        ?24     = { defs={} expr=v4914[1] }
        ?25     = { defs={} expr=v4915[1] }
        ?26     = { defs={} expr=v4916[1] }
        ?27     = { defs={} expr=v4917[1] }
        ?28     = { defs={} expr=v4918[1] }
        ?29     = { defs={} expr=v4919[1] }
        ?30     = { defs={} expr=v4920[1] }
        ?31     = { defs={} expr=v4921[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3} expr=0x080485b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4879[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4879[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4879[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v4880[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4879[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4881[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4881[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4881[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v4880[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4881[32]) }
          flags = { }
    init mem:
0x80485b4:push   eax
    registers:
        ax      = { defs={} expr=v4876[32] }
        cx      = { defs={} expr=v4877[32] }
        dx      = { defs={} expr=v4878[32] }
        bx      = { defs={} expr=v4879[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v4880[32] -4[32]) }
        si      = { defs={} expr=v4882[32] }
        di      = { defs={} expr=v4883[32] }
        es      = { defs={} expr=v4884[16] }
        cs      = { defs={} expr=v4885[16] }
        ss      = { defs={} expr=v4886[16] }
        ds      = { defs={} expr=v4887[16] }
        fs      = { defs={} expr=v4888[16] }
        gs      = { defs={} expr=v4889[16] }
        cf      = { defs={} expr=v4890[1] }
        ?1      = { defs={} expr=v4891[1] }
        pf      = { defs={} expr=v4892[1] }
        ?3      = { defs={} expr=v4893[1] }
        af      = { defs={} expr=v4894[1] }
        ?5      = { defs={} expr=v4895[1] }
        zf      = { defs={} expr=v4896[1] }
        sf      = { defs={} expr=v4897[1] }
        tf      = { defs={} expr=v4898[1] }
        if      = { defs={} expr=v4899[1] }
        df      = { defs={} expr=v4900[1] }
        of      = { defs={} expr=v4901[1] }
        iopl0   = { defs={} expr=v4902[1] }
        iopl1   = { defs={} expr=v4903[1] }
        nt      = { defs={} expr=v4904[1] }
        ?15     = { defs={} expr=v4905[1] }
        rf      = { defs={} expr=v4906[1] }
        vm      = { defs={} expr=v4907[1] }
        ac      = { defs={} expr=v4908[1] }
        vif     = { defs={} expr=v4909[1] }
        vip     = { defs={} expr=v4910[1] }
        id      = { defs={} expr=v4911[1] }
        ?22     = { defs={} expr=v4912[1] }
        ?23     = { defs={} expr=v4913[1] }
        ?24     = { defs={} expr=v4914[1] }
        ?25     = { defs={} expr=v4915[1] }
        ?26     = { defs={} expr=v4916[1] }
        ?27     = { defs={} expr=v4917[1] }
        ?28     = { defs={} expr=v4918[1] }
        ?29     = { defs={} expr=v4919[1] }
        ?30     = { defs={} expr=v4920[1] }
        ?31     = { defs={} expr=v4921[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4} expr=0x080485b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4876[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4876[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4876[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4876[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4879[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4879[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4879[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v4880[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4879[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4881[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4881[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4881[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v4880[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4881[32]) }
          flags = { }
    init mem:
0x80485b5:call   0x080485ba<<Insn>>
    registers:
        ax      = { defs={} expr=v4876[32] }
        cx      = { defs={} expr=v4877[32] }
        dx      = { defs={} expr=v4878[32] }
        bx      = { defs={} expr=v4879[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v4880[32] -4[32]) }
        si      = { defs={} expr=v4882[32] }
        di      = { defs={} expr=v4883[32] }
        es      = { defs={} expr=v4884[16] }
        cs      = { defs={} expr=v4885[16] }
        ss      = { defs={} expr=v4886[16] }
        ds      = { defs={} expr=v4887[16] }
        fs      = { defs={} expr=v4888[16] }
        gs      = { defs={} expr=v4889[16] }
        cf      = { defs={} expr=v4890[1] }
        ?1      = { defs={} expr=v4891[1] }
        pf      = { defs={} expr=v4892[1] }
        ?3      = { defs={} expr=v4893[1] }
        af      = { defs={} expr=v4894[1] }
        ?5      = { defs={} expr=v4895[1] }
        zf      = { defs={} expr=v4896[1] }
        sf      = { defs={} expr=v4897[1] }
        tf      = { defs={} expr=v4898[1] }
        if      = { defs={} expr=v4899[1] }
        df      = { defs={} expr=v4900[1] }
        of      = { defs={} expr=v4901[1] }
        iopl0   = { defs={} expr=v4902[1] }
        iopl1   = { defs={} expr=v4903[1] }
        nt      = { defs={} expr=v4904[1] }
        ?15     = { defs={} expr=v4905[1] }
        rf      = { defs={} expr=v4906[1] }
        vm      = { defs={} expr=v4907[1] }
        ac      = { defs={} expr=v4908[1] }
        vif     = { defs={} expr=v4909[1] }
        vip     = { defs={} expr=v4910[1] }
        id      = { defs={} expr=v4911[1] }
        ?22     = { defs={} expr=v4912[1] }
        ?23     = { defs={} expr=v4913[1] }
        ?24     = { defs={} expr=v4914[1] }
        ?25     = { defs={} expr=v4915[1] }
        ?26     = { defs={} expr=v4916[1] }
        ?27     = { defs={} expr=v4917[1] }
        ?28     = { defs={} expr=v4918[1] }
        ?29     = { defs={} expr=v4919[1] }
        ?30     = { defs={} expr=v4920[1] }
        ?31     = { defs={} expr=v4921[1] }
        ip      = { defs={0x080485b5} expr=0x080485ba[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-70[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4876[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4876[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4876[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4876[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4879[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4879[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4880[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4879[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v4880[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4879[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4881[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4881[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4880[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4881[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v4880[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4881[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
    registers:
        ax      = { defs={} expr=v4970[32] }
        cx      = { defs={} expr=v4971[32] }
        dx      = { defs={} expr=v4972[32] }
        bx      = { defs={0x080485ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) }
        sp      = { defs={0x080485ba} expr=(add[32] v4974[32] 4[32]) }
        bp      = { defs={} expr=v4975[32] }
        si      = { defs={} expr=v4976[32] }
        di      = { defs={} expr=v4977[32] }
        es      = { defs={} expr=v4978[16] }
        cs      = { defs={} expr=v4979[16] }
        ss      = { defs={} expr=v4980[16] }
        ds      = { defs={} expr=v4981[16] }
        fs      = { defs={} expr=v4982[16] }
        gs      = { defs={} expr=v4983[16] }
        cf      = { defs={} expr=v4984[1] }
        ?1      = { defs={} expr=v4985[1] }
        pf      = { defs={} expr=v4986[1] }
        ?3      = { defs={} expr=v4987[1] }
        af      = { defs={} expr=v4988[1] }
        ?5      = { defs={} expr=v4989[1] }
        zf      = { defs={} expr=v4990[1] }
        sf      = { defs={} expr=v4991[1] }
        tf      = { defs={} expr=v4992[1] }
        if      = { defs={} expr=v4993[1] }
        df      = { defs={} expr=v4994[1] }
        of      = { defs={} expr=v4995[1] }
        iopl0   = { defs={} expr=v4996[1] }
        iopl1   = { defs={} expr=v4997[1] }
        nt      = { defs={} expr=v4998[1] }
        ?15     = { defs={} expr=v4999[1] }
        rf      = { defs={} expr=v5000[1] }
        vm      = { defs={} expr=v5001[1] }
        ac      = { defs={} expr=v5002[1] }
        vif     = { defs={} expr=v5003[1] }
        vip     = { defs={} expr=v5004[1] }
        id      = { defs={} expr=v5005[1] }
        ?22     = { defs={} expr=v5006[1] }
        ?23     = { defs={} expr=v5007[1] }
        ?24     = { defs={} expr=v5008[1] }
        ?25     = { defs={} expr=v5009[1] }
        ?26     = { defs={} expr=v5010[1] }
        ?27     = { defs={} expr=v5011[1] }
        ?28     = { defs={} expr=v5012[1] }
        ?29     = { defs={} expr=v5013[1] }
        ?30     = { defs={} expr=v5014[1] }
        ?31     = { defs={} expr=v5015[1] }
        ip      = { defs={0x080485ba} expr=0x080485bb[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4974[32] 3[32]) }
          value = { defs={} expr=v5021[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4974[32] 2[32]) }
          value = { defs={} expr=v5020[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4974[32] 1[32]) }
          value = { defs={} expr=v5019[8] }
          flags = { rdonly }
        address = { defs={} expr=v4974[32] }
          value = { defs={} expr=v5018[8] }
          flags = { rdonly }
0x80485bb:add    ebx, 0x0000110e
    registers:
        ax      = { defs={} expr=v4970[32] }
        cx      = { defs={} expr=v4971[32] }
        dx      = { defs={} expr=v4972[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]) }
        sp      = { defs={0x080485ba} expr=(add[32] v4974[32] 4[32]) }
        bp      = { defs={} expr=v4975[32] }
        si      = { defs={} expr=v4976[32] }
        di      = { defs={} expr=v4977[32] }
        es      = { defs={} expr=v4978[16] }
        cs      = { defs={} expr=v4979[16] }
        ss      = { defs={} expr=v4980[16] }
        ds      = { defs={} expr=v4981[16] }
        fs      = { defs={} expr=v4982[16] }
        gs      = { defs={} expr=v4983[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v4985[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v4987[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v4989[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32])) }
        tf      = { defs={} expr=v4992[1] }
        if      = { defs={} expr=v4993[1] }
        df      = { defs={} expr=v4994[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) 4366[33])))))) }
        iopl0   = { defs={} expr=v4996[1] }
        iopl1   = { defs={} expr=v4997[1] }
        nt      = { defs={} expr=v4998[1] }
        ?15     = { defs={} expr=v4999[1] }
        rf      = { defs={} expr=v5000[1] }
        vm      = { defs={} expr=v5001[1] }
        ac      = { defs={} expr=v5002[1] }
        vif     = { defs={} expr=v5003[1] }
        vip     = { defs={} expr=v5004[1] }
        id      = { defs={} expr=v5005[1] }
        ?22     = { defs={} expr=v5006[1] }
        ?23     = { defs={} expr=v5007[1] }
        ?24     = { defs={} expr=v5008[1] }
        ?25     = { defs={} expr=v5009[1] }
        ?26     = { defs={} expr=v5010[1] }
        ?27     = { defs={} expr=v5011[1] }
        ?28     = { defs={} expr=v5012[1] }
        ?29     = { defs={} expr=v5013[1] }
        ?30     = { defs={} expr=v5014[1] }
        ?31     = { defs={} expr=v5015[1] }
        ip      = { defs={0x080485ba,0x080485bb} expr=0x080485c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4974[32] 3[32]) }
          value = { defs={} expr=v5021[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4974[32] 2[32]) }
          value = { defs={} expr=v5020[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4974[32] 1[32]) }
          value = { defs={} expr=v5019[8] }
          flags = { rdonly }
        address = { defs={} expr=v4974[32] }
          value = { defs={} expr=v5018[8] }
          flags = { rdonly }
0x80485c1:call   0x08048390<__do_global_dtors_aux>
    registers:
        ax      = { defs={} expr=v4970[32] }
        cx      = { defs={} expr=v4971[32] }
        dx      = { defs={} expr=v4972[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]) }
        sp      = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v4974[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v4975[32] }
        si      = { defs={} expr=v4976[32] }
        di      = { defs={} expr=v4977[32] }
        es      = { defs={} expr=v4978[16] }
        cs      = { defs={} expr=v4979[16] }
        ss      = { defs={} expr=v4980[16] }
        ds      = { defs={} expr=v4981[16] }
        fs      = { defs={} expr=v4982[16] }
        gs      = { defs={} expr=v4983[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v4985[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v4987[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v4989[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8]))) 4366[32])) }
        tf      = { defs={} expr=v4992[1] }
        if      = { defs={} expr=v4993[1] }
        df      = { defs={} expr=v4994[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5021[8])))) 4366[33])))))) }
        iopl0   = { defs={} expr=v4996[1] }
        iopl1   = { defs={} expr=v4997[1] }
        nt      = { defs={} expr=v4998[1] }
        ?15     = { defs={} expr=v4999[1] }
        rf      = { defs={} expr=v5000[1] }
        vm      = { defs={} expr=v5001[1] }
        ac      = { defs={} expr=v5002[1] }
        vif     = { defs={} expr=v5003[1] }
        vip     = { defs={} expr=v5004[1] }
        id      = { defs={} expr=v5005[1] }
        ?22     = { defs={} expr=v5006[1] }
        ?23     = { defs={} expr=v5007[1] }
        ?24     = { defs={} expr=v5008[1] }
        ?25     = { defs={} expr=v5009[1] }
        ?26     = { defs={} expr=v5010[1] }
        ?27     = { defs={} expr=v5011[1] }
        ?28     = { defs={} expr=v5012[1] }
        ?29     = { defs={} expr=v5013[1] }
        ?30     = { defs={} expr=v5014[1] }
        ?31     = { defs={} expr=v5015[1] }
        ip      = { defs={0x080485c1} expr=0x08048390[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4974[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4974[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4974[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v4974[32] 4[32]) -4[32]) }
          value = { defs={} expr=-58[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v4974[32] 3[32]) }
          value = { defs={} expr=v5021[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4974[32] 2[32]) }
          value = { defs={} expr=v5020[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4974[32] 1[32]) }
          value = { defs={} expr=v5019[8] }
          flags = { rdonly }
        address = { defs={} expr=v4974[32] }
          value = { defs={} expr=v5018[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5122[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5123[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5124[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5125[8]))) }
        cx      = { defs={} expr=v5075[32] }
        dx      = { defs={} expr=v5076[32] }
        bx      = { defs={} expr=v5077[32] }
        sp      = { defs={0x080485c6} expr=(add[32] v5078[32] 4[32]) }
        bp      = { defs={} expr=v5079[32] }
        si      = { defs={} expr=v5080[32] }
        di      = { defs={} expr=v5081[32] }
        es      = { defs={} expr=v5082[16] }
        cs      = { defs={} expr=v5083[16] }
        ss      = { defs={} expr=v5084[16] }
        ds      = { defs={} expr=v5085[16] }
        fs      = { defs={} expr=v5086[16] }
        gs      = { defs={} expr=v5087[16] }
        cf      = { defs={} expr=v5088[1] }
        ?1      = { defs={} expr=v5089[1] }
        pf      = { defs={} expr=v5090[1] }
        ?3      = { defs={} expr=v5091[1] }
        af      = { defs={} expr=v5092[1] }
        ?5      = { defs={} expr=v5093[1] }
        zf      = { defs={} expr=v5094[1] }
        sf      = { defs={} expr=v5095[1] }
        tf      = { defs={} expr=v5096[1] }
        if      = { defs={} expr=v5097[1] }
        df      = { defs={} expr=v5098[1] }
        of      = { defs={} expr=v5099[1] }
        iopl0   = { defs={} expr=v5100[1] }
        iopl1   = { defs={} expr=v5101[1] }
        nt      = { defs={} expr=v5102[1] }
        ?15     = { defs={} expr=v5103[1] }
        rf      = { defs={} expr=v5104[1] }
        vm      = { defs={} expr=v5105[1] }
        ac      = { defs={} expr=v5106[1] }
        vif     = { defs={} expr=v5107[1] }
        vip     = { defs={} expr=v5108[1] }
        id      = { defs={} expr=v5109[1] }
        ?22     = { defs={} expr=v5110[1] }
        ?23     = { defs={} expr=v5111[1] }
        ?24     = { defs={} expr=v5112[1] }
        ?25     = { defs={} expr=v5113[1] }
        ?26     = { defs={} expr=v5114[1] }
        ?27     = { defs={} expr=v5115[1] }
        ?28     = { defs={} expr=v5116[1] }
        ?29     = { defs={} expr=v5117[1] }
        ?30     = { defs={} expr=v5118[1] }
        ?31     = { defs={} expr=v5119[1] }
        ip      = { defs={0x080485c6} expr=0x080485c7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5078[32] 3[32]) }
          value = { defs={} expr=v5125[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 2[32]) }
          value = { defs={} expr=v5124[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 1[32]) }
          value = { defs={} expr=v5123[8] }
          flags = { rdonly }
        address = { defs={} expr=v5078[32] }
          value = { defs={} expr=v5122[8] }
          flags = { rdonly }
0x80485c7:pop    ebx
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5122[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5123[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5124[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5125[8]))) }
        cx      = { defs={} expr=v5075[32] }
        dx      = { defs={} expr=v5076[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5132[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5133[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5134[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5135[8]))) }
        sp      = { defs={0x080485c6,0x080485c7} expr=(add[32] (add[32] v5078[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v5079[32] }
        si      = { defs={} expr=v5080[32] }
        di      = { defs={} expr=v5081[32] }
        es      = { defs={} expr=v5082[16] }
        cs      = { defs={} expr=v5083[16] }
        ss      = { defs={} expr=v5084[16] }
        ds      = { defs={} expr=v5085[16] }
        fs      = { defs={} expr=v5086[16] }
        gs      = { defs={} expr=v5087[16] }
        cf      = { defs={} expr=v5088[1] }
        ?1      = { defs={} expr=v5089[1] }
        pf      = { defs={} expr=v5090[1] }
        ?3      = { defs={} expr=v5091[1] }
        af      = { defs={} expr=v5092[1] }
        ?5      = { defs={} expr=v5093[1] }
        zf      = { defs={} expr=v5094[1] }
        sf      = { defs={} expr=v5095[1] }
        tf      = { defs={} expr=v5096[1] }
        if      = { defs={} expr=v5097[1] }
        df      = { defs={} expr=v5098[1] }
        of      = { defs={} expr=v5099[1] }
        iopl0   = { defs={} expr=v5100[1] }
        iopl1   = { defs={} expr=v5101[1] }
        nt      = { defs={} expr=v5102[1] }
        ?15     = { defs={} expr=v5103[1] }
        rf      = { defs={} expr=v5104[1] }
        vm      = { defs={} expr=v5105[1] }
        ac      = { defs={} expr=v5106[1] }
        vif     = { defs={} expr=v5107[1] }
        vip     = { defs={} expr=v5108[1] }
        id      = { defs={} expr=v5109[1] }
        ?22     = { defs={} expr=v5110[1] }
        ?23     = { defs={} expr=v5111[1] }
        ?24     = { defs={} expr=v5112[1] }
        ?25     = { defs={} expr=v5113[1] }
        ?26     = { defs={} expr=v5114[1] }
        ?27     = { defs={} expr=v5115[1] }
        ?28     = { defs={} expr=v5116[1] }
        ?29     = { defs={} expr=v5117[1] }
        ?30     = { defs={} expr=v5118[1] }
        ?31     = { defs={} expr=v5119[1] }
        ip      = { defs={0x080485c6,0x080485c7} expr=0x080485c8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v5078[32] 4[32]) 3[32]) }
          value = { defs={} expr=v5135[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5078[32] 4[32]) 2[32]) }
          value = { defs={} expr=v5134[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5078[32] 4[32]) 1[32]) }
          value = { defs={} expr=v5133[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=(add[32] v5078[32] 4[32]) }
          value = { defs={} expr=v5132[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 3[32]) }
          value = { defs={} expr=v5125[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 2[32]) }
          value = { defs={} expr=v5124[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 1[32]) }
          value = { defs={} expr=v5123[8] }
          flags = { rdonly }
        address = { defs={} expr=v5078[32] }
          value = { defs={} expr=v5122[8] }
          flags = { rdonly }
0x80485c8:leave  
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5122[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5123[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5124[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5125[8]))) }
        cx      = { defs={} expr=v5075[32] }
        dx      = { defs={} expr=v5076[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5132[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5133[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5134[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5135[8]))) }
        sp      = { defs={0x080485c8} expr=(add[32] v5079[32] 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5142[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5143[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5144[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5145[8]))) }
        si      = { defs={} expr=v5080[32] }
        di      = { defs={} expr=v5081[32] }
        es      = { defs={} expr=v5082[16] }
        cs      = { defs={} expr=v5083[16] }
        ss      = { defs={} expr=v5084[16] }
        ds      = { defs={} expr=v5085[16] }
        fs      = { defs={} expr=v5086[16] }
        gs      = { defs={} expr=v5087[16] }
        cf      = { defs={} expr=v5088[1] }
        ?1      = { defs={} expr=v5089[1] }
        pf      = { defs={} expr=v5090[1] }
        ?3      = { defs={} expr=v5091[1] }
        af      = { defs={} expr=v5092[1] }
        ?5      = { defs={} expr=v5093[1] }
        zf      = { defs={} expr=v5094[1] }
        sf      = { defs={} expr=v5095[1] }
        tf      = { defs={} expr=v5096[1] }
        if      = { defs={} expr=v5097[1] }
        df      = { defs={} expr=v5098[1] }
        of      = { defs={} expr=v5099[1] }
        iopl0   = { defs={} expr=v5100[1] }
        iopl1   = { defs={} expr=v5101[1] }
        nt      = { defs={} expr=v5102[1] }
        ?15     = { defs={} expr=v5103[1] }
        rf      = { defs={} expr=v5104[1] }
        vm      = { defs={} expr=v5105[1] }
        ac      = { defs={} expr=v5106[1] }
        vif     = { defs={} expr=v5107[1] }
        vip     = { defs={} expr=v5108[1] }
        id      = { defs={} expr=v5109[1] }
        ?22     = { defs={} expr=v5110[1] }
        ?23     = { defs={} expr=v5111[1] }
        ?24     = { defs={} expr=v5112[1] }
        ?25     = { defs={} expr=v5113[1] }
        ?26     = { defs={} expr=v5114[1] }
        ?27     = { defs={} expr=v5115[1] }
        ?28     = { defs={} expr=v5116[1] }
        ?29     = { defs={} expr=v5117[1] }
        ?30     = { defs={} expr=v5118[1] }
        ?31     = { defs={} expr=v5119[1] }
        ip      = { defs={0x080485c6,0x080485c7,0x080485c8} expr=0x080485c9[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v5079[32] 3[32]) }
          value = { defs={} expr=v5145[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5079[32] 2[32]) }
          value = { defs={} expr=v5144[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5079[32] 1[32]) }
          value = { defs={} expr=v5143[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v5079[32] }
          value = { defs={} expr=v5142[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5078[32] 4[32]) 3[32]) }
          value = { defs={} expr=v5135[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5078[32] 4[32]) 2[32]) }
          value = { defs={} expr=v5134[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5078[32] 4[32]) 1[32]) }
          value = { defs={} expr=v5133[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=(add[32] v5078[32] 4[32]) }
          value = { defs={} expr=v5132[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 3[32]) }
          value = { defs={} expr=v5125[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 2[32]) }
          value = { defs={} expr=v5124[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 1[32]) }
          value = { defs={} expr=v5123[8] }
          flags = { rdonly }
        address = { defs={} expr=v5078[32] }
          value = { defs={} expr=v5122[8] }
          flags = { rdonly }
0x80485c9:ret    
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5122[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5123[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5124[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5125[8]))) }
        cx      = { defs={} expr=v5075[32] }
        dx      = { defs={} expr=v5076[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5132[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5133[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5134[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5135[8]))) }
        sp      = { defs={0x080485c8,0x080485c9} expr=(add[32] (add[32] v5079[32] 4[32]) 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5142[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5143[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5144[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5145[8]))) }
        si      = { defs={} expr=v5080[32] }
        di      = { defs={} expr=v5081[32] }
        es      = { defs={} expr=v5082[16] }
        cs      = { defs={} expr=v5083[16] }
        ss      = { defs={} expr=v5084[16] }
        ds      = { defs={} expr=v5085[16] }
        fs      = { defs={} expr=v5086[16] }
        gs      = { defs={} expr=v5087[16] }
        cf      = { defs={} expr=v5088[1] }
        ?1      = { defs={} expr=v5089[1] }
        pf      = { defs={} expr=v5090[1] }
        ?3      = { defs={} expr=v5091[1] }
        af      = { defs={} expr=v5092[1] }
        ?5      = { defs={} expr=v5093[1] }
        zf      = { defs={} expr=v5094[1] }
        sf      = { defs={} expr=v5095[1] }
        tf      = { defs={} expr=v5096[1] }
        if      = { defs={} expr=v5097[1] }
        df      = { defs={} expr=v5098[1] }
        of      = { defs={} expr=v5099[1] }
        iopl0   = { defs={} expr=v5100[1] }
        iopl1   = { defs={} expr=v5101[1] }
        nt      = { defs={} expr=v5102[1] }
        ?15     = { defs={} expr=v5103[1] }
        rf      = { defs={} expr=v5104[1] }
        vm      = { defs={} expr=v5105[1] }
        ac      = { defs={} expr=v5106[1] }
        vif     = { defs={} expr=v5107[1] }
        vip     = { defs={} expr=v5108[1] }
        id      = { defs={} expr=v5109[1] }
        ?22     = { defs={} expr=v5110[1] }
        ?23     = { defs={} expr=v5111[1] }
        ?24     = { defs={} expr=v5112[1] }
        ?25     = { defs={} expr=v5113[1] }
        ?26     = { defs={} expr=v5114[1] }
        ?27     = { defs={} expr=v5115[1] }
        ?28     = { defs={} expr=v5116[1] }
        ?29     = { defs={} expr=v5117[1] }
        ?30     = { defs={} expr=v5118[1] }
        ?31     = { defs={} expr=v5119[1] }
        ip      = { defs={0x080485c9} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5152[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5153[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5154[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5155[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v5079[32] 4[32]) 3[32]) }
          value = { defs={} expr=v5155[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5079[32] 4[32]) 2[32]) }
          value = { defs={} expr=v5154[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5079[32] 4[32]) 1[32]) }
          value = { defs={} expr=v5153[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=(add[32] v5079[32] 4[32]) }
          value = { defs={} expr=v5152[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5079[32] 3[32]) }
          value = { defs={} expr=v5145[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5079[32] 2[32]) }
          value = { defs={} expr=v5144[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5079[32] 1[32]) }
          value = { defs={} expr=v5143[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v5079[32] }
          value = { defs={} expr=v5142[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5078[32] 4[32]) 3[32]) }
          value = { defs={} expr=v5135[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5078[32] 4[32]) 2[32]) }
          value = { defs={} expr=v5134[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v5078[32] 4[32]) 1[32]) }
          value = { defs={} expr=v5133[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=(add[32] v5078[32] 4[32]) }
          value = { defs={} expr=v5132[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 3[32]) }
          value = { defs={} expr=v5125[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 2[32]) }
          value = { defs={} expr=v5124[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v5078[32] 1[32]) }
          value = { defs={} expr=v5123[8] }
          flags = { rdonly }
        address = { defs={} expr=v5078[32] }
          value = { defs={} expr=v5122[8] }
          flags = { rdonly }
analyzed headers: 1
