=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={} expr=v53[32] }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8} expr=0x080482c9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482c9:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={} expr=v62[1] }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={} expr=v64[1] }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={} expr=v66[1] }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={} expr=v68[1] }
        sf      = { defs={} expr=v69[1] }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={} expr=v73[1] }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9} expr=0x080482cb[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482cb:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb} expr=(add[32] (add[32] v52[32] -4[32]) -8[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482c8,0x080482c9,0x080482cb} expr=0x080482ce[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
0x80482ce:call   0x08048364<call_gmon_start>
    registers:
        ax      = { defs={} expr=v48[32] }
        cx      = { defs={} expr=v49[32] }
        dx      = { defs={} expr=v50[32] }
        bx      = { defs={} expr=v51[32] }
        sp      = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
        si      = { defs={} expr=v54[32] }
        di      = { defs={} expr=v55[32] }
        es      = { defs={} expr=v56[16] }
        cs      = { defs={} expr=v57[16] }
        ss      = { defs={} expr=v58[16] }
        ds      = { defs={} expr=v59[16] }
        fs      = { defs={} expr=v60[16] }
        gs      = { defs={} expr=v61[16] }
        cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v63[1] }
        pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v65[1] }
        af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v67[1] }
        zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v70[1] }
        if      = { defs={} expr=v71[1] }
        df      = { defs={} expr=v72[1] }
        of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v74[1] }
        iopl1   = { defs={} expr=v75[1] }
        nt      = { defs={} expr=v76[1] }
        ?15     = { defs={} expr=v77[1] }
        rf      = { defs={} expr=v78[1] }
        vm      = { defs={} expr=v79[1] }
        ac      = { defs={} expr=v80[1] }
        vif     = { defs={} expr=v81[1] }
        vip     = { defs={} expr=v82[1] }
        id      = { defs={} expr=v83[1] }
        ?22     = { defs={} expr=v84[1] }
        ?23     = { defs={} expr=v85[1] }
        ?24     = { defs={} expr=v86[1] }
        ?25     = { defs={} expr=v87[1] }
        ?26     = { defs={} expr=v88[1] }
        ?27     = { defs={} expr=v89[1] }
        ?28     = { defs={} expr=v90[1] }
        ?29     = { defs={} expr=v91[1] }
        ?30     = { defs={} expr=v92[1] }
        ?31     = { defs={} expr=v93[1] }
        ip      = { defs={0x080482ce} expr=0x08048364[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=-45[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
          flags = { }
        address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0<frame_dummy>
    registers:
        ax      = { defs={} expr=v142[32] }
        cx      = { defs={} expr=v143[32] }
        dx      = { defs={} expr=v144[32] }
        bx      = { defs={} expr=v145[32] }
        sp      = { defs={0x080482d3} expr=(add[32] v146[32] -4[32]) }
        bp      = { defs={} expr=v147[32] }
        si      = { defs={} expr=v148[32] }
        di      = { defs={} expr=v149[32] }
        es      = { defs={} expr=v150[16] }
        cs      = { defs={} expr=v151[16] }
        ss      = { defs={} expr=v152[16] }
        ds      = { defs={} expr=v153[16] }
        fs      = { defs={} expr=v154[16] }
        gs      = { defs={} expr=v155[16] }
        cf      = { defs={} expr=v156[1] }
        ?1      = { defs={} expr=v157[1] }
        pf      = { defs={} expr=v158[1] }
        ?3      = { defs={} expr=v159[1] }
        af      = { defs={} expr=v160[1] }
        ?5      = { defs={} expr=v161[1] }
        zf      = { defs={} expr=v162[1] }
        sf      = { defs={} expr=v163[1] }
        tf      = { defs={} expr=v164[1] }
        if      = { defs={} expr=v165[1] }
        df      = { defs={} expr=v166[1] }
        of      = { defs={} expr=v167[1] }
        iopl0   = { defs={} expr=v168[1] }
        iopl1   = { defs={} expr=v169[1] }
        nt      = { defs={} expr=v170[1] }
        ?15     = { defs={} expr=v171[1] }
        rf      = { defs={} expr=v172[1] }
        vm      = { defs={} expr=v173[1] }
        ac      = { defs={} expr=v174[1] }
        vif     = { defs={} expr=v175[1] }
        vip     = { defs={} expr=v176[1] }
        id      = { defs={} expr=v177[1] }
        ?22     = { defs={} expr=v178[1] }
        ?23     = { defs={} expr=v179[1] }
        ?24     = { defs={} expr=v180[1] }
        ?25     = { defs={} expr=v181[1] }
        ?26     = { defs={} expr=v182[1] }
        ?27     = { defs={} expr=v183[1] }
        ?28     = { defs={} expr=v184[1] }
        ?29     = { defs={} expr=v185[1] }
        ?30     = { defs={} expr=v186[1] }
        ?31     = { defs={} expr=v187[1] }
        ip      = { defs={0x080482d3} expr=0x080483d0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v146[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v146[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v146[32] -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d3} expr=(add[32] v146[32] -4[32]) }
          value = { defs={} expr=-40[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580<__do_global_ctors_aux>
    registers:
        ax      = { defs={} expr=v236[32] }
        cx      = { defs={} expr=v237[32] }
        dx      = { defs={} expr=v238[32] }
        bx      = { defs={} expr=v239[32] }
        sp      = { defs={0x080482d8} expr=(add[32] v240[32] -4[32]) }
        bp      = { defs={} expr=v241[32] }
        si      = { defs={} expr=v242[32] }
        di      = { defs={} expr=v243[32] }
        es      = { defs={} expr=v244[16] }
        cs      = { defs={} expr=v245[16] }
        ss      = { defs={} expr=v246[16] }
        ds      = { defs={} expr=v247[16] }
        fs      = { defs={} expr=v248[16] }
        gs      = { defs={} expr=v249[16] }
        cf      = { defs={} expr=v250[1] }
        ?1      = { defs={} expr=v251[1] }
        pf      = { defs={} expr=v252[1] }
        ?3      = { defs={} expr=v253[1] }
        af      = { defs={} expr=v254[1] }
        ?5      = { defs={} expr=v255[1] }
        zf      = { defs={} expr=v256[1] }
        sf      = { defs={} expr=v257[1] }
        tf      = { defs={} expr=v258[1] }
        if      = { defs={} expr=v259[1] }
        df      = { defs={} expr=v260[1] }
        of      = { defs={} expr=v261[1] }
        iopl0   = { defs={} expr=v262[1] }
        iopl1   = { defs={} expr=v263[1] }
        nt      = { defs={} expr=v264[1] }
        ?15     = { defs={} expr=v265[1] }
        rf      = { defs={} expr=v266[1] }
        vm      = { defs={} expr=v267[1] }
        ac      = { defs={} expr=v268[1] }
        vif     = { defs={} expr=v269[1] }
        vip     = { defs={} expr=v270[1] }
        id      = { defs={} expr=v271[1] }
        ?22     = { defs={} expr=v272[1] }
        ?23     = { defs={} expr=v273[1] }
        ?24     = { defs={} expr=v274[1] }
        ?25     = { defs={} expr=v275[1] }
        ?26     = { defs={} expr=v276[1] }
        ?27     = { defs={} expr=v277[1] }
        ?28     = { defs={} expr=v278[1] }
        ?29     = { defs={} expr=v279[1] }
        ?30     = { defs={} expr=v280[1] }
        ?31     = { defs={} expr=v281[1] }
        ip      = { defs={0x080482d8} expr=0x08048580[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v240[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v240[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v240[32] -4[32]) 1[32]) }
          value = { defs={} expr=-126[8] }
          flags = { }
        address = { defs={0x080482d8} expr=(add[32] v240[32] -4[32]) }
          value = { defs={} expr=-35[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
    registers:
        ax      = { defs={} expr=v330[32] }
        cx      = { defs={} expr=v331[32] }
        dx      = { defs={} expr=v332[32] }
        bx      = { defs={} expr=v333[32] }
        sp      = { defs={0x080482dd} expr=(add[32] v335[32] 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v378[8]) (shr0[32] 8[32] (uextend[32] 32[32] v379[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v380[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v381[8]))) }
        si      = { defs={} expr=v336[32] }
        di      = { defs={} expr=v337[32] }
        es      = { defs={} expr=v338[16] }
        cs      = { defs={} expr=v339[16] }
        ss      = { defs={} expr=v340[16] }
        ds      = { defs={} expr=v341[16] }
        fs      = { defs={} expr=v342[16] }
        gs      = { defs={} expr=v343[16] }
        cf      = { defs={} expr=v344[1] }
        ?1      = { defs={} expr=v345[1] }
        pf      = { defs={} expr=v346[1] }
        ?3      = { defs={} expr=v347[1] }
        af      = { defs={} expr=v348[1] }
        ?5      = { defs={} expr=v349[1] }
        zf      = { defs={} expr=v350[1] }
        sf      = { defs={} expr=v351[1] }
        tf      = { defs={} expr=v352[1] }
        if      = { defs={} expr=v353[1] }
        df      = { defs={} expr=v354[1] }
        of      = { defs={} expr=v355[1] }
        iopl0   = { defs={} expr=v356[1] }
        iopl1   = { defs={} expr=v357[1] }
        nt      = { defs={} expr=v358[1] }
        ?15     = { defs={} expr=v359[1] }
        rf      = { defs={} expr=v360[1] }
        vm      = { defs={} expr=v361[1] }
        ac      = { defs={} expr=v362[1] }
        vif     = { defs={} expr=v363[1] }
        vip     = { defs={} expr=v364[1] }
        id      = { defs={} expr=v365[1] }
        ?22     = { defs={} expr=v366[1] }
        ?23     = { defs={} expr=v367[1] }
        ?24     = { defs={} expr=v368[1] }
        ?25     = { defs={} expr=v369[1] }
        ?26     = { defs={} expr=v370[1] }
        ?27     = { defs={} expr=v371[1] }
        ?28     = { defs={} expr=v372[1] }
        ?29     = { defs={} expr=v373[1] }
        ?30     = { defs={} expr=v374[1] }
        ?31     = { defs={} expr=v375[1] }
        ip      = { defs={0x080482dd} expr=0x080482de[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v335[32] 3[32]) }
          value = { defs={} expr=v381[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v335[32] 2[32]) }
          value = { defs={} expr=v380[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v335[32] 1[32]) }
          value = { defs={} expr=v379[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v335[32] }
          value = { defs={} expr=v378[8] }
          flags = { rdonly }
0x80482de:ret    
    registers:
        ax      = { defs={} expr=v330[32] }
        cx      = { defs={} expr=v331[32] }
        dx      = { defs={} expr=v332[32] }
        bx      = { defs={} expr=v333[32] }
        sp      = { defs={0x080482dd,0x080482de} expr=(add[32] (add[32] v335[32] 4[32]) 4[32]) }
        bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v378[8]) (shr0[32] 8[32] (uextend[32] 32[32] v379[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v380[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v381[8]))) }
        si      = { defs={} expr=v336[32] }
        di      = { defs={} expr=v337[32] }
        es      = { defs={} expr=v338[16] }
        cs      = { defs={} expr=v339[16] }
        ss      = { defs={} expr=v340[16] }
        ds      = { defs={} expr=v341[16] }
        fs      = { defs={} expr=v342[16] }
        gs      = { defs={} expr=v343[16] }
        cf      = { defs={} expr=v344[1] }
        ?1      = { defs={} expr=v345[1] }
        pf      = { defs={} expr=v346[1] }
        ?3      = { defs={} expr=v347[1] }
        af      = { defs={} expr=v348[1] }
        ?5      = { defs={} expr=v349[1] }
        zf      = { defs={} expr=v350[1] }
        sf      = { defs={} expr=v351[1] }
        tf      = { defs={} expr=v352[1] }
        if      = { defs={} expr=v353[1] }
        df      = { defs={} expr=v354[1] }
        of      = { defs={} expr=v355[1] }
        iopl0   = { defs={} expr=v356[1] }
        iopl1   = { defs={} expr=v357[1] }
        nt      = { defs={} expr=v358[1] }
        ?15     = { defs={} expr=v359[1] }
        rf      = { defs={} expr=v360[1] }
        vm      = { defs={} expr=v361[1] }
        ac      = { defs={} expr=v362[1] }
        vif     = { defs={} expr=v363[1] }
        vip     = { defs={} expr=v364[1] }
        id      = { defs={} expr=v365[1] }
        ?22     = { defs={} expr=v366[1] }
        ?23     = { defs={} expr=v367[1] }
        ?24     = { defs={} expr=v368[1] }
        ?25     = { defs={} expr=v369[1] }
        ?26     = { defs={} expr=v370[1] }
        ?27     = { defs={} expr=v371[1] }
        ?28     = { defs={} expr=v372[1] }
        ?29     = { defs={} expr=v373[1] }
        ?30     = { defs={} expr=v374[1] }
        ?31     = { defs={} expr=v375[1] }
        ip      = { defs={0x080482de} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v388[8]) (shr0[32] 8[32] (uextend[32] 32[32] v389[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v390[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v391[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v335[32] 4[32]) 3[32]) }
          value = { defs={} expr=v391[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v335[32] 4[32]) 2[32]) }
          value = { defs={} expr=v390[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v335[32] 4[32]) 1[32]) }
          value = { defs={} expr=v389[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=(add[32] v335[32] 4[32]) }
          value = { defs={} expr=v388[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v335[32] 3[32]) }
          value = { defs={} expr=v381[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v335[32] 2[32]) }
          value = { defs={} expr=v380[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v335[32] 1[32]) }
          value = { defs={} expr=v379[8] }
          flags = { rdonly }
        address = { defs={0x080482dd} expr=v335[32] }
          value = { defs={} expr=v378[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
    registers:
        ax      = { defs={} expr=v444[32] }
        cx      = { defs={} expr=v445[32] }
        dx      = { defs={} expr=v446[32] }
        bx      = { defs={} expr=v447[32] }
        sp      = { defs={} expr=v448[32] }
        bp      = { defs={} expr=v449[32] }
        si      = { defs={} expr=v450[32] }
        di      = { defs={} expr=v451[32] }
        es      = { defs={} expr=v452[16] }
        cs      = { defs={} expr=v453[16] }
        ss      = { defs={} expr=v454[16] }
        ds      = { defs={} expr=v455[16] }
        fs      = { defs={} expr=v456[16] }
        gs      = { defs={} expr=v457[16] }
        cf      = { defs={} expr=v458[1] }
        ?1      = { defs={} expr=v459[1] }
        pf      = { defs={} expr=v460[1] }
        ?3      = { defs={} expr=v461[1] }
        af      = { defs={} expr=v462[1] }
        ?5      = { defs={} expr=v463[1] }
        zf      = { defs={} expr=v464[1] }
        sf      = { defs={} expr=v465[1] }
        tf      = { defs={} expr=v466[1] }
        if      = { defs={} expr=v467[1] }
        df      = { defs={} expr=v468[1] }
        of      = { defs={} expr=v469[1] }
        iopl0   = { defs={} expr=v470[1] }
        iopl1   = { defs={} expr=v471[1] }
        nt      = { defs={} expr=v472[1] }
        ?15     = { defs={} expr=v473[1] }
        rf      = { defs={} expr=v474[1] }
        vm      = { defs={} expr=v475[1] }
        ac      = { defs={} expr=v476[1] }
        vif     = { defs={} expr=v477[1] }
        vip     = { defs={} expr=v478[1] }
        id      = { defs={} expr=v479[1] }
        ?22     = { defs={} expr=v480[1] }
        ?23     = { defs={} expr=v481[1] }
        ?24     = { defs={} expr=v482[1] }
        ?25     = { defs={} expr=v483[1] }
        ?26     = { defs={} expr=v484[1] }
        ?27     = { defs={} expr=v485[1] }
        ?28     = { defs={} expr=v486[1] }
        ?29     = { defs={} expr=v487[1] }
        ?30     = { defs={} expr=v488[1] }
        ?31     = { defs={} expr=v489[1] }
        ip      = { defs={0x080482f0} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v492[8]) (shr0[32] 8[32] (uextend[32] 32[32] v493[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v494[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v495[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496d7[32] }
          value = { defs={} expr=v495[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d6[32] }
          value = { defs={} expr=v494[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d5[32] }
          value = { defs={} expr=v493[8] }
          flags = { rdonly }
        address = { defs={0x080482f0} expr=0x080496d4[32] }
          value = { defs={} expr=v492[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
    registers:
        ax      = { defs={} expr=v548[32] }
        cx      = { defs={} expr=v549[32] }
        dx      = { defs={} expr=v550[32] }
        bx      = { defs={} expr=v551[32] }
        sp      = { defs={} expr=v552[32] }
        bp      = { defs={} expr=v553[32] }
        si      = { defs={} expr=v554[32] }
        di      = { defs={} expr=v555[32] }
        es      = { defs={} expr=v556[16] }
        cs      = { defs={} expr=v557[16] }
        ss      = { defs={} expr=v558[16] }
        ds      = { defs={} expr=v559[16] }
        fs      = { defs={} expr=v560[16] }
        gs      = { defs={} expr=v561[16] }
        cf      = { defs={} expr=v562[1] }
        ?1      = { defs={} expr=v563[1] }
        pf      = { defs={} expr=v564[1] }
        ?3      = { defs={} expr=v565[1] }
        af      = { defs={} expr=v566[1] }
        ?5      = { defs={} expr=v567[1] }
        zf      = { defs={} expr=v568[1] }
        sf      = { defs={} expr=v569[1] }
        tf      = { defs={} expr=v570[1] }
        if      = { defs={} expr=v571[1] }
        df      = { defs={} expr=v572[1] }
        of      = { defs={} expr=v573[1] }
        iopl0   = { defs={} expr=v574[1] }
        iopl1   = { defs={} expr=v575[1] }
        nt      = { defs={} expr=v576[1] }
        ?15     = { defs={} expr=v577[1] }
        rf      = { defs={} expr=v578[1] }
        vm      = { defs={} expr=v579[1] }
        ac      = { defs={} expr=v580[1] }
        vif     = { defs={} expr=v581[1] }
        vip     = { defs={} expr=v582[1] }
        id      = { defs={} expr=v583[1] }
        ?22     = { defs={} expr=v584[1] }
        ?23     = { defs={} expr=v585[1] }
        ?24     = { defs={} expr=v586[1] }
        ?25     = { defs={} expr=v587[1] }
        ?26     = { defs={} expr=v588[1] }
        ?27     = { defs={} expr=v589[1] }
        ?28     = { defs={} expr=v590[1] }
        ?29     = { defs={} expr=v591[1] }
        ?30     = { defs={} expr=v592[1] }
        ?31     = { defs={} expr=v593[1] }
        ip      = { defs={0x08048300} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v596[8]) (shr0[32] 8[32] (uextend[32] 32[32] v597[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v598[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v599[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496db[32] }
          value = { defs={} expr=v599[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496da[32] }
          value = { defs={} expr=v598[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496d9[32] }
          value = { defs={} expr=v597[8] }
          flags = { rdonly }
        address = { defs={0x08048300} expr=0x080496d8[32] }
          value = { defs={} expr=v596[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
    registers:
        ax      = { defs={} expr=v652[32] }
        cx      = { defs={} expr=v653[32] }
        dx      = { defs={} expr=v654[32] }
        bx      = { defs={} expr=v655[32] }
        sp      = { defs={} expr=v656[32] }
        bp      = { defs={} expr=v657[32] }
        si      = { defs={} expr=v658[32] }
        di      = { defs={} expr=v659[32] }
        es      = { defs={} expr=v660[16] }
        cs      = { defs={} expr=v661[16] }
        ss      = { defs={} expr=v662[16] }
        ds      = { defs={} expr=v663[16] }
        fs      = { defs={} expr=v664[16] }
        gs      = { defs={} expr=v665[16] }
        cf      = { defs={} expr=v666[1] }
        ?1      = { defs={} expr=v667[1] }
        pf      = { defs={} expr=v668[1] }
        ?3      = { defs={} expr=v669[1] }
        af      = { defs={} expr=v670[1] }
        ?5      = { defs={} expr=v671[1] }
        zf      = { defs={} expr=v672[1] }
        sf      = { defs={} expr=v673[1] }
        tf      = { defs={} expr=v674[1] }
        if      = { defs={} expr=v675[1] }
        df      = { defs={} expr=v676[1] }
        of      = { defs={} expr=v677[1] }
        iopl0   = { defs={} expr=v678[1] }
        iopl1   = { defs={} expr=v679[1] }
        nt      = { defs={} expr=v680[1] }
        ?15     = { defs={} expr=v681[1] }
        rf      = { defs={} expr=v682[1] }
        vm      = { defs={} expr=v683[1] }
        ac      = { defs={} expr=v684[1] }
        vif     = { defs={} expr=v685[1] }
        vip     = { defs={} expr=v686[1] }
        id      = { defs={} expr=v687[1] }
        ?22     = { defs={} expr=v688[1] }
        ?23     = { defs={} expr=v689[1] }
        ?24     = { defs={} expr=v690[1] }
        ?25     = { defs={} expr=v691[1] }
        ?26     = { defs={} expr=v692[1] }
        ?27     = { defs={} expr=v693[1] }
        ?28     = { defs={} expr=v694[1] }
        ?29     = { defs={} expr=v695[1] }
        ?30     = { defs={} expr=v696[1] }
        ?31     = { defs={} expr=v697[1] }
        ip      = { defs={0x08048310} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v700[8]) (shr0[32] 8[32] (uextend[32] 32[32] v701[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v702[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v703[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496df[32] }
          value = { defs={} expr=v703[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496de[32] }
          value = { defs={} expr=v702[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496dd[32] }
          value = { defs={} expr=v701[8] }
          flags = { rdonly }
        address = { defs={0x08048310} expr=0x080496dc[32] }
          value = { defs={} expr=v700[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
    registers:
        ax      = { defs={} expr=v756[32] }
        cx      = { defs={} expr=v757[32] }
        dx      = { defs={} expr=v758[32] }
        bx      = { defs={} expr=v759[32] }
        sp      = { defs={} expr=v760[32] }
        bp      = { defs={} expr=v761[32] }
        si      = { defs={} expr=v762[32] }
        di      = { defs={} expr=v763[32] }
        es      = { defs={} expr=v764[16] }
        cs      = { defs={} expr=v765[16] }
        ss      = { defs={} expr=v766[16] }
        ds      = { defs={} expr=v767[16] }
        fs      = { defs={} expr=v768[16] }
        gs      = { defs={} expr=v769[16] }
        cf      = { defs={} expr=v770[1] }
        ?1      = { defs={} expr=v771[1] }
        pf      = { defs={} expr=v772[1] }
        ?3      = { defs={} expr=v773[1] }
        af      = { defs={} expr=v774[1] }
        ?5      = { defs={} expr=v775[1] }
        zf      = { defs={} expr=v776[1] }
        sf      = { defs={} expr=v777[1] }
        tf      = { defs={} expr=v778[1] }
        if      = { defs={} expr=v779[1] }
        df      = { defs={} expr=v780[1] }
        of      = { defs={} expr=v781[1] }
        iopl0   = { defs={} expr=v782[1] }
        iopl1   = { defs={} expr=v783[1] }
        nt      = { defs={} expr=v784[1] }
        ?15     = { defs={} expr=v785[1] }
        rf      = { defs={} expr=v786[1] }
        vm      = { defs={} expr=v787[1] }
        ac      = { defs={} expr=v788[1] }
        vif     = { defs={} expr=v789[1] }
        vip     = { defs={} expr=v790[1] }
        id      = { defs={} expr=v791[1] }
        ?22     = { defs={} expr=v792[1] }
        ?23     = { defs={} expr=v793[1] }
        ?24     = { defs={} expr=v794[1] }
        ?25     = { defs={} expr=v795[1] }
        ?26     = { defs={} expr=v796[1] }
        ?27     = { defs={} expr=v797[1] }
        ?28     = { defs={} expr=v798[1] }
        ?29     = { defs={} expr=v799[1] }
        ?30     = { defs={} expr=v800[1] }
        ?31     = { defs={} expr=v801[1] }
        ip      = { defs={0x08048320} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v804[8]) (shr0[32] 8[32] (uextend[32] 32[32] v805[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v806[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v807[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e3[32] }
          value = { defs={} expr=v807[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e2[32] }
          value = { defs={} expr=v806[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e1[32] }
          value = { defs={} expr=v805[8] }
          flags = { rdonly }
        address = { defs={0x08048320} expr=0x080496e0[32] }
          value = { defs={} expr=v804[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
    registers:
        ax      = { defs={} expr=v860[32] }
        cx      = { defs={} expr=v861[32] }
        dx      = { defs={} expr=v862[32] }
        bx      = { defs={} expr=v863[32] }
        sp      = { defs={} expr=v864[32] }
        bp      = { defs={} expr=v865[32] }
        si      = { defs={} expr=v866[32] }
        di      = { defs={} expr=v867[32] }
        es      = { defs={} expr=v868[16] }
        cs      = { defs={} expr=v869[16] }
        ss      = { defs={} expr=v870[16] }
        ds      = { defs={} expr=v871[16] }
        fs      = { defs={} expr=v872[16] }
        gs      = { defs={} expr=v873[16] }
        cf      = { defs={} expr=v874[1] }
        ?1      = { defs={} expr=v875[1] }
        pf      = { defs={} expr=v876[1] }
        ?3      = { defs={} expr=v877[1] }
        af      = { defs={} expr=v878[1] }
        ?5      = { defs={} expr=v879[1] }
        zf      = { defs={} expr=v880[1] }
        sf      = { defs={} expr=v881[1] }
        tf      = { defs={} expr=v882[1] }
        if      = { defs={} expr=v883[1] }
        df      = { defs={} expr=v884[1] }
        of      = { defs={} expr=v885[1] }
        iopl0   = { defs={} expr=v886[1] }
        iopl1   = { defs={} expr=v887[1] }
        nt      = { defs={} expr=v888[1] }
        ?15     = { defs={} expr=v889[1] }
        rf      = { defs={} expr=v890[1] }
        vm      = { defs={} expr=v891[1] }
        ac      = { defs={} expr=v892[1] }
        vif     = { defs={} expr=v893[1] }
        vip     = { defs={} expr=v894[1] }
        id      = { defs={} expr=v895[1] }
        ?22     = { defs={} expr=v896[1] }
        ?23     = { defs={} expr=v897[1] }
        ?24     = { defs={} expr=v898[1] }
        ?25     = { defs={} expr=v899[1] }
        ?26     = { defs={} expr=v900[1] }
        ?27     = { defs={} expr=v901[1] }
        ?28     = { defs={} expr=v902[1] }
        ?29     = { defs={} expr=v903[1] }
        ?30     = { defs={} expr=v904[1] }
        ?31     = { defs={} expr=v905[1] }
        ip      = { defs={0x08048330} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v908[8]) (shr0[32] 8[32] (uextend[32] 32[32] v909[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v910[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v911[8]))) }
    memory:
    init mem:
        address = { defs={} expr=0x080496e7[32] }
          value = { defs={} expr=v911[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e6[32] }
          value = { defs={} expr=v910[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496e5[32] }
          value = { defs={} expr=v909[8] }
          flags = { rdonly }
        address = { defs={0x08048330} expr=0x080496e4[32] }
          value = { defs={} expr=v908[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={} expr=v965[32] }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={} expr=v968[32] }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={} expr=v970[32] }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048340} expr=v1010[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340} expr=0x08048342[32] }
    memory:
    init mem:
0x8048342:pop    esi
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={} expr=v965[32] }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342} expr=(add[32] v968[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048340} expr=v1010[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342} expr=0x08048343[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048343:mov    ecx, esp
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342} expr=(add[32] v968[32] 4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048340} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048340} expr=1[1] }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048340} expr=v1010[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048340} expr=1[1] }
        sf      = { defs={0x08048340} expr=0[1] }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048340} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343} expr=0x08048345[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048345:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345} expr=(bv-and[32] (add[32] v968[32] 4[32]) -16[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345} expr=0x08048348[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048348:push   eax
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348} expr=0x08048349[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048349:push   esp
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349} expr=0x0804834a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x804834a:push   edx
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a} expr=0x0804834b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x804834b:push   0x08048520<__libc_csu_fini>
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=0x08048350[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048350:push   0x080484b0<__libc_csu_init>
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=0x08048355[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048355:push   ecx
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=0x08048356[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048356:push   esi
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=0x08048357[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x8048357:push   0x08048410<main>
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=0x0804835c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
0x804835c:call   0x08048310<__libc_start_main@plt>
    registers:
        ax      = { defs={} expr=v964[32] }
        cx      = { defs={0x08048342,0x08048343} expr=(add[32] v968[32] 4[32]) }
        dx      = { defs={} expr=v966[32] }
        bx      = { defs={} expr=v967[32] }
        sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048340} expr=0[32] }
        si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8]))) }
        di      = { defs={} expr=v971[32] }
        es      = { defs={} expr=v972[16] }
        cs      = { defs={} expr=v973[16] }
        ss      = { defs={} expr=v974[16] }
        ds      = { defs={} expr=v975[16] }
        fs      = { defs={} expr=v976[16] }
        gs      = { defs={} expr=v977[16] }
        cf      = { defs={0x08048345} expr=0[1] }
        ?1      = { defs={} expr=v979[1] }
        pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v981[1] }
        af      = { defs={0x08048345} expr=v1021[1] }
        ?5      = { defs={} expr=v983[1] }
        zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32])) }
        tf      = { defs={} expr=v986[1] }
        if      = { defs={} expr=v987[1] }
        df      = { defs={} expr=v988[1] }
        of      = { defs={0x08048345} expr=0[1] }
        iopl0   = { defs={} expr=v990[1] }
        iopl1   = { defs={} expr=v991[1] }
        nt      = { defs={} expr=v992[1] }
        ?15     = { defs={} expr=v993[1] }
        rf      = { defs={} expr=v994[1] }
        vm      = { defs={} expr=v995[1] }
        ac      = { defs={} expr=v996[1] }
        vif     = { defs={} expr=v997[1] }
        vip     = { defs={} expr=v998[1] }
        id      = { defs={} expr=v999[1] }
        ?22     = { defs={} expr=v1000[1] }
        ?23     = { defs={} expr=v1001[1] }
        ?24     = { defs={} expr=v1002[1] }
        ?25     = { defs={} expr=v1003[1] }
        ?26     = { defs={} expr=v1004[1] }
        ?27     = { defs={} expr=v1005[1] }
        ?28     = { defs={} expr=v1006[1] }
        ?29     = { defs={} expr=v1007[1] }
        ?30     = { defs={} expr=v1008[1] }
        ?31     = { defs={} expr=v1009[1] }
        ip      = { defs={0x0804835c} expr=0x08048310[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=97[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=16[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1013[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1014[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1015[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1016[8])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v968[32] 4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-80[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=32[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v966[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v966[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v964[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v964[32]) }
          flags = { }
        address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v968[32] 4[32]) -16[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v964[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v968[32] 3[32]) }
          value = { defs={} expr=v1016[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 2[32]) }
          value = { defs={} expr=v1015[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v968[32] 1[32]) }
          value = { defs={} expr=v1014[8] }
          flags = { rdonly }
        address = { defs={} expr=v968[32] }
          value = { defs={} expr=v1013[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
    registers:
        ax      = { defs={} expr=v1070[32] }
        cx      = { defs={} expr=v1071[32] }
        dx      = { defs={} expr=v1072[32] }
        bx      = { defs={} expr=v1073[32] }
        sp      = { defs={} expr=v1074[32] }
        bp      = { defs={} expr=v1075[32] }
        si      = { defs={} expr=v1076[32] }
        di      = { defs={} expr=v1077[32] }
        es      = { defs={} expr=v1078[16] }
        cs      = { defs={} expr=v1079[16] }
        ss      = { defs={} expr=v1080[16] }
        ds      = { defs={} expr=v1081[16] }
        fs      = { defs={} expr=v1082[16] }
        gs      = { defs={} expr=v1083[16] }
        cf      = { defs={} expr=v1084[1] }
        ?1      = { defs={} expr=v1085[1] }
        pf      = { defs={} expr=v1086[1] }
        ?3      = { defs={} expr=v1087[1] }
        af      = { defs={} expr=v1088[1] }
        ?5      = { defs={} expr=v1089[1] }
        zf      = { defs={} expr=v1090[1] }
        sf      = { defs={} expr=v1091[1] }
        tf      = { defs={} expr=v1092[1] }
        if      = { defs={} expr=v1093[1] }
        df      = { defs={} expr=v1094[1] }
        of      = { defs={} expr=v1095[1] }
        iopl0   = { defs={} expr=v1096[1] }
        iopl1   = { defs={} expr=v1097[1] }
        nt      = { defs={} expr=v1098[1] }
        ?15     = { defs={} expr=v1099[1] }
        rf      = { defs={} expr=v1100[1] }
        vm      = { defs={} expr=v1101[1] }
        ac      = { defs={} expr=v1102[1] }
        vif     = { defs={} expr=v1103[1] }
        vip     = { defs={} expr=v1104[1] }
        id      = { defs={} expr=v1105[1] }
        ?22     = { defs={} expr=v1106[1] }
        ?23     = { defs={} expr=v1107[1] }
        ?24     = { defs={} expr=v1108[1] }
        ?25     = { defs={} expr=v1109[1] }
        ?26     = { defs={} expr=v1110[1] }
        ?27     = { defs={} expr=v1111[1] }
        ?28     = { defs={} expr=v1112[1] }
        ?29     = { defs={} expr=v1113[1] }
        ?30     = { defs={} expr=v1114[1] }
        ?31     = { defs={} expr=v1115[1] }
        ip      = { defs={0x08048361} expr=0x08048361[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048364:push   ebp
    registers:
        ax      = { defs={} expr=v1164[32] }
        cx      = { defs={} expr=v1165[32] }
        dx      = { defs={} expr=v1166[32] }
        bx      = { defs={} expr=v1167[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
        bp      = { defs={} expr=v1169[32] }
        si      = { defs={} expr=v1170[32] }
        di      = { defs={} expr=v1171[32] }
        es      = { defs={} expr=v1172[16] }
        cs      = { defs={} expr=v1173[16] }
        ss      = { defs={} expr=v1174[16] }
        ds      = { defs={} expr=v1175[16] }
        fs      = { defs={} expr=v1176[16] }
        gs      = { defs={} expr=v1177[16] }
        cf      = { defs={} expr=v1178[1] }
        ?1      = { defs={} expr=v1179[1] }
        pf      = { defs={} expr=v1180[1] }
        ?3      = { defs={} expr=v1181[1] }
        af      = { defs={} expr=v1182[1] }
        ?5      = { defs={} expr=v1183[1] }
        zf      = { defs={} expr=v1184[1] }
        sf      = { defs={} expr=v1185[1] }
        tf      = { defs={} expr=v1186[1] }
        if      = { defs={} expr=v1187[1] }
        df      = { defs={} expr=v1188[1] }
        of      = { defs={} expr=v1189[1] }
        iopl0   = { defs={} expr=v1190[1] }
        iopl1   = { defs={} expr=v1191[1] }
        nt      = { defs={} expr=v1192[1] }
        ?15     = { defs={} expr=v1193[1] }
        rf      = { defs={} expr=v1194[1] }
        vm      = { defs={} expr=v1195[1] }
        ac      = { defs={} expr=v1196[1] }
        vif     = { defs={} expr=v1197[1] }
        vip     = { defs={} expr=v1198[1] }
        id      = { defs={} expr=v1199[1] }
        ?22     = { defs={} expr=v1200[1] }
        ?23     = { defs={} expr=v1201[1] }
        ?24     = { defs={} expr=v1202[1] }
        ?25     = { defs={} expr=v1203[1] }
        ?26     = { defs={} expr=v1204[1] }
        ?27     = { defs={} expr=v1205[1] }
        ?28     = { defs={} expr=v1206[1] }
        ?29     = { defs={} expr=v1207[1] }
        ?30     = { defs={} expr=v1208[1] }
        ?31     = { defs={} expr=v1209[1] }
        ip      = { defs={0x08048364} expr=0x08048365[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1169[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1169[32]) }
          flags = { }
    init mem:
0x8048365:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v1164[32] }
        cx      = { defs={} expr=v1165[32] }
        dx      = { defs={} expr=v1166[32] }
        bx      = { defs={} expr=v1167[32] }
        sp      = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1168[32] -4[32]) }
        si      = { defs={} expr=v1170[32] }
        di      = { defs={} expr=v1171[32] }
        es      = { defs={} expr=v1172[16] }
        cs      = { defs={} expr=v1173[16] }
        ss      = { defs={} expr=v1174[16] }
        ds      = { defs={} expr=v1175[16] }
        fs      = { defs={} expr=v1176[16] }
        gs      = { defs={} expr=v1177[16] }
        cf      = { defs={} expr=v1178[1] }
        ?1      = { defs={} expr=v1179[1] }
        pf      = { defs={} expr=v1180[1] }
        ?3      = { defs={} expr=v1181[1] }
        af      = { defs={} expr=v1182[1] }
        ?5      = { defs={} expr=v1183[1] }
        zf      = { defs={} expr=v1184[1] }
        sf      = { defs={} expr=v1185[1] }
        tf      = { defs={} expr=v1186[1] }
        if      = { defs={} expr=v1187[1] }
        df      = { defs={} expr=v1188[1] }
        of      = { defs={} expr=v1189[1] }
        iopl0   = { defs={} expr=v1190[1] }
        iopl1   = { defs={} expr=v1191[1] }
        nt      = { defs={} expr=v1192[1] }
        ?15     = { defs={} expr=v1193[1] }
        rf      = { defs={} expr=v1194[1] }
        vm      = { defs={} expr=v1195[1] }
        ac      = { defs={} expr=v1196[1] }
        vif     = { defs={} expr=v1197[1] }
        vip     = { defs={} expr=v1198[1] }
        id      = { defs={} expr=v1199[1] }
        ?22     = { defs={} expr=v1200[1] }
        ?23     = { defs={} expr=v1201[1] }
        ?24     = { defs={} expr=v1202[1] }
        ?25     = { defs={} expr=v1203[1] }
        ?26     = { defs={} expr=v1204[1] }
        ?27     = { defs={} expr=v1205[1] }
        ?28     = { defs={} expr=v1206[1] }
        ?29     = { defs={} expr=v1207[1] }
        ?30     = { defs={} expr=v1208[1] }
        ?31     = { defs={} expr=v1209[1] }
        ip      = { defs={0x08048364,0x08048365} expr=0x08048367[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1169[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1169[32]) }
          flags = { }
    init mem:
0x8048367:push   ebx
    registers:
        ax      = { defs={} expr=v1164[32] }
        cx      = { defs={} expr=v1165[32] }
        dx      = { defs={} expr=v1166[32] }
        bx      = { defs={} expr=v1167[32] }
        sp      = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1168[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1168[32] -4[32]) }
        si      = { defs={} expr=v1170[32] }
        di      = { defs={} expr=v1171[32] }
        es      = { defs={} expr=v1172[16] }
        cs      = { defs={} expr=v1173[16] }
        ss      = { defs={} expr=v1174[16] }
        ds      = { defs={} expr=v1175[16] }
        fs      = { defs={} expr=v1176[16] }
        gs      = { defs={} expr=v1177[16] }
        cf      = { defs={} expr=v1178[1] }
        ?1      = { defs={} expr=v1179[1] }
        pf      = { defs={} expr=v1180[1] }
        ?3      = { defs={} expr=v1181[1] }
        af      = { defs={} expr=v1182[1] }
        ?5      = { defs={} expr=v1183[1] }
        zf      = { defs={} expr=v1184[1] }
        sf      = { defs={} expr=v1185[1] }
        tf      = { defs={} expr=v1186[1] }
        if      = { defs={} expr=v1187[1] }
        df      = { defs={} expr=v1188[1] }
        of      = { defs={} expr=v1189[1] }
        iopl0   = { defs={} expr=v1190[1] }
        iopl1   = { defs={} expr=v1191[1] }
        nt      = { defs={} expr=v1192[1] }
        ?15     = { defs={} expr=v1193[1] }
        rf      = { defs={} expr=v1194[1] }
        vm      = { defs={} expr=v1195[1] }
        ac      = { defs={} expr=v1196[1] }
        vif     = { defs={} expr=v1197[1] }
        vip     = { defs={} expr=v1198[1] }
        id      = { defs={} expr=v1199[1] }
        ?22     = { defs={} expr=v1200[1] }
        ?23     = { defs={} expr=v1201[1] }
        ?24     = { defs={} expr=v1202[1] }
        ?25     = { defs={} expr=v1203[1] }
        ?26     = { defs={} expr=v1204[1] }
        ?27     = { defs={} expr=v1205[1] }
        ?28     = { defs={} expr=v1206[1] }
        ?29     = { defs={} expr=v1207[1] }
        ?30     = { defs={} expr=v1208[1] }
        ?31     = { defs={} expr=v1209[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367} expr=0x08048368[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1167[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1168[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1169[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1169[32]) }
          flags = { }
    init mem:
0x8048368:push   ecx
    registers:
        ax      = { defs={} expr=v1164[32] }
        cx      = { defs={} expr=v1165[32] }
        dx      = { defs={} expr=v1166[32] }
        bx      = { defs={} expr=v1167[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1168[32] -4[32]) }
        si      = { defs={} expr=v1170[32] }
        di      = { defs={} expr=v1171[32] }
        es      = { defs={} expr=v1172[16] }
        cs      = { defs={} expr=v1173[16] }
        ss      = { defs={} expr=v1174[16] }
        ds      = { defs={} expr=v1175[16] }
        fs      = { defs={} expr=v1176[16] }
        gs      = { defs={} expr=v1177[16] }
        cf      = { defs={} expr=v1178[1] }
        ?1      = { defs={} expr=v1179[1] }
        pf      = { defs={} expr=v1180[1] }
        ?3      = { defs={} expr=v1181[1] }
        af      = { defs={} expr=v1182[1] }
        ?5      = { defs={} expr=v1183[1] }
        zf      = { defs={} expr=v1184[1] }
        sf      = { defs={} expr=v1185[1] }
        tf      = { defs={} expr=v1186[1] }
        if      = { defs={} expr=v1187[1] }
        df      = { defs={} expr=v1188[1] }
        of      = { defs={} expr=v1189[1] }
        iopl0   = { defs={} expr=v1190[1] }
        iopl1   = { defs={} expr=v1191[1] }
        nt      = { defs={} expr=v1192[1] }
        ?15     = { defs={} expr=v1193[1] }
        rf      = { defs={} expr=v1194[1] }
        vm      = { defs={} expr=v1195[1] }
        ac      = { defs={} expr=v1196[1] }
        vif     = { defs={} expr=v1197[1] }
        vip     = { defs={} expr=v1198[1] }
        id      = { defs={} expr=v1199[1] }
        ?22     = { defs={} expr=v1200[1] }
        ?23     = { defs={} expr=v1201[1] }
        ?24     = { defs={} expr=v1202[1] }
        ?25     = { defs={} expr=v1203[1] }
        ?26     = { defs={} expr=v1204[1] }
        ?27     = { defs={} expr=v1205[1] }
        ?28     = { defs={} expr=v1206[1] }
        ?29     = { defs={} expr=v1207[1] }
        ?30     = { defs={} expr=v1208[1] }
        ?31     = { defs={} expr=v1209[1] }
        ip      = { defs={0x08048364,0x08048365,0x08048367,0x08048368} expr=0x08048369[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1165[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1167[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1168[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1169[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1169[32]) }
          flags = { }
    init mem:
0x8048369:call   0x0804836e<<Insn>>
    registers:
        ax      = { defs={} expr=v1164[32] }
        cx      = { defs={} expr=v1165[32] }
        dx      = { defs={} expr=v1166[32] }
        bx      = { defs={} expr=v1167[32] }
        sp      = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1168[32] -4[32]) }
        si      = { defs={} expr=v1170[32] }
        di      = { defs={} expr=v1171[32] }
        es      = { defs={} expr=v1172[16] }
        cs      = { defs={} expr=v1173[16] }
        ss      = { defs={} expr=v1174[16] }
        ds      = { defs={} expr=v1175[16] }
        fs      = { defs={} expr=v1176[16] }
        gs      = { defs={} expr=v1177[16] }
        cf      = { defs={} expr=v1178[1] }
        ?1      = { defs={} expr=v1179[1] }
        pf      = { defs={} expr=v1180[1] }
        ?3      = { defs={} expr=v1181[1] }
        af      = { defs={} expr=v1182[1] }
        ?5      = { defs={} expr=v1183[1] }
        zf      = { defs={} expr=v1184[1] }
        sf      = { defs={} expr=v1185[1] }
        tf      = { defs={} expr=v1186[1] }
        if      = { defs={} expr=v1187[1] }
        df      = { defs={} expr=v1188[1] }
        of      = { defs={} expr=v1189[1] }
        iopl0   = { defs={} expr=v1190[1] }
        iopl1   = { defs={} expr=v1191[1] }
        nt      = { defs={} expr=v1192[1] }
        ?15     = { defs={} expr=v1193[1] }
        rf      = { defs={} expr=v1194[1] }
        vm      = { defs={} expr=v1195[1] }
        ac      = { defs={} expr=v1196[1] }
        vif     = { defs={} expr=v1197[1] }
        vip     = { defs={} expr=v1198[1] }
        id      = { defs={} expr=v1199[1] }
        ?22     = { defs={} expr=v1200[1] }
        ?23     = { defs={} expr=v1201[1] }
        ?24     = { defs={} expr=v1202[1] }
        ?25     = { defs={} expr=v1203[1] }
        ?26     = { defs={} expr=v1204[1] }
        ?27     = { defs={} expr=v1205[1] }
        ?28     = { defs={} expr=v1206[1] }
        ?29     = { defs={} expr=v1207[1] }
        ?30     = { defs={} expr=v1208[1] }
        ?31     = { defs={} expr=v1209[1] }
        ip      = { defs={0x08048369} expr=0x0804836e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=110[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1165[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1165[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v1168[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1167[32]) }
          flags = { }
        address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1168[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1167[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1169[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1168[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1169[32]) }
          flags = { }
        address = { defs={0x08048364} expr=(add[32] v1168[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1169[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
    registers:
        ax      = { defs={} expr=v1258[32] }
        cx      = { defs={} expr=v1259[32] }
        dx      = { defs={} expr=v1260[32] }
        bx      = { defs={0x0804836e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) }
        sp      = { defs={0x0804836e} expr=(add[32] v1262[32] 4[32]) }
        bp      = { defs={} expr=v1263[32] }
        si      = { defs={} expr=v1264[32] }
        di      = { defs={} expr=v1265[32] }
        es      = { defs={} expr=v1266[16] }
        cs      = { defs={} expr=v1267[16] }
        ss      = { defs={} expr=v1268[16] }
        ds      = { defs={} expr=v1269[16] }
        fs      = { defs={} expr=v1270[16] }
        gs      = { defs={} expr=v1271[16] }
        cf      = { defs={} expr=v1272[1] }
        ?1      = { defs={} expr=v1273[1] }
        pf      = { defs={} expr=v1274[1] }
        ?3      = { defs={} expr=v1275[1] }
        af      = { defs={} expr=v1276[1] }
        ?5      = { defs={} expr=v1277[1] }
        zf      = { defs={} expr=v1278[1] }
        sf      = { defs={} expr=v1279[1] }
        tf      = { defs={} expr=v1280[1] }
        if      = { defs={} expr=v1281[1] }
        df      = { defs={} expr=v1282[1] }
        of      = { defs={} expr=v1283[1] }
        iopl0   = { defs={} expr=v1284[1] }
        iopl1   = { defs={} expr=v1285[1] }
        nt      = { defs={} expr=v1286[1] }
        ?15     = { defs={} expr=v1287[1] }
        rf      = { defs={} expr=v1288[1] }
        vm      = { defs={} expr=v1289[1] }
        ac      = { defs={} expr=v1290[1] }
        vif     = { defs={} expr=v1291[1] }
        vip     = { defs={} expr=v1292[1] }
        id      = { defs={} expr=v1293[1] }
        ?22     = { defs={} expr=v1294[1] }
        ?23     = { defs={} expr=v1295[1] }
        ?24     = { defs={} expr=v1296[1] }
        ?25     = { defs={} expr=v1297[1] }
        ?26     = { defs={} expr=v1298[1] }
        ?27     = { defs={} expr=v1299[1] }
        ?28     = { defs={} expr=v1300[1] }
        ?29     = { defs={} expr=v1301[1] }
        ?30     = { defs={} expr=v1302[1] }
        ?31     = { defs={} expr=v1303[1] }
        ip      = { defs={0x0804836e} expr=0x0804836f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1262[32] 3[32]) }
          value = { defs={} expr=v1309[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 2[32]) }
          value = { defs={} expr=v1308[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 1[32]) }
          value = { defs={} expr=v1307[8] }
          flags = { rdonly }
        address = { defs={} expr=v1262[32] }
          value = { defs={} expr=v1306[8] }
          flags = { rdonly }
0x804836f:add    ebx, 0x0000135a
    registers:
        ax      = { defs={} expr=v1258[32] }
        cx      = { defs={} expr=v1259[32] }
        dx      = { defs={} expr=v1260[32] }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1262[32] 4[32]) }
        bp      = { defs={} expr=v1263[32] }
        si      = { defs={} expr=v1264[32] }
        di      = { defs={} expr=v1265[32] }
        es      = { defs={} expr=v1266[16] }
        cs      = { defs={} expr=v1267[16] }
        ss      = { defs={} expr=v1268[16] }
        ds      = { defs={} expr=v1269[16] }
        fs      = { defs={} expr=v1270[16] }
        gs      = { defs={} expr=v1271[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1273[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1275[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1277[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])) }
        tf      = { defs={} expr=v1280[1] }
        if      = { defs={} expr=v1281[1] }
        df      = { defs={} expr=v1282[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=0[1] }
        iopl0   = { defs={} expr=v1284[1] }
        iopl1   = { defs={} expr=v1285[1] }
        nt      = { defs={} expr=v1286[1] }
        ?15     = { defs={} expr=v1287[1] }
        rf      = { defs={} expr=v1288[1] }
        vm      = { defs={} expr=v1289[1] }
        ac      = { defs={} expr=v1290[1] }
        vif     = { defs={} expr=v1291[1] }
        vip     = { defs={} expr=v1292[1] }
        id      = { defs={} expr=v1293[1] }
        ?22     = { defs={} expr=v1294[1] }
        ?23     = { defs={} expr=v1295[1] }
        ?24     = { defs={} expr=v1296[1] }
        ?25     = { defs={} expr=v1297[1] }
        ?26     = { defs={} expr=v1298[1] }
        ?27     = { defs={} expr=v1299[1] }
        ?28     = { defs={} expr=v1300[1] }
        ?29     = { defs={} expr=v1301[1] }
        ?30     = { defs={} expr=v1302[1] }
        ?31     = { defs={} expr=v1303[1] }
        ip      = { defs={0x0804836e,0x0804836f} expr=0x08048375[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1262[32] 3[32]) }
          value = { defs={} expr=v1309[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 2[32]) }
          value = { defs={} expr=v1308[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 1[32]) }
          value = { defs={} expr=v1307[8] }
          flags = { rdonly }
        address = { defs={} expr=v1262[32] }
          value = { defs={} expr=v1306[8] }
          flags = { rdonly }
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
    registers:
        ax      = { defs={} expr=v1258[32] }
        cx      = { defs={} expr=v1259[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1262[32] 4[32]) }
        bp      = { defs={} expr=v1263[32] }
        si      = { defs={} expr=v1264[32] }
        di      = { defs={} expr=v1265[32] }
        es      = { defs={} expr=v1266[16] }
        cs      = { defs={} expr=v1267[16] }
        ss      = { defs={} expr=v1268[16] }
        ds      = { defs={} expr=v1269[16] }
        fs      = { defs={} expr=v1270[16] }
        gs      = { defs={} expr=v1271[16] }
        cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33]))))) }
        ?1      = { defs={} expr=v1273[1] }
        pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]))))))) }
        ?3      = { defs={} expr=v1275[1] }
        af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8])))) 4954[33]))))) }
        ?5      = { defs={} expr=v1277[1] }
        zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])) }
        sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32])) }
        tf      = { defs={} expr=v1280[1] }
        if      = { defs={} expr=v1281[1] }
        df      = { defs={} expr=v1282[1] }
        of      = { defs={0x0804836e,0x0804836f} expr=0[1] }
        iopl0   = { defs={} expr=v1284[1] }
        iopl1   = { defs={} expr=v1285[1] }
        nt      = { defs={} expr=v1286[1] }
        ?15     = { defs={} expr=v1287[1] }
        rf      = { defs={} expr=v1288[1] }
        vm      = { defs={} expr=v1289[1] }
        ac      = { defs={} expr=v1290[1] }
        vif     = { defs={} expr=v1291[1] }
        vip     = { defs={} expr=v1292[1] }
        id      = { defs={} expr=v1293[1] }
        ?22     = { defs={} expr=v1294[1] }
        ?23     = { defs={} expr=v1295[1] }
        ?24     = { defs={} expr=v1296[1] }
        ?25     = { defs={} expr=v1297[1] }
        ?26     = { defs={} expr=v1298[1] }
        ?27     = { defs={} expr=v1299[1] }
        ?28     = { defs={} expr=v1300[1] }
        ?29     = { defs={} expr=v1301[1] }
        ?30     = { defs={} expr=v1302[1] }
        ?31     = { defs={} expr=v1303[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375} expr=0x0804837b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1322[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1320[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1318[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1316[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 3[32]) }
          value = { defs={} expr=v1309[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 2[32]) }
          value = { defs={} expr=v1308[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 1[32]) }
          value = { defs={} expr=v1307[8] }
          flags = { rdonly }
        address = { defs={} expr=v1262[32] }
          value = { defs={} expr=v1306[8] }
          flags = { rdonly }
0x804837b:test   edx, edx
    registers:
        ax      = { defs={} expr=v1258[32] }
        cx      = { defs={} expr=v1259[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1262[32] 4[32]) }
        bp      = { defs={} expr=v1263[32] }
        si      = { defs={} expr=v1264[32] }
        di      = { defs={} expr=v1265[32] }
        es      = { defs={} expr=v1266[16] }
        cs      = { defs={} expr=v1267[16] }
        ss      = { defs={} expr=v1268[16] }
        ds      = { defs={} expr=v1269[16] }
        fs      = { defs={} expr=v1270[16] }
        gs      = { defs={} expr=v1271[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1273[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))))))) }
        ?3      = { defs={} expr=v1275[1] }
        af      = { defs={0x0804837b} expr=v1328[1] }
        ?5      = { defs={} expr=v1277[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        tf      = { defs={} expr=v1280[1] }
        if      = { defs={} expr=v1281[1] }
        df      = { defs={} expr=v1282[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1284[1] }
        iopl1   = { defs={} expr=v1285[1] }
        nt      = { defs={} expr=v1286[1] }
        ?15     = { defs={} expr=v1287[1] }
        rf      = { defs={} expr=v1288[1] }
        vm      = { defs={} expr=v1289[1] }
        ac      = { defs={} expr=v1290[1] }
        vif     = { defs={} expr=v1291[1] }
        vip     = { defs={} expr=v1292[1] }
        id      = { defs={} expr=v1293[1] }
        ?22     = { defs={} expr=v1294[1] }
        ?23     = { defs={} expr=v1295[1] }
        ?24     = { defs={} expr=v1296[1] }
        ?25     = { defs={} expr=v1297[1] }
        ?26     = { defs={} expr=v1298[1] }
        ?27     = { defs={} expr=v1299[1] }
        ?28     = { defs={} expr=v1300[1] }
        ?29     = { defs={} expr=v1301[1] }
        ?30     = { defs={} expr=v1302[1] }
        ?31     = { defs={} expr=v1303[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b} expr=0x0804837d[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1322[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1320[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1318[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1316[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 3[32]) }
          value = { defs={} expr=v1309[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 2[32]) }
          value = { defs={} expr=v1308[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 1[32]) }
          value = { defs={} expr=v1307[8] }
          flags = { rdonly }
        address = { defs={} expr=v1262[32] }
          value = { defs={} expr=v1306[8] }
          flags = { rdonly }
0x804837d:je     0x08048384<<Insn>>
    registers:
        ax      = { defs={} expr=v1258[32] }
        cx      = { defs={} expr=v1259[32] }
        dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) }
        bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) }
        sp      = { defs={0x0804836e} expr=(add[32] v1262[32] 4[32]) }
        bp      = { defs={} expr=v1263[32] }
        si      = { defs={} expr=v1264[32] }
        di      = { defs={} expr=v1265[32] }
        es      = { defs={} expr=v1266[16] }
        cs      = { defs={} expr=v1267[16] }
        ss      = { defs={} expr=v1268[16] }
        ds      = { defs={} expr=v1269[16] }
        fs      = { defs={} expr=v1270[16] }
        gs      = { defs={} expr=v1271[16] }
        cf      = { defs={0x0804837b} expr=0[1] }
        ?1      = { defs={} expr=v1273[1] }
        pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32])))))))))))) }
        ?3      = { defs={} expr=v1275[1] }
        af      = { defs={0x0804837b} expr=v1328[1] }
        ?5      = { defs={} expr=v1277[1] }
        zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))))) }
        tf      = { defs={} expr=v1280[1] }
        if      = { defs={} expr=v1281[1] }
        df      = { defs={} expr=v1282[1] }
        of      = { defs={0x0804837b} expr=0[1] }
        iopl0   = { defs={} expr=v1284[1] }
        iopl1   = { defs={} expr=v1285[1] }
        nt      = { defs={} expr=v1286[1] }
        ?15     = { defs={} expr=v1287[1] }
        rf      = { defs={} expr=v1288[1] }
        vm      = { defs={} expr=v1289[1] }
        ac      = { defs={} expr=v1290[1] }
        vif     = { defs={} expr=v1291[1] }
        vip     = { defs={} expr=v1292[1] }
        id      = { defs={} expr=v1293[1] }
        ?22     = { defs={} expr=v1294[1] }
        ?23     = { defs={} expr=v1295[1] }
        ?24     = { defs={} expr=v1296[1] }
        ?25     = { defs={} expr=v1297[1] }
        ?26     = { defs={} expr=v1298[1] }
        ?27     = { defs={} expr=v1299[1] }
        ?28     = { defs={} expr=v1300[1] }
        ?29     = { defs={} expr=v1301[1] }
        ?30     = { defs={} expr=v1302[1] }
        ?31     = { defs={} expr=v1303[1] }
        ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b,0x0804837d} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1317[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) v1316[8]) (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1319[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) v1318[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1321[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) v1320[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1323[8] (add[32] v1262[32] 3[32]) v1309[8]) (add[32] v1262[32] 2[32]) v1308[8]) (add[32] v1262[32] 1[32]) v1307[8]) v1262[32] v1306[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) v1322[8]) (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]))))))) 0x08048384[32] 0x0804837f[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 3[32]) }
          value = { defs={} expr=v1322[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 2[32]) }
          value = { defs={} expr=v1320[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) 1[32]) }
          value = { defs={} expr=v1318[8] }
          flags = { rdonly }
        address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1306[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1307[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1308[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1309[8]))) 4954[32]) -4[32]) }
          value = { defs={} expr=v1316[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 3[32]) }
          value = { defs={} expr=v1309[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 2[32]) }
          value = { defs={} expr=v1308[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1262[32] 1[32]) }
          value = { defs={} expr=v1307[8] }
          flags = { rdonly }
        address = { defs={} expr=v1262[32] }
          value = { defs={} expr=v1306[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330<__gmon_start__@plt>
    registers:
        ax      = { defs={} expr=v1377[32] }
        cx      = { defs={} expr=v1378[32] }
        dx      = { defs={} expr=v1379[32] }
        bx      = { defs={} expr=v1380[32] }
        sp      = { defs={0x0804837f} expr=(add[32] v1381[32] -4[32]) }
        bp      = { defs={} expr=v1382[32] }
        si      = { defs={} expr=v1383[32] }
        di      = { defs={} expr=v1384[32] }
        es      = { defs={} expr=v1385[16] }
        cs      = { defs={} expr=v1386[16] }
        ss      = { defs={} expr=v1387[16] }
        ds      = { defs={} expr=v1388[16] }
        fs      = { defs={} expr=v1389[16] }
        gs      = { defs={} expr=v1390[16] }
        cf      = { defs={} expr=v1391[1] }
        ?1      = { defs={} expr=v1392[1] }
        pf      = { defs={} expr=v1393[1] }
        ?3      = { defs={} expr=v1394[1] }
        af      = { defs={} expr=v1395[1] }
        ?5      = { defs={} expr=v1396[1] }
        zf      = { defs={} expr=v1397[1] }
        sf      = { defs={} expr=v1398[1] }
        tf      = { defs={} expr=v1399[1] }
        if      = { defs={} expr=v1400[1] }
        df      = { defs={} expr=v1401[1] }
        of      = { defs={} expr=v1402[1] }
        iopl0   = { defs={} expr=v1403[1] }
        iopl1   = { defs={} expr=v1404[1] }
        nt      = { defs={} expr=v1405[1] }
        ?15     = { defs={} expr=v1406[1] }
        rf      = { defs={} expr=v1407[1] }
        vm      = { defs={} expr=v1408[1] }
        ac      = { defs={} expr=v1409[1] }
        vif     = { defs={} expr=v1410[1] }
        vip     = { defs={} expr=v1411[1] }
        id      = { defs={} expr=v1412[1] }
        ?22     = { defs={} expr=v1413[1] }
        ?23     = { defs={} expr=v1414[1] }
        ?24     = { defs={} expr=v1415[1] }
        ?25     = { defs={} expr=v1416[1] }
        ?26     = { defs={} expr=v1417[1] }
        ?27     = { defs={} expr=v1418[1] }
        ?28     = { defs={} expr=v1419[1] }
        ?29     = { defs={} expr=v1420[1] }
        ?30     = { defs={} expr=v1421[1] }
        ?31     = { defs={} expr=v1422[1] }
        ip      = { defs={0x0804837f} expr=0x08048330[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1381[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1381[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1381[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x0804837f} expr=(add[32] v1381[32] -4[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1519[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1520[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1521[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1522[8]))) }
        cx      = { defs={} expr=v1472[32] }
        dx      = { defs={} expr=v1473[32] }
        bx      = { defs={} expr=v1474[32] }
        sp      = { defs={0x08048384} expr=(add[32] v1475[32] 4[32]) }
        bp      = { defs={} expr=v1476[32] }
        si      = { defs={} expr=v1477[32] }
        di      = { defs={} expr=v1478[32] }
        es      = { defs={} expr=v1479[16] }
        cs      = { defs={} expr=v1480[16] }
        ss      = { defs={} expr=v1481[16] }
        ds      = { defs={} expr=v1482[16] }
        fs      = { defs={} expr=v1483[16] }
        gs      = { defs={} expr=v1484[16] }
        cf      = { defs={} expr=v1485[1] }
        ?1      = { defs={} expr=v1486[1] }
        pf      = { defs={} expr=v1487[1] }
        ?3      = { defs={} expr=v1488[1] }
        af      = { defs={} expr=v1489[1] }
        ?5      = { defs={} expr=v1490[1] }
        zf      = { defs={} expr=v1491[1] }
        sf      = { defs={} expr=v1492[1] }
        tf      = { defs={} expr=v1493[1] }
        if      = { defs={} expr=v1494[1] }
        df      = { defs={} expr=v1495[1] }
        of      = { defs={} expr=v1496[1] }
        iopl0   = { defs={} expr=v1497[1] }
        iopl1   = { defs={} expr=v1498[1] }
        nt      = { defs={} expr=v1499[1] }
        ?15     = { defs={} expr=v1500[1] }
        rf      = { defs={} expr=v1501[1] }
        vm      = { defs={} expr=v1502[1] }
        ac      = { defs={} expr=v1503[1] }
        vif     = { defs={} expr=v1504[1] }
        vip     = { defs={} expr=v1505[1] }
        id      = { defs={} expr=v1506[1] }
        ?22     = { defs={} expr=v1507[1] }
        ?23     = { defs={} expr=v1508[1] }
        ?24     = { defs={} expr=v1509[1] }
        ?25     = { defs={} expr=v1510[1] }
        ?26     = { defs={} expr=v1511[1] }
        ?27     = { defs={} expr=v1512[1] }
        ?28     = { defs={} expr=v1513[1] }
        ?29     = { defs={} expr=v1514[1] }
        ?30     = { defs={} expr=v1515[1] }
        ?31     = { defs={} expr=v1516[1] }
        ip      = { defs={0x08048384} expr=0x08048385[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1475[32] 3[32]) }
          value = { defs={} expr=v1522[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 2[32]) }
          value = { defs={} expr=v1521[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 1[32]) }
          value = { defs={} expr=v1520[8] }
          flags = { rdonly }
        address = { defs={} expr=v1475[32] }
          value = { defs={} expr=v1519[8] }
          flags = { rdonly }
0x8048385:pop    ebx
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1519[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1520[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1521[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1522[8]))) }
        cx      = { defs={} expr=v1472[32] }
        dx      = { defs={} expr=v1473[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1529[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1530[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1531[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1532[8]))) }
        sp      = { defs={0x08048384,0x08048385} expr=(add[32] (add[32] v1475[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v1476[32] }
        si      = { defs={} expr=v1477[32] }
        di      = { defs={} expr=v1478[32] }
        es      = { defs={} expr=v1479[16] }
        cs      = { defs={} expr=v1480[16] }
        ss      = { defs={} expr=v1481[16] }
        ds      = { defs={} expr=v1482[16] }
        fs      = { defs={} expr=v1483[16] }
        gs      = { defs={} expr=v1484[16] }
        cf      = { defs={} expr=v1485[1] }
        ?1      = { defs={} expr=v1486[1] }
        pf      = { defs={} expr=v1487[1] }
        ?3      = { defs={} expr=v1488[1] }
        af      = { defs={} expr=v1489[1] }
        ?5      = { defs={} expr=v1490[1] }
        zf      = { defs={} expr=v1491[1] }
        sf      = { defs={} expr=v1492[1] }
        tf      = { defs={} expr=v1493[1] }
        if      = { defs={} expr=v1494[1] }
        df      = { defs={} expr=v1495[1] }
        of      = { defs={} expr=v1496[1] }
        iopl0   = { defs={} expr=v1497[1] }
        iopl1   = { defs={} expr=v1498[1] }
        nt      = { defs={} expr=v1499[1] }
        ?15     = { defs={} expr=v1500[1] }
        rf      = { defs={} expr=v1501[1] }
        vm      = { defs={} expr=v1502[1] }
        ac      = { defs={} expr=v1503[1] }
        vif     = { defs={} expr=v1504[1] }
        vip     = { defs={} expr=v1505[1] }
        id      = { defs={} expr=v1506[1] }
        ?22     = { defs={} expr=v1507[1] }
        ?23     = { defs={} expr=v1508[1] }
        ?24     = { defs={} expr=v1509[1] }
        ?25     = { defs={} expr=v1510[1] }
        ?26     = { defs={} expr=v1511[1] }
        ?27     = { defs={} expr=v1512[1] }
        ?28     = { defs={} expr=v1513[1] }
        ?29     = { defs={} expr=v1514[1] }
        ?30     = { defs={} expr=v1515[1] }
        ?31     = { defs={} expr=v1516[1] }
        ip      = { defs={0x08048384,0x08048385} expr=0x08048386[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1475[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1532[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1475[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1531[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1475[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1530[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=(add[32] v1475[32] 4[32]) }
          value = { defs={} expr=v1529[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 3[32]) }
          value = { defs={} expr=v1522[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 2[32]) }
          value = { defs={} expr=v1521[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 1[32]) }
          value = { defs={} expr=v1520[8] }
          flags = { rdonly }
        address = { defs={} expr=v1475[32] }
          value = { defs={} expr=v1519[8] }
          flags = { rdonly }
0x8048386:leave  
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1519[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1520[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1521[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1522[8]))) }
        cx      = { defs={} expr=v1472[32] }
        dx      = { defs={} expr=v1473[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1529[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1530[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1531[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1532[8]))) }
        sp      = { defs={0x08048386} expr=(add[32] v1476[32] 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1540[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) v1476[32] v1539[8]) v1476[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1542[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) (add[32] v1476[32] 1[32]) v1541[8]) (add[32] v1476[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1544[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) (add[32] v1476[32] 2[32]) v1543[8]) (add[32] v1476[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1546[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) (add[32] v1476[32] 3[32]) v1545[8]) (add[32] v1476[32] 3[32]))))) }
        si      = { defs={} expr=v1477[32] }
        di      = { defs={} expr=v1478[32] }
        es      = { defs={} expr=v1479[16] }
        cs      = { defs={} expr=v1480[16] }
        ss      = { defs={} expr=v1481[16] }
        ds      = { defs={} expr=v1482[16] }
        fs      = { defs={} expr=v1483[16] }
        gs      = { defs={} expr=v1484[16] }
        cf      = { defs={} expr=v1485[1] }
        ?1      = { defs={} expr=v1486[1] }
        pf      = { defs={} expr=v1487[1] }
        ?3      = { defs={} expr=v1488[1] }
        af      = { defs={} expr=v1489[1] }
        ?5      = { defs={} expr=v1490[1] }
        zf      = { defs={} expr=v1491[1] }
        sf      = { defs={} expr=v1492[1] }
        tf      = { defs={} expr=v1493[1] }
        if      = { defs={} expr=v1494[1] }
        df      = { defs={} expr=v1495[1] }
        of      = { defs={} expr=v1496[1] }
        iopl0   = { defs={} expr=v1497[1] }
        iopl1   = { defs={} expr=v1498[1] }
        nt      = { defs={} expr=v1499[1] }
        ?15     = { defs={} expr=v1500[1] }
        rf      = { defs={} expr=v1501[1] }
        vm      = { defs={} expr=v1502[1] }
        ac      = { defs={} expr=v1503[1] }
        vif     = { defs={} expr=v1504[1] }
        vip     = { defs={} expr=v1505[1] }
        id      = { defs={} expr=v1506[1] }
        ?22     = { defs={} expr=v1507[1] }
        ?23     = { defs={} expr=v1508[1] }
        ?24     = { defs={} expr=v1509[1] }
        ?25     = { defs={} expr=v1510[1] }
        ?26     = { defs={} expr=v1511[1] }
        ?27     = { defs={} expr=v1512[1] }
        ?28     = { defs={} expr=v1513[1] }
        ?29     = { defs={} expr=v1514[1] }
        ?30     = { defs={} expr=v1515[1] }
        ?31     = { defs={} expr=v1516[1] }
        ip      = { defs={0x08048384,0x08048385,0x08048386} expr=0x08048387[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v1476[32] 3[32]) }
          value = { defs={} expr=v1545[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1476[32] 2[32]) }
          value = { defs={} expr=v1543[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1476[32] 1[32]) }
          value = { defs={} expr=v1541[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1476[32] }
          value = { defs={} expr=v1539[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1475[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1532[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1475[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1531[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1475[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1530[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=(add[32] v1475[32] 4[32]) }
          value = { defs={} expr=v1529[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 3[32]) }
          value = { defs={} expr=v1522[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 2[32]) }
          value = { defs={} expr=v1521[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 1[32]) }
          value = { defs={} expr=v1520[8] }
          flags = { rdonly }
        address = { defs={} expr=v1475[32] }
          value = { defs={} expr=v1519[8] }
          flags = { rdonly }
0x8048387:ret    
    registers:
        ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1519[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1520[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1521[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1522[8]))) }
        cx      = { defs={} expr=v1472[32] }
        dx      = { defs={} expr=v1473[32] }
        bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1529[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1530[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1531[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1532[8]))) }
        sp      = { defs={0x08048386,0x08048387} expr=(add[32] (add[32] v1476[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1540[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) v1476[32] v1539[8]) v1476[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1542[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) (add[32] v1476[32] 1[32]) v1541[8]) (add[32] v1476[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1544[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) (add[32] v1476[32] 2[32]) v1543[8]) (add[32] v1476[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1546[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) (add[32] v1476[32] 3[32]) v1545[8]) (add[32] v1476[32] 3[32]))))) }
        si      = { defs={} expr=v1477[32] }
        di      = { defs={} expr=v1478[32] }
        es      = { defs={} expr=v1479[16] }
        cs      = { defs={} expr=v1480[16] }
        ss      = { defs={} expr=v1481[16] }
        ds      = { defs={} expr=v1482[16] }
        fs      = { defs={} expr=v1483[16] }
        gs      = { defs={} expr=v1484[16] }
        cf      = { defs={} expr=v1485[1] }
        ?1      = { defs={} expr=v1486[1] }
        pf      = { defs={} expr=v1487[1] }
        ?3      = { defs={} expr=v1488[1] }
        af      = { defs={} expr=v1489[1] }
        ?5      = { defs={} expr=v1490[1] }
        zf      = { defs={} expr=v1491[1] }
        sf      = { defs={} expr=v1492[1] }
        tf      = { defs={} expr=v1493[1] }
        if      = { defs={} expr=v1494[1] }
        df      = { defs={} expr=v1495[1] }
        of      = { defs={} expr=v1496[1] }
        iopl0   = { defs={} expr=v1497[1] }
        iopl1   = { defs={} expr=v1498[1] }
        nt      = { defs={} expr=v1499[1] }
        ?15     = { defs={} expr=v1500[1] }
        rf      = { defs={} expr=v1501[1] }
        vm      = { defs={} expr=v1502[1] }
        ac      = { defs={} expr=v1503[1] }
        vif     = { defs={} expr=v1504[1] }
        vip     = { defs={} expr=v1505[1] }
        id      = { defs={} expr=v1506[1] }
        ?22     = { defs={} expr=v1507[1] }
        ?23     = { defs={} expr=v1508[1] }
        ?24     = { defs={} expr=v1509[1] }
        ?25     = { defs={} expr=v1510[1] }
        ?26     = { defs={} expr=v1511[1] }
        ?27     = { defs={} expr=v1512[1] }
        ?28     = { defs={} expr=v1513[1] }
        ?29     = { defs={} expr=v1514[1] }
        ?30     = { defs={} expr=v1515[1] }
        ?31     = { defs={} expr=v1516[1] }
        ip      = { defs={0x08048387} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1554[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) (add[32] v1476[32] 4[32]) v1553[8]) (add[32] v1476[32] 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1556[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) (add[32] (add[32] v1476[32] 4[32]) 1[32]) v1555[8]) (add[32] (add[32] v1476[32] 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1558[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) (add[32] (add[32] v1476[32] 4[32]) 2[32]) v1557[8]) (add[32] (add[32] v1476[32] 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1560[8] (add[32] (add[32] v1475[32] 4[32]) 3[32]) v1532[8]) (add[32] (add[32] v1475[32] 4[32]) 2[32]) v1531[8]) (add[32] (add[32] v1475[32] 4[32]) 1[32]) v1530[8]) (add[32] v1475[32] 4[32]) v1529[8]) (add[32] v1475[32] 3[32]) v1522[8]) (add[32] v1475[32] 2[32]) v1521[8]) (add[32] v1475[32] 1[32]) v1520[8]) v1475[32] v1519[8]) (add[32] (add[32] v1476[32] 4[32]) 3[32]) v1559[8]) (add[32] (add[32] v1476[32] 4[32]) 3[32]))))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v1476[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1559[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1476[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1557[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1476[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1555[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=(add[32] v1476[32] 4[32]) }
          value = { defs={} expr=v1553[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1476[32] 3[32]) }
          value = { defs={} expr=v1545[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1476[32] 2[32]) }
          value = { defs={} expr=v1543[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1476[32] 1[32]) }
          value = { defs={} expr=v1541[8] }
          flags = { rdonly }
        address = { defs={0x08048386} expr=v1476[32] }
          value = { defs={} expr=v1539[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1475[32] 4[32]) 3[32]) }
          value = { defs={} expr=v1532[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1475[32] 4[32]) 2[32]) }
          value = { defs={} expr=v1531[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v1475[32] 4[32]) 1[32]) }
          value = { defs={} expr=v1530[8] }
          flags = { rdonly }
        address = { defs={0x08048384} expr=(add[32] v1475[32] 4[32]) }
          value = { defs={} expr=v1529[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 3[32]) }
          value = { defs={} expr=v1522[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 2[32]) }
          value = { defs={} expr=v1521[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v1475[32] 1[32]) }
          value = { defs={} expr=v1520[8] }
          flags = { rdonly }
        address = { defs={} expr=v1475[32] }
          value = { defs={} expr=v1519[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048390:push   ebp
    registers:
        ax      = { defs={} expr=v1613[32] }
        cx      = { defs={} expr=v1614[32] }
        dx      = { defs={} expr=v1615[32] }
        bx      = { defs={} expr=v1616[32] }
        sp      = { defs={0x08048390} expr=(add[32] v1617[32] -4[32]) }
        bp      = { defs={} expr=v1618[32] }
        si      = { defs={} expr=v1619[32] }
        di      = { defs={} expr=v1620[32] }
        es      = { defs={} expr=v1621[16] }
        cs      = { defs={} expr=v1622[16] }
        ss      = { defs={} expr=v1623[16] }
        ds      = { defs={} expr=v1624[16] }
        fs      = { defs={} expr=v1625[16] }
        gs      = { defs={} expr=v1626[16] }
        cf      = { defs={} expr=v1627[1] }
        ?1      = { defs={} expr=v1628[1] }
        pf      = { defs={} expr=v1629[1] }
        ?3      = { defs={} expr=v1630[1] }
        af      = { defs={} expr=v1631[1] }
        ?5      = { defs={} expr=v1632[1] }
        zf      = { defs={} expr=v1633[1] }
        sf      = { defs={} expr=v1634[1] }
        tf      = { defs={} expr=v1635[1] }
        if      = { defs={} expr=v1636[1] }
        df      = { defs={} expr=v1637[1] }
        of      = { defs={} expr=v1638[1] }
        iopl0   = { defs={} expr=v1639[1] }
        iopl1   = { defs={} expr=v1640[1] }
        nt      = { defs={} expr=v1641[1] }
        ?15     = { defs={} expr=v1642[1] }
        rf      = { defs={} expr=v1643[1] }
        vm      = { defs={} expr=v1644[1] }
        ac      = { defs={} expr=v1645[1] }
        vif     = { defs={} expr=v1646[1] }
        vip     = { defs={} expr=v1647[1] }
        id      = { defs={} expr=v1648[1] }
        ?22     = { defs={} expr=v1649[1] }
        ?23     = { defs={} expr=v1650[1] }
        ?24     = { defs={} expr=v1651[1] }
        ?25     = { defs={} expr=v1652[1] }
        ?26     = { defs={} expr=v1653[1] }
        ?27     = { defs={} expr=v1654[1] }
        ?28     = { defs={} expr=v1655[1] }
        ?29     = { defs={} expr=v1656[1] }
        ?30     = { defs={} expr=v1657[1] }
        ?31     = { defs={} expr=v1658[1] }
        ip      = { defs={0x08048390} expr=0x08048391[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1618[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v1617[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1618[32]) }
          flags = { }
    init mem:
0x8048391:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v1613[32] }
        cx      = { defs={} expr=v1614[32] }
        dx      = { defs={} expr=v1615[32] }
        bx      = { defs={} expr=v1616[32] }
        sp      = { defs={0x08048390} expr=(add[32] v1617[32] -4[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v1617[32] -4[32]) }
        si      = { defs={} expr=v1619[32] }
        di      = { defs={} expr=v1620[32] }
        es      = { defs={} expr=v1621[16] }
        cs      = { defs={} expr=v1622[16] }
        ss      = { defs={} expr=v1623[16] }
        ds      = { defs={} expr=v1624[16] }
        fs      = { defs={} expr=v1625[16] }
        gs      = { defs={} expr=v1626[16] }
        cf      = { defs={} expr=v1627[1] }
        ?1      = { defs={} expr=v1628[1] }
        pf      = { defs={} expr=v1629[1] }
        ?3      = { defs={} expr=v1630[1] }
        af      = { defs={} expr=v1631[1] }
        ?5      = { defs={} expr=v1632[1] }
        zf      = { defs={} expr=v1633[1] }
        sf      = { defs={} expr=v1634[1] }
        tf      = { defs={} expr=v1635[1] }
        if      = { defs={} expr=v1636[1] }
        df      = { defs={} expr=v1637[1] }
        of      = { defs={} expr=v1638[1] }
        iopl0   = { defs={} expr=v1639[1] }
        iopl1   = { defs={} expr=v1640[1] }
        nt      = { defs={} expr=v1641[1] }
        ?15     = { defs={} expr=v1642[1] }
        rf      = { defs={} expr=v1643[1] }
        vm      = { defs={} expr=v1644[1] }
        ac      = { defs={} expr=v1645[1] }
        vif     = { defs={} expr=v1646[1] }
        vip     = { defs={} expr=v1647[1] }
        id      = { defs={} expr=v1648[1] }
        ?22     = { defs={} expr=v1649[1] }
        ?23     = { defs={} expr=v1650[1] }
        ?24     = { defs={} expr=v1651[1] }
        ?25     = { defs={} expr=v1652[1] }
        ?26     = { defs={} expr=v1653[1] }
        ?27     = { defs={} expr=v1654[1] }
        ?28     = { defs={} expr=v1655[1] }
        ?29     = { defs={} expr=v1656[1] }
        ?30     = { defs={} expr=v1657[1] }
        ?31     = { defs={} expr=v1658[1] }
        ip      = { defs={0x08048390,0x08048391} expr=0x08048393[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1618[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v1617[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1618[32]) }
          flags = { }
    init mem:
0x8048393:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v1613[32] }
        cx      = { defs={} expr=v1614[32] }
        dx      = { defs={} expr=v1615[32] }
        bx      = { defs={} expr=v1616[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v1617[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v1617[32] -4[32]) }
        si      = { defs={} expr=v1619[32] }
        di      = { defs={} expr=v1620[32] }
        es      = { defs={} expr=v1621[16] }
        cs      = { defs={} expr=v1622[16] }
        ss      = { defs={} expr=v1623[16] }
        ds      = { defs={} expr=v1624[16] }
        fs      = { defs={} expr=v1625[16] }
        gs      = { defs={} expr=v1626[16] }
        cf      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1617[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1617[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v1628[1] }
        pf      = { defs={0x08048390,0x08048393} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1617[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1617[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1617[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1617[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1617[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1617[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1617[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1617[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v1630[1] }
        af      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1617[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1617[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v1632[1] }
        zf      = { defs={0x08048390,0x08048393} expr=(zerop[1] (add[32] (add[32] v1617[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048390,0x08048393} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v1617[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v1635[1] }
        if      = { defs={} expr=v1636[1] }
        df      = { defs={} expr=v1637[1] }
        of      = { defs={0x08048390,0x08048393} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1617[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1617[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1617[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1617[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v1639[1] }
        iopl1   = { defs={} expr=v1640[1] }
        nt      = { defs={} expr=v1641[1] }
        ?15     = { defs={} expr=v1642[1] }
        rf      = { defs={} expr=v1643[1] }
        vm      = { defs={} expr=v1644[1] }
        ac      = { defs={} expr=v1645[1] }
        vif     = { defs={} expr=v1646[1] }
        vip     = { defs={} expr=v1647[1] }
        id      = { defs={} expr=v1648[1] }
        ?22     = { defs={} expr=v1649[1] }
        ?23     = { defs={} expr=v1650[1] }
        ?24     = { defs={} expr=v1651[1] }
        ?25     = { defs={} expr=v1652[1] }
        ?26     = { defs={} expr=v1653[1] }
        ?27     = { defs={} expr=v1654[1] }
        ?28     = { defs={} expr=v1655[1] }
        ?29     = { defs={} expr=v1656[1] }
        ?30     = { defs={} expr=v1657[1] }
        ?31     = { defs={} expr=v1658[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393} expr=0x08048396[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1618[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v1617[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1618[32]) }
          flags = { }
    init mem:
0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
    registers:
        ax      = { defs={} expr=v1613[32] }
        cx      = { defs={} expr=v1614[32] }
        dx      = { defs={} expr=v1615[32] }
        bx      = { defs={} expr=v1616[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v1617[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v1617[32] -4[32]) }
        si      = { defs={} expr=v1619[32] }
        di      = { defs={} expr=v1620[32] }
        es      = { defs={} expr=v1621[16] }
        cs      = { defs={} expr=v1622[16] }
        ss      = { defs={} expr=v1623[16] }
        ds      = { defs={} expr=v1624[16] }
        fs      = { defs={} expr=v1625[16] }
        gs      = { defs={} expr=v1626[16] }
        cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) -256[9])))))) }
        ?1      = { defs={} expr=v1628[1] }
        pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (extract[1] 1[32] 2[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 2[32] 3[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (extract[1] 3[32] 4[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (extract[1] 5[32] 6[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 6[32] 7[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])))))) }
        ?3      = { defs={} expr=v1630[1] }
        af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) -256[9])))))) }
        ?5      = { defs={} expr=v1632[1] }
        zf      = { defs={0x08048396} expr=(zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) }
        sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) }
        tf      = { defs={} expr=v1635[1] }
        if      = { defs={} expr=v1636[1] }
        df      = { defs={} expr=v1637[1] }
        of      = { defs={0x08048396} expr=0[1] }
        iopl0   = { defs={} expr=v1639[1] }
        iopl1   = { defs={} expr=v1640[1] }
        nt      = { defs={} expr=v1641[1] }
        ?15     = { defs={} expr=v1642[1] }
        rf      = { defs={} expr=v1643[1] }
        vm      = { defs={} expr=v1644[1] }
        ac      = { defs={} expr=v1645[1] }
        vif     = { defs={} expr=v1646[1] }
        vip     = { defs={} expr=v1647[1] }
        id      = { defs={} expr=v1648[1] }
        ?22     = { defs={} expr=v1649[1] }
        ?23     = { defs={} expr=v1650[1] }
        ?24     = { defs={} expr=v1651[1] }
        ?25     = { defs={} expr=v1652[1] }
        ?26     = { defs={} expr=v1653[1] }
        ?27     = { defs={} expr=v1654[1] }
        ?28     = { defs={} expr=v1655[1] }
        ?29     = { defs={} expr=v1656[1] }
        ?30     = { defs={} expr=v1657[1] }
        ?31     = { defs={} expr=v1658[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396} expr=0x0804839d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1618[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v1617[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1618[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v1661[8] }
          flags = { rdonly }
0x804839d:jne    0x080483cc<<Insn>>
    registers:
        ax      = { defs={} expr=v1613[32] }
        cx      = { defs={} expr=v1614[32] }
        dx      = { defs={} expr=v1615[32] }
        bx      = { defs={} expr=v1616[32] }
        sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v1617[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048390,0x08048391} expr=(add[32] v1617[32] -4[32]) }
        si      = { defs={} expr=v1619[32] }
        di      = { defs={} expr=v1620[32] }
        es      = { defs={} expr=v1621[16] }
        cs      = { defs={} expr=v1622[16] }
        ss      = { defs={} expr=v1623[16] }
        ds      = { defs={} expr=v1624[16] }
        fs      = { defs={} expr=v1625[16] }
        gs      = { defs={} expr=v1626[16] }
        cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) -256[9])))))) }
        ?1      = { defs={} expr=v1628[1] }
        pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (extract[1] 1[32] 2[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 2[32] 3[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (extract[1] 3[32] 4[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (extract[1] 5[32] 6[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32]))) (bv-xor[1] (extract[1] 6[32] 7[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])))))) }
        ?3      = { defs={} expr=v1630[1] }
        af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) -256[9])))))) }
        ?5      = { defs={} expr=v1632[1] }
        zf      = { defs={0x08048396} expr=(zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) }
        sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32])) }
        tf      = { defs={} expr=v1635[1] }
        if      = { defs={} expr=v1636[1] }
        df      = { defs={} expr=v1637[1] }
        of      = { defs={0x08048396} expr=0[1] }
        iopl0   = { defs={} expr=v1639[1] }
        iopl1   = { defs={} expr=v1640[1] }
        nt      = { defs={} expr=v1641[1] }
        ?15     = { defs={} expr=v1642[1] }
        rf      = { defs={} expr=v1643[1] }
        vm      = { defs={} expr=v1644[1] }
        ac      = { defs={} expr=v1645[1] }
        vif     = { defs={} expr=v1646[1] }
        vip     = { defs={} expr=v1647[1] }
        id      = { defs={} expr=v1648[1] }
        ?22     = { defs={} expr=v1649[1] }
        ?23     = { defs={} expr=v1650[1] }
        ?24     = { defs={} expr=v1651[1] }
        ?25     = { defs={} expr=v1652[1] }
        ?26     = { defs={} expr=v1653[1] }
        ?27     = { defs={} expr=v1654[1] }
        ?28     = { defs={} expr=v1655[1] }
        ?29     = { defs={} expr=v1656[1] }
        ?30     = { defs={} expr=v1657[1] }
        ?31     = { defs={} expr=v1658[1] }
        ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396,0x0804839d} expr=(ite[32] (invert[1] (zerop[1] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m1662[8] (add[32] (add[32] v1617[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v1618[32])) (add[32] (add[32] v1617[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v1618[32])) (add[32] v1617[32] -4[32]) (extract[8] 0[32] 8[32] v1618[32])) 0x080496f4[32] v1661[8]) 0x080496f4[32]))) 0x080483cc[32] 0x0804839f[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v1618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v1618[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1617[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v1618[32]) }
          flags = { }
        address = { defs={0x08048390} expr=(add[32] v1617[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v1618[32]) }
          flags = { }
    init mem:
        address = { defs={0x08048396} expr=0x080496f4[32] }
          value = { defs={} expr=v1661[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) }
        cx      = { defs={} expr=v1713[32] }
        dx      = { defs={} expr=v1714[32] }
        bx      = { defs={} expr=v1715[32] }
        sp      = { defs={} expr=v1716[32] }
        bp      = { defs={} expr=v1717[32] }
        si      = { defs={} expr=v1718[32] }
        di      = { defs={} expr=v1719[32] }
        es      = { defs={} expr=v1720[16] }
        cs      = { defs={} expr=v1721[16] }
        ss      = { defs={} expr=v1722[16] }
        ds      = { defs={} expr=v1723[16] }
        fs      = { defs={} expr=v1724[16] }
        gs      = { defs={} expr=v1725[16] }
        cf      = { defs={} expr=v1726[1] }
        ?1      = { defs={} expr=v1727[1] }
        pf      = { defs={} expr=v1728[1] }
        ?3      = { defs={} expr=v1729[1] }
        af      = { defs={} expr=v1730[1] }
        ?5      = { defs={} expr=v1731[1] }
        zf      = { defs={} expr=v1732[1] }
        sf      = { defs={} expr=v1733[1] }
        tf      = { defs={} expr=v1734[1] }
        if      = { defs={} expr=v1735[1] }
        df      = { defs={} expr=v1736[1] }
        of      = { defs={} expr=v1737[1] }
        iopl0   = { defs={} expr=v1738[1] }
        iopl1   = { defs={} expr=v1739[1] }
        nt      = { defs={} expr=v1740[1] }
        ?15     = { defs={} expr=v1741[1] }
        rf      = { defs={} expr=v1742[1] }
        vm      = { defs={} expr=v1743[1] }
        ac      = { defs={} expr=v1744[1] }
        vif     = { defs={} expr=v1745[1] }
        vip     = { defs={} expr=v1746[1] }
        id      = { defs={} expr=v1747[1] }
        ?22     = { defs={} expr=v1748[1] }
        ?23     = { defs={} expr=v1749[1] }
        ?24     = { defs={} expr=v1750[1] }
        ?25     = { defs={} expr=v1751[1] }
        ?26     = { defs={} expr=v1752[1] }
        ?27     = { defs={} expr=v1753[1] }
        ?28     = { defs={} expr=v1754[1] }
        ?29     = { defs={} expr=v1755[1] }
        ?30     = { defs={} expr=v1756[1] }
        ?31     = { defs={} expr=v1757[1] }
        ip      = { defs={0x0804839f} expr=0x080483a4[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1763[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1762[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1761[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
0x80483a4:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) }
        cx      = { defs={} expr=v1713[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) }
        bx      = { defs={} expr=v1715[32] }
        sp      = { defs={} expr=v1716[32] }
        bp      = { defs={} expr=v1717[32] }
        si      = { defs={} expr=v1718[32] }
        di      = { defs={} expr=v1719[32] }
        es      = { defs={} expr=v1720[16] }
        cs      = { defs={} expr=v1721[16] }
        ss      = { defs={} expr=v1722[16] }
        ds      = { defs={} expr=v1723[16] }
        fs      = { defs={} expr=v1724[16] }
        gs      = { defs={} expr=v1725[16] }
        cf      = { defs={} expr=v1726[1] }
        ?1      = { defs={} expr=v1727[1] }
        pf      = { defs={} expr=v1728[1] }
        ?3      = { defs={} expr=v1729[1] }
        af      = { defs={} expr=v1730[1] }
        ?5      = { defs={} expr=v1731[1] }
        zf      = { defs={} expr=v1732[1] }
        sf      = { defs={} expr=v1733[1] }
        tf      = { defs={} expr=v1734[1] }
        if      = { defs={} expr=v1735[1] }
        df      = { defs={} expr=v1736[1] }
        of      = { defs={} expr=v1737[1] }
        iopl0   = { defs={} expr=v1738[1] }
        iopl1   = { defs={} expr=v1739[1] }
        nt      = { defs={} expr=v1740[1] }
        ?15     = { defs={} expr=v1741[1] }
        rf      = { defs={} expr=v1742[1] }
        vm      = { defs={} expr=v1743[1] }
        ac      = { defs={} expr=v1744[1] }
        vif     = { defs={} expr=v1745[1] }
        vip     = { defs={} expr=v1746[1] }
        id      = { defs={} expr=v1747[1] }
        ?22     = { defs={} expr=v1748[1] }
        ?23     = { defs={} expr=v1749[1] }
        ?24     = { defs={} expr=v1750[1] }
        ?25     = { defs={} expr=v1751[1] }
        ?26     = { defs={} expr=v1752[1] }
        ?27     = { defs={} expr=v1753[1] }
        ?28     = { defs={} expr=v1754[1] }
        ?29     = { defs={} expr=v1755[1] }
        ?30     = { defs={} expr=v1756[1] }
        ?31     = { defs={} expr=v1757[1] }
        ip      = { defs={0x0804839f,0x080483a4} expr=0x080483a6[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) 3[32]) }
          value = { defs={} expr=v1773[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) 2[32]) }
          value = { defs={} expr=v1772[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) 1[32]) }
          value = { defs={} expr=v1771[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) }
          value = { defs={} expr=v1770[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1763[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1762[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1761[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
0x80483a6:test   edx, edx
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) }
        cx      = { defs={} expr=v1713[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) }
        bx      = { defs={} expr=v1715[32] }
        sp      = { defs={} expr=v1716[32] }
        bp      = { defs={} expr=v1717[32] }
        si      = { defs={} expr=v1718[32] }
        di      = { defs={} expr=v1719[32] }
        es      = { defs={} expr=v1720[16] }
        cs      = { defs={} expr=v1721[16] }
        ss      = { defs={} expr=v1722[16] }
        ds      = { defs={} expr=v1723[16] }
        fs      = { defs={} expr=v1724[16] }
        gs      = { defs={} expr=v1725[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v1727[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))))))) }
        ?3      = { defs={} expr=v1729[1] }
        af      = { defs={0x080483a6} expr=v1778[1] }
        ?5      = { defs={} expr=v1731[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))))) }
        tf      = { defs={} expr=v1734[1] }
        if      = { defs={} expr=v1735[1] }
        df      = { defs={} expr=v1736[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v1738[1] }
        iopl1   = { defs={} expr=v1739[1] }
        nt      = { defs={} expr=v1740[1] }
        ?15     = { defs={} expr=v1741[1] }
        rf      = { defs={} expr=v1742[1] }
        vm      = { defs={} expr=v1743[1] }
        ac      = { defs={} expr=v1744[1] }
        vif     = { defs={} expr=v1745[1] }
        vip     = { defs={} expr=v1746[1] }
        id      = { defs={} expr=v1747[1] }
        ?22     = { defs={} expr=v1748[1] }
        ?23     = { defs={} expr=v1749[1] }
        ?24     = { defs={} expr=v1750[1] }
        ?25     = { defs={} expr=v1751[1] }
        ?26     = { defs={} expr=v1752[1] }
        ?27     = { defs={} expr=v1753[1] }
        ?28     = { defs={} expr=v1754[1] }
        ?29     = { defs={} expr=v1755[1] }
        ?30     = { defs={} expr=v1756[1] }
        ?31     = { defs={} expr=v1757[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6} expr=0x080483a8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) 3[32]) }
          value = { defs={} expr=v1773[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) 2[32]) }
          value = { defs={} expr=v1772[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) 1[32]) }
          value = { defs={} expr=v1771[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) }
          value = { defs={} expr=v1770[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1763[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1762[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1761[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
0x80483a8:je     0x080483c5<<Insn>>
    registers:
        ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) }
        cx      = { defs={} expr=v1713[32] }
        dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) }
        bx      = { defs={} expr=v1715[32] }
        sp      = { defs={} expr=v1716[32] }
        bp      = { defs={} expr=v1717[32] }
        si      = { defs={} expr=v1718[32] }
        di      = { defs={} expr=v1719[32] }
        es      = { defs={} expr=v1720[16] }
        cs      = { defs={} expr=v1721[16] }
        ss      = { defs={} expr=v1722[16] }
        ds      = { defs={} expr=v1723[16] }
        fs      = { defs={} expr=v1724[16] }
        gs      = { defs={} expr=v1725[16] }
        cf      = { defs={0x080483a6} expr=0[1] }
        ?1      = { defs={} expr=v1727[1] }
        pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8])))))))))) }
        ?3      = { defs={} expr=v1729[1] }
        af      = { defs={0x080483a6} expr=v1778[1] }
        ?5      = { defs={} expr=v1731[1] }
        zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))))) }
        sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))))) }
        tf      = { defs={} expr=v1734[1] }
        if      = { defs={} expr=v1735[1] }
        df      = { defs={} expr=v1736[1] }
        of      = { defs={0x080483a6} expr=0[1] }
        iopl0   = { defs={} expr=v1738[1] }
        iopl1   = { defs={} expr=v1739[1] }
        nt      = { defs={} expr=v1740[1] }
        ?15     = { defs={} expr=v1741[1] }
        rf      = { defs={} expr=v1742[1] }
        vm      = { defs={} expr=v1743[1] }
        ac      = { defs={} expr=v1744[1] }
        vif     = { defs={} expr=v1745[1] }
        vip     = { defs={} expr=v1746[1] }
        id      = { defs={} expr=v1747[1] }
        ?22     = { defs={} expr=v1748[1] }
        ?23     = { defs={} expr=v1749[1] }
        ?24     = { defs={} expr=v1750[1] }
        ?25     = { defs={} expr=v1751[1] }
        ?26     = { defs={} expr=v1752[1] }
        ?27     = { defs={} expr=v1753[1] }
        ?28     = { defs={} expr=v1754[1] }
        ?29     = { defs={} expr=v1755[1] }
        ?30     = { defs={} expr=v1756[1] }
        ?31     = { defs={} expr=v1757[1] }
        ip      = { defs={0x0804839f,0x080483a4,0x080483a6,0x080483a8} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1770[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1771[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1772[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1773[8]))))) 0x080483c5[32] 0x080483aa[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) 3[32]) }
          value = { defs={} expr=v1773[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) 2[32]) }
          value = { defs={} expr=v1772[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) 1[32]) }
          value = { defs={} expr=v1771[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1760[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1761[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1762[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1763[8]))) }
          value = { defs={} expr=v1770[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1763[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1762[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1761[8] }
          flags = { rdonly }
        address = { defs={0x0804839f} expr=0x080496f0[32] }
          value = { defs={} expr=v1760[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v1827[32] }
        cx      = { defs={} expr=v1828[32] }
        dx      = { defs={} expr=v1829[32] }
        bx      = { defs={} expr=v1830[32] }
        sp      = { defs={} expr=v1831[32] }
        bp      = { defs={} expr=v1832[32] }
        si      = { defs={0x080483aa} expr=v1833[32] }
        di      = { defs={} expr=v1834[32] }
        es      = { defs={} expr=v1835[16] }
        cs      = { defs={} expr=v1836[16] }
        ss      = { defs={} expr=v1837[16] }
        ds      = { defs={} expr=v1838[16] }
        fs      = { defs={} expr=v1839[16] }
        gs      = { defs={} expr=v1840[16] }
        cf      = { defs={} expr=v1841[1] }
        ?1      = { defs={} expr=v1842[1] }
        pf      = { defs={} expr=v1843[1] }
        ?3      = { defs={} expr=v1844[1] }
        af      = { defs={} expr=v1845[1] }
        ?5      = { defs={} expr=v1846[1] }
        zf      = { defs={} expr=v1847[1] }
        sf      = { defs={} expr=v1848[1] }
        tf      = { defs={} expr=v1849[1] }
        if      = { defs={} expr=v1850[1] }
        df      = { defs={} expr=v1851[1] }
        of      = { defs={} expr=v1852[1] }
        iopl0   = { defs={} expr=v1853[1] }
        iopl1   = { defs={} expr=v1854[1] }
        nt      = { defs={} expr=v1855[1] }
        ?15     = { defs={} expr=v1856[1] }
        rf      = { defs={} expr=v1857[1] }
        vm      = { defs={} expr=v1858[1] }
        ac      = { defs={} expr=v1859[1] }
        vif     = { defs={} expr=v1860[1] }
        vip     = { defs={} expr=v1861[1] }
        id      = { defs={} expr=v1862[1] }
        ?22     = { defs={} expr=v1863[1] }
        ?23     = { defs={} expr=v1864[1] }
        ?24     = { defs={} expr=v1865[1] }
        ?25     = { defs={} expr=v1866[1] }
        ?26     = { defs={} expr=v1867[1] }
        ?27     = { defs={} expr=v1868[1] }
        ?28     = { defs={} expr=v1869[1] }
        ?29     = { defs={} expr=v1870[1] }
        ?30     = { defs={} expr=v1871[1] }
        ?31     = { defs={} expr=v1872[1] }
        ip      = { defs={0x080483aa} expr=0x080483b0[32] }
    memory:
    init mem:
0x80483b0:add    eax, 0x04
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v1827[32] 4[32]) }
        cx      = { defs={} expr=v1828[32] }
        dx      = { defs={} expr=v1829[32] }
        bx      = { defs={} expr=v1830[32] }
        sp      = { defs={} expr=v1831[32] }
        bp      = { defs={} expr=v1832[32] }
        si      = { defs={0x080483aa} expr=v1833[32] }
        di      = { defs={} expr=v1834[32] }
        es      = { defs={} expr=v1835[16] }
        cs      = { defs={} expr=v1836[16] }
        ss      = { defs={} expr=v1837[16] }
        ds      = { defs={} expr=v1838[16] }
        fs      = { defs={} expr=v1839[16] }
        gs      = { defs={} expr=v1840[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33]))))) }
        ?1      = { defs={} expr=v1842[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))))))) }
        ?3      = { defs={} expr=v1844[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33]))))) }
        ?5      = { defs={} expr=v1846[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v1827[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v1827[32] 4[32])) }
        tf      = { defs={} expr=v1849[1] }
        if      = { defs={} expr=v1850[1] }
        df      = { defs={} expr=v1851[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v1853[1] }
        iopl1   = { defs={} expr=v1854[1] }
        nt      = { defs={} expr=v1855[1] }
        ?15     = { defs={} expr=v1856[1] }
        rf      = { defs={} expr=v1857[1] }
        vm      = { defs={} expr=v1858[1] }
        ac      = { defs={} expr=v1859[1] }
        vif     = { defs={} expr=v1860[1] }
        vip     = { defs={} expr=v1861[1] }
        id      = { defs={} expr=v1862[1] }
        ?22     = { defs={} expr=v1863[1] }
        ?23     = { defs={} expr=v1864[1] }
        ?24     = { defs={} expr=v1865[1] }
        ?25     = { defs={} expr=v1866[1] }
        ?26     = { defs={} expr=v1867[1] }
        ?27     = { defs={} expr=v1868[1] }
        ?28     = { defs={} expr=v1869[1] }
        ?29     = { defs={} expr=v1870[1] }
        ?30     = { defs={} expr=v1871[1] }
        ?31     = { defs={} expr=v1872[1] }
        ip      = { defs={0x080483aa,0x080483b0} expr=0x080483b3[32] }
    memory:
    init mem:
0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v1827[32] 4[32]) }
        cx      = { defs={} expr=v1828[32] }
        dx      = { defs={} expr=v1829[32] }
        bx      = { defs={} expr=v1830[32] }
        sp      = { defs={} expr=v1831[32] }
        bp      = { defs={} expr=v1832[32] }
        si      = { defs={0x080483aa} expr=v1833[32] }
        di      = { defs={} expr=v1834[32] }
        es      = { defs={} expr=v1835[16] }
        cs      = { defs={} expr=v1836[16] }
        ss      = { defs={} expr=v1837[16] }
        ds      = { defs={} expr=v1838[16] }
        fs      = { defs={} expr=v1839[16] }
        gs      = { defs={} expr=v1840[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33]))))) }
        ?1      = { defs={} expr=v1842[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))))))) }
        ?3      = { defs={} expr=v1844[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33]))))) }
        ?5      = { defs={} expr=v1846[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v1827[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v1827[32] 4[32])) }
        tf      = { defs={} expr=v1849[1] }
        if      = { defs={} expr=v1850[1] }
        df      = { defs={} expr=v1851[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v1853[1] }
        iopl1   = { defs={} expr=v1854[1] }
        nt      = { defs={} expr=v1855[1] }
        ?15     = { defs={} expr=v1856[1] }
        rf      = { defs={} expr=v1857[1] }
        vm      = { defs={} expr=v1858[1] }
        ac      = { defs={} expr=v1859[1] }
        vif     = { defs={} expr=v1860[1] }
        vip     = { defs={} expr=v1861[1] }
        id      = { defs={} expr=v1862[1] }
        ?22     = { defs={} expr=v1863[1] }
        ?23     = { defs={} expr=v1864[1] }
        ?24     = { defs={} expr=v1865[1] }
        ?25     = { defs={} expr=v1866[1] }
        ?26     = { defs={} expr=v1867[1] }
        ?27     = { defs={} expr=v1868[1] }
        ?28     = { defs={} expr=v1869[1] }
        ?29     = { defs={} expr=v1870[1] }
        ?30     = { defs={} expr=v1871[1] }
        ?31     = { defs={} expr=v1872[1] }
        ip      = { defs={0x080483aa,0x080483b0,0x080483b3} expr=0x080483b8[32] }
    memory:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1827[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1827[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1827[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32])) }
          flags = { }
    init mem:
0x80483b8:call   edx
    registers:
        ax      = { defs={0x080483b0} expr=(add[32] v1827[32] 4[32]) }
        cx      = { defs={} expr=v1828[32] }
        dx      = { defs={} expr=v1829[32] }
        bx      = { defs={} expr=v1830[32] }
        sp      = { defs={0x080483b8} expr=(add[32] v1831[32] -4[32]) }
        bp      = { defs={} expr=v1832[32] }
        si      = { defs={0x080483aa} expr=v1833[32] }
        di      = { defs={} expr=v1834[32] }
        es      = { defs={} expr=v1835[16] }
        cs      = { defs={} expr=v1836[16] }
        ss      = { defs={} expr=v1837[16] }
        ds      = { defs={} expr=v1838[16] }
        fs      = { defs={} expr=v1839[16] }
        gs      = { defs={} expr=v1840[16] }
        cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33]))))) }
        ?1      = { defs={} expr=v1842[1] }
        pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32]))))))) }
        ?3      = { defs={} expr=v1844[1] }
        af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33]))))) }
        ?5      = { defs={} expr=v1846[1] }
        zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v1827[32] 4[32])) }
        sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v1827[32] 4[32])) }
        tf      = { defs={} expr=v1849[1] }
        if      = { defs={} expr=v1850[1] }
        df      = { defs={} expr=v1851[1] }
        of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1827[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1827[32]) 4[33])))))) }
        iopl0   = { defs={} expr=v1853[1] }
        iopl1   = { defs={} expr=v1854[1] }
        nt      = { defs={} expr=v1855[1] }
        ?15     = { defs={} expr=v1856[1] }
        rf      = { defs={} expr=v1857[1] }
        vm      = { defs={} expr=v1858[1] }
        ac      = { defs={} expr=v1859[1] }
        vif     = { defs={} expr=v1860[1] }
        vip     = { defs={} expr=v1861[1] }
        id      = { defs={} expr=v1862[1] }
        ?22     = { defs={} expr=v1863[1] }
        ?23     = { defs={} expr=v1864[1] }
        ?24     = { defs={} expr=v1865[1] }
        ?25     = { defs={} expr=v1866[1] }
        ?26     = { defs={} expr=v1867[1] }
        ?27     = { defs={} expr=v1868[1] }
        ?28     = { defs={} expr=v1869[1] }
        ?29     = { defs={} expr=v1870[1] }
        ?30     = { defs={} expr=v1871[1] }
        ?31     = { defs={} expr=v1872[1] }
        ip      = { defs={0x080483b8} expr=v1829[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v1831[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1831[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v1831[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x080483b8} expr=(add[32] v1831[32] -4[32]) }
          value = { defs={} expr=-70[8] }
          flags = { }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1827[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1827[32] 4[32])) }
          flags = { }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1827[32] 4[32])) }
          flags = { }
        address = { defs={0x080483b3} expr=0x080496f0[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1827[32] 4[32])) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) }
        cx      = { defs={} expr=v1922[32] }
        dx      = { defs={} expr=v1923[32] }
        bx      = { defs={} expr=v1924[32] }
        sp      = { defs={} expr=v1925[32] }
        bp      = { defs={} expr=v1926[32] }
        si      = { defs={} expr=v1927[32] }
        di      = { defs={} expr=v1928[32] }
        es      = { defs={} expr=v1929[16] }
        cs      = { defs={} expr=v1930[16] }
        ss      = { defs={} expr=v1931[16] }
        ds      = { defs={} expr=v1932[16] }
        fs      = { defs={} expr=v1933[16] }
        gs      = { defs={} expr=v1934[16] }
        cf      = { defs={} expr=v1935[1] }
        ?1      = { defs={} expr=v1936[1] }
        pf      = { defs={} expr=v1937[1] }
        ?3      = { defs={} expr=v1938[1] }
        af      = { defs={} expr=v1939[1] }
        ?5      = { defs={} expr=v1940[1] }
        zf      = { defs={} expr=v1941[1] }
        sf      = { defs={} expr=v1942[1] }
        tf      = { defs={} expr=v1943[1] }
        if      = { defs={} expr=v1944[1] }
        df      = { defs={} expr=v1945[1] }
        of      = { defs={} expr=v1946[1] }
        iopl0   = { defs={} expr=v1947[1] }
        iopl1   = { defs={} expr=v1948[1] }
        nt      = { defs={} expr=v1949[1] }
        ?15     = { defs={} expr=v1950[1] }
        rf      = { defs={} expr=v1951[1] }
        vm      = { defs={} expr=v1952[1] }
        ac      = { defs={} expr=v1953[1] }
        vif     = { defs={} expr=v1954[1] }
        vip     = { defs={} expr=v1955[1] }
        id      = { defs={} expr=v1956[1] }
        ?22     = { defs={} expr=v1957[1] }
        ?23     = { defs={} expr=v1958[1] }
        ?24     = { defs={} expr=v1959[1] }
        ?25     = { defs={} expr=v1960[1] }
        ?26     = { defs={} expr=v1961[1] }
        ?27     = { defs={} expr=v1962[1] }
        ?28     = { defs={} expr=v1963[1] }
        ?29     = { defs={} expr=v1964[1] }
        ?30     = { defs={} expr=v1965[1] }
        ?31     = { defs={} expr=v1966[1] }
        ip      = { defs={0x080483ba} expr=0x080483bf[32] }
    memory:
    init mem:
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1972[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1971[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1970[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v1969[8] }
          flags = { rdonly }
0x80483bf:mov    edx, DWORD PTR ds:[eax]
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) }
        cx      = { defs={} expr=v1922[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) }
        bx      = { defs={} expr=v1924[32] }
        sp      = { defs={} expr=v1925[32] }
        bp      = { defs={} expr=v1926[32] }
        si      = { defs={} expr=v1927[32] }
        di      = { defs={} expr=v1928[32] }
        es      = { defs={} expr=v1929[16] }
        cs      = { defs={} expr=v1930[16] }
        ss      = { defs={} expr=v1931[16] }
        ds      = { defs={} expr=v1932[16] }
        fs      = { defs={} expr=v1933[16] }
        gs      = { defs={} expr=v1934[16] }
        cf      = { defs={} expr=v1935[1] }
        ?1      = { defs={} expr=v1936[1] }
        pf      = { defs={} expr=v1937[1] }
        ?3      = { defs={} expr=v1938[1] }
        af      = { defs={} expr=v1939[1] }
        ?5      = { defs={} expr=v1940[1] }
        zf      = { defs={} expr=v1941[1] }
        sf      = { defs={} expr=v1942[1] }
        tf      = { defs={} expr=v1943[1] }
        if      = { defs={} expr=v1944[1] }
        df      = { defs={} expr=v1945[1] }
        of      = { defs={} expr=v1946[1] }
        iopl0   = { defs={} expr=v1947[1] }
        iopl1   = { defs={} expr=v1948[1] }
        nt      = { defs={} expr=v1949[1] }
        ?15     = { defs={} expr=v1950[1] }
        rf      = { defs={} expr=v1951[1] }
        vm      = { defs={} expr=v1952[1] }
        ac      = { defs={} expr=v1953[1] }
        vif     = { defs={} expr=v1954[1] }
        vip     = { defs={} expr=v1955[1] }
        id      = { defs={} expr=v1956[1] }
        ?22     = { defs={} expr=v1957[1] }
        ?23     = { defs={} expr=v1958[1] }
        ?24     = { defs={} expr=v1959[1] }
        ?25     = { defs={} expr=v1960[1] }
        ?26     = { defs={} expr=v1961[1] }
        ?27     = { defs={} expr=v1962[1] }
        ?28     = { defs={} expr=v1963[1] }
        ?29     = { defs={} expr=v1964[1] }
        ?30     = { defs={} expr=v1965[1] }
        ?31     = { defs={} expr=v1966[1] }
        ip      = { defs={0x080483ba,0x080483bf} expr=0x080483c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) 3[32]) }
          value = { defs={} expr=v1982[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) 2[32]) }
          value = { defs={} expr=v1981[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) 1[32]) }
          value = { defs={} expr=v1980[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) }
          value = { defs={} expr=v1979[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1972[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1971[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1970[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v1969[8] }
          flags = { rdonly }
0x80483c1:test   edx, edx
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) }
        cx      = { defs={} expr=v1922[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) }
        bx      = { defs={} expr=v1924[32] }
        sp      = { defs={} expr=v1925[32] }
        bp      = { defs={} expr=v1926[32] }
        si      = { defs={} expr=v1927[32] }
        di      = { defs={} expr=v1928[32] }
        es      = { defs={} expr=v1929[16] }
        cs      = { defs={} expr=v1930[16] }
        ss      = { defs={} expr=v1931[16] }
        ds      = { defs={} expr=v1932[16] }
        fs      = { defs={} expr=v1933[16] }
        gs      = { defs={} expr=v1934[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v1936[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))))))) }
        ?3      = { defs={} expr=v1938[1] }
        af      = { defs={0x080483c1} expr=v1987[1] }
        ?5      = { defs={} expr=v1940[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))))) }
        tf      = { defs={} expr=v1943[1] }
        if      = { defs={} expr=v1944[1] }
        df      = { defs={} expr=v1945[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v1947[1] }
        iopl1   = { defs={} expr=v1948[1] }
        nt      = { defs={} expr=v1949[1] }
        ?15     = { defs={} expr=v1950[1] }
        rf      = { defs={} expr=v1951[1] }
        vm      = { defs={} expr=v1952[1] }
        ac      = { defs={} expr=v1953[1] }
        vif     = { defs={} expr=v1954[1] }
        vip     = { defs={} expr=v1955[1] }
        id      = { defs={} expr=v1956[1] }
        ?22     = { defs={} expr=v1957[1] }
        ?23     = { defs={} expr=v1958[1] }
        ?24     = { defs={} expr=v1959[1] }
        ?25     = { defs={} expr=v1960[1] }
        ?26     = { defs={} expr=v1961[1] }
        ?27     = { defs={} expr=v1962[1] }
        ?28     = { defs={} expr=v1963[1] }
        ?29     = { defs={} expr=v1964[1] }
        ?30     = { defs={} expr=v1965[1] }
        ?31     = { defs={} expr=v1966[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1} expr=0x080483c3[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) 3[32]) }
          value = { defs={} expr=v1982[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) 2[32]) }
          value = { defs={} expr=v1981[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) 1[32]) }
          value = { defs={} expr=v1980[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) }
          value = { defs={} expr=v1979[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1972[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1971[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1970[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v1969[8] }
          flags = { rdonly }
0x80483c3:jne    0x080483b0<<Insn>>
    registers:
        ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) }
        cx      = { defs={} expr=v1922[32] }
        dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) }
        bx      = { defs={} expr=v1924[32] }
        sp      = { defs={} expr=v1925[32] }
        bp      = { defs={} expr=v1926[32] }
        si      = { defs={} expr=v1927[32] }
        di      = { defs={} expr=v1928[32] }
        es      = { defs={} expr=v1929[16] }
        cs      = { defs={} expr=v1930[16] }
        ss      = { defs={} expr=v1931[16] }
        ds      = { defs={} expr=v1932[16] }
        fs      = { defs={} expr=v1933[16] }
        gs      = { defs={} expr=v1934[16] }
        cf      = { defs={0x080483c1} expr=0[1] }
        ?1      = { defs={} expr=v1936[1] }
        pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))))))) }
        ?3      = { defs={} expr=v1938[1] }
        af      = { defs={0x080483c1} expr=v1987[1] }
        ?5      = { defs={} expr=v1940[1] }
        zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))))) }
        sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))))) }
        tf      = { defs={} expr=v1943[1] }
        if      = { defs={} expr=v1944[1] }
        df      = { defs={} expr=v1945[1] }
        of      = { defs={0x080483c1} expr=0[1] }
        iopl0   = { defs={} expr=v1947[1] }
        iopl1   = { defs={} expr=v1948[1] }
        nt      = { defs={} expr=v1949[1] }
        ?15     = { defs={} expr=v1950[1] }
        rf      = { defs={} expr=v1951[1] }
        vm      = { defs={} expr=v1952[1] }
        ac      = { defs={} expr=v1953[1] }
        vif     = { defs={} expr=v1954[1] }
        vip     = { defs={} expr=v1955[1] }
        id      = { defs={} expr=v1956[1] }
        ?22     = { defs={} expr=v1957[1] }
        ?23     = { defs={} expr=v1958[1] }
        ?24     = { defs={} expr=v1959[1] }
        ?25     = { defs={} expr=v1960[1] }
        ?26     = { defs={} expr=v1961[1] }
        ?27     = { defs={} expr=v1962[1] }
        ?28     = { defs={} expr=v1963[1] }
        ?29     = { defs={} expr=v1964[1] }
        ?30     = { defs={} expr=v1965[1] }
        ?31     = { defs={} expr=v1966[1] }
        ip      = { defs={0x080483ba,0x080483bf,0x080483c1,0x080483c3} expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8])))))) 0x080483b0[32] 0x080483c5[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) 3[32]) }
          value = { defs={} expr=v1982[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) 2[32]) }
          value = { defs={} expr=v1981[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) 1[32]) }
          value = { defs={} expr=v1980[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1969[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1970[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1971[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1972[8]))) }
          value = { defs={} expr=v1979[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f3[32] }
          value = { defs={} expr=v1972[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f2[32] }
          value = { defs={} expr=v1971[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f1[32] }
          value = { defs={} expr=v1970[8] }
          flags = { rdonly }
        address = { defs={0x080483ba} expr=0x080496f0[32] }
          value = { defs={} expr=v1969[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
    registers:
        ax      = { defs={} expr=v2036[32] }
        cx      = { defs={} expr=v2037[32] }
        dx      = { defs={} expr=v2038[32] }
        bx      = { defs={} expr=v2039[32] }
        sp      = { defs={} expr=v2040[32] }
        bp      = { defs={} expr=v2041[32] }
        si      = { defs={} expr=v2042[32] }
        di      = { defs={} expr=v2043[32] }
        es      = { defs={} expr=v2044[16] }
        cs      = { defs={} expr=v2045[16] }
        ss      = { defs={} expr=v2046[16] }
        ds      = { defs={} expr=v2047[16] }
        fs      = { defs={} expr=v2048[16] }
        gs      = { defs={} expr=v2049[16] }
        cf      = { defs={} expr=v2050[1] }
        ?1      = { defs={} expr=v2051[1] }
        pf      = { defs={} expr=v2052[1] }
        ?3      = { defs={} expr=v2053[1] }
        af      = { defs={} expr=v2054[1] }
        ?5      = { defs={} expr=v2055[1] }
        zf      = { defs={} expr=v2056[1] }
        sf      = { defs={} expr=v2057[1] }
        tf      = { defs={} expr=v2058[1] }
        if      = { defs={} expr=v2059[1] }
        df      = { defs={} expr=v2060[1] }
        of      = { defs={} expr=v2061[1] }
        iopl0   = { defs={} expr=v2062[1] }
        iopl1   = { defs={} expr=v2063[1] }
        nt      = { defs={} expr=v2064[1] }
        ?15     = { defs={} expr=v2065[1] }
        rf      = { defs={} expr=v2066[1] }
        vm      = { defs={} expr=v2067[1] }
        ac      = { defs={} expr=v2068[1] }
        vif     = { defs={} expr=v2069[1] }
        vip     = { defs={} expr=v2070[1] }
        id      = { defs={} expr=v2071[1] }
        ?22     = { defs={} expr=v2072[1] }
        ?23     = { defs={} expr=v2073[1] }
        ?24     = { defs={} expr=v2074[1] }
        ?25     = { defs={} expr=v2075[1] }
        ?26     = { defs={} expr=v2076[1] }
        ?27     = { defs={} expr=v2077[1] }
        ?28     = { defs={} expr=v2078[1] }
        ?29     = { defs={} expr=v2079[1] }
        ?30     = { defs={} expr=v2080[1] }
        ?31     = { defs={} expr=v2081[1] }
        ip      = { defs={0x080483c5} expr=0x080483cc[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
0x80483cc:leave  
    registers:
        ax      = { defs={} expr=v2036[32] }
        cx      = { defs={} expr=v2037[32] }
        dx      = { defs={} expr=v2038[32] }
        bx      = { defs={} expr=v2039[32] }
        sp      = { defs={0x080483cc} expr=(add[32] v2041[32] 4[32]) }
        bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2085[8] 0x080496f4[32] 1[8]) v2041[32] v2084[8]) v2041[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2087[8] 0x080496f4[32] 1[8]) (add[32] v2041[32] 1[32]) v2086[8]) (add[32] v2041[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2089[8] 0x080496f4[32] 1[8]) (add[32] v2041[32] 2[32]) v2088[8]) (add[32] v2041[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2091[8] 0x080496f4[32] 1[8]) (add[32] v2041[32] 3[32]) v2090[8]) (add[32] v2041[32] 3[32]))))) }
        si      = { defs={} expr=v2042[32] }
        di      = { defs={} expr=v2043[32] }
        es      = { defs={} expr=v2044[16] }
        cs      = { defs={} expr=v2045[16] }
        ss      = { defs={} expr=v2046[16] }
        ds      = { defs={} expr=v2047[16] }
        fs      = { defs={} expr=v2048[16] }
        gs      = { defs={} expr=v2049[16] }
        cf      = { defs={} expr=v2050[1] }
        ?1      = { defs={} expr=v2051[1] }
        pf      = { defs={} expr=v2052[1] }
        ?3      = { defs={} expr=v2053[1] }
        af      = { defs={} expr=v2054[1] }
        ?5      = { defs={} expr=v2055[1] }
        zf      = { defs={} expr=v2056[1] }
        sf      = { defs={} expr=v2057[1] }
        tf      = { defs={} expr=v2058[1] }
        if      = { defs={} expr=v2059[1] }
        df      = { defs={} expr=v2060[1] }
        of      = { defs={} expr=v2061[1] }
        iopl0   = { defs={} expr=v2062[1] }
        iopl1   = { defs={} expr=v2063[1] }
        nt      = { defs={} expr=v2064[1] }
        ?15     = { defs={} expr=v2065[1] }
        rf      = { defs={} expr=v2066[1] }
        vm      = { defs={} expr=v2067[1] }
        ac      = { defs={} expr=v2068[1] }
        vif     = { defs={} expr=v2069[1] }
        vip     = { defs={} expr=v2070[1] }
        id      = { defs={} expr=v2071[1] }
        ?22     = { defs={} expr=v2072[1] }
        ?23     = { defs={} expr=v2073[1] }
        ?24     = { defs={} expr=v2074[1] }
        ?25     = { defs={} expr=v2075[1] }
        ?26     = { defs={} expr=v2076[1] }
        ?27     = { defs={} expr=v2077[1] }
        ?28     = { defs={} expr=v2078[1] }
        ?29     = { defs={} expr=v2079[1] }
        ?30     = { defs={} expr=v2080[1] }
        ?31     = { defs={} expr=v2081[1] }
        ip      = { defs={0x080483c5,0x080483cc} expr=0x080483cd[32] }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v2041[32] 3[32]) }
          value = { defs={} expr=v2090[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2041[32] 2[32]) }
          value = { defs={} expr=v2088[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2041[32] 1[32]) }
          value = { defs={} expr=v2086[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2041[32] }
          value = { defs={} expr=v2084[8] }
          flags = { rdonly }
0x80483cd:ret    
    registers:
        ax      = { defs={} expr=v2036[32] }
        cx      = { defs={} expr=v2037[32] }
        dx      = { defs={} expr=v2038[32] }
        bx      = { defs={} expr=v2039[32] }
        sp      = { defs={0x080483cc,0x080483cd} expr=(add[32] (add[32] v2041[32] 4[32]) 4[32]) }
        bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2085[8] 0x080496f4[32] 1[8]) v2041[32] v2084[8]) v2041[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2087[8] 0x080496f4[32] 1[8]) (add[32] v2041[32] 1[32]) v2086[8]) (add[32] v2041[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2089[8] 0x080496f4[32] 1[8]) (add[32] v2041[32] 2[32]) v2088[8]) (add[32] v2041[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2091[8] 0x080496f4[32] 1[8]) (add[32] v2041[32] 3[32]) v2090[8]) (add[32] v2041[32] 3[32]))))) }
        si      = { defs={} expr=v2042[32] }
        di      = { defs={} expr=v2043[32] }
        es      = { defs={} expr=v2044[16] }
        cs      = { defs={} expr=v2045[16] }
        ss      = { defs={} expr=v2046[16] }
        ds      = { defs={} expr=v2047[16] }
        fs      = { defs={} expr=v2048[16] }
        gs      = { defs={} expr=v2049[16] }
        cf      = { defs={} expr=v2050[1] }
        ?1      = { defs={} expr=v2051[1] }
        pf      = { defs={} expr=v2052[1] }
        ?3      = { defs={} expr=v2053[1] }
        af      = { defs={} expr=v2054[1] }
        ?5      = { defs={} expr=v2055[1] }
        zf      = { defs={} expr=v2056[1] }
        sf      = { defs={} expr=v2057[1] }
        tf      = { defs={} expr=v2058[1] }
        if      = { defs={} expr=v2059[1] }
        df      = { defs={} expr=v2060[1] }
        of      = { defs={} expr=v2061[1] }
        iopl0   = { defs={} expr=v2062[1] }
        iopl1   = { defs={} expr=v2063[1] }
        nt      = { defs={} expr=v2064[1] }
        ?15     = { defs={} expr=v2065[1] }
        rf      = { defs={} expr=v2066[1] }
        vm      = { defs={} expr=v2067[1] }
        ac      = { defs={} expr=v2068[1] }
        vif     = { defs={} expr=v2069[1] }
        vip     = { defs={} expr=v2070[1] }
        id      = { defs={} expr=v2071[1] }
        ?22     = { defs={} expr=v2072[1] }
        ?23     = { defs={} expr=v2073[1] }
        ?24     = { defs={} expr=v2074[1] }
        ?25     = { defs={} expr=v2075[1] }
        ?26     = { defs={} expr=v2076[1] }
        ?27     = { defs={} expr=v2077[1] }
        ?28     = { defs={} expr=v2078[1] }
        ?29     = { defs={} expr=v2079[1] }
        ?30     = { defs={} expr=v2080[1] }
        ?31     = { defs={} expr=v2081[1] }
        ip      = { defs={0x080483cd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2099[8] 0x080496f4[32] 1[8]) (add[32] v2041[32] 4[32]) v2098[8]) (add[32] v2041[32] 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2101[8] 0x080496f4[32] 1[8]) (add[32] (add[32] v2041[32] 4[32]) 1[32]) v2100[8]) (add[32] (add[32] v2041[32] 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2103[8] 0x080496f4[32] 1[8]) (add[32] (add[32] v2041[32] 4[32]) 2[32]) v2102[8]) (add[32] (add[32] v2041[32] 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] m2105[8] 0x080496f4[32] 1[8]) (add[32] (add[32] v2041[32] 4[32]) 3[32]) v2104[8]) (add[32] (add[32] v2041[32] 4[32]) 3[32]))))) }
    memory:
        address = { defs={0x080483c5} expr=0x080496f4[32] }
          value = { defs={} expr=1[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2041[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2104[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2041[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2102[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2041[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2100[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=(add[32] v2041[32] 4[32]) }
          value = { defs={} expr=v2098[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2041[32] 3[32]) }
          value = { defs={} expr=v2090[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2041[32] 2[32]) }
          value = { defs={} expr=v2088[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2041[32] 1[32]) }
          value = { defs={} expr=v2086[8] }
          flags = { rdonly }
        address = { defs={0x080483cc} expr=v2041[32] }
          value = { defs={} expr=v2084[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483d0:push   ebp
    registers:
        ax      = { defs={} expr=v2158[32] }
        cx      = { defs={} expr=v2159[32] }
        dx      = { defs={} expr=v2160[32] }
        bx      = { defs={} expr=v2161[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v2162[32] -4[32]) }
        bp      = { defs={} expr=v2163[32] }
        si      = { defs={} expr=v2164[32] }
        di      = { defs={} expr=v2165[32] }
        es      = { defs={} expr=v2166[16] }
        cs      = { defs={} expr=v2167[16] }
        ss      = { defs={} expr=v2168[16] }
        ds      = { defs={} expr=v2169[16] }
        fs      = { defs={} expr=v2170[16] }
        gs      = { defs={} expr=v2171[16] }
        cf      = { defs={} expr=v2172[1] }
        ?1      = { defs={} expr=v2173[1] }
        pf      = { defs={} expr=v2174[1] }
        ?3      = { defs={} expr=v2175[1] }
        af      = { defs={} expr=v2176[1] }
        ?5      = { defs={} expr=v2177[1] }
        zf      = { defs={} expr=v2178[1] }
        sf      = { defs={} expr=v2179[1] }
        tf      = { defs={} expr=v2180[1] }
        if      = { defs={} expr=v2181[1] }
        df      = { defs={} expr=v2182[1] }
        of      = { defs={} expr=v2183[1] }
        iopl0   = { defs={} expr=v2184[1] }
        iopl1   = { defs={} expr=v2185[1] }
        nt      = { defs={} expr=v2186[1] }
        ?15     = { defs={} expr=v2187[1] }
        rf      = { defs={} expr=v2188[1] }
        vm      = { defs={} expr=v2189[1] }
        ac      = { defs={} expr=v2190[1] }
        vif     = { defs={} expr=v2191[1] }
        vip     = { defs={} expr=v2192[1] }
        id      = { defs={} expr=v2193[1] }
        ?22     = { defs={} expr=v2194[1] }
        ?23     = { defs={} expr=v2195[1] }
        ?24     = { defs={} expr=v2196[1] }
        ?25     = { defs={} expr=v2197[1] }
        ?26     = { defs={} expr=v2198[1] }
        ?27     = { defs={} expr=v2199[1] }
        ?28     = { defs={} expr=v2200[1] }
        ?29     = { defs={} expr=v2201[1] }
        ?30     = { defs={} expr=v2202[1] }
        ?31     = { defs={} expr=v2203[1] }
        ip      = { defs={0x080483d0} expr=0x080483d1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2163[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2162[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2163[32]) }
          flags = { }
    init mem:
0x80483d1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2158[32] }
        cx      = { defs={} expr=v2159[32] }
        dx      = { defs={} expr=v2160[32] }
        bx      = { defs={} expr=v2161[32] }
        sp      = { defs={0x080483d0} expr=(add[32] v2162[32] -4[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2162[32] -4[32]) }
        si      = { defs={} expr=v2164[32] }
        di      = { defs={} expr=v2165[32] }
        es      = { defs={} expr=v2166[16] }
        cs      = { defs={} expr=v2167[16] }
        ss      = { defs={} expr=v2168[16] }
        ds      = { defs={} expr=v2169[16] }
        fs      = { defs={} expr=v2170[16] }
        gs      = { defs={} expr=v2171[16] }
        cf      = { defs={} expr=v2172[1] }
        ?1      = { defs={} expr=v2173[1] }
        pf      = { defs={} expr=v2174[1] }
        ?3      = { defs={} expr=v2175[1] }
        af      = { defs={} expr=v2176[1] }
        ?5      = { defs={} expr=v2177[1] }
        zf      = { defs={} expr=v2178[1] }
        sf      = { defs={} expr=v2179[1] }
        tf      = { defs={} expr=v2180[1] }
        if      = { defs={} expr=v2181[1] }
        df      = { defs={} expr=v2182[1] }
        of      = { defs={} expr=v2183[1] }
        iopl0   = { defs={} expr=v2184[1] }
        iopl1   = { defs={} expr=v2185[1] }
        nt      = { defs={} expr=v2186[1] }
        ?15     = { defs={} expr=v2187[1] }
        rf      = { defs={} expr=v2188[1] }
        vm      = { defs={} expr=v2189[1] }
        ac      = { defs={} expr=v2190[1] }
        vif     = { defs={} expr=v2191[1] }
        vip     = { defs={} expr=v2192[1] }
        id      = { defs={} expr=v2193[1] }
        ?22     = { defs={} expr=v2194[1] }
        ?23     = { defs={} expr=v2195[1] }
        ?24     = { defs={} expr=v2196[1] }
        ?25     = { defs={} expr=v2197[1] }
        ?26     = { defs={} expr=v2198[1] }
        ?27     = { defs={} expr=v2199[1] }
        ?28     = { defs={} expr=v2200[1] }
        ?29     = { defs={} expr=v2201[1] }
        ?30     = { defs={} expr=v2202[1] }
        ?31     = { defs={} expr=v2203[1] }
        ip      = { defs={0x080483d0,0x080483d1} expr=0x080483d3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2163[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2162[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2163[32]) }
          flags = { }
    init mem:
0x80483d3:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2158[32] }
        cx      = { defs={} expr=v2159[32] }
        dx      = { defs={} expr=v2160[32] }
        bx      = { defs={} expr=v2161[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2162[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2162[32] -4[32]) }
        si      = { defs={} expr=v2164[32] }
        di      = { defs={} expr=v2165[32] }
        es      = { defs={} expr=v2166[16] }
        cs      = { defs={} expr=v2167[16] }
        ss      = { defs={} expr=v2168[16] }
        ds      = { defs={} expr=v2169[16] }
        fs      = { defs={} expr=v2170[16] }
        gs      = { defs={} expr=v2171[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2173[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2175[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2177[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2162[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2162[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2180[1] }
        if      = { defs={} expr=v2181[1] }
        df      = { defs={} expr=v2182[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2184[1] }
        iopl1   = { defs={} expr=v2185[1] }
        nt      = { defs={} expr=v2186[1] }
        ?15     = { defs={} expr=v2187[1] }
        rf      = { defs={} expr=v2188[1] }
        vm      = { defs={} expr=v2189[1] }
        ac      = { defs={} expr=v2190[1] }
        vif     = { defs={} expr=v2191[1] }
        vip     = { defs={} expr=v2192[1] }
        id      = { defs={} expr=v2193[1] }
        ?22     = { defs={} expr=v2194[1] }
        ?23     = { defs={} expr=v2195[1] }
        ?24     = { defs={} expr=v2196[1] }
        ?25     = { defs={} expr=v2197[1] }
        ?26     = { defs={} expr=v2198[1] }
        ?27     = { defs={} expr=v2199[1] }
        ?28     = { defs={} expr=v2200[1] }
        ?29     = { defs={} expr=v2201[1] }
        ?30     = { defs={} expr=v2202[1] }
        ?31     = { defs={} expr=v2203[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3} expr=0x080483d6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2163[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2162[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2163[32]) }
          flags = { }
    init mem:
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) }
        cx      = { defs={} expr=v2159[32] }
        dx      = { defs={} expr=v2160[32] }
        bx      = { defs={} expr=v2161[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2162[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2162[32] -4[32]) }
        si      = { defs={} expr=v2164[32] }
        di      = { defs={} expr=v2165[32] }
        es      = { defs={} expr=v2166[16] }
        cs      = { defs={} expr=v2167[16] }
        ss      = { defs={} expr=v2168[16] }
        ds      = { defs={} expr=v2169[16] }
        fs      = { defs={} expr=v2170[16] }
        gs      = { defs={} expr=v2171[16] }
        cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2173[1] }
        pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2162[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2175[1] }
        af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2177[1] }
        zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2162[32] -4[32]) -8[32])) }
        sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2162[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2180[1] }
        if      = { defs={} expr=v2181[1] }
        df      = { defs={} expr=v2182[1] }
        of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2162[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2184[1] }
        iopl1   = { defs={} expr=v2185[1] }
        nt      = { defs={} expr=v2186[1] }
        ?15     = { defs={} expr=v2187[1] }
        rf      = { defs={} expr=v2188[1] }
        vm      = { defs={} expr=v2189[1] }
        ac      = { defs={} expr=v2190[1] }
        vif     = { defs={} expr=v2191[1] }
        vip     = { defs={} expr=v2192[1] }
        id      = { defs={} expr=v2193[1] }
        ?22     = { defs={} expr=v2194[1] }
        ?23     = { defs={} expr=v2195[1] }
        ?24     = { defs={} expr=v2196[1] }
        ?25     = { defs={} expr=v2197[1] }
        ?26     = { defs={} expr=v2198[1] }
        ?27     = { defs={} expr=v2199[1] }
        ?28     = { defs={} expr=v2200[1] }
        ?29     = { defs={} expr=v2201[1] }
        ?30     = { defs={} expr=v2202[1] }
        ?31     = { defs={} expr=v2203[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6} expr=0x080483db[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2163[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2162[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2163[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v2212[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v2210[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v2208[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v2206[8] }
          flags = { rdonly }
0x80483db:test   eax, eax
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) }
        cx      = { defs={} expr=v2159[32] }
        dx      = { defs={} expr=v2160[32] }
        bx      = { defs={} expr=v2161[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2162[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2162[32] -4[32]) }
        si      = { defs={} expr=v2164[32] }
        di      = { defs={} expr=v2165[32] }
        es      = { defs={} expr=v2166[16] }
        cs      = { defs={} expr=v2167[16] }
        ss      = { defs={} expr=v2168[16] }
        ds      = { defs={} expr=v2169[16] }
        fs      = { defs={} expr=v2170[16] }
        gs      = { defs={} expr=v2171[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v2173[1] }
        pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))))))) }
        ?3      = { defs={} expr=v2175[1] }
        af      = { defs={0x080483db} expr=v2218[1] }
        ?5      = { defs={} expr=v2177[1] }
        zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))))) }
        sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))))) }
        tf      = { defs={} expr=v2180[1] }
        if      = { defs={} expr=v2181[1] }
        df      = { defs={} expr=v2182[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v2184[1] }
        iopl1   = { defs={} expr=v2185[1] }
        nt      = { defs={} expr=v2186[1] }
        ?15     = { defs={} expr=v2187[1] }
        rf      = { defs={} expr=v2188[1] }
        vm      = { defs={} expr=v2189[1] }
        ac      = { defs={} expr=v2190[1] }
        vif     = { defs={} expr=v2191[1] }
        vip     = { defs={} expr=v2192[1] }
        id      = { defs={} expr=v2193[1] }
        ?22     = { defs={} expr=v2194[1] }
        ?23     = { defs={} expr=v2195[1] }
        ?24     = { defs={} expr=v2196[1] }
        ?25     = { defs={} expr=v2197[1] }
        ?26     = { defs={} expr=v2198[1] }
        ?27     = { defs={} expr=v2199[1] }
        ?28     = { defs={} expr=v2200[1] }
        ?29     = { defs={} expr=v2201[1] }
        ?30     = { defs={} expr=v2202[1] }
        ?31     = { defs={} expr=v2203[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db} expr=0x080483dd[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2163[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2162[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2163[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v2212[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v2210[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v2208[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v2206[8] }
          flags = { rdonly }
0x80483dd:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) }
        cx      = { defs={} expr=v2159[32] }
        dx      = { defs={} expr=v2160[32] }
        bx      = { defs={} expr=v2161[32] }
        sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2162[32] -4[32]) -8[32]) }
        bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2162[32] -4[32]) }
        si      = { defs={} expr=v2164[32] }
        di      = { defs={} expr=v2165[32] }
        es      = { defs={} expr=v2166[16] }
        cs      = { defs={} expr=v2167[16] }
        ss      = { defs={} expr=v2168[16] }
        ds      = { defs={} expr=v2169[16] }
        fs      = { defs={} expr=v2170[16] }
        gs      = { defs={} expr=v2171[16] }
        cf      = { defs={0x080483db} expr=0[1] }
        ?1      = { defs={} expr=v2173[1] }
        pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32]))))))))))) }
        ?3      = { defs={} expr=v2175[1] }
        af      = { defs={0x080483db} expr=v2218[1] }
        ?5      = { defs={} expr=v2177[1] }
        zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))))) }
        sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))))) }
        tf      = { defs={} expr=v2180[1] }
        if      = { defs={} expr=v2181[1] }
        df      = { defs={} expr=v2182[1] }
        of      = { defs={0x080483db} expr=0[1] }
        iopl0   = { defs={} expr=v2184[1] }
        iopl1   = { defs={} expr=v2185[1] }
        nt      = { defs={} expr=v2186[1] }
        ?15     = { defs={} expr=v2187[1] }
        rf      = { defs={} expr=v2188[1] }
        vm      = { defs={} expr=v2189[1] }
        ac      = { defs={} expr=v2190[1] }
        vif     = { defs={} expr=v2191[1] }
        vip     = { defs={} expr=v2192[1] }
        id      = { defs={} expr=v2193[1] }
        ?22     = { defs={} expr=v2194[1] }
        ?23     = { defs={} expr=v2195[1] }
        ?24     = { defs={} expr=v2196[1] }
        ?25     = { defs={} expr=v2197[1] }
        ?26     = { defs={} expr=v2198[1] }
        ?27     = { defs={} expr=v2199[1] }
        ?28     = { defs={} expr=v2200[1] }
        ?29     = { defs={} expr=v2201[1] }
        ?30     = { defs={} expr=v2202[1] }
        ?31     = { defs={} expr=v2203[1] }
        ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db,0x080483dd} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2207[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f8[32] v2206[8]) 0x080495f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2209[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495f9[32] v2208[8]) 0x080495f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2211[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fa[32] v2210[8]) 0x080495fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m2213[8] (add[32] (add[32] v2162[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v2163[32])) (add[32] (add[32] v2162[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v2163[32])) (add[32] v2162[32] -4[32]) (extract[8] 0[32] 8[32] v2163[32])) 0x080495fb[32] v2212[8]) 0x080495fb[32])))))) 0x08048400[32] 0x080483df[32]) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2163[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2162[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2163[32]) }
          flags = { }
        address = { defs={0x080483d0} expr=(add[32] v2162[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2163[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495fb[32] }
          value = { defs={} expr=v2212[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495fa[32] }
          value = { defs={} expr=v2210[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495f9[32] }
          value = { defs={} expr=v2208[8] }
          flags = { rdonly }
        address = { defs={0x080483d6} expr=0x080495f8[32] }
          value = { defs={} expr=v2206[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2268[32] }
        dx      = { defs={} expr=v2269[32] }
        bx      = { defs={} expr=v2270[32] }
        sp      = { defs={} expr=v2271[32] }
        bp      = { defs={} expr=v2272[32] }
        si      = { defs={} expr=v2273[32] }
        di      = { defs={} expr=v2274[32] }
        es      = { defs={} expr=v2275[16] }
        cs      = { defs={} expr=v2276[16] }
        ss      = { defs={} expr=v2277[16] }
        ds      = { defs={} expr=v2278[16] }
        fs      = { defs={} expr=v2279[16] }
        gs      = { defs={} expr=v2280[16] }
        cf      = { defs={} expr=v2281[1] }
        ?1      = { defs={} expr=v2282[1] }
        pf      = { defs={} expr=v2283[1] }
        ?3      = { defs={} expr=v2284[1] }
        af      = { defs={} expr=v2285[1] }
        ?5      = { defs={} expr=v2286[1] }
        zf      = { defs={} expr=v2287[1] }
        sf      = { defs={} expr=v2288[1] }
        tf      = { defs={} expr=v2289[1] }
        if      = { defs={} expr=v2290[1] }
        df      = { defs={} expr=v2291[1] }
        of      = { defs={} expr=v2292[1] }
        iopl0   = { defs={} expr=v2293[1] }
        iopl1   = { defs={} expr=v2294[1] }
        nt      = { defs={} expr=v2295[1] }
        ?15     = { defs={} expr=v2296[1] }
        rf      = { defs={} expr=v2297[1] }
        vm      = { defs={} expr=v2298[1] }
        ac      = { defs={} expr=v2299[1] }
        vif     = { defs={} expr=v2300[1] }
        vip     = { defs={} expr=v2301[1] }
        id      = { defs={} expr=v2302[1] }
        ?22     = { defs={} expr=v2303[1] }
        ?23     = { defs={} expr=v2304[1] }
        ?24     = { defs={} expr=v2305[1] }
        ?25     = { defs={} expr=v2306[1] }
        ?26     = { defs={} expr=v2307[1] }
        ?27     = { defs={} expr=v2308[1] }
        ?28     = { defs={} expr=v2309[1] }
        ?29     = { defs={} expr=v2310[1] }
        ?30     = { defs={} expr=v2311[1] }
        ?31     = { defs={} expr=v2312[1] }
        ip      = { defs={0x080483df} expr=0x080483e4[32] }
    memory:
    init mem:
0x80483e4:test   eax, eax
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2268[32] }
        dx      = { defs={} expr=v2269[32] }
        bx      = { defs={} expr=v2270[32] }
        sp      = { defs={} expr=v2271[32] }
        bp      = { defs={} expr=v2272[32] }
        si      = { defs={} expr=v2273[32] }
        di      = { defs={} expr=v2274[32] }
        es      = { defs={} expr=v2275[16] }
        cs      = { defs={} expr=v2276[16] }
        ss      = { defs={} expr=v2277[16] }
        ds      = { defs={} expr=v2278[16] }
        fs      = { defs={} expr=v2279[16] }
        gs      = { defs={} expr=v2280[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v2282[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v2284[1] }
        af      = { defs={0x080483e4} expr=v2313[1] }
        ?5      = { defs={} expr=v2286[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v2289[1] }
        if      = { defs={} expr=v2290[1] }
        df      = { defs={} expr=v2291[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v2293[1] }
        iopl1   = { defs={} expr=v2294[1] }
        nt      = { defs={} expr=v2295[1] }
        ?15     = { defs={} expr=v2296[1] }
        rf      = { defs={} expr=v2297[1] }
        vm      = { defs={} expr=v2298[1] }
        ac      = { defs={} expr=v2299[1] }
        vif     = { defs={} expr=v2300[1] }
        vip     = { defs={} expr=v2301[1] }
        id      = { defs={} expr=v2302[1] }
        ?22     = { defs={} expr=v2303[1] }
        ?23     = { defs={} expr=v2304[1] }
        ?24     = { defs={} expr=v2305[1] }
        ?25     = { defs={} expr=v2306[1] }
        ?26     = { defs={} expr=v2307[1] }
        ?27     = { defs={} expr=v2308[1] }
        ?28     = { defs={} expr=v2309[1] }
        ?29     = { defs={} expr=v2310[1] }
        ?30     = { defs={} expr=v2311[1] }
        ?31     = { defs={} expr=v2312[1] }
        ip      = { defs={0x080483df,0x080483e4} expr=0x080483e6[32] }
    memory:
    init mem:
0x80483e6:je     0x08048400<<Insn>>
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2268[32] }
        dx      = { defs={} expr=v2269[32] }
        bx      = { defs={} expr=v2270[32] }
        sp      = { defs={} expr=v2271[32] }
        bp      = { defs={} expr=v2272[32] }
        si      = { defs={} expr=v2273[32] }
        di      = { defs={} expr=v2274[32] }
        es      = { defs={} expr=v2275[16] }
        cs      = { defs={} expr=v2276[16] }
        ss      = { defs={} expr=v2277[16] }
        ds      = { defs={} expr=v2278[16] }
        fs      = { defs={} expr=v2279[16] }
        gs      = { defs={} expr=v2280[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v2282[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v2284[1] }
        af      = { defs={0x080483e4} expr=v2313[1] }
        ?5      = { defs={} expr=v2286[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v2289[1] }
        if      = { defs={} expr=v2290[1] }
        df      = { defs={} expr=v2291[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v2293[1] }
        iopl1   = { defs={} expr=v2294[1] }
        nt      = { defs={} expr=v2295[1] }
        ?15     = { defs={} expr=v2296[1] }
        rf      = { defs={} expr=v2297[1] }
        vm      = { defs={} expr=v2298[1] }
        ac      = { defs={} expr=v2299[1] }
        vif     = { defs={} expr=v2300[1] }
        vip     = { defs={} expr=v2301[1] }
        id      = { defs={} expr=v2302[1] }
        ?22     = { defs={} expr=v2303[1] }
        ?23     = { defs={} expr=v2304[1] }
        ?24     = { defs={} expr=v2305[1] }
        ?25     = { defs={} expr=v2306[1] }
        ?26     = { defs={} expr=v2307[1] }
        ?27     = { defs={} expr=v2308[1] }
        ?28     = { defs={} expr=v2309[1] }
        ?29     = { defs={} expr=v2310[1] }
        ?30     = { defs={} expr=v2311[1] }
        ?31     = { defs={} expr=v2312[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6} expr=0x08048400[32] }
    memory:
    init mem:
0x8048400:mov    esp, ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2268[32] }
        dx      = { defs={} expr=v2269[32] }
        bx      = { defs={} expr=v2270[32] }
        sp      = { defs={0x08048400} expr=v2272[32] }
        bp      = { defs={} expr=v2272[32] }
        si      = { defs={} expr=v2273[32] }
        di      = { defs={} expr=v2274[32] }
        es      = { defs={} expr=v2275[16] }
        cs      = { defs={} expr=v2276[16] }
        ss      = { defs={} expr=v2277[16] }
        ds      = { defs={} expr=v2278[16] }
        fs      = { defs={} expr=v2279[16] }
        gs      = { defs={} expr=v2280[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v2282[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v2284[1] }
        af      = { defs={0x080483e4} expr=v2313[1] }
        ?5      = { defs={} expr=v2286[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v2289[1] }
        if      = { defs={} expr=v2290[1] }
        df      = { defs={} expr=v2291[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v2293[1] }
        iopl1   = { defs={} expr=v2294[1] }
        nt      = { defs={} expr=v2295[1] }
        ?15     = { defs={} expr=v2296[1] }
        rf      = { defs={} expr=v2297[1] }
        vm      = { defs={} expr=v2298[1] }
        ac      = { defs={} expr=v2299[1] }
        vif     = { defs={} expr=v2300[1] }
        vip     = { defs={} expr=v2301[1] }
        id      = { defs={} expr=v2302[1] }
        ?22     = { defs={} expr=v2303[1] }
        ?23     = { defs={} expr=v2304[1] }
        ?24     = { defs={} expr=v2305[1] }
        ?25     = { defs={} expr=v2306[1] }
        ?26     = { defs={} expr=v2307[1] }
        ?27     = { defs={} expr=v2308[1] }
        ?28     = { defs={} expr=v2309[1] }
        ?29     = { defs={} expr=v2310[1] }
        ?30     = { defs={} expr=v2311[1] }
        ?31     = { defs={} expr=v2312[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400} expr=0x08048402[32] }
    memory:
    init mem:
0x8048402:pop    ebp
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2268[32] }
        dx      = { defs={} expr=v2269[32] }
        bx      = { defs={} expr=v2270[32] }
        sp      = { defs={0x08048400,0x08048402} expr=(add[32] v2272[32] 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2319[8]))) }
        si      = { defs={} expr=v2273[32] }
        di      = { defs={} expr=v2274[32] }
        es      = { defs={} expr=v2275[16] }
        cs      = { defs={} expr=v2276[16] }
        ss      = { defs={} expr=v2277[16] }
        ds      = { defs={} expr=v2278[16] }
        fs      = { defs={} expr=v2279[16] }
        gs      = { defs={} expr=v2280[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v2282[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v2284[1] }
        af      = { defs={0x080483e4} expr=v2313[1] }
        ?5      = { defs={} expr=v2286[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v2289[1] }
        if      = { defs={} expr=v2290[1] }
        df      = { defs={} expr=v2291[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v2293[1] }
        iopl1   = { defs={} expr=v2294[1] }
        nt      = { defs={} expr=v2295[1] }
        ?15     = { defs={} expr=v2296[1] }
        rf      = { defs={} expr=v2297[1] }
        vm      = { defs={} expr=v2298[1] }
        ac      = { defs={} expr=v2299[1] }
        vif     = { defs={} expr=v2300[1] }
        vip     = { defs={} expr=v2301[1] }
        id      = { defs={} expr=v2302[1] }
        ?22     = { defs={} expr=v2303[1] }
        ?23     = { defs={} expr=v2304[1] }
        ?24     = { defs={} expr=v2305[1] }
        ?25     = { defs={} expr=v2306[1] }
        ?26     = { defs={} expr=v2307[1] }
        ?27     = { defs={} expr=v2308[1] }
        ?28     = { defs={} expr=v2309[1] }
        ?29     = { defs={} expr=v2310[1] }
        ?30     = { defs={} expr=v2311[1] }
        ?31     = { defs={} expr=v2312[1] }
        ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400,0x08048402} expr=0x08048403[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v2272[32] 3[32]) }
          value = { defs={} expr=v2319[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2272[32] 2[32]) }
          value = { defs={} expr=v2318[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2272[32] 1[32]) }
          value = { defs={} expr=v2317[8] }
          flags = { rdonly }
        address = { defs={0x08048400} expr=v2272[32] }
          value = { defs={} expr=v2316[8] }
          flags = { rdonly }
0x8048403:ret    
    registers:
        ax      = { defs={0x080483df} expr=0[32] }
        cx      = { defs={} expr=v2268[32] }
        dx      = { defs={} expr=v2269[32] }
        bx      = { defs={} expr=v2270[32] }
        sp      = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] (add[32] v2272[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2316[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2317[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2318[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2319[8]))) }
        si      = { defs={} expr=v2273[32] }
        di      = { defs={} expr=v2274[32] }
        es      = { defs={} expr=v2275[16] }
        cs      = { defs={} expr=v2276[16] }
        ss      = { defs={} expr=v2277[16] }
        ds      = { defs={} expr=v2278[16] }
        fs      = { defs={} expr=v2279[16] }
        gs      = { defs={} expr=v2280[16] }
        cf      = { defs={0x080483e4} expr=0[1] }
        ?1      = { defs={} expr=v2282[1] }
        pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        ?3      = { defs={} expr=v2284[1] }
        af      = { defs={0x080483e4} expr=v2313[1] }
        ?5      = { defs={} expr=v2286[1] }
        zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
        sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
        tf      = { defs={} expr=v2289[1] }
        if      = { defs={} expr=v2290[1] }
        df      = { defs={} expr=v2291[1] }
        of      = { defs={0x080483e4} expr=0[1] }
        iopl0   = { defs={} expr=v2293[1] }
        iopl1   = { defs={} expr=v2294[1] }
        nt      = { defs={} expr=v2295[1] }
        ?15     = { defs={} expr=v2296[1] }
        rf      = { defs={} expr=v2297[1] }
        vm      = { defs={} expr=v2298[1] }
        ac      = { defs={} expr=v2299[1] }
        vif     = { defs={} expr=v2300[1] }
        vip     = { defs={} expr=v2301[1] }
        id      = { defs={} expr=v2302[1] }
        ?22     = { defs={} expr=v2303[1] }
        ?23     = { defs={} expr=v2304[1] }
        ?24     = { defs={} expr=v2305[1] }
        ?25     = { defs={} expr=v2306[1] }
        ?26     = { defs={} expr=v2307[1] }
        ?27     = { defs={} expr=v2308[1] }
        ?28     = { defs={} expr=v2309[1] }
        ?29     = { defs={} expr=v2310[1] }
        ?30     = { defs={} expr=v2311[1] }
        ?31     = { defs={} expr=v2312[1] }
        ip      = { defs={0x08048403} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2326[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2327[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2328[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2329[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2272[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2329[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2272[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2328[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2272[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2327[8] }
          flags = { rdonly }
        address = { defs={0x08048400,0x08048402} expr=(add[32] v2272[32] 4[32]) }
          value = { defs={} expr=v2326[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2272[32] 3[32]) }
          value = { defs={} expr=v2319[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2272[32] 2[32]) }
          value = { defs={} expr=v2318[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2272[32] 1[32]) }
          value = { defs={} expr=v2317[8] }
          flags = { rdonly }
        address = { defs={0x08048400} expr=v2272[32] }
          value = { defs={} expr=v2316[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
    registers:
        ax      = { defs={} expr=v2382[32] }
        cx      = { defs={} expr=v2383[32] }
        dx      = { defs={} expr=v2384[32] }
        bx      = { defs={} expr=v2385[32] }
        sp      = { defs={} expr=v2386[32] }
        bp      = { defs={} expr=v2387[32] }
        si      = { defs={} expr=v2388[32] }
        di      = { defs={} expr=v2389[32] }
        es      = { defs={} expr=v2390[16] }
        cs      = { defs={} expr=v2391[16] }
        ss      = { defs={} expr=v2392[16] }
        ds      = { defs={} expr=v2393[16] }
        fs      = { defs={} expr=v2394[16] }
        gs      = { defs={} expr=v2395[16] }
        cf      = { defs={} expr=v2396[1] }
        ?1      = { defs={} expr=v2397[1] }
        pf      = { defs={} expr=v2398[1] }
        ?3      = { defs={} expr=v2399[1] }
        af      = { defs={} expr=v2400[1] }
        ?5      = { defs={} expr=v2401[1] }
        zf      = { defs={} expr=v2402[1] }
        sf      = { defs={} expr=v2403[1] }
        tf      = { defs={} expr=v2404[1] }
        if      = { defs={} expr=v2405[1] }
        df      = { defs={} expr=v2406[1] }
        of      = { defs={} expr=v2407[1] }
        iopl0   = { defs={} expr=v2408[1] }
        iopl1   = { defs={} expr=v2409[1] }
        nt      = { defs={} expr=v2410[1] }
        ?15     = { defs={} expr=v2411[1] }
        rf      = { defs={} expr=v2412[1] }
        vm      = { defs={} expr=v2413[1] }
        ac      = { defs={} expr=v2414[1] }
        vif     = { defs={} expr=v2415[1] }
        vip     = { defs={} expr=v2416[1] }
        id      = { defs={} expr=v2417[1] }
        ?22     = { defs={} expr=v2418[1] }
        ?23     = { defs={} expr=v2419[1] }
        ?24     = { defs={} expr=v2420[1] }
        ?25     = { defs={} expr=v2421[1] }
        ?26     = { defs={} expr=v2422[1] }
        ?27     = { defs={} expr=v2423[1] }
        ?28     = { defs={} expr=v2424[1] }
        ?29     = { defs={} expr=v2425[1] }
        ?30     = { defs={} expr=v2426[1] }
        ?31     = { defs={} expr=v2427[1] }
        ip      = { defs={0x080483e8} expr=0x080483ef[32] }
    memory:
        address = { defs={} expr=(add[32] v2386[32] 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v2386[32] 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v2386[32] 1[32]) }
          value = { defs={} expr=-107[8] }
          flags = { }
        address = { defs={} expr=v2386[32] }
          value = { defs={} expr=-8[8] }
          flags = { }
    init mem:
0x80483ef:call   0x00000000
    registers:
        ax      = { defs={} expr=v2382[32] }
        cx      = { defs={} expr=v2383[32] }
        dx      = { defs={} expr=v2384[32] }
        bx      = { defs={} expr=v2385[32] }
        sp      = { defs={0x080483ef} expr=(add[32] v2386[32] -4[32]) }
        bp      = { defs={} expr=v2387[32] }
        si      = { defs={} expr=v2388[32] }
        di      = { defs={} expr=v2389[32] }
        es      = { defs={} expr=v2390[16] }
        cs      = { defs={} expr=v2391[16] }
        ss      = { defs={} expr=v2392[16] }
        ds      = { defs={} expr=v2393[16] }
        fs      = { defs={} expr=v2394[16] }
        gs      = { defs={} expr=v2395[16] }
        cf      = { defs={} expr=v2396[1] }
        ?1      = { defs={} expr=v2397[1] }
        pf      = { defs={} expr=v2398[1] }
        ?3      = { defs={} expr=v2399[1] }
        af      = { defs={} expr=v2400[1] }
        ?5      = { defs={} expr=v2401[1] }
        zf      = { defs={} expr=v2402[1] }
        sf      = { defs={} expr=v2403[1] }
        tf      = { defs={} expr=v2404[1] }
        if      = { defs={} expr=v2405[1] }
        df      = { defs={} expr=v2406[1] }
        of      = { defs={} expr=v2407[1] }
        iopl0   = { defs={} expr=v2408[1] }
        iopl1   = { defs={} expr=v2409[1] }
        nt      = { defs={} expr=v2410[1] }
        ?15     = { defs={} expr=v2411[1] }
        rf      = { defs={} expr=v2412[1] }
        vm      = { defs={} expr=v2413[1] }
        ac      = { defs={} expr=v2414[1] }
        vif     = { defs={} expr=v2415[1] }
        vip     = { defs={} expr=v2416[1] }
        id      = { defs={} expr=v2417[1] }
        ?22     = { defs={} expr=v2418[1] }
        ?23     = { defs={} expr=v2419[1] }
        ?24     = { defs={} expr=v2420[1] }
        ?25     = { defs={} expr=v2421[1] }
        ?26     = { defs={} expr=v2422[1] }
        ?27     = { defs={} expr=v2423[1] }
        ?28     = { defs={} expr=v2424[1] }
        ?29     = { defs={} expr=v2425[1] }
        ?30     = { defs={} expr=v2426[1] }
        ?31     = { defs={} expr=v2427[1] }
        ip      = { defs={0x080483ef} expr=0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2386[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2386[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2386[32] -4[32]) 1[32]) }
          value = { defs={} expr=-125[8] }
          flags = { }
        address = { defs={0x080483ef} expr=(add[32] v2386[32] -4[32]) }
          value = { defs={} expr=-12[8] }
          flags = { }
        address = { defs={} expr=(add[32] v2386[32] 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] v2386[32] 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] v2386[32] 1[32]) }
          value = { defs={} expr=-107[8] }
          flags = { }
        address = { defs={} expr=v2386[32] }
          value = { defs={} expr=-8[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v2476[32] }
        cx      = { defs={} expr=v2477[32] }
        dx      = { defs={} expr=v2478[32] }
        bx      = { defs={} expr=v2479[32] }
        sp      = { defs={} expr=v2480[32] }
        bp      = { defs={} expr=v2481[32] }
        si      = { defs={0x080483f4} expr=v2482[32] }
        di      = { defs={} expr=v2483[32] }
        es      = { defs={} expr=v2484[16] }
        cs      = { defs={} expr=v2485[16] }
        ss      = { defs={} expr=v2486[16] }
        ds      = { defs={} expr=v2487[16] }
        fs      = { defs={} expr=v2488[16] }
        gs      = { defs={} expr=v2489[16] }
        cf      = { defs={} expr=v2490[1] }
        ?1      = { defs={} expr=v2491[1] }
        pf      = { defs={} expr=v2492[1] }
        ?3      = { defs={} expr=v2493[1] }
        af      = { defs={} expr=v2494[1] }
        ?5      = { defs={} expr=v2495[1] }
        zf      = { defs={} expr=v2496[1] }
        sf      = { defs={} expr=v2497[1] }
        tf      = { defs={} expr=v2498[1] }
        if      = { defs={} expr=v2499[1] }
        df      = { defs={} expr=v2500[1] }
        of      = { defs={} expr=v2501[1] }
        iopl0   = { defs={} expr=v2502[1] }
        iopl1   = { defs={} expr=v2503[1] }
        nt      = { defs={} expr=v2504[1] }
        ?15     = { defs={} expr=v2505[1] }
        rf      = { defs={} expr=v2506[1] }
        vm      = { defs={} expr=v2507[1] }
        ac      = { defs={} expr=v2508[1] }
        vif     = { defs={} expr=v2509[1] }
        vip     = { defs={} expr=v2510[1] }
        id      = { defs={} expr=v2511[1] }
        ?22     = { defs={} expr=v2512[1] }
        ?23     = { defs={} expr=v2513[1] }
        ?24     = { defs={} expr=v2514[1] }
        ?25     = { defs={} expr=v2515[1] }
        ?26     = { defs={} expr=v2516[1] }
        ?27     = { defs={} expr=v2517[1] }
        ?28     = { defs={} expr=v2518[1] }
        ?29     = { defs={} expr=v2519[1] }
        ?30     = { defs={} expr=v2520[1] }
        ?31     = { defs={} expr=v2521[1] }
        ip      = { defs={0x080483f4} expr=0x080483fa[32] }
    memory:
    init mem:
0x80483fa:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v2476[32] }
        cx      = { defs={} expr=v2477[32] }
        dx      = { defs={} expr=v2478[32] }
        bx      = { defs={} expr=v2479[32] }
        sp      = { defs={} expr=v2480[32] }
        bp      = { defs={} expr=v2481[32] }
        si      = { defs={0x080483f4} expr=v2482[32] }
        di      = { defs={0x080483fa} expr=v2483[32] }
        es      = { defs={} expr=v2484[16] }
        cs      = { defs={} expr=v2485[16] }
        ss      = { defs={} expr=v2486[16] }
        ds      = { defs={} expr=v2487[16] }
        fs      = { defs={} expr=v2488[16] }
        gs      = { defs={} expr=v2489[16] }
        cf      = { defs={} expr=v2490[1] }
        ?1      = { defs={} expr=v2491[1] }
        pf      = { defs={} expr=v2492[1] }
        ?3      = { defs={} expr=v2493[1] }
        af      = { defs={} expr=v2494[1] }
        ?5      = { defs={} expr=v2495[1] }
        zf      = { defs={} expr=v2496[1] }
        sf      = { defs={} expr=v2497[1] }
        tf      = { defs={} expr=v2498[1] }
        if      = { defs={} expr=v2499[1] }
        df      = { defs={} expr=v2500[1] }
        of      = { defs={} expr=v2501[1] }
        iopl0   = { defs={} expr=v2502[1] }
        iopl1   = { defs={} expr=v2503[1] }
        nt      = { defs={} expr=v2504[1] }
        ?15     = { defs={} expr=v2505[1] }
        rf      = { defs={} expr=v2506[1] }
        vm      = { defs={} expr=v2507[1] }
        ac      = { defs={} expr=v2508[1] }
        vif     = { defs={} expr=v2509[1] }
        vip     = { defs={} expr=v2510[1] }
        id      = { defs={} expr=v2511[1] }
        ?22     = { defs={} expr=v2512[1] }
        ?23     = { defs={} expr=v2513[1] }
        ?24     = { defs={} expr=v2514[1] }
        ?25     = { defs={} expr=v2515[1] }
        ?26     = { defs={} expr=v2516[1] }
        ?27     = { defs={} expr=v2517[1] }
        ?28     = { defs={} expr=v2518[1] }
        ?29     = { defs={} expr=v2519[1] }
        ?30     = { defs={} expr=v2520[1] }
        ?31     = { defs={} expr=v2521[1] }
        ip      = { defs={0x080483f4,0x080483fa} expr=0x08048400[32] }
    memory:
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048410:push   ebp
    registers:
        ax      = { defs={} expr=v2570[32] }
        cx      = { defs={} expr=v2571[32] }
        dx      = { defs={} expr=v2572[32] }
        bx      = { defs={} expr=v2573[32] }
        sp      = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
        bp      = { defs={} expr=v2575[32] }
        si      = { defs={} expr=v2576[32] }
        di      = { defs={} expr=v2577[32] }
        es      = { defs={} expr=v2578[16] }
        cs      = { defs={} expr=v2579[16] }
        ss      = { defs={} expr=v2580[16] }
        ds      = { defs={} expr=v2581[16] }
        fs      = { defs={} expr=v2582[16] }
        gs      = { defs={} expr=v2583[16] }
        cf      = { defs={} expr=v2584[1] }
        ?1      = { defs={} expr=v2585[1] }
        pf      = { defs={} expr=v2586[1] }
        ?3      = { defs={} expr=v2587[1] }
        af      = { defs={} expr=v2588[1] }
        ?5      = { defs={} expr=v2589[1] }
        zf      = { defs={} expr=v2590[1] }
        sf      = { defs={} expr=v2591[1] }
        tf      = { defs={} expr=v2592[1] }
        if      = { defs={} expr=v2593[1] }
        df      = { defs={} expr=v2594[1] }
        of      = { defs={} expr=v2595[1] }
        iopl0   = { defs={} expr=v2596[1] }
        iopl1   = { defs={} expr=v2597[1] }
        nt      = { defs={} expr=v2598[1] }
        ?15     = { defs={} expr=v2599[1] }
        rf      = { defs={} expr=v2600[1] }
        vm      = { defs={} expr=v2601[1] }
        ac      = { defs={} expr=v2602[1] }
        vif     = { defs={} expr=v2603[1] }
        vip     = { defs={} expr=v2604[1] }
        id      = { defs={} expr=v2605[1] }
        ?22     = { defs={} expr=v2606[1] }
        ?23     = { defs={} expr=v2607[1] }
        ?24     = { defs={} expr=v2608[1] }
        ?25     = { defs={} expr=v2609[1] }
        ?26     = { defs={} expr=v2610[1] }
        ?27     = { defs={} expr=v2611[1] }
        ?28     = { defs={} expr=v2612[1] }
        ?29     = { defs={} expr=v2613[1] }
        ?30     = { defs={} expr=v2614[1] }
        ?31     = { defs={} expr=v2615[1] }
        ip      = { defs={0x08048410} expr=0x08048411[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2575[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2575[32]) }
          flags = { }
    init mem:
0x8048411:mov    edx, 0x08048480<handler>
    registers:
        ax      = { defs={} expr=v2570[32] }
        cx      = { defs={} expr=v2571[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2573[32] }
        sp      = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
        bp      = { defs={} expr=v2575[32] }
        si      = { defs={} expr=v2576[32] }
        di      = { defs={} expr=v2577[32] }
        es      = { defs={} expr=v2578[16] }
        cs      = { defs={} expr=v2579[16] }
        ss      = { defs={} expr=v2580[16] }
        ds      = { defs={} expr=v2581[16] }
        fs      = { defs={} expr=v2582[16] }
        gs      = { defs={} expr=v2583[16] }
        cf      = { defs={} expr=v2584[1] }
        ?1      = { defs={} expr=v2585[1] }
        pf      = { defs={} expr=v2586[1] }
        ?3      = { defs={} expr=v2587[1] }
        af      = { defs={} expr=v2588[1] }
        ?5      = { defs={} expr=v2589[1] }
        zf      = { defs={} expr=v2590[1] }
        sf      = { defs={} expr=v2591[1] }
        tf      = { defs={} expr=v2592[1] }
        if      = { defs={} expr=v2593[1] }
        df      = { defs={} expr=v2594[1] }
        of      = { defs={} expr=v2595[1] }
        iopl0   = { defs={} expr=v2596[1] }
        iopl1   = { defs={} expr=v2597[1] }
        nt      = { defs={} expr=v2598[1] }
        ?15     = { defs={} expr=v2599[1] }
        rf      = { defs={} expr=v2600[1] }
        vm      = { defs={} expr=v2601[1] }
        ac      = { defs={} expr=v2602[1] }
        vif     = { defs={} expr=v2603[1] }
        vip     = { defs={} expr=v2604[1] }
        id      = { defs={} expr=v2605[1] }
        ?22     = { defs={} expr=v2606[1] }
        ?23     = { defs={} expr=v2607[1] }
        ?24     = { defs={} expr=v2608[1] }
        ?25     = { defs={} expr=v2609[1] }
        ?26     = { defs={} expr=v2610[1] }
        ?27     = { defs={} expr=v2611[1] }
        ?28     = { defs={} expr=v2612[1] }
        ?29     = { defs={} expr=v2613[1] }
        ?30     = { defs={} expr=v2614[1] }
        ?31     = { defs={} expr=v2615[1] }
        ip      = { defs={0x08048410,0x08048411} expr=0x08048416[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2575[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2575[32]) }
          flags = { }
    init mem:
0x8048416:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2570[32] }
        cx      = { defs={} expr=v2571[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2573[32] }
        sp      = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2574[32] -4[32]) }
        si      = { defs={} expr=v2576[32] }
        di      = { defs={} expr=v2577[32] }
        es      = { defs={} expr=v2578[16] }
        cs      = { defs={} expr=v2579[16] }
        ss      = { defs={} expr=v2580[16] }
        ds      = { defs={} expr=v2581[16] }
        fs      = { defs={} expr=v2582[16] }
        gs      = { defs={} expr=v2583[16] }
        cf      = { defs={} expr=v2584[1] }
        ?1      = { defs={} expr=v2585[1] }
        pf      = { defs={} expr=v2586[1] }
        ?3      = { defs={} expr=v2587[1] }
        af      = { defs={} expr=v2588[1] }
        ?5      = { defs={} expr=v2589[1] }
        zf      = { defs={} expr=v2590[1] }
        sf      = { defs={} expr=v2591[1] }
        tf      = { defs={} expr=v2592[1] }
        if      = { defs={} expr=v2593[1] }
        df      = { defs={} expr=v2594[1] }
        of      = { defs={} expr=v2595[1] }
        iopl0   = { defs={} expr=v2596[1] }
        iopl1   = { defs={} expr=v2597[1] }
        nt      = { defs={} expr=v2598[1] }
        ?15     = { defs={} expr=v2599[1] }
        rf      = { defs={} expr=v2600[1] }
        vm      = { defs={} expr=v2601[1] }
        ac      = { defs={} expr=v2602[1] }
        vif     = { defs={} expr=v2603[1] }
        vip     = { defs={} expr=v2604[1] }
        id      = { defs={} expr=v2605[1] }
        ?22     = { defs={} expr=v2606[1] }
        ?23     = { defs={} expr=v2607[1] }
        ?24     = { defs={} expr=v2608[1] }
        ?25     = { defs={} expr=v2609[1] }
        ?26     = { defs={} expr=v2610[1] }
        ?27     = { defs={} expr=v2611[1] }
        ?28     = { defs={} expr=v2612[1] }
        ?29     = { defs={} expr=v2613[1] }
        ?30     = { defs={} expr=v2614[1] }
        ?31     = { defs={} expr=v2615[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416} expr=0x08048418[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2575[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2575[32]) }
          flags = { }
    init mem:
0x8048418:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2570[32] }
        cx      = { defs={} expr=v2571[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2573[32] }
        sp      = { defs={0x08048410,0x08048418} expr=(add[32] (add[32] v2574[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2574[32] -4[32]) }
        si      = { defs={} expr=v2576[32] }
        di      = { defs={} expr=v2577[32] }
        es      = { defs={} expr=v2578[16] }
        cs      = { defs={} expr=v2579[16] }
        ss      = { defs={} expr=v2580[16] }
        ds      = { defs={} expr=v2581[16] }
        fs      = { defs={} expr=v2582[16] }
        gs      = { defs={} expr=v2583[16] }
        cf      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2574[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2574[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2585[1] }
        pf      = { defs={0x08048410,0x08048418} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2574[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2574[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2587[1] }
        af      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2574[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2574[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2589[1] }
        zf      = { defs={0x08048410,0x08048418} expr=(zerop[1] (add[32] (add[32] v2574[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048410,0x08048418} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2574[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2592[1] }
        if      = { defs={} expr=v2593[1] }
        df      = { defs={} expr=v2594[1] }
        of      = { defs={0x08048410,0x08048418} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2574[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2574[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2574[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2574[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2596[1] }
        iopl1   = { defs={} expr=v2597[1] }
        nt      = { defs={} expr=v2598[1] }
        ?15     = { defs={} expr=v2599[1] }
        rf      = { defs={} expr=v2600[1] }
        vm      = { defs={} expr=v2601[1] }
        ac      = { defs={} expr=v2602[1] }
        vif     = { defs={} expr=v2603[1] }
        vip     = { defs={} expr=v2604[1] }
        id      = { defs={} expr=v2605[1] }
        ?22     = { defs={} expr=v2606[1] }
        ?23     = { defs={} expr=v2607[1] }
        ?24     = { defs={} expr=v2608[1] }
        ?25     = { defs={} expr=v2609[1] }
        ?26     = { defs={} expr=v2610[1] }
        ?27     = { defs={} expr=v2611[1] }
        ?28     = { defs={} expr=v2612[1] }
        ?29     = { defs={} expr=v2613[1] }
        ?30     = { defs={} expr=v2614[1] }
        ?31     = { defs={} expr=v2615[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418} expr=0x0804841b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2575[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2575[32]) }
          flags = { }
    init mem:
0x804841b:and    esp, 0xf0<-0x10>
    registers:
        ax      = { defs={} expr=v2570[32] }
        cx      = { defs={} expr=v2571[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2573[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2574[32] -4[32]) }
        si      = { defs={} expr=v2576[32] }
        di      = { defs={} expr=v2577[32] }
        es      = { defs={} expr=v2578[16] }
        cs      = { defs={} expr=v2579[16] }
        ss      = { defs={} expr=v2580[16] }
        ds      = { defs={} expr=v2581[16] }
        fs      = { defs={} expr=v2582[16] }
        gs      = { defs={} expr=v2583[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v2585[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v2587[1] }
        af      = { defs={0x0804841b} expr=v2616[1] }
        ?5      = { defs={} expr=v2589[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v2592[1] }
        if      = { defs={} expr=v2593[1] }
        df      = { defs={} expr=v2594[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v2596[1] }
        iopl1   = { defs={} expr=v2597[1] }
        nt      = { defs={} expr=v2598[1] }
        ?15     = { defs={} expr=v2599[1] }
        rf      = { defs={} expr=v2600[1] }
        vm      = { defs={} expr=v2601[1] }
        ac      = { defs={} expr=v2602[1] }
        vif     = { defs={} expr=v2603[1] }
        vip     = { defs={} expr=v2604[1] }
        id      = { defs={} expr=v2605[1] }
        ?22     = { defs={} expr=v2606[1] }
        ?23     = { defs={} expr=v2607[1] }
        ?24     = { defs={} expr=v2608[1] }
        ?25     = { defs={} expr=v2609[1] }
        ?26     = { defs={} expr=v2610[1] }
        ?27     = { defs={} expr=v2611[1] }
        ?28     = { defs={} expr=v2612[1] }
        ?29     = { defs={} expr=v2613[1] }
        ?30     = { defs={} expr=v2614[1] }
        ?31     = { defs={} expr=v2615[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b} expr=0x0804841e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2575[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2575[32]) }
          flags = { }
    init mem:
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
    registers:
        ax      = { defs={} expr=v2570[32] }
        cx      = { defs={} expr=v2571[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2573[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2574[32] -4[32]) }
        si      = { defs={} expr=v2576[32] }
        di      = { defs={} expr=v2577[32] }
        es      = { defs={} expr=v2578[16] }
        cs      = { defs={} expr=v2579[16] }
        ss      = { defs={} expr=v2580[16] }
        ds      = { defs={} expr=v2581[16] }
        fs      = { defs={} expr=v2582[16] }
        gs      = { defs={} expr=v2583[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v2585[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v2587[1] }
        af      = { defs={0x0804841b} expr=v2616[1] }
        ?5      = { defs={} expr=v2589[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v2592[1] }
        if      = { defs={} expr=v2593[1] }
        df      = { defs={} expr=v2594[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v2596[1] }
        iopl1   = { defs={} expr=v2597[1] }
        nt      = { defs={} expr=v2598[1] }
        ?15     = { defs={} expr=v2599[1] }
        rf      = { defs={} expr=v2600[1] }
        vm      = { defs={} expr=v2601[1] }
        ac      = { defs={} expr=v2602[1] }
        vif     = { defs={} expr=v2603[1] }
        vip     = { defs={} expr=v2604[1] }
        id      = { defs={} expr=v2605[1] }
        ?22     = { defs={} expr=v2606[1] }
        ?23     = { defs={} expr=v2607[1] }
        ?24     = { defs={} expr=v2608[1] }
        ?25     = { defs={} expr=v2609[1] }
        ?26     = { defs={} expr=v2610[1] }
        ?27     = { defs={} expr=v2611[1] }
        ?28     = { defs={} expr=v2612[1] }
        ?29     = { defs={} expr=v2613[1] }
        ?30     = { defs={} expr=v2614[1] }
        ?31     = { defs={} expr=v2615[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e} expr=0x08048422[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2575[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2575[32]) }
          flags = { }
    init mem:
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
    registers:
        ax      = { defs={} expr=v2570[32] }
        cx      = { defs={} expr=v2571[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2573[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2574[32] -4[32]) }
        si      = { defs={} expr=v2576[32] }
        di      = { defs={} expr=v2577[32] }
        es      = { defs={} expr=v2578[16] }
        cs      = { defs={} expr=v2579[16] }
        ss      = { defs={} expr=v2580[16] }
        ds      = { defs={} expr=v2581[16] }
        fs      = { defs={} expr=v2582[16] }
        gs      = { defs={} expr=v2583[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v2585[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v2587[1] }
        af      = { defs={0x0804841b} expr=v2616[1] }
        ?5      = { defs={} expr=v2589[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v2592[1] }
        if      = { defs={} expr=v2593[1] }
        df      = { defs={} expr=v2594[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v2596[1] }
        iopl1   = { defs={} expr=v2597[1] }
        nt      = { defs={} expr=v2598[1] }
        ?15     = { defs={} expr=v2599[1] }
        rf      = { defs={} expr=v2600[1] }
        vm      = { defs={} expr=v2601[1] }
        ac      = { defs={} expr=v2602[1] }
        vif     = { defs={} expr=v2603[1] }
        vip     = { defs={} expr=v2604[1] }
        id      = { defs={} expr=v2605[1] }
        ?22     = { defs={} expr=v2606[1] }
        ?23     = { defs={} expr=v2607[1] }
        ?24     = { defs={} expr=v2608[1] }
        ?25     = { defs={} expr=v2609[1] }
        ?26     = { defs={} expr=v2610[1] }
        ?27     = { defs={} expr=v2611[1] }
        ?28     = { defs={} expr=v2612[1] }
        ?29     = { defs={} expr=v2613[1] }
        ?30     = { defs={} expr=v2614[1] }
        ?31     = { defs={} expr=v2615[1] }
        ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422} expr=0x08048429[32] }
    memory:
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2575[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2575[32]) }
          flags = { }
    init mem:
0x8048429:call   0x080482f0<signal@plt>
    registers:
        ax      = { defs={} expr=v2570[32] }
        cx      = { defs={} expr=v2571[32] }
        dx      = { defs={0x08048411} expr=0x08048480[32] }
        bx      = { defs={} expr=v2573[32] }
        sp      = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) -4[32]) }
        bp      = { defs={0x08048410,0x08048416} expr=(add[32] v2574[32] -4[32]) }
        si      = { defs={} expr=v2576[32] }
        di      = { defs={} expr=v2577[32] }
        es      = { defs={} expr=v2578[16] }
        cs      = { defs={} expr=v2579[16] }
        ss      = { defs={} expr=v2580[16] }
        ds      = { defs={} expr=v2581[16] }
        fs      = { defs={} expr=v2582[16] }
        gs      = { defs={} expr=v2583[16] }
        cf      = { defs={0x0804841b} expr=0[1] }
        ?1      = { defs={} expr=v2585[1] }
        pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] 0[1] (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]))))))) }
        ?3      = { defs={} expr=v2587[1] }
        af      = { defs={0x0804841b} expr=v2616[1] }
        ?5      = { defs={} expr=v2589[1] }
        zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])) }
        sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32])) }
        tf      = { defs={} expr=v2592[1] }
        if      = { defs={} expr=v2593[1] }
        df      = { defs={} expr=v2594[1] }
        of      = { defs={0x0804841b} expr=0[1] }
        iopl0   = { defs={} expr=v2596[1] }
        iopl1   = { defs={} expr=v2597[1] }
        nt      = { defs={} expr=v2598[1] }
        ?15     = { defs={} expr=v2599[1] }
        rf      = { defs={} expr=v2600[1] }
        vm      = { defs={} expr=v2601[1] }
        ac      = { defs={} expr=v2602[1] }
        vif     = { defs={} expr=v2603[1] }
        vip     = { defs={} expr=v2604[1] }
        id      = { defs={} expr=v2605[1] }
        ?22     = { defs={} expr=v2606[1] }
        ?23     = { defs={} expr=v2607[1] }
        ?24     = { defs={} expr=v2608[1] }
        ?25     = { defs={} expr=v2609[1] }
        ?26     = { defs={} expr=v2610[1] }
        ?27     = { defs={} expr=v2611[1] }
        ?28     = { defs={} expr=v2612[1] }
        ?29     = { defs={} expr=v2613[1] }
        ?30     = { defs={} expr=v2614[1] }
        ?31     = { defs={} expr=v2615[1] }
        ip      = { defs={0x08048429} expr=0x080482f0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) -4[32]) }
          value = { defs={} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) }
          value = { defs={} expr=10[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v2574[32] -4[32]) -8[32]) -16[32]) 4[32]) }
          value = { defs={} expr=-128[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2575[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2574[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2575[32]) }
          flags = { }
        address = { defs={0x08048410} expr=(add[32] v2574[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2575[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v2665[32] }
        cx      = { defs={} expr=v2666[32] }
        dx      = { defs={} expr=v2667[32] }
        bx      = { defs={} expr=v2668[32] }
        sp      = { defs={0x0804842e} expr=v2670[32] }
        bp      = { defs={} expr=v2670[32] }
        si      = { defs={} expr=v2671[32] }
        di      = { defs={} expr=v2672[32] }
        es      = { defs={} expr=v2673[16] }
        cs      = { defs={} expr=v2674[16] }
        ss      = { defs={} expr=v2675[16] }
        ds      = { defs={} expr=v2676[16] }
        fs      = { defs={} expr=v2677[16] }
        gs      = { defs={} expr=v2678[16] }
        cf      = { defs={} expr=v2679[1] }
        ?1      = { defs={} expr=v2680[1] }
        pf      = { defs={} expr=v2681[1] }
        ?3      = { defs={} expr=v2682[1] }
        af      = { defs={} expr=v2683[1] }
        ?5      = { defs={} expr=v2684[1] }
        zf      = { defs={} expr=v2685[1] }
        sf      = { defs={} expr=v2686[1] }
        tf      = { defs={} expr=v2687[1] }
        if      = { defs={} expr=v2688[1] }
        df      = { defs={} expr=v2689[1] }
        of      = { defs={} expr=v2690[1] }
        iopl0   = { defs={} expr=v2691[1] }
        iopl1   = { defs={} expr=v2692[1] }
        nt      = { defs={} expr=v2693[1] }
        ?15     = { defs={} expr=v2694[1] }
        rf      = { defs={} expr=v2695[1] }
        vm      = { defs={} expr=v2696[1] }
        ac      = { defs={} expr=v2697[1] }
        vif     = { defs={} expr=v2698[1] }
        vip     = { defs={} expr=v2699[1] }
        id      = { defs={} expr=v2700[1] }
        ?22     = { defs={} expr=v2701[1] }
        ?23     = { defs={} expr=v2702[1] }
        ?24     = { defs={} expr=v2703[1] }
        ?25     = { defs={} expr=v2704[1] }
        ?26     = { defs={} expr=v2705[1] }
        ?27     = { defs={} expr=v2706[1] }
        ?28     = { defs={} expr=v2707[1] }
        ?29     = { defs={} expr=v2708[1] }
        ?30     = { defs={} expr=v2709[1] }
        ?31     = { defs={} expr=v2710[1] }
        ip      = { defs={0x0804842e} expr=0x08048430[32] }
    memory:
    init mem:
0x8048430:xor    eax, eax
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v2666[32] }
        dx      = { defs={} expr=v2667[32] }
        bx      = { defs={} expr=v2668[32] }
        sp      = { defs={0x0804842e} expr=v2670[32] }
        bp      = { defs={} expr=v2670[32] }
        si      = { defs={} expr=v2671[32] }
        di      = { defs={} expr=v2672[32] }
        es      = { defs={} expr=v2673[16] }
        cs      = { defs={} expr=v2674[16] }
        ss      = { defs={} expr=v2675[16] }
        ds      = { defs={} expr=v2676[16] }
        fs      = { defs={} expr=v2677[16] }
        gs      = { defs={} expr=v2678[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v2680[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v2682[1] }
        af      = { defs={0x08048430} expr=v2711[1] }
        ?5      = { defs={} expr=v2684[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v2687[1] }
        if      = { defs={} expr=v2688[1] }
        df      = { defs={} expr=v2689[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v2691[1] }
        iopl1   = { defs={} expr=v2692[1] }
        nt      = { defs={} expr=v2693[1] }
        ?15     = { defs={} expr=v2694[1] }
        rf      = { defs={} expr=v2695[1] }
        vm      = { defs={} expr=v2696[1] }
        ac      = { defs={} expr=v2697[1] }
        vif     = { defs={} expr=v2698[1] }
        vip     = { defs={} expr=v2699[1] }
        id      = { defs={} expr=v2700[1] }
        ?22     = { defs={} expr=v2701[1] }
        ?23     = { defs={} expr=v2702[1] }
        ?24     = { defs={} expr=v2703[1] }
        ?25     = { defs={} expr=v2704[1] }
        ?26     = { defs={} expr=v2705[1] }
        ?27     = { defs={} expr=v2706[1] }
        ?28     = { defs={} expr=v2707[1] }
        ?29     = { defs={} expr=v2708[1] }
        ?30     = { defs={} expr=v2709[1] }
        ?31     = { defs={} expr=v2710[1] }
        ip      = { defs={0x0804842e,0x08048430} expr=0x08048432[32] }
    memory:
    init mem:
0x8048432:pop    ebp
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v2666[32] }
        dx      = { defs={} expr=v2667[32] }
        bx      = { defs={} expr=v2668[32] }
        sp      = { defs={0x0804842e,0x08048432} expr=(add[32] v2670[32] 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2717[8]))) }
        si      = { defs={} expr=v2671[32] }
        di      = { defs={} expr=v2672[32] }
        es      = { defs={} expr=v2673[16] }
        cs      = { defs={} expr=v2674[16] }
        ss      = { defs={} expr=v2675[16] }
        ds      = { defs={} expr=v2676[16] }
        fs      = { defs={} expr=v2677[16] }
        gs      = { defs={} expr=v2678[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v2680[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v2682[1] }
        af      = { defs={0x08048430} expr=v2711[1] }
        ?5      = { defs={} expr=v2684[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v2687[1] }
        if      = { defs={} expr=v2688[1] }
        df      = { defs={} expr=v2689[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v2691[1] }
        iopl1   = { defs={} expr=v2692[1] }
        nt      = { defs={} expr=v2693[1] }
        ?15     = { defs={} expr=v2694[1] }
        rf      = { defs={} expr=v2695[1] }
        vm      = { defs={} expr=v2696[1] }
        ac      = { defs={} expr=v2697[1] }
        vif     = { defs={} expr=v2698[1] }
        vip     = { defs={} expr=v2699[1] }
        id      = { defs={} expr=v2700[1] }
        ?22     = { defs={} expr=v2701[1] }
        ?23     = { defs={} expr=v2702[1] }
        ?24     = { defs={} expr=v2703[1] }
        ?25     = { defs={} expr=v2704[1] }
        ?26     = { defs={} expr=v2705[1] }
        ?27     = { defs={} expr=v2706[1] }
        ?28     = { defs={} expr=v2707[1] }
        ?29     = { defs={} expr=v2708[1] }
        ?30     = { defs={} expr=v2709[1] }
        ?31     = { defs={} expr=v2710[1] }
        ip      = { defs={0x0804842e,0x08048430,0x08048432} expr=0x08048433[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v2670[32] 3[32]) }
          value = { defs={} expr=v2717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2670[32] 2[32]) }
          value = { defs={} expr=v2716[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2670[32] 1[32]) }
          value = { defs={} expr=v2715[8] }
          flags = { rdonly }
        address = { defs={0x0804842e} expr=v2670[32] }
          value = { defs={} expr=v2714[8] }
          flags = { rdonly }
0x8048433:ret    
    registers:
        ax      = { defs={0x08048430} expr=0[32] }
        cx      = { defs={} expr=v2666[32] }
        dx      = { defs={} expr=v2667[32] }
        bx      = { defs={} expr=v2668[32] }
        sp      = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] (add[32] v2670[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2714[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2715[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2716[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2717[8]))) }
        si      = { defs={} expr=v2671[32] }
        di      = { defs={} expr=v2672[32] }
        es      = { defs={} expr=v2673[16] }
        cs      = { defs={} expr=v2674[16] }
        ss      = { defs={} expr=v2675[16] }
        ds      = { defs={} expr=v2676[16] }
        fs      = { defs={} expr=v2677[16] }
        gs      = { defs={} expr=v2678[16] }
        cf      = { defs={0x08048430} expr=0[1] }
        ?1      = { defs={} expr=v2680[1] }
        pf      = { defs={0x08048430} expr=1[1] }
        ?3      = { defs={} expr=v2682[1] }
        af      = { defs={0x08048430} expr=v2711[1] }
        ?5      = { defs={} expr=v2684[1] }
        zf      = { defs={0x08048430} expr=1[1] }
        sf      = { defs={0x08048430} expr=0[1] }
        tf      = { defs={} expr=v2687[1] }
        if      = { defs={} expr=v2688[1] }
        df      = { defs={} expr=v2689[1] }
        of      = { defs={0x08048430} expr=0[1] }
        iopl0   = { defs={} expr=v2691[1] }
        iopl1   = { defs={} expr=v2692[1] }
        nt      = { defs={} expr=v2693[1] }
        ?15     = { defs={} expr=v2694[1] }
        rf      = { defs={} expr=v2695[1] }
        vm      = { defs={} expr=v2696[1] }
        ac      = { defs={} expr=v2697[1] }
        vif     = { defs={} expr=v2698[1] }
        vip     = { defs={} expr=v2699[1] }
        id      = { defs={} expr=v2700[1] }
        ?22     = { defs={} expr=v2701[1] }
        ?23     = { defs={} expr=v2702[1] }
        ?24     = { defs={} expr=v2703[1] }
        ?25     = { defs={} expr=v2704[1] }
        ?26     = { defs={} expr=v2705[1] }
        ?27     = { defs={} expr=v2706[1] }
        ?28     = { defs={} expr=v2707[1] }
        ?29     = { defs={} expr=v2708[1] }
        ?30     = { defs={} expr=v2709[1] }
        ?31     = { defs={} expr=v2710[1] }
        ip      = { defs={0x08048433} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2724[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2725[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2726[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2727[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2670[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2727[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2670[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2726[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2670[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2725[8] }
          flags = { rdonly }
        address = { defs={0x0804842e,0x08048432} expr=(add[32] v2670[32] 4[32]) }
          value = { defs={} expr=v2724[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2670[32] 3[32]) }
          value = { defs={} expr=v2717[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2670[32] 2[32]) }
          value = { defs={} expr=v2716[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2670[32] 1[32]) }
          value = { defs={} expr=v2715[8] }
          flags = { rdonly }
        address = { defs={0x0804842e} expr=v2670[32] }
          value = { defs={} expr=v2714[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048440:push   ebp
    registers:
        ax      = { defs={} expr=v2780[32] }
        cx      = { defs={} expr=v2781[32] }
        dx      = { defs={} expr=v2782[32] }
        bx      = { defs={} expr=v2783[32] }
        sp      = { defs={0x08048440} expr=(add[32] v2784[32] -4[32]) }
        bp      = { defs={} expr=v2785[32] }
        si      = { defs={} expr=v2786[32] }
        di      = { defs={} expr=v2787[32] }
        es      = { defs={} expr=v2788[16] }
        cs      = { defs={} expr=v2789[16] }
        ss      = { defs={} expr=v2790[16] }
        ds      = { defs={} expr=v2791[16] }
        fs      = { defs={} expr=v2792[16] }
        gs      = { defs={} expr=v2793[16] }
        cf      = { defs={} expr=v2794[1] }
        ?1      = { defs={} expr=v2795[1] }
        pf      = { defs={} expr=v2796[1] }
        ?3      = { defs={} expr=v2797[1] }
        af      = { defs={} expr=v2798[1] }
        ?5      = { defs={} expr=v2799[1] }
        zf      = { defs={} expr=v2800[1] }
        sf      = { defs={} expr=v2801[1] }
        tf      = { defs={} expr=v2802[1] }
        if      = { defs={} expr=v2803[1] }
        df      = { defs={} expr=v2804[1] }
        of      = { defs={} expr=v2805[1] }
        iopl0   = { defs={} expr=v2806[1] }
        iopl1   = { defs={} expr=v2807[1] }
        nt      = { defs={} expr=v2808[1] }
        ?15     = { defs={} expr=v2809[1] }
        rf      = { defs={} expr=v2810[1] }
        vm      = { defs={} expr=v2811[1] }
        ac      = { defs={} expr=v2812[1] }
        vif     = { defs={} expr=v2813[1] }
        vip     = { defs={} expr=v2814[1] }
        id      = { defs={} expr=v2815[1] }
        ?22     = { defs={} expr=v2816[1] }
        ?23     = { defs={} expr=v2817[1] }
        ?24     = { defs={} expr=v2818[1] }
        ?25     = { defs={} expr=v2819[1] }
        ?26     = { defs={} expr=v2820[1] }
        ?27     = { defs={} expr=v2821[1] }
        ?28     = { defs={} expr=v2822[1] }
        ?29     = { defs={} expr=v2823[1] }
        ?30     = { defs={} expr=v2824[1] }
        ?31     = { defs={} expr=v2825[1] }
        ip      = { defs={0x08048440} expr=0x08048441[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2785[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2785[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2785[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v2784[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2785[32]) }
          flags = { }
    init mem:
0x8048441:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2780[32] }
        cx      = { defs={} expr=v2781[32] }
        dx      = { defs={} expr=v2782[32] }
        bx      = { defs={} expr=v2783[32] }
        sp      = { defs={0x08048440} expr=(add[32] v2784[32] -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v2784[32] -4[32]) }
        si      = { defs={} expr=v2786[32] }
        di      = { defs={} expr=v2787[32] }
        es      = { defs={} expr=v2788[16] }
        cs      = { defs={} expr=v2789[16] }
        ss      = { defs={} expr=v2790[16] }
        ds      = { defs={} expr=v2791[16] }
        fs      = { defs={} expr=v2792[16] }
        gs      = { defs={} expr=v2793[16] }
        cf      = { defs={} expr=v2794[1] }
        ?1      = { defs={} expr=v2795[1] }
        pf      = { defs={} expr=v2796[1] }
        ?3      = { defs={} expr=v2797[1] }
        af      = { defs={} expr=v2798[1] }
        ?5      = { defs={} expr=v2799[1] }
        zf      = { defs={} expr=v2800[1] }
        sf      = { defs={} expr=v2801[1] }
        tf      = { defs={} expr=v2802[1] }
        if      = { defs={} expr=v2803[1] }
        df      = { defs={} expr=v2804[1] }
        of      = { defs={} expr=v2805[1] }
        iopl0   = { defs={} expr=v2806[1] }
        iopl1   = { defs={} expr=v2807[1] }
        nt      = { defs={} expr=v2808[1] }
        ?15     = { defs={} expr=v2809[1] }
        rf      = { defs={} expr=v2810[1] }
        vm      = { defs={} expr=v2811[1] }
        ac      = { defs={} expr=v2812[1] }
        vif     = { defs={} expr=v2813[1] }
        vip     = { defs={} expr=v2814[1] }
        id      = { defs={} expr=v2815[1] }
        ?22     = { defs={} expr=v2816[1] }
        ?23     = { defs={} expr=v2817[1] }
        ?24     = { defs={} expr=v2818[1] }
        ?25     = { defs={} expr=v2819[1] }
        ?26     = { defs={} expr=v2820[1] }
        ?27     = { defs={} expr=v2821[1] }
        ?28     = { defs={} expr=v2822[1] }
        ?29     = { defs={} expr=v2823[1] }
        ?30     = { defs={} expr=v2824[1] }
        ?31     = { defs={} expr=v2825[1] }
        ip      = { defs={0x08048440,0x08048441} expr=0x08048443[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2785[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2785[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2785[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v2784[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2785[32]) }
          flags = { }
    init mem:
0x8048443:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2780[32] }
        cx      = { defs={} expr=v2781[32] }
        dx      = { defs={} expr=v2782[32] }
        bx      = { defs={} expr=v2783[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v2784[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v2784[32] -4[32]) }
        si      = { defs={} expr=v2786[32] }
        di      = { defs={} expr=v2787[32] }
        es      = { defs={} expr=v2788[16] }
        cs      = { defs={} expr=v2789[16] }
        ss      = { defs={} expr=v2790[16] }
        ds      = { defs={} expr=v2791[16] }
        fs      = { defs={} expr=v2792[16] }
        gs      = { defs={} expr=v2793[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2795[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2797[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2799[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v2784[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2784[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2802[1] }
        if      = { defs={} expr=v2803[1] }
        df      = { defs={} expr=v2804[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2806[1] }
        iopl1   = { defs={} expr=v2807[1] }
        nt      = { defs={} expr=v2808[1] }
        ?15     = { defs={} expr=v2809[1] }
        rf      = { defs={} expr=v2810[1] }
        vm      = { defs={} expr=v2811[1] }
        ac      = { defs={} expr=v2812[1] }
        vif     = { defs={} expr=v2813[1] }
        vip     = { defs={} expr=v2814[1] }
        id      = { defs={} expr=v2815[1] }
        ?22     = { defs={} expr=v2816[1] }
        ?23     = { defs={} expr=v2817[1] }
        ?24     = { defs={} expr=v2818[1] }
        ?25     = { defs={} expr=v2819[1] }
        ?26     = { defs={} expr=v2820[1] }
        ?27     = { defs={} expr=v2821[1] }
        ?28     = { defs={} expr=v2822[1] }
        ?29     = { defs={} expr=v2823[1] }
        ?30     = { defs={} expr=v2824[1] }
        ?31     = { defs={} expr=v2825[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443} expr=0x08048446[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2785[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2785[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2785[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v2784[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2785[32]) }
          flags = { }
    init mem:
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v2780[32] }
        cx      = { defs={} expr=v2781[32] }
        dx      = { defs={} expr=v2782[32] }
        bx      = { defs={} expr=v2783[32] }
        sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v2784[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v2784[32] -4[32]) }
        si      = { defs={} expr=v2786[32] }
        di      = { defs={} expr=v2787[32] }
        es      = { defs={} expr=v2788[16] }
        cs      = { defs={} expr=v2789[16] }
        ss      = { defs={} expr=v2790[16] }
        ds      = { defs={} expr=v2791[16] }
        fs      = { defs={} expr=v2792[16] }
        gs      = { defs={} expr=v2793[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2795[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2797[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2799[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v2784[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2784[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2802[1] }
        if      = { defs={} expr=v2803[1] }
        df      = { defs={} expr=v2804[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2806[1] }
        iopl1   = { defs={} expr=v2807[1] }
        nt      = { defs={} expr=v2808[1] }
        ?15     = { defs={} expr=v2809[1] }
        rf      = { defs={} expr=v2810[1] }
        vm      = { defs={} expr=v2811[1] }
        ac      = { defs={} expr=v2812[1] }
        vif     = { defs={} expr=v2813[1] }
        vip     = { defs={} expr=v2814[1] }
        id      = { defs={} expr=v2815[1] }
        ?22     = { defs={} expr=v2816[1] }
        ?23     = { defs={} expr=v2817[1] }
        ?24     = { defs={} expr=v2818[1] }
        ?25     = { defs={} expr=v2819[1] }
        ?26     = { defs={} expr=v2820[1] }
        ?27     = { defs={} expr=v2821[1] }
        ?28     = { defs={} expr=v2822[1] }
        ?29     = { defs={} expr=v2823[1] }
        ?30     = { defs={} expr=v2824[1] }
        ?31     = { defs={} expr=v2825[1] }
        ip      = { defs={0x08048440,0x08048441,0x08048443,0x08048446} expr=0x0804844d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v2784[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2785[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2785[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2785[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v2784[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2785[32]) }
          flags = { }
    init mem:
0x804844d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v2780[32] }
        cx      = { defs={} expr=v2781[32] }
        dx      = { defs={} expr=v2782[32] }
        bx      = { defs={} expr=v2783[32] }
        sp      = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048440,0x08048441} expr=(add[32] v2784[32] -4[32]) }
        si      = { defs={} expr=v2786[32] }
        di      = { defs={} expr=v2787[32] }
        es      = { defs={} expr=v2788[16] }
        cs      = { defs={} expr=v2789[16] }
        ss      = { defs={} expr=v2790[16] }
        ds      = { defs={} expr=v2791[16] }
        fs      = { defs={} expr=v2792[16] }
        gs      = { defs={} expr=v2793[16] }
        cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v2795[1] }
        pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v2797[1] }
        af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v2799[1] }
        zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v2784[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2784[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v2802[1] }
        if      = { defs={} expr=v2803[1] }
        df      = { defs={} expr=v2804[1] }
        of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2784[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v2806[1] }
        iopl1   = { defs={} expr=v2807[1] }
        nt      = { defs={} expr=v2808[1] }
        ?15     = { defs={} expr=v2809[1] }
        rf      = { defs={} expr=v2810[1] }
        vm      = { defs={} expr=v2811[1] }
        ac      = { defs={} expr=v2812[1] }
        vif     = { defs={} expr=v2813[1] }
        vip     = { defs={} expr=v2814[1] }
        id      = { defs={} expr=v2815[1] }
        ?22     = { defs={} expr=v2816[1] }
        ?23     = { defs={} expr=v2817[1] }
        ?24     = { defs={} expr=v2818[1] }
        ?25     = { defs={} expr=v2819[1] }
        ?26     = { defs={} expr=v2820[1] }
        ?27     = { defs={} expr=v2821[1] }
        ?28     = { defs={} expr=v2822[1] }
        ?29     = { defs={} expr=v2823[1] }
        ?30     = { defs={} expr=v2824[1] }
        ?31     = { defs={} expr=v2825[1] }
        ip      = { defs={0x0804844d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=82[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2784[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v2784[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2785[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2785[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2784[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2785[32]) }
          flags = { }
        address = { defs={0x08048440} expr=(add[32] v2784[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2785[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
    registers:
        ax      = { defs={} expr=v2874[32] }
        cx      = { defs={} expr=v2875[32] }
        dx      = { defs={} expr=v2876[32] }
        bx      = { defs={} expr=v2877[32] }
        sp      = { defs={0x08048452} expr=v2879[32] }
        bp      = { defs={} expr=v2879[32] }
        si      = { defs={} expr=v2880[32] }
        di      = { defs={} expr=v2881[32] }
        es      = { defs={} expr=v2882[16] }
        cs      = { defs={} expr=v2883[16] }
        ss      = { defs={} expr=v2884[16] }
        ds      = { defs={} expr=v2885[16] }
        fs      = { defs={} expr=v2886[16] }
        gs      = { defs={} expr=v2887[16] }
        cf      = { defs={} expr=v2888[1] }
        ?1      = { defs={} expr=v2889[1] }
        pf      = { defs={} expr=v2890[1] }
        ?3      = { defs={} expr=v2891[1] }
        af      = { defs={} expr=v2892[1] }
        ?5      = { defs={} expr=v2893[1] }
        zf      = { defs={} expr=v2894[1] }
        sf      = { defs={} expr=v2895[1] }
        tf      = { defs={} expr=v2896[1] }
        if      = { defs={} expr=v2897[1] }
        df      = { defs={} expr=v2898[1] }
        of      = { defs={} expr=v2899[1] }
        iopl0   = { defs={} expr=v2900[1] }
        iopl1   = { defs={} expr=v2901[1] }
        nt      = { defs={} expr=v2902[1] }
        ?15     = { defs={} expr=v2903[1] }
        rf      = { defs={} expr=v2904[1] }
        vm      = { defs={} expr=v2905[1] }
        ac      = { defs={} expr=v2906[1] }
        vif     = { defs={} expr=v2907[1] }
        vip     = { defs={} expr=v2908[1] }
        id      = { defs={} expr=v2909[1] }
        ?22     = { defs={} expr=v2910[1] }
        ?23     = { defs={} expr=v2911[1] }
        ?24     = { defs={} expr=v2912[1] }
        ?25     = { defs={} expr=v2913[1] }
        ?26     = { defs={} expr=v2914[1] }
        ?27     = { defs={} expr=v2915[1] }
        ?28     = { defs={} expr=v2916[1] }
        ?29     = { defs={} expr=v2917[1] }
        ?30     = { defs={} expr=v2918[1] }
        ?31     = { defs={} expr=v2919[1] }
        ip      = { defs={0x08048452} expr=0x08048454[32] }
    memory:
    init mem:
0x8048454:pop    ebp
    registers:
        ax      = { defs={} expr=v2874[32] }
        cx      = { defs={} expr=v2875[32] }
        dx      = { defs={} expr=v2876[32] }
        bx      = { defs={} expr=v2877[32] }
        sp      = { defs={0x08048452,0x08048454} expr=(add[32] v2879[32] 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2922[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2923[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2924[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2925[8]))) }
        si      = { defs={} expr=v2880[32] }
        di      = { defs={} expr=v2881[32] }
        es      = { defs={} expr=v2882[16] }
        cs      = { defs={} expr=v2883[16] }
        ss      = { defs={} expr=v2884[16] }
        ds      = { defs={} expr=v2885[16] }
        fs      = { defs={} expr=v2886[16] }
        gs      = { defs={} expr=v2887[16] }
        cf      = { defs={} expr=v2888[1] }
        ?1      = { defs={} expr=v2889[1] }
        pf      = { defs={} expr=v2890[1] }
        ?3      = { defs={} expr=v2891[1] }
        af      = { defs={} expr=v2892[1] }
        ?5      = { defs={} expr=v2893[1] }
        zf      = { defs={} expr=v2894[1] }
        sf      = { defs={} expr=v2895[1] }
        tf      = { defs={} expr=v2896[1] }
        if      = { defs={} expr=v2897[1] }
        df      = { defs={} expr=v2898[1] }
        of      = { defs={} expr=v2899[1] }
        iopl0   = { defs={} expr=v2900[1] }
        iopl1   = { defs={} expr=v2901[1] }
        nt      = { defs={} expr=v2902[1] }
        ?15     = { defs={} expr=v2903[1] }
        rf      = { defs={} expr=v2904[1] }
        vm      = { defs={} expr=v2905[1] }
        ac      = { defs={} expr=v2906[1] }
        vif     = { defs={} expr=v2907[1] }
        vip     = { defs={} expr=v2908[1] }
        id      = { defs={} expr=v2909[1] }
        ?22     = { defs={} expr=v2910[1] }
        ?23     = { defs={} expr=v2911[1] }
        ?24     = { defs={} expr=v2912[1] }
        ?25     = { defs={} expr=v2913[1] }
        ?26     = { defs={} expr=v2914[1] }
        ?27     = { defs={} expr=v2915[1] }
        ?28     = { defs={} expr=v2916[1] }
        ?29     = { defs={} expr=v2917[1] }
        ?30     = { defs={} expr=v2918[1] }
        ?31     = { defs={} expr=v2919[1] }
        ip      = { defs={0x08048452,0x08048454} expr=0x08048455[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v2879[32] 3[32]) }
          value = { defs={} expr=v2925[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2879[32] 2[32]) }
          value = { defs={} expr=v2924[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2879[32] 1[32]) }
          value = { defs={} expr=v2923[8] }
          flags = { rdonly }
        address = { defs={0x08048452} expr=v2879[32] }
          value = { defs={} expr=v2922[8] }
          flags = { rdonly }
0x8048455:ret    
    registers:
        ax      = { defs={} expr=v2874[32] }
        cx      = { defs={} expr=v2875[32] }
        dx      = { defs={} expr=v2876[32] }
        bx      = { defs={} expr=v2877[32] }
        sp      = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] (add[32] v2879[32] 4[32]) 4[32]) }
        bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2922[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2923[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2924[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2925[8]))) }
        si      = { defs={} expr=v2880[32] }
        di      = { defs={} expr=v2881[32] }
        es      = { defs={} expr=v2882[16] }
        cs      = { defs={} expr=v2883[16] }
        ss      = { defs={} expr=v2884[16] }
        ds      = { defs={} expr=v2885[16] }
        fs      = { defs={} expr=v2886[16] }
        gs      = { defs={} expr=v2887[16] }
        cf      = { defs={} expr=v2888[1] }
        ?1      = { defs={} expr=v2889[1] }
        pf      = { defs={} expr=v2890[1] }
        ?3      = { defs={} expr=v2891[1] }
        af      = { defs={} expr=v2892[1] }
        ?5      = { defs={} expr=v2893[1] }
        zf      = { defs={} expr=v2894[1] }
        sf      = { defs={} expr=v2895[1] }
        tf      = { defs={} expr=v2896[1] }
        if      = { defs={} expr=v2897[1] }
        df      = { defs={} expr=v2898[1] }
        of      = { defs={} expr=v2899[1] }
        iopl0   = { defs={} expr=v2900[1] }
        iopl1   = { defs={} expr=v2901[1] }
        nt      = { defs={} expr=v2902[1] }
        ?15     = { defs={} expr=v2903[1] }
        rf      = { defs={} expr=v2904[1] }
        vm      = { defs={} expr=v2905[1] }
        ac      = { defs={} expr=v2906[1] }
        vif     = { defs={} expr=v2907[1] }
        vip     = { defs={} expr=v2908[1] }
        id      = { defs={} expr=v2909[1] }
        ?22     = { defs={} expr=v2910[1] }
        ?23     = { defs={} expr=v2911[1] }
        ?24     = { defs={} expr=v2912[1] }
        ?25     = { defs={} expr=v2913[1] }
        ?26     = { defs={} expr=v2914[1] }
        ?27     = { defs={} expr=v2915[1] }
        ?28     = { defs={} expr=v2916[1] }
        ?29     = { defs={} expr=v2917[1] }
        ?30     = { defs={} expr=v2918[1] }
        ?31     = { defs={} expr=v2919[1] }
        ip      = { defs={0x08048455} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2932[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2933[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2934[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2935[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v2879[32] 4[32]) 3[32]) }
          value = { defs={} expr=v2935[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2879[32] 4[32]) 2[32]) }
          value = { defs={} expr=v2934[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v2879[32] 4[32]) 1[32]) }
          value = { defs={} expr=v2933[8] }
          flags = { rdonly }
        address = { defs={0x08048452,0x08048454} expr=(add[32] v2879[32] 4[32]) }
          value = { defs={} expr=v2932[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2879[32] 3[32]) }
          value = { defs={} expr=v2925[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2879[32] 2[32]) }
          value = { defs={} expr=v2924[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v2879[32] 1[32]) }
          value = { defs={} expr=v2923[8] }
          flags = { rdonly }
        address = { defs={0x08048452} expr=v2879[32] }
          value = { defs={} expr=v2922[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048460:push   ebp
    registers:
        ax      = { defs={} expr=v2988[32] }
        cx      = { defs={} expr=v2989[32] }
        dx      = { defs={} expr=v2990[32] }
        bx      = { defs={} expr=v2991[32] }
        sp      = { defs={0x08048460} expr=(add[32] v2992[32] -4[32]) }
        bp      = { defs={} expr=v2993[32] }
        si      = { defs={} expr=v2994[32] }
        di      = { defs={} expr=v2995[32] }
        es      = { defs={} expr=v2996[16] }
        cs      = { defs={} expr=v2997[16] }
        ss      = { defs={} expr=v2998[16] }
        ds      = { defs={} expr=v2999[16] }
        fs      = { defs={} expr=v3000[16] }
        gs      = { defs={} expr=v3001[16] }
        cf      = { defs={} expr=v3002[1] }
        ?1      = { defs={} expr=v3003[1] }
        pf      = { defs={} expr=v3004[1] }
        ?3      = { defs={} expr=v3005[1] }
        af      = { defs={} expr=v3006[1] }
        ?5      = { defs={} expr=v3007[1] }
        zf      = { defs={} expr=v3008[1] }
        sf      = { defs={} expr=v3009[1] }
        tf      = { defs={} expr=v3010[1] }
        if      = { defs={} expr=v3011[1] }
        df      = { defs={} expr=v3012[1] }
        of      = { defs={} expr=v3013[1] }
        iopl0   = { defs={} expr=v3014[1] }
        iopl1   = { defs={} expr=v3015[1] }
        nt      = { defs={} expr=v3016[1] }
        ?15     = { defs={} expr=v3017[1] }
        rf      = { defs={} expr=v3018[1] }
        vm      = { defs={} expr=v3019[1] }
        ac      = { defs={} expr=v3020[1] }
        vif     = { defs={} expr=v3021[1] }
        vip     = { defs={} expr=v3022[1] }
        id      = { defs={} expr=v3023[1] }
        ?22     = { defs={} expr=v3024[1] }
        ?23     = { defs={} expr=v3025[1] }
        ?24     = { defs={} expr=v3026[1] }
        ?25     = { defs={} expr=v3027[1] }
        ?26     = { defs={} expr=v3028[1] }
        ?27     = { defs={} expr=v3029[1] }
        ?28     = { defs={} expr=v3030[1] }
        ?29     = { defs={} expr=v3031[1] }
        ?30     = { defs={} expr=v3032[1] }
        ?31     = { defs={} expr=v3033[1] }
        ip      = { defs={0x08048460} expr=0x08048461[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2993[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v2992[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2993[32]) }
          flags = { }
    init mem:
0x8048461:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v2988[32] }
        cx      = { defs={} expr=v2989[32] }
        dx      = { defs={} expr=v2990[32] }
        bx      = { defs={} expr=v2991[32] }
        sp      = { defs={0x08048460} expr=(add[32] v2992[32] -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v2992[32] -4[32]) }
        si      = { defs={} expr=v2994[32] }
        di      = { defs={} expr=v2995[32] }
        es      = { defs={} expr=v2996[16] }
        cs      = { defs={} expr=v2997[16] }
        ss      = { defs={} expr=v2998[16] }
        ds      = { defs={} expr=v2999[16] }
        fs      = { defs={} expr=v3000[16] }
        gs      = { defs={} expr=v3001[16] }
        cf      = { defs={} expr=v3002[1] }
        ?1      = { defs={} expr=v3003[1] }
        pf      = { defs={} expr=v3004[1] }
        ?3      = { defs={} expr=v3005[1] }
        af      = { defs={} expr=v3006[1] }
        ?5      = { defs={} expr=v3007[1] }
        zf      = { defs={} expr=v3008[1] }
        sf      = { defs={} expr=v3009[1] }
        tf      = { defs={} expr=v3010[1] }
        if      = { defs={} expr=v3011[1] }
        df      = { defs={} expr=v3012[1] }
        of      = { defs={} expr=v3013[1] }
        iopl0   = { defs={} expr=v3014[1] }
        iopl1   = { defs={} expr=v3015[1] }
        nt      = { defs={} expr=v3016[1] }
        ?15     = { defs={} expr=v3017[1] }
        rf      = { defs={} expr=v3018[1] }
        vm      = { defs={} expr=v3019[1] }
        ac      = { defs={} expr=v3020[1] }
        vif     = { defs={} expr=v3021[1] }
        vip     = { defs={} expr=v3022[1] }
        id      = { defs={} expr=v3023[1] }
        ?22     = { defs={} expr=v3024[1] }
        ?23     = { defs={} expr=v3025[1] }
        ?24     = { defs={} expr=v3026[1] }
        ?25     = { defs={} expr=v3027[1] }
        ?26     = { defs={} expr=v3028[1] }
        ?27     = { defs={} expr=v3029[1] }
        ?28     = { defs={} expr=v3030[1] }
        ?29     = { defs={} expr=v3031[1] }
        ?30     = { defs={} expr=v3032[1] }
        ?31     = { defs={} expr=v3033[1] }
        ip      = { defs={0x08048460,0x08048461} expr=0x08048463[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2993[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v2992[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2993[32]) }
          flags = { }
    init mem:
0x8048463:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v2988[32] }
        cx      = { defs={} expr=v2989[32] }
        dx      = { defs={} expr=v2990[32] }
        bx      = { defs={} expr=v2991[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v2992[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v2992[32] -4[32]) }
        si      = { defs={} expr=v2994[32] }
        di      = { defs={} expr=v2995[32] }
        es      = { defs={} expr=v2996[16] }
        cs      = { defs={} expr=v2997[16] }
        ss      = { defs={} expr=v2998[16] }
        ds      = { defs={} expr=v2999[16] }
        fs      = { defs={} expr=v3000[16] }
        gs      = { defs={} expr=v3001[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3003[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3005[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3007[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v2992[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2992[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3010[1] }
        if      = { defs={} expr=v3011[1] }
        df      = { defs={} expr=v3012[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3014[1] }
        iopl1   = { defs={} expr=v3015[1] }
        nt      = { defs={} expr=v3016[1] }
        ?15     = { defs={} expr=v3017[1] }
        rf      = { defs={} expr=v3018[1] }
        vm      = { defs={} expr=v3019[1] }
        ac      = { defs={} expr=v3020[1] }
        vif     = { defs={} expr=v3021[1] }
        vip     = { defs={} expr=v3022[1] }
        id      = { defs={} expr=v3023[1] }
        ?22     = { defs={} expr=v3024[1] }
        ?23     = { defs={} expr=v3025[1] }
        ?24     = { defs={} expr=v3026[1] }
        ?25     = { defs={} expr=v3027[1] }
        ?26     = { defs={} expr=v3028[1] }
        ?27     = { defs={} expr=v3029[1] }
        ?28     = { defs={} expr=v3030[1] }
        ?29     = { defs={} expr=v3031[1] }
        ?30     = { defs={} expr=v3032[1] }
        ?31     = { defs={} expr=v3033[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463} expr=0x08048466[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2993[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v2992[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2993[32]) }
          flags = { }
    init mem:
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v2988[32] }
        cx      = { defs={} expr=v2989[32] }
        dx      = { defs={} expr=v2990[32] }
        bx      = { defs={} expr=v2991[32] }
        sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v2992[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v2992[32] -4[32]) }
        si      = { defs={} expr=v2994[32] }
        di      = { defs={} expr=v2995[32] }
        es      = { defs={} expr=v2996[16] }
        cs      = { defs={} expr=v2997[16] }
        ss      = { defs={} expr=v2998[16] }
        ds      = { defs={} expr=v2999[16] }
        fs      = { defs={} expr=v3000[16] }
        gs      = { defs={} expr=v3001[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3003[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3005[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3007[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v2992[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2992[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3010[1] }
        if      = { defs={} expr=v3011[1] }
        df      = { defs={} expr=v3012[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3014[1] }
        iopl1   = { defs={} expr=v3015[1] }
        nt      = { defs={} expr=v3016[1] }
        ?15     = { defs={} expr=v3017[1] }
        rf      = { defs={} expr=v3018[1] }
        vm      = { defs={} expr=v3019[1] }
        ac      = { defs={} expr=v3020[1] }
        vif     = { defs={} expr=v3021[1] }
        vip     = { defs={} expr=v3022[1] }
        id      = { defs={} expr=v3023[1] }
        ?22     = { defs={} expr=v3024[1] }
        ?23     = { defs={} expr=v3025[1] }
        ?24     = { defs={} expr=v3026[1] }
        ?25     = { defs={} expr=v3027[1] }
        ?26     = { defs={} expr=v3028[1] }
        ?27     = { defs={} expr=v3029[1] }
        ?28     = { defs={} expr=v3030[1] }
        ?29     = { defs={} expr=v3031[1] }
        ?30     = { defs={} expr=v3032[1] }
        ?31     = { defs={} expr=v3033[1] }
        ip      = { defs={0x08048460,0x08048461,0x08048463,0x08048466} expr=0x0804846d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v2992[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2993[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v2992[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2993[32]) }
          flags = { }
    init mem:
0x804846d:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v2988[32] }
        cx      = { defs={} expr=v2989[32] }
        dx      = { defs={} expr=v2990[32] }
        bx      = { defs={} expr=v2991[32] }
        sp      = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048460,0x08048461} expr=(add[32] v2992[32] -4[32]) }
        si      = { defs={} expr=v2994[32] }
        di      = { defs={} expr=v2995[32] }
        es      = { defs={} expr=v2996[16] }
        cs      = { defs={} expr=v2997[16] }
        ss      = { defs={} expr=v2998[16] }
        ds      = { defs={} expr=v2999[16] }
        fs      = { defs={} expr=v3000[16] }
        gs      = { defs={} expr=v3001[16] }
        cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3003[1] }
        pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3005[1] }
        af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3007[1] }
        zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v2992[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2992[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3010[1] }
        if      = { defs={} expr=v3011[1] }
        df      = { defs={} expr=v3012[1] }
        of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2992[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3014[1] }
        iopl1   = { defs={} expr=v3015[1] }
        nt      = { defs={} expr=v3016[1] }
        ?15     = { defs={} expr=v3017[1] }
        rf      = { defs={} expr=v3018[1] }
        vm      = { defs={} expr=v3019[1] }
        ac      = { defs={} expr=v3020[1] }
        vif     = { defs={} expr=v3021[1] }
        vip     = { defs={} expr=v3022[1] }
        id      = { defs={} expr=v3023[1] }
        ?22     = { defs={} expr=v3024[1] }
        ?23     = { defs={} expr=v3025[1] }
        ?24     = { defs={} expr=v3026[1] }
        ?25     = { defs={} expr=v3027[1] }
        ?26     = { defs={} expr=v3028[1] }
        ?27     = { defs={} expr=v3029[1] }
        ?28     = { defs={} expr=v3030[1] }
        ?29     = { defs={} expr=v3031[1] }
        ?30     = { defs={} expr=v3032[1] }
        ?31     = { defs={} expr=v3033[1] }
        ip      = { defs={0x0804846d} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=114[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v2992[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v2992[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v2993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v2993[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v2992[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v2993[32]) }
          flags = { }
        address = { defs={0x08048460} expr=(add[32] v2992[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v2993[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v3082[32] }
        cx      = { defs={} expr=v3083[32] }
        dx      = { defs={} expr=v3084[32] }
        bx      = { defs={} expr=v3085[32] }
        sp      = { defs={} expr=v3086[32] }
        bp      = { defs={} expr=v3087[32] }
        si      = { defs={} expr=v3088[32] }
        di      = { defs={} expr=v3089[32] }
        es      = { defs={} expr=v3090[16] }
        cs      = { defs={} expr=v3091[16] }
        ss      = { defs={} expr=v3092[16] }
        ds      = { defs={} expr=v3093[16] }
        fs      = { defs={} expr=v3094[16] }
        gs      = { defs={} expr=v3095[16] }
        cf      = { defs={} expr=v3096[1] }
        ?1      = { defs={} expr=v3097[1] }
        pf      = { defs={} expr=v3098[1] }
        ?3      = { defs={} expr=v3099[1] }
        af      = { defs={} expr=v3100[1] }
        ?5      = { defs={} expr=v3101[1] }
        zf      = { defs={} expr=v3102[1] }
        sf      = { defs={} expr=v3103[1] }
        tf      = { defs={} expr=v3104[1] }
        if      = { defs={} expr=v3105[1] }
        df      = { defs={} expr=v3106[1] }
        of      = { defs={} expr=v3107[1] }
        iopl0   = { defs={} expr=v3108[1] }
        iopl1   = { defs={} expr=v3109[1] }
        nt      = { defs={} expr=v3110[1] }
        ?15     = { defs={} expr=v3111[1] }
        rf      = { defs={} expr=v3112[1] }
        vm      = { defs={} expr=v3113[1] }
        ac      = { defs={} expr=v3114[1] }
        vif     = { defs={} expr=v3115[1] }
        vip     = { defs={} expr=v3116[1] }
        id      = { defs={} expr=v3117[1] }
        ?22     = { defs={} expr=v3118[1] }
        ?23     = { defs={} expr=v3119[1] }
        ?24     = { defs={} expr=v3120[1] }
        ?25     = { defs={} expr=v3121[1] }
        ?26     = { defs={} expr=v3122[1] }
        ?27     = { defs={} expr=v3123[1] }
        ?28     = { defs={} expr=v3124[1] }
        ?29     = { defs={} expr=v3125[1] }
        ?30     = { defs={} expr=v3126[1] }
        ?31     = { defs={} expr=v3127[1] }
        ip      = { defs={0x08048472} expr=0x08048479[32] }
    memory:
        address = { defs={} expr=(add[32] v3086[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3086[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3086[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=v3086[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
0x8048479:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v3082[32] }
        cx      = { defs={} expr=v3083[32] }
        dx      = { defs={} expr=v3084[32] }
        bx      = { defs={} expr=v3085[32] }
        sp      = { defs={0x08048479} expr=(add[32] v3086[32] -4[32]) }
        bp      = { defs={} expr=v3087[32] }
        si      = { defs={} expr=v3088[32] }
        di      = { defs={} expr=v3089[32] }
        es      = { defs={} expr=v3090[16] }
        cs      = { defs={} expr=v3091[16] }
        ss      = { defs={} expr=v3092[16] }
        ds      = { defs={} expr=v3093[16] }
        fs      = { defs={} expr=v3094[16] }
        gs      = { defs={} expr=v3095[16] }
        cf      = { defs={} expr=v3096[1] }
        ?1      = { defs={} expr=v3097[1] }
        pf      = { defs={} expr=v3098[1] }
        ?3      = { defs={} expr=v3099[1] }
        af      = { defs={} expr=v3100[1] }
        ?5      = { defs={} expr=v3101[1] }
        zf      = { defs={} expr=v3102[1] }
        sf      = { defs={} expr=v3103[1] }
        tf      = { defs={} expr=v3104[1] }
        if      = { defs={} expr=v3105[1] }
        df      = { defs={} expr=v3106[1] }
        of      = { defs={} expr=v3107[1] }
        iopl0   = { defs={} expr=v3108[1] }
        iopl1   = { defs={} expr=v3109[1] }
        nt      = { defs={} expr=v3110[1] }
        ?15     = { defs={} expr=v3111[1] }
        rf      = { defs={} expr=v3112[1] }
        vm      = { defs={} expr=v3113[1] }
        ac      = { defs={} expr=v3114[1] }
        vif     = { defs={} expr=v3115[1] }
        vip     = { defs={} expr=v3116[1] }
        id      = { defs={} expr=v3117[1] }
        ?22     = { defs={} expr=v3118[1] }
        ?23     = { defs={} expr=v3119[1] }
        ?24     = { defs={} expr=v3120[1] }
        ?25     = { defs={} expr=v3121[1] }
        ?26     = { defs={} expr=v3122[1] }
        ?27     = { defs={} expr=v3123[1] }
        ?28     = { defs={} expr=v3124[1] }
        ?29     = { defs={} expr=v3125[1] }
        ?30     = { defs={} expr=v3126[1] }
        ?31     = { defs={} expr=v3127[1] }
        ip      = { defs={0x08048479} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3086[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3086[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3086[32] -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048479} expr=(add[32] v3086[32] -4[32]) }
          value = { defs={} expr=126[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3086[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3086[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3086[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=v3086[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048480:push   ebp
    registers:
        ax      = { defs={} expr=v3176[32] }
        cx      = { defs={} expr=v3177[32] }
        dx      = { defs={} expr=v3178[32] }
        bx      = { defs={} expr=v3179[32] }
        sp      = { defs={0x08048480} expr=(add[32] v3180[32] -4[32]) }
        bp      = { defs={} expr=v3181[32] }
        si      = { defs={} expr=v3182[32] }
        di      = { defs={} expr=v3183[32] }
        es      = { defs={} expr=v3184[16] }
        cs      = { defs={} expr=v3185[16] }
        ss      = { defs={} expr=v3186[16] }
        ds      = { defs={} expr=v3187[16] }
        fs      = { defs={} expr=v3188[16] }
        gs      = { defs={} expr=v3189[16] }
        cf      = { defs={} expr=v3190[1] }
        ?1      = { defs={} expr=v3191[1] }
        pf      = { defs={} expr=v3192[1] }
        ?3      = { defs={} expr=v3193[1] }
        af      = { defs={} expr=v3194[1] }
        ?5      = { defs={} expr=v3195[1] }
        zf      = { defs={} expr=v3196[1] }
        sf      = { defs={} expr=v3197[1] }
        tf      = { defs={} expr=v3198[1] }
        if      = { defs={} expr=v3199[1] }
        df      = { defs={} expr=v3200[1] }
        of      = { defs={} expr=v3201[1] }
        iopl0   = { defs={} expr=v3202[1] }
        iopl1   = { defs={} expr=v3203[1] }
        nt      = { defs={} expr=v3204[1] }
        ?15     = { defs={} expr=v3205[1] }
        rf      = { defs={} expr=v3206[1] }
        vm      = { defs={} expr=v3207[1] }
        ac      = { defs={} expr=v3208[1] }
        vif     = { defs={} expr=v3209[1] }
        vip     = { defs={} expr=v3210[1] }
        id      = { defs={} expr=v3211[1] }
        ?22     = { defs={} expr=v3212[1] }
        ?23     = { defs={} expr=v3213[1] }
        ?24     = { defs={} expr=v3214[1] }
        ?25     = { defs={} expr=v3215[1] }
        ?26     = { defs={} expr=v3216[1] }
        ?27     = { defs={} expr=v3217[1] }
        ?28     = { defs={} expr=v3218[1] }
        ?29     = { defs={} expr=v3219[1] }
        ?30     = { defs={} expr=v3220[1] }
        ?31     = { defs={} expr=v3221[1] }
        ip      = { defs={0x08048480} expr=0x08048481[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3181[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3180[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3181[32]) }
          flags = { }
    init mem:
0x8048481:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3176[32] }
        cx      = { defs={} expr=v3177[32] }
        dx      = { defs={} expr=v3178[32] }
        bx      = { defs={} expr=v3179[32] }
        sp      = { defs={0x08048480} expr=(add[32] v3180[32] -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v3180[32] -4[32]) }
        si      = { defs={} expr=v3182[32] }
        di      = { defs={} expr=v3183[32] }
        es      = { defs={} expr=v3184[16] }
        cs      = { defs={} expr=v3185[16] }
        ss      = { defs={} expr=v3186[16] }
        ds      = { defs={} expr=v3187[16] }
        fs      = { defs={} expr=v3188[16] }
        gs      = { defs={} expr=v3189[16] }
        cf      = { defs={} expr=v3190[1] }
        ?1      = { defs={} expr=v3191[1] }
        pf      = { defs={} expr=v3192[1] }
        ?3      = { defs={} expr=v3193[1] }
        af      = { defs={} expr=v3194[1] }
        ?5      = { defs={} expr=v3195[1] }
        zf      = { defs={} expr=v3196[1] }
        sf      = { defs={} expr=v3197[1] }
        tf      = { defs={} expr=v3198[1] }
        if      = { defs={} expr=v3199[1] }
        df      = { defs={} expr=v3200[1] }
        of      = { defs={} expr=v3201[1] }
        iopl0   = { defs={} expr=v3202[1] }
        iopl1   = { defs={} expr=v3203[1] }
        nt      = { defs={} expr=v3204[1] }
        ?15     = { defs={} expr=v3205[1] }
        rf      = { defs={} expr=v3206[1] }
        vm      = { defs={} expr=v3207[1] }
        ac      = { defs={} expr=v3208[1] }
        vif     = { defs={} expr=v3209[1] }
        vip     = { defs={} expr=v3210[1] }
        id      = { defs={} expr=v3211[1] }
        ?22     = { defs={} expr=v3212[1] }
        ?23     = { defs={} expr=v3213[1] }
        ?24     = { defs={} expr=v3214[1] }
        ?25     = { defs={} expr=v3215[1] }
        ?26     = { defs={} expr=v3216[1] }
        ?27     = { defs={} expr=v3217[1] }
        ?28     = { defs={} expr=v3218[1] }
        ?29     = { defs={} expr=v3219[1] }
        ?30     = { defs={} expr=v3220[1] }
        ?31     = { defs={} expr=v3221[1] }
        ip      = { defs={0x08048480,0x08048481} expr=0x08048483[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3181[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3180[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3181[32]) }
          flags = { }
    init mem:
0x8048483:sub    esp, 0x08
    registers:
        ax      = { defs={} expr=v3176[32] }
        cx      = { defs={} expr=v3177[32] }
        dx      = { defs={} expr=v3178[32] }
        bx      = { defs={} expr=v3179[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v3180[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v3180[32] -4[32]) }
        si      = { defs={} expr=v3182[32] }
        di      = { defs={} expr=v3183[32] }
        es      = { defs={} expr=v3184[16] }
        cs      = { defs={} expr=v3185[16] }
        ss      = { defs={} expr=v3186[16] }
        ds      = { defs={} expr=v3187[16] }
        fs      = { defs={} expr=v3188[16] }
        gs      = { defs={} expr=v3189[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3191[1] }
        pf      = { defs={0x08048480,0x08048483} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3180[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3180[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]))))))) }
        ?3      = { defs={} expr=v3193[1] }
        af      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) 4294967288[33])))))) }
        ?5      = { defs={} expr=v3195[1] }
        zf      = { defs={0x08048480,0x08048483} expr=(zerop[1] (add[32] (add[32] v3180[32] -4[32]) -8[32])) }
        sf      = { defs={0x08048480,0x08048483} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3180[32] -4[32]) -8[32])) }
        tf      = { defs={} expr=v3198[1] }
        if      = { defs={} expr=v3199[1] }
        df      = { defs={} expr=v3200[1] }
        of      = { defs={0x08048480,0x08048483} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) 4294967288[33])))))) }
        iopl0   = { defs={} expr=v3202[1] }
        iopl1   = { defs={} expr=v3203[1] }
        nt      = { defs={} expr=v3204[1] }
        ?15     = { defs={} expr=v3205[1] }
        rf      = { defs={} expr=v3206[1] }
        vm      = { defs={} expr=v3207[1] }
        ac      = { defs={} expr=v3208[1] }
        vif     = { defs={} expr=v3209[1] }
        vip     = { defs={} expr=v3210[1] }
        id      = { defs={} expr=v3211[1] }
        ?22     = { defs={} expr=v3212[1] }
        ?23     = { defs={} expr=v3213[1] }
        ?24     = { defs={} expr=v3214[1] }
        ?25     = { defs={} expr=v3215[1] }
        ?26     = { defs={} expr=v3216[1] }
        ?27     = { defs={} expr=v3217[1] }
        ?28     = { defs={} expr=v3218[1] }
        ?29     = { defs={} expr=v3219[1] }
        ?30     = { defs={} expr=v3220[1] }
        ?31     = { defs={} expr=v3221[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483} expr=0x08048486[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3181[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3180[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3181[32]) }
          flags = { }
    init mem:
0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
    registers:
        ax      = { defs={} expr=v3176[32] }
        cx      = { defs={} expr=v3177[32] }
        dx      = { defs={} expr=v3178[32] }
        bx      = { defs={} expr=v3179[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v3180[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v3180[32] -4[32]) }
        si      = { defs={} expr=v3182[32] }
        di      = { defs={} expr=v3183[32] }
        es      = { defs={} expr=v3184[16] }
        cs      = { defs={} expr=v3185[16] }
        ss      = { defs={} expr=v3186[16] }
        ds      = { defs={} expr=v3187[16] }
        fs      = { defs={} expr=v3188[16] }
        gs      = { defs={} expr=v3189[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3191[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v3193[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32]))))) 1[33]))))) }
        ?5      = { defs={} expr=v3195[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
        tf      = { defs={} expr=v3198[1] }
        if      = { defs={} expr=v3199[1] }
        df      = { defs={} expr=v3200[1] }
        of      = { defs={0x08048486} expr=0[1] }
        iopl0   = { defs={} expr=v3202[1] }
        iopl1   = { defs={} expr=v3203[1] }
        nt      = { defs={} expr=v3204[1] }
        ?15     = { defs={} expr=v3205[1] }
        rf      = { defs={} expr=v3206[1] }
        vm      = { defs={} expr=v3207[1] }
        ac      = { defs={} expr=v3208[1] }
        vif     = { defs={} expr=v3209[1] }
        vip     = { defs={} expr=v3210[1] }
        id      = { defs={} expr=v3211[1] }
        ?22     = { defs={} expr=v3212[1] }
        ?23     = { defs={} expr=v3213[1] }
        ?24     = { defs={} expr=v3214[1] }
        ?25     = { defs={} expr=v3215[1] }
        ?26     = { defs={} expr=v3216[1] }
        ?27     = { defs={} expr=v3217[1] }
        ?28     = { defs={} expr=v3218[1] }
        ?29     = { defs={} expr=v3219[1] }
        ?30     = { defs={} expr=v3220[1] }
        ?31     = { defs={} expr=v3221[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486} expr=0x0804848c[32] }
    memory:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3181[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3180[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3181[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v3230[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v3228[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v3226[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v3224[8] }
          flags = { rdonly }
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
    registers:
        ax      = { defs={} expr=v3176[32] }
        cx      = { defs={} expr=v3177[32] }
        dx      = { defs={} expr=v3178[32] }
        bx      = { defs={} expr=v3179[32] }
        sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v3180[32] -4[32]) -8[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v3180[32] -4[32]) }
        si      = { defs={} expr=v3182[32] }
        di      = { defs={} expr=v3183[32] }
        es      = { defs={} expr=v3184[16] }
        cs      = { defs={} expr=v3185[16] }
        ss      = { defs={} expr=v3186[16] }
        ds      = { defs={} expr=v3187[16] }
        fs      = { defs={} expr=v3188[16] }
        gs      = { defs={} expr=v3189[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3191[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v3193[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32]))))) 1[33]))))) }
        ?5      = { defs={} expr=v3195[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
        tf      = { defs={} expr=v3198[1] }
        if      = { defs={} expr=v3199[1] }
        df      = { defs={} expr=v3200[1] }
        of      = { defs={0x08048486} expr=0[1] }
        iopl0   = { defs={} expr=v3202[1] }
        iopl1   = { defs={} expr=v3203[1] }
        nt      = { defs={} expr=v3204[1] }
        ?15     = { defs={} expr=v3205[1] }
        rf      = { defs={} expr=v3206[1] }
        vm      = { defs={} expr=v3207[1] }
        ac      = { defs={} expr=v3208[1] }
        vif     = { defs={} expr=v3209[1] }
        vip     = { defs={} expr=v3210[1] }
        id      = { defs={} expr=v3211[1] }
        ?22     = { defs={} expr=v3212[1] }
        ?23     = { defs={} expr=v3213[1] }
        ?24     = { defs={} expr=v3214[1] }
        ?25     = { defs={} expr=v3215[1] }
        ?26     = { defs={} expr=v3216[1] }
        ?27     = { defs={} expr=v3217[1] }
        ?28     = { defs={} expr=v3218[1] }
        ?29     = { defs={} expr=v3219[1] }
        ?30     = { defs={} expr=v3220[1] }
        ?31     = { defs={} expr=v3221[1] }
        ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c} expr=0x08048493[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v3180[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3181[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3180[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3181[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v3230[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v3228[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v3226[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v3224[8] }
          flags = { rdonly }
0x8048493:call   0x08048300<puts@plt>
    registers:
        ax      = { defs={} expr=v3176[32] }
        cx      = { defs={} expr=v3177[32] }
        dx      = { defs={} expr=v3178[32] }
        bx      = { defs={} expr=v3179[32] }
        sp      = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) -4[32]) }
        bp      = { defs={0x08048480,0x08048481} expr=(add[32] v3180[32] -4[32]) }
        si      = { defs={} expr=v3182[32] }
        di      = { defs={} expr=v3183[32] }
        es      = { defs={} expr=v3184[16] }
        cs      = { defs={} expr=v3185[16] }
        ss      = { defs={} expr=v3186[16] }
        ds      = { defs={} expr=v3187[16] }
        fs      = { defs={} expr=v3188[16] }
        gs      = { defs={} expr=v3189[16] }
        cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3180[32] -4[32])) 4294967288[33])))))) }
        ?1      = { defs={} expr=v3191[1] }
        pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v3193[1] }
        af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32]))))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32]))))) 1[33]))))) }
        ?5      = { defs={} expr=v3195[1] }
        zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
        sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
        tf      = { defs={} expr=v3198[1] }
        if      = { defs={} expr=v3199[1] }
        df      = { defs={} expr=v3200[1] }
        of      = { defs={0x08048486} expr=0[1] }
        iopl0   = { defs={} expr=v3202[1] }
        iopl1   = { defs={} expr=v3203[1] }
        nt      = { defs={} expr=v3204[1] }
        ?15     = { defs={} expr=v3205[1] }
        rf      = { defs={} expr=v3206[1] }
        vm      = { defs={} expr=v3207[1] }
        ac      = { defs={} expr=v3208[1] }
        vif     = { defs={} expr=v3209[1] }
        vip     = { defs={} expr=v3210[1] }
        id      = { defs={} expr=v3211[1] }
        ?22     = { defs={} expr=v3212[1] }
        ?23     = { defs={} expr=v3213[1] }
        ?24     = { defs={} expr=v3214[1] }
        ?25     = { defs={} expr=v3215[1] }
        ?26     = { defs={} expr=v3216[1] }
        ?27     = { defs={} expr=v3217[1] }
        ?28     = { defs={} expr=v3218[1] }
        ?29     = { defs={} expr=v3219[1] }
        ?30     = { defs={} expr=v3220[1] }
        ?31     = { defs={} expr=v3221[1] }
        ip      = { defs={0x08048493} expr=0x08048300[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) -4[32]) }
          value = { defs={} expr=-104[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3180[32] -4[32]) -8[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v3180[32] -4[32]) -8[32]) }
          value = { defs={} expr=-44[8] }
          flags = { }
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3225[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f8[32] v3224[8]) 0x080496f8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3227[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496f9[32] v3226[8]) 0x080496f9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3229[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fa[32] v3228[8]) 0x080496fa[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3231[8] (add[32] (add[32] v3180[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v3181[32])) (add[32] (add[32] v3180[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v3181[32])) (add[32] v3180[32] -4[32]) (extract[8] 0[32] 8[32] v3181[32])) 0x080496fb[32] v3230[8]) 0x080496fb[32])))) 1[32])) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3181[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3180[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3181[32]) }
          flags = { }
        address = { defs={0x08048480} expr=(add[32] v3180[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3181[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080496fb[32] }
          value = { defs={} expr=v3230[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496fa[32] }
          value = { defs={} expr=v3228[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080496f9[32] }
          value = { defs={} expr=v3226[8] }
          flags = { rdonly }
        address = { defs={0x08048486} expr=0x080496f8[32] }
          value = { defs={} expr=v3224[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
    registers:
        ax      = { defs={} expr=v3284[32] }
        cx      = { defs={} expr=v3285[32] }
        dx      = { defs={} expr=v3286[32] }
        bx      = { defs={} expr=v3287[32] }
        sp      = { defs={} expr=v3288[32] }
        bp      = { defs={} expr=v3289[32] }
        si      = { defs={} expr=v3290[32] }
        di      = { defs={} expr=v3291[32] }
        es      = { defs={} expr=v3292[16] }
        cs      = { defs={} expr=v3293[16] }
        ss      = { defs={} expr=v3294[16] }
        ds      = { defs={} expr=v3295[16] }
        fs      = { defs={} expr=v3296[16] }
        gs      = { defs={} expr=v3297[16] }
        cf      = { defs={} expr=v3298[1] }
        ?1      = { defs={} expr=v3299[1] }
        pf      = { defs={} expr=v3300[1] }
        ?3      = { defs={} expr=v3301[1] }
        af      = { defs={} expr=v3302[1] }
        ?5      = { defs={} expr=v3303[1] }
        zf      = { defs={} expr=v3304[1] }
        sf      = { defs={} expr=v3305[1] }
        tf      = { defs={} expr=v3306[1] }
        if      = { defs={} expr=v3307[1] }
        df      = { defs={} expr=v3308[1] }
        of      = { defs={} expr=v3309[1] }
        iopl0   = { defs={} expr=v3310[1] }
        iopl1   = { defs={} expr=v3311[1] }
        nt      = { defs={} expr=v3312[1] }
        ?15     = { defs={} expr=v3313[1] }
        rf      = { defs={} expr=v3314[1] }
        vm      = { defs={} expr=v3315[1] }
        ac      = { defs={} expr=v3316[1] }
        vif     = { defs={} expr=v3317[1] }
        vip     = { defs={} expr=v3318[1] }
        id      = { defs={} expr=v3319[1] }
        ?22     = { defs={} expr=v3320[1] }
        ?23     = { defs={} expr=v3321[1] }
        ?24     = { defs={} expr=v3322[1] }
        ?25     = { defs={} expr=v3323[1] }
        ?26     = { defs={} expr=v3324[1] }
        ?27     = { defs={} expr=v3325[1] }
        ?28     = { defs={} expr=v3326[1] }
        ?29     = { defs={} expr=v3327[1] }
        ?30     = { defs={} expr=v3328[1] }
        ?31     = { defs={} expr=v3329[1] }
        ip      = { defs={0x08048498} expr=0x0804849f[32] }
    memory:
        address = { defs={} expr=(add[32] v3288[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3288[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3288[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=v3288[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
0x804849f:call   0x08048320<_exit@plt>
    registers:
        ax      = { defs={} expr=v3284[32] }
        cx      = { defs={} expr=v3285[32] }
        dx      = { defs={} expr=v3286[32] }
        bx      = { defs={} expr=v3287[32] }
        sp      = { defs={0x0804849f} expr=(add[32] v3288[32] -4[32]) }
        bp      = { defs={} expr=v3289[32] }
        si      = { defs={} expr=v3290[32] }
        di      = { defs={} expr=v3291[32] }
        es      = { defs={} expr=v3292[16] }
        cs      = { defs={} expr=v3293[16] }
        ss      = { defs={} expr=v3294[16] }
        ds      = { defs={} expr=v3295[16] }
        fs      = { defs={} expr=v3296[16] }
        gs      = { defs={} expr=v3297[16] }
        cf      = { defs={} expr=v3298[1] }
        ?1      = { defs={} expr=v3299[1] }
        pf      = { defs={} expr=v3300[1] }
        ?3      = { defs={} expr=v3301[1] }
        af      = { defs={} expr=v3302[1] }
        ?5      = { defs={} expr=v3303[1] }
        zf      = { defs={} expr=v3304[1] }
        sf      = { defs={} expr=v3305[1] }
        tf      = { defs={} expr=v3306[1] }
        if      = { defs={} expr=v3307[1] }
        df      = { defs={} expr=v3308[1] }
        of      = { defs={} expr=v3309[1] }
        iopl0   = { defs={} expr=v3310[1] }
        iopl1   = { defs={} expr=v3311[1] }
        nt      = { defs={} expr=v3312[1] }
        ?15     = { defs={} expr=v3313[1] }
        rf      = { defs={} expr=v3314[1] }
        vm      = { defs={} expr=v3315[1] }
        ac      = { defs={} expr=v3316[1] }
        vif     = { defs={} expr=v3317[1] }
        vip     = { defs={} expr=v3318[1] }
        id      = { defs={} expr=v3319[1] }
        ?22     = { defs={} expr=v3320[1] }
        ?23     = { defs={} expr=v3321[1] }
        ?24     = { defs={} expr=v3322[1] }
        ?25     = { defs={} expr=v3323[1] }
        ?26     = { defs={} expr=v3324[1] }
        ?27     = { defs={} expr=v3325[1] }
        ?28     = { defs={} expr=v3326[1] }
        ?29     = { defs={} expr=v3327[1] }
        ?30     = { defs={} expr=v3328[1] }
        ?31     = { defs={} expr=v3329[1] }
        ip      = { defs={0x0804849f} expr=0x08048320[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3288[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3288[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3288[32] -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x0804849f} expr=(add[32] v3288[32] -4[32]) }
          value = { defs={} expr=-92[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3288[32] 3[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3288[32] 2[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=(add[32] v3288[32] 1[32]) }
          value = { defs={} expr=0[8] }
          flags = { }
        address = { defs={} expr=v3288[32] }
          value = { defs={} expr=0[8] }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484b0:push   ebp
    registers:
        ax      = { defs={} expr=v3378[32] }
        cx      = { defs={} expr=v3379[32] }
        dx      = { defs={} expr=v3380[32] }
        bx      = { defs={} expr=v3381[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v3382[32] -4[32]) }
        bp      = { defs={} expr=v3383[32] }
        si      = { defs={} expr=v3384[32] }
        di      = { defs={} expr=v3385[32] }
        es      = { defs={} expr=v3386[16] }
        cs      = { defs={} expr=v3387[16] }
        ss      = { defs={} expr=v3388[16] }
        ds      = { defs={} expr=v3389[16] }
        fs      = { defs={} expr=v3390[16] }
        gs      = { defs={} expr=v3391[16] }
        cf      = { defs={} expr=v3392[1] }
        ?1      = { defs={} expr=v3393[1] }
        pf      = { defs={} expr=v3394[1] }
        ?3      = { defs={} expr=v3395[1] }
        af      = { defs={} expr=v3396[1] }
        ?5      = { defs={} expr=v3397[1] }
        zf      = { defs={} expr=v3398[1] }
        sf      = { defs={} expr=v3399[1] }
        tf      = { defs={} expr=v3400[1] }
        if      = { defs={} expr=v3401[1] }
        df      = { defs={} expr=v3402[1] }
        of      = { defs={} expr=v3403[1] }
        iopl0   = { defs={} expr=v3404[1] }
        iopl1   = { defs={} expr=v3405[1] }
        nt      = { defs={} expr=v3406[1] }
        ?15     = { defs={} expr=v3407[1] }
        rf      = { defs={} expr=v3408[1] }
        vm      = { defs={} expr=v3409[1] }
        ac      = { defs={} expr=v3410[1] }
        vif     = { defs={} expr=v3411[1] }
        vip     = { defs={} expr=v3412[1] }
        id      = { defs={} expr=v3413[1] }
        ?22     = { defs={} expr=v3414[1] }
        ?23     = { defs={} expr=v3415[1] }
        ?24     = { defs={} expr=v3416[1] }
        ?25     = { defs={} expr=v3417[1] }
        ?26     = { defs={} expr=v3418[1] }
        ?27     = { defs={} expr=v3419[1] }
        ?28     = { defs={} expr=v3420[1] }
        ?29     = { defs={} expr=v3421[1] }
        ?30     = { defs={} expr=v3422[1] }
        ?31     = { defs={} expr=v3423[1] }
        ip      = { defs={0x080484b0} expr=0x080484b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3383[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3382[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3383[32]) }
          flags = { }
    init mem:
0x80484b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3378[32] }
        cx      = { defs={} expr=v3379[32] }
        dx      = { defs={} expr=v3380[32] }
        bx      = { defs={} expr=v3381[32] }
        sp      = { defs={0x080484b0} expr=(add[32] v3382[32] -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3382[32] -4[32]) }
        si      = { defs={} expr=v3384[32] }
        di      = { defs={} expr=v3385[32] }
        es      = { defs={} expr=v3386[16] }
        cs      = { defs={} expr=v3387[16] }
        ss      = { defs={} expr=v3388[16] }
        ds      = { defs={} expr=v3389[16] }
        fs      = { defs={} expr=v3390[16] }
        gs      = { defs={} expr=v3391[16] }
        cf      = { defs={} expr=v3392[1] }
        ?1      = { defs={} expr=v3393[1] }
        pf      = { defs={} expr=v3394[1] }
        ?3      = { defs={} expr=v3395[1] }
        af      = { defs={} expr=v3396[1] }
        ?5      = { defs={} expr=v3397[1] }
        zf      = { defs={} expr=v3398[1] }
        sf      = { defs={} expr=v3399[1] }
        tf      = { defs={} expr=v3400[1] }
        if      = { defs={} expr=v3401[1] }
        df      = { defs={} expr=v3402[1] }
        of      = { defs={} expr=v3403[1] }
        iopl0   = { defs={} expr=v3404[1] }
        iopl1   = { defs={} expr=v3405[1] }
        nt      = { defs={} expr=v3406[1] }
        ?15     = { defs={} expr=v3407[1] }
        rf      = { defs={} expr=v3408[1] }
        vm      = { defs={} expr=v3409[1] }
        ac      = { defs={} expr=v3410[1] }
        vif     = { defs={} expr=v3411[1] }
        vip     = { defs={} expr=v3412[1] }
        id      = { defs={} expr=v3413[1] }
        ?22     = { defs={} expr=v3414[1] }
        ?23     = { defs={} expr=v3415[1] }
        ?24     = { defs={} expr=v3416[1] }
        ?25     = { defs={} expr=v3417[1] }
        ?26     = { defs={} expr=v3418[1] }
        ?27     = { defs={} expr=v3419[1] }
        ?28     = { defs={} expr=v3420[1] }
        ?29     = { defs={} expr=v3421[1] }
        ?30     = { defs={} expr=v3422[1] }
        ?31     = { defs={} expr=v3423[1] }
        ip      = { defs={0x080484b0,0x080484b1} expr=0x080484b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3383[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3382[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3383[32]) }
          flags = { }
    init mem:
0x80484b3:push   edi
    registers:
        ax      = { defs={} expr=v3378[32] }
        cx      = { defs={} expr=v3379[32] }
        dx      = { defs={} expr=v3380[32] }
        bx      = { defs={} expr=v3381[32] }
        sp      = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3382[32] -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3382[32] -4[32]) }
        si      = { defs={} expr=v3384[32] }
        di      = { defs={} expr=v3385[32] }
        es      = { defs={} expr=v3386[16] }
        cs      = { defs={} expr=v3387[16] }
        ss      = { defs={} expr=v3388[16] }
        ds      = { defs={} expr=v3389[16] }
        fs      = { defs={} expr=v3390[16] }
        gs      = { defs={} expr=v3391[16] }
        cf      = { defs={} expr=v3392[1] }
        ?1      = { defs={} expr=v3393[1] }
        pf      = { defs={} expr=v3394[1] }
        ?3      = { defs={} expr=v3395[1] }
        af      = { defs={} expr=v3396[1] }
        ?5      = { defs={} expr=v3397[1] }
        zf      = { defs={} expr=v3398[1] }
        sf      = { defs={} expr=v3399[1] }
        tf      = { defs={} expr=v3400[1] }
        if      = { defs={} expr=v3401[1] }
        df      = { defs={} expr=v3402[1] }
        of      = { defs={} expr=v3403[1] }
        iopl0   = { defs={} expr=v3404[1] }
        iopl1   = { defs={} expr=v3405[1] }
        nt      = { defs={} expr=v3406[1] }
        ?15     = { defs={} expr=v3407[1] }
        rf      = { defs={} expr=v3408[1] }
        vm      = { defs={} expr=v3409[1] }
        ac      = { defs={} expr=v3410[1] }
        vif     = { defs={} expr=v3411[1] }
        vip     = { defs={} expr=v3412[1] }
        id      = { defs={} expr=v3413[1] }
        ?22     = { defs={} expr=v3414[1] }
        ?23     = { defs={} expr=v3415[1] }
        ?24     = { defs={} expr=v3416[1] }
        ?25     = { defs={} expr=v3417[1] }
        ?26     = { defs={} expr=v3418[1] }
        ?27     = { defs={} expr=v3419[1] }
        ?28     = { defs={} expr=v3420[1] }
        ?29     = { defs={} expr=v3421[1] }
        ?30     = { defs={} expr=v3422[1] }
        ?31     = { defs={} expr=v3423[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3} expr=0x080484b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3385[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3382[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3383[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3382[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3383[32]) }
          flags = { }
    init mem:
0x80484b4:push   esi
    registers:
        ax      = { defs={} expr=v3378[32] }
        cx      = { defs={} expr=v3379[32] }
        dx      = { defs={} expr=v3380[32] }
        bx      = { defs={} expr=v3381[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3382[32] -4[32]) }
        si      = { defs={} expr=v3384[32] }
        di      = { defs={} expr=v3385[32] }
        es      = { defs={} expr=v3386[16] }
        cs      = { defs={} expr=v3387[16] }
        ss      = { defs={} expr=v3388[16] }
        ds      = { defs={} expr=v3389[16] }
        fs      = { defs={} expr=v3390[16] }
        gs      = { defs={} expr=v3391[16] }
        cf      = { defs={} expr=v3392[1] }
        ?1      = { defs={} expr=v3393[1] }
        pf      = { defs={} expr=v3394[1] }
        ?3      = { defs={} expr=v3395[1] }
        af      = { defs={} expr=v3396[1] }
        ?5      = { defs={} expr=v3397[1] }
        zf      = { defs={} expr=v3398[1] }
        sf      = { defs={} expr=v3399[1] }
        tf      = { defs={} expr=v3400[1] }
        if      = { defs={} expr=v3401[1] }
        df      = { defs={} expr=v3402[1] }
        of      = { defs={} expr=v3403[1] }
        iopl0   = { defs={} expr=v3404[1] }
        iopl1   = { defs={} expr=v3405[1] }
        nt      = { defs={} expr=v3406[1] }
        ?15     = { defs={} expr=v3407[1] }
        rf      = { defs={} expr=v3408[1] }
        vm      = { defs={} expr=v3409[1] }
        ac      = { defs={} expr=v3410[1] }
        vif     = { defs={} expr=v3411[1] }
        vip     = { defs={} expr=v3412[1] }
        id      = { defs={} expr=v3413[1] }
        ?22     = { defs={} expr=v3414[1] }
        ?23     = { defs={} expr=v3415[1] }
        ?24     = { defs={} expr=v3416[1] }
        ?25     = { defs={} expr=v3417[1] }
        ?26     = { defs={} expr=v3418[1] }
        ?27     = { defs={} expr=v3419[1] }
        ?28     = { defs={} expr=v3420[1] }
        ?29     = { defs={} expr=v3421[1] }
        ?30     = { defs={} expr=v3422[1] }
        ?31     = { defs={} expr=v3423[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4} expr=0x080484b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3384[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3385[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3382[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3383[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3382[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3383[32]) }
          flags = { }
    init mem:
0x80484b5:push   ebx
    registers:
        ax      = { defs={} expr=v3378[32] }
        cx      = { defs={} expr=v3379[32] }
        dx      = { defs={} expr=v3380[32] }
        bx      = { defs={} expr=v3381[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3382[32] -4[32]) }
        si      = { defs={} expr=v3384[32] }
        di      = { defs={} expr=v3385[32] }
        es      = { defs={} expr=v3386[16] }
        cs      = { defs={} expr=v3387[16] }
        ss      = { defs={} expr=v3388[16] }
        ds      = { defs={} expr=v3389[16] }
        fs      = { defs={} expr=v3390[16] }
        gs      = { defs={} expr=v3391[16] }
        cf      = { defs={} expr=v3392[1] }
        ?1      = { defs={} expr=v3393[1] }
        pf      = { defs={} expr=v3394[1] }
        ?3      = { defs={} expr=v3395[1] }
        af      = { defs={} expr=v3396[1] }
        ?5      = { defs={} expr=v3397[1] }
        zf      = { defs={} expr=v3398[1] }
        sf      = { defs={} expr=v3399[1] }
        tf      = { defs={} expr=v3400[1] }
        if      = { defs={} expr=v3401[1] }
        df      = { defs={} expr=v3402[1] }
        of      = { defs={} expr=v3403[1] }
        iopl0   = { defs={} expr=v3404[1] }
        iopl1   = { defs={} expr=v3405[1] }
        nt      = { defs={} expr=v3406[1] }
        ?15     = { defs={} expr=v3407[1] }
        rf      = { defs={} expr=v3408[1] }
        vm      = { defs={} expr=v3409[1] }
        ac      = { defs={} expr=v3410[1] }
        vif     = { defs={} expr=v3411[1] }
        vip     = { defs={} expr=v3412[1] }
        id      = { defs={} expr=v3413[1] }
        ?22     = { defs={} expr=v3414[1] }
        ?23     = { defs={} expr=v3415[1] }
        ?24     = { defs={} expr=v3416[1] }
        ?25     = { defs={} expr=v3417[1] }
        ?26     = { defs={} expr=v3418[1] }
        ?27     = { defs={} expr=v3419[1] }
        ?28     = { defs={} expr=v3420[1] }
        ?29     = { defs={} expr=v3421[1] }
        ?30     = { defs={} expr=v3422[1] }
        ?31     = { defs={} expr=v3423[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5} expr=0x080484b6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3381[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3381[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3381[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3381[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3384[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3385[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3382[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3383[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3382[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3383[32]) }
          flags = { }
    init mem:
0x80484b6:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v3378[32] }
        cx      = { defs={} expr=v3379[32] }
        dx      = { defs={} expr=v3380[32] }
        bx      = { defs={} expr=v3381[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3382[32] -4[32]) }
        si      = { defs={} expr=v3384[32] }
        di      = { defs={} expr=v3385[32] }
        es      = { defs={} expr=v3386[16] }
        cs      = { defs={} expr=v3387[16] }
        ss      = { defs={} expr=v3388[16] }
        ds      = { defs={} expr=v3389[16] }
        fs      = { defs={} expr=v3390[16] }
        gs      = { defs={} expr=v3391[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v3393[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v3395[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v3397[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v3400[1] }
        if      = { defs={} expr=v3401[1] }
        df      = { defs={} expr=v3402[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v3404[1] }
        iopl1   = { defs={} expr=v3405[1] }
        nt      = { defs={} expr=v3406[1] }
        ?15     = { defs={} expr=v3407[1] }
        rf      = { defs={} expr=v3408[1] }
        vm      = { defs={} expr=v3409[1] }
        ac      = { defs={} expr=v3410[1] }
        vif     = { defs={} expr=v3411[1] }
        vip     = { defs={} expr=v3412[1] }
        id      = { defs={} expr=v3413[1] }
        ?22     = { defs={} expr=v3414[1] }
        ?23     = { defs={} expr=v3415[1] }
        ?24     = { defs={} expr=v3416[1] }
        ?25     = { defs={} expr=v3417[1] }
        ?26     = { defs={} expr=v3418[1] }
        ?27     = { defs={} expr=v3419[1] }
        ?28     = { defs={} expr=v3420[1] }
        ?29     = { defs={} expr=v3421[1] }
        ?30     = { defs={} expr=v3422[1] }
        ?31     = { defs={} expr=v3423[1] }
        ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=0x080484b9[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3381[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3381[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3381[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3381[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3384[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3385[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3382[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3383[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3382[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3383[32]) }
          flags = { }
    init mem:
0x80484b9:call   0x080484be<<Insn>>
    registers:
        ax      = { defs={} expr=v3378[32] }
        cx      = { defs={} expr=v3379[32] }
        dx      = { defs={} expr=v3380[32] }
        bx      = { defs={} expr=v3381[32] }
        sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v3382[32] -4[32]) }
        si      = { defs={} expr=v3384[32] }
        di      = { defs={} expr=v3385[32] }
        es      = { defs={} expr=v3386[16] }
        cs      = { defs={} expr=v3387[16] }
        ss      = { defs={} expr=v3388[16] }
        ds      = { defs={} expr=v3389[16] }
        fs      = { defs={} expr=v3390[16] }
        gs      = { defs={} expr=v3391[16] }
        cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v3393[1] }
        pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v3395[1] }
        af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v3397[1] }
        zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v3400[1] }
        if      = { defs={} expr=v3401[1] }
        df      = { defs={} expr=v3402[1] }
        of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v3404[1] }
        iopl1   = { defs={} expr=v3405[1] }
        nt      = { defs={} expr=v3406[1] }
        ?15     = { defs={} expr=v3407[1] }
        rf      = { defs={} expr=v3408[1] }
        vm      = { defs={} expr=v3409[1] }
        ac      = { defs={} expr=v3410[1] }
        vif     = { defs={} expr=v3411[1] }
        vip     = { defs={} expr=v3412[1] }
        id      = { defs={} expr=v3413[1] }
        ?22     = { defs={} expr=v3414[1] }
        ?23     = { defs={} expr=v3415[1] }
        ?24     = { defs={} expr=v3416[1] }
        ?25     = { defs={} expr=v3417[1] }
        ?26     = { defs={} expr=v3418[1] }
        ?27     = { defs={} expr=v3419[1] }
        ?28     = { defs={} expr=v3420[1] }
        ?29     = { defs={} expr=v3421[1] }
        ?30     = { defs={} expr=v3422[1] }
        ?31     = { defs={} expr=v3423[1] }
        ip      = { defs={0x080484b9} expr=0x080484be[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={} expr=-66[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3381[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3381[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3381[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3381[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3384[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3384[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3382[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3385[32]) }
          flags = { }
        address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v3382[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3385[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3383[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3382[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3383[32]) }
          flags = { }
        address = { defs={0x080484b0} expr=(add[32] v3382[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3383[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
    registers:
        ax      = { defs={} expr=v3472[32] }
        cx      = { defs={} expr=v3473[32] }
        dx      = { defs={} expr=v3474[32] }
        bx      = { defs={0x080484be} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) }
        sp      = { defs={0x080484be} expr=(add[32] v3476[32] 4[32]) }
        bp      = { defs={} expr=v3477[32] }
        si      = { defs={} expr=v3478[32] }
        di      = { defs={} expr=v3479[32] }
        es      = { defs={} expr=v3480[16] }
        cs      = { defs={} expr=v3481[16] }
        ss      = { defs={} expr=v3482[16] }
        ds      = { defs={} expr=v3483[16] }
        fs      = { defs={} expr=v3484[16] }
        gs      = { defs={} expr=v3485[16] }
        cf      = { defs={} expr=v3486[1] }
        ?1      = { defs={} expr=v3487[1] }
        pf      = { defs={} expr=v3488[1] }
        ?3      = { defs={} expr=v3489[1] }
        af      = { defs={} expr=v3490[1] }
        ?5      = { defs={} expr=v3491[1] }
        zf      = { defs={} expr=v3492[1] }
        sf      = { defs={} expr=v3493[1] }
        tf      = { defs={} expr=v3494[1] }
        if      = { defs={} expr=v3495[1] }
        df      = { defs={} expr=v3496[1] }
        of      = { defs={} expr=v3497[1] }
        iopl0   = { defs={} expr=v3498[1] }
        iopl1   = { defs={} expr=v3499[1] }
        nt      = { defs={} expr=v3500[1] }
        ?15     = { defs={} expr=v3501[1] }
        rf      = { defs={} expr=v3502[1] }
        vm      = { defs={} expr=v3503[1] }
        ac      = { defs={} expr=v3504[1] }
        vif     = { defs={} expr=v3505[1] }
        vip     = { defs={} expr=v3506[1] }
        id      = { defs={} expr=v3507[1] }
        ?22     = { defs={} expr=v3508[1] }
        ?23     = { defs={} expr=v3509[1] }
        ?24     = { defs={} expr=v3510[1] }
        ?25     = { defs={} expr=v3511[1] }
        ?26     = { defs={} expr=v3512[1] }
        ?27     = { defs={} expr=v3513[1] }
        ?28     = { defs={} expr=v3514[1] }
        ?29     = { defs={} expr=v3515[1] }
        ?30     = { defs={} expr=v3516[1] }
        ?31     = { defs={} expr=v3517[1] }
        ip      = { defs={0x080484be} expr=0x080484bf[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3476[32] 3[32]) }
          value = { defs={} expr=v3523[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3476[32] 2[32]) }
          value = { defs={} expr=v3522[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3476[32] 1[32]) }
          value = { defs={} expr=v3521[8] }
          flags = { rdonly }
        address = { defs={} expr=v3476[32] }
          value = { defs={} expr=v3520[8] }
          flags = { rdonly }
0x80484bf:add    ebx, 0x0000120a
    registers:
        ax      = { defs={} expr=v3472[32] }
        cx      = { defs={} expr=v3473[32] }
        dx      = { defs={} expr=v3474[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]) }
        sp      = { defs={0x080484be} expr=(add[32] v3476[32] 4[32]) }
        bp      = { defs={} expr=v3477[32] }
        si      = { defs={} expr=v3478[32] }
        di      = { defs={} expr=v3479[32] }
        es      = { defs={} expr=v3480[16] }
        cs      = { defs={} expr=v3481[16] }
        ss      = { defs={} expr=v3482[16] }
        ds      = { defs={} expr=v3483[16] }
        fs      = { defs={} expr=v3484[16] }
        gs      = { defs={} expr=v3485[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v3487[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v3489[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v3491[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32])) }
        tf      = { defs={} expr=v3494[1] }
        if      = { defs={} expr=v3495[1] }
        df      = { defs={} expr=v3496[1] }
        of      = { defs={0x080484be,0x080484bf} expr=0[1] }
        iopl0   = { defs={} expr=v3498[1] }
        iopl1   = { defs={} expr=v3499[1] }
        nt      = { defs={} expr=v3500[1] }
        ?15     = { defs={} expr=v3501[1] }
        rf      = { defs={} expr=v3502[1] }
        vm      = { defs={} expr=v3503[1] }
        ac      = { defs={} expr=v3504[1] }
        vif     = { defs={} expr=v3505[1] }
        vip     = { defs={} expr=v3506[1] }
        id      = { defs={} expr=v3507[1] }
        ?22     = { defs={} expr=v3508[1] }
        ?23     = { defs={} expr=v3509[1] }
        ?24     = { defs={} expr=v3510[1] }
        ?25     = { defs={} expr=v3511[1] }
        ?26     = { defs={} expr=v3512[1] }
        ?27     = { defs={} expr=v3513[1] }
        ?28     = { defs={} expr=v3514[1] }
        ?29     = { defs={} expr=v3515[1] }
        ?30     = { defs={} expr=v3516[1] }
        ?31     = { defs={} expr=v3517[1] }
        ip      = { defs={0x080484be,0x080484bf} expr=0x080484c5[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3476[32] 3[32]) }
          value = { defs={} expr=v3523[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3476[32] 2[32]) }
          value = { defs={} expr=v3522[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3476[32] 1[32]) }
          value = { defs={} expr=v3521[8] }
          flags = { rdonly }
        address = { defs={} expr=v3476[32] }
          value = { defs={} expr=v3520[8] }
          flags = { rdonly }
0x80484c5:call   0x080482c8<_init>
    registers:
        ax      = { defs={} expr=v3472[32] }
        cx      = { defs={} expr=v3473[32] }
        dx      = { defs={} expr=v3474[32] }
        bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]) }
        sp      = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v3476[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v3477[32] }
        si      = { defs={} expr=v3478[32] }
        di      = { defs={} expr=v3479[32] }
        es      = { defs={} expr=v3480[16] }
        cs      = { defs={} expr=v3481[16] }
        ss      = { defs={} expr=v3482[16] }
        ds      = { defs={} expr=v3483[16] }
        fs      = { defs={} expr=v3484[16] }
        gs      = { defs={} expr=v3485[16] }
        cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8])))) 4618[33]))))) }
        ?1      = { defs={} expr=v3487[1] }
        pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32]))))))) }
        ?3      = { defs={} expr=v3489[1] }
        af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8])))) 4618[33]))))) }
        ?5      = { defs={} expr=v3491[1] }
        zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32])) }
        sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3520[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3521[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3522[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3523[8]))) 4618[32])) }
        tf      = { defs={} expr=v3494[1] }
        if      = { defs={} expr=v3495[1] }
        df      = { defs={} expr=v3496[1] }
        of      = { defs={0x080484be,0x080484bf} expr=0[1] }
        iopl0   = { defs={} expr=v3498[1] }
        iopl1   = { defs={} expr=v3499[1] }
        nt      = { defs={} expr=v3500[1] }
        ?15     = { defs={} expr=v3501[1] }
        rf      = { defs={} expr=v3502[1] }
        vm      = { defs={} expr=v3503[1] }
        ac      = { defs={} expr=v3504[1] }
        vif     = { defs={} expr=v3505[1] }
        vip     = { defs={} expr=v3506[1] }
        id      = { defs={} expr=v3507[1] }
        ?22     = { defs={} expr=v3508[1] }
        ?23     = { defs={} expr=v3509[1] }
        ?24     = { defs={} expr=v3510[1] }
        ?25     = { defs={} expr=v3511[1] }
        ?26     = { defs={} expr=v3512[1] }
        ?27     = { defs={} expr=v3513[1] }
        ?28     = { defs={} expr=v3514[1] }
        ?29     = { defs={} expr=v3515[1] }
        ?30     = { defs={} expr=v3516[1] }
        ?31     = { defs={} expr=v3517[1] }
        ip      = { defs={0x080484c5} expr=0x080482c8[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3476[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3476[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3476[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-124[8] }
          flags = { }
        address = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v3476[32] 4[32]) -4[32]) }
          value = { defs={} expr=-54[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3476[32] 3[32]) }
          value = { defs={} expr=v3523[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3476[32] 2[32]) }
          value = { defs={} expr=v3522[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3476[32] 1[32]) }
          value = { defs={} expr=v3521[8] }
          flags = { rdonly }
        address = { defs={} expr=v3476[32] }
          value = { defs={} expr=v3520[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v3579[32] -224[32]) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={} expr=v3578[32] }
        bx      = { defs={} expr=v3579[32] }
        sp      = { defs={} expr=v3580[32] }
        bp      = { defs={} expr=v3581[32] }
        si      = { defs={} expr=v3582[32] }
        di      = { defs={} expr=v3583[32] }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={} expr=v3590[1] }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={} expr=v3592[1] }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={} expr=v3594[1] }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={} expr=v3596[1] }
        sf      = { defs={} expr=v3597[1] }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={} expr=v3601[1] }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca} expr=0x080484d0[32] }
    memory:
    init mem:
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x080484ca} expr=(add[32] v3579[32] -224[32]) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={} expr=v3579[32] }
        sp      = { defs={} expr=v3580[32] }
        bp      = { defs={} expr=v3581[32] }
        si      = { defs={} expr=v3582[32] }
        di      = { defs={} expr=v3583[32] }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={} expr=v3590[1] }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={} expr=v3592[1] }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={} expr=v3594[1] }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={} expr=v3596[1] }
        sf      = { defs={} expr=v3597[1] }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={} expr=v3601[1] }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca,0x080484d0} expr=0x080484d6[32] }
    memory:
    init mem:
0x80484d6:sub    eax, edx
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={} expr=v3579[32] }
        sp      = { defs={} expr=v3580[32] }
        bp      = { defs={} expr=v3581[32] }
        si      = { defs={} expr=v3582[32] }
        di      = { defs={} expr=v3583[32] }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3579[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3579[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v3579[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3579[32] -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=1[1] }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3579[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3579[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v3579[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3579[32] -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(zerop[1] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0[1] }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0x080484d8[32] }
    memory:
    init mem:
0x80484d8:sar    eax, 0x02
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={} expr=v3579[32] }
        sp      = { defs={} expr=v3580[32] }
        bp      = { defs={} expr=v3581[32] }
        si      = { defs={} expr=v3582[32] }
        di      = { defs={} expr=v3583[32] }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=1[1] }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={0x080484d8} expr=v3624[1] }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={0x080484d8} expr=v3627[1] }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=0x080484db[32] }
    memory:
    init mem:
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={} expr=v3579[32] }
        sp      = { defs={} expr=v3580[32] }
        bp      = { defs={} expr=v3581[32] }
        si      = { defs={} expr=v3582[32] }
        di      = { defs={} expr=v3583[32] }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=1[1] }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={0x080484d8} expr=v3624[1] }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={0x080484d8} expr=v3627[1] }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=0x080484de[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v3581[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={} expr=v3579[32] }
        sp      = { defs={} expr=v3580[32] }
        bp      = { defs={} expr=v3581[32] }
        si      = { defs={} expr=v3582[32] }
        di      = { defs={} expr=v3583[32] }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=1[1] }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={0x080484d8} expr=v3624[1] }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
        sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={0x080484d8} expr=v3627[1] }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de} expr=0x080484e0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v3581[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484e0:add    esp, 0x0c
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={} expr=v3579[32] }
        sp      = { defs={0x080484e0} expr=(add[32] v3580[32] 12[32]) }
        bp      = { defs={} expr=v3581[32] }
        si      = { defs={} expr=v3582[32] }
        di      = { defs={} expr=v3583[32] }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3580[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3580[32] 12[32])) }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0} expr=0x080484e3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v3581[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
0x80484e3:pop    ebx
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3631[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3580[32] 12[32]) v3630[8]) (add[32] v3580[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3633[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 1[32]) v3632[8]) (add[32] (add[32] v3580[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3635[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 2[32]) v3634[8]) (add[32] (add[32] v3580[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3637[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 3[32]) v3636[8]) (add[32] (add[32] v3580[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v3580[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v3581[32] }
        si      = { defs={} expr=v3582[32] }
        di      = { defs={} expr=v3583[32] }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3580[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3580[32] 12[32])) }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3} expr=0x080484e4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v3581[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 3[32]) }
          value = { defs={} expr=v3636[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 2[32]) }
          value = { defs={} expr=v3634[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 1[32]) }
          value = { defs={} expr=v3632[8] }
          flags = { rdonly }
        address = { defs={0x080484e0} expr=(add[32] v3580[32] 12[32]) }
          value = { defs={} expr=v3630[8] }
          flags = { rdonly }
0x80484e4:pop    esi
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3631[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3580[32] 12[32]) v3630[8]) (add[32] v3580[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3633[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 1[32]) v3632[8]) (add[32] (add[32] v3580[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3635[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 2[32]) v3634[8]) (add[32] (add[32] v3580[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3637[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 3[32]) v3636[8]) (add[32] (add[32] v3580[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v3581[32] }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3645[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 4[32]) v3644[8]) (add[32] (add[32] v3580[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3647[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]) v3646[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3649[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]) v3648[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3651[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]) v3650[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={} expr=v3583[32] }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3580[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3580[32] 12[32])) }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3,0x080484e4} expr=0x080484e5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v3581[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3650[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3648[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3646[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v3580[32] 12[32]) 4[32]) }
          value = { defs={} expr=v3644[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 3[32]) }
          value = { defs={} expr=v3636[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 2[32]) }
          value = { defs={} expr=v3634[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 1[32]) }
          value = { defs={} expr=v3632[8] }
          flags = { rdonly }
        address = { defs={0x080484e0} expr=(add[32] v3580[32] 12[32]) }
          value = { defs={} expr=v3630[8] }
          flags = { rdonly }
0x80484e5:pop    edi
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3631[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3580[32] 12[32]) v3630[8]) (add[32] v3580[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3633[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 1[32]) v3632[8]) (add[32] (add[32] v3580[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3635[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 2[32]) v3634[8]) (add[32] (add[32] v3580[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3637[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 3[32]) v3636[8]) (add[32] (add[32] v3580[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v3581[32] }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3645[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 4[32]) v3644[8]) (add[32] (add[32] v3580[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3647[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]) v3646[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3649[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]) v3648[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3651[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]) v3650[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3659[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) v3658[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3661[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 1[32]) v3660[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3663[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 2[32]) v3662[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3665[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 3[32]) v3664[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 3[32]))))) }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3580[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3580[32] 12[32])) }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=0x080484e6[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v3581[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3664[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3662[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3660[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3658[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3650[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3648[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3646[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v3580[32] 12[32]) 4[32]) }
          value = { defs={} expr=v3644[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 3[32]) }
          value = { defs={} expr=v3636[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 2[32]) }
          value = { defs={} expr=v3634[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 1[32]) }
          value = { defs={} expr=v3632[8] }
          flags = { rdonly }
        address = { defs={0x080484e0} expr=(add[32] v3580[32] 12[32]) }
          value = { defs={} expr=v3630[8] }
          flags = { rdonly }
0x80484e6:pop    ebp
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3631[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3580[32] 12[32]) v3630[8]) (add[32] v3580[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3633[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 1[32]) v3632[8]) (add[32] (add[32] v3580[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3635[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 2[32]) v3634[8]) (add[32] (add[32] v3580[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3637[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 3[32]) v3636[8]) (add[32] (add[32] v3580[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3673[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) v3672[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3675[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) v3674[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3677[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) v3676[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3679[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) v3678[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]))))) }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3645[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 4[32]) v3644[8]) (add[32] (add[32] v3580[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3647[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]) v3646[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3649[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]) v3648[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3651[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]) v3650[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3659[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) v3658[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3661[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 1[32]) v3660[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3663[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 2[32]) v3662[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3665[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 3[32]) v3664[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 3[32]))))) }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3580[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3580[32] 12[32])) }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de,0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=0x080484e7[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v3581[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3678[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3676[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3674[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3672[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3664[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3662[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3660[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3658[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3650[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3648[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3646[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v3580[32] 12[32]) 4[32]) }
          value = { defs={} expr=v3644[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 3[32]) }
          value = { defs={} expr=v3636[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 2[32]) }
          value = { defs={} expr=v3634[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 1[32]) }
          value = { defs={} expr=v3632[8] }
          flags = { rdonly }
        address = { defs={0x080484e0} expr=(add[32] v3580[32] 12[32]) }
          value = { defs={} expr=v3630[8] }
          flags = { rdonly }
0x80484e7:ret    
    registers:
        ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3577[32] }
        dx      = { defs={0x080484d0} expr=(add[32] v3579[32] -224[32]) }
        bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3631[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3580[32] 12[32]) v3630[8]) (add[32] v3580[32] 12[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3633[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 1[32]) v3632[8]) (add[32] (add[32] v3580[32] 12[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3635[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 2[32]) v3634[8]) (add[32] (add[32] v3580[32] 12[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3637[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 3[32]) v3636[8]) (add[32] (add[32] v3580[32] 12[32]) 3[32]))))) }
        sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3673[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) v3672[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3675[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) v3674[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3677[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) v3676[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3679[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) v3678[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]))))) }
        si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3645[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3580[32] 12[32]) 4[32]) v3644[8]) (add[32] (add[32] v3580[32] 12[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3647[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]) v3646[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3649[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]) v3648[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3651[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]) v3650[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]))))) }
        di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3659[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) v3658[8]) (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3661[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 1[32]) v3660[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3663[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 2[32]) v3662[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3665[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 3[32]) v3664[8]) (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 3[32]))))) }
        es      = { defs={} expr=v3584[16] }
        cs      = { defs={} expr=v3585[16] }
        ss      = { defs={} expr=v3586[16] }
        ds      = { defs={} expr=v3587[16] }
        fs      = { defs={} expr=v3588[16] }
        gs      = { defs={} expr=v3589[16] }
        cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?1      = { defs={} expr=v3591[1] }
        pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3580[32] 12[32]))))))) }
        ?3      = { defs={} expr=v3593[1] }
        af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) }
        ?5      = { defs={} expr=v3595[1] }
        zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v3580[32] 12[32])) }
        sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v3580[32] 12[32])) }
        tf      = { defs={} expr=v3598[1] }
        if      = { defs={} expr=v3599[1] }
        df      = { defs={} expr=v3600[1] }
        of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3580[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3580[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v3602[1] }
        iopl1   = { defs={} expr=v3603[1] }
        nt      = { defs={} expr=v3604[1] }
        ?15     = { defs={} expr=v3605[1] }
        rf      = { defs={} expr=v3606[1] }
        vm      = { defs={} expr=v3607[1] }
        ac      = { defs={} expr=v3608[1] }
        vif     = { defs={} expr=v3609[1] }
        vip     = { defs={} expr=v3610[1] }
        id      = { defs={} expr=v3611[1] }
        ?22     = { defs={} expr=v3612[1] }
        ?23     = { defs={} expr=v3613[1] }
        ?24     = { defs={} expr=v3614[1] }
        ?25     = { defs={} expr=v3615[1] }
        ?26     = { defs={} expr=v3616[1] }
        ?27     = { defs={} expr=v3617[1] }
        ?28     = { defs={} expr=v3618[1] }
        ?29     = { defs={} expr=v3619[1] }
        ?30     = { defs={} expr=v3620[1] }
        ?31     = { defs={} expr=v3621[1] }
        ip      = { defs={0x080484e7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3687[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) v3686[8]) (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3689[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) v3688[8]) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3691[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) v3690[8]) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m3693[8] (add[32] (add[32] v3581[32] -16[32]) 3[32]) (extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 2[32]) (extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] v3581[32] -16[32]) 1[32]) (extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] v3581[32] -16[32]) (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32]))))) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) v3692[8]) (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]))))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3581[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x080484db} expr=(add[32] v3581[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v3579[32] -224[32]) (add[32] (invert[32] (add[32] v3579[32] -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3692[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3690[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3688[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3686[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3678[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3676[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3674[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3672[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3664[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3662[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3660[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v3658[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v3650[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v3648[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3580[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v3646[8] }
          flags = { rdonly }
        address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v3580[32] 12[32]) 4[32]) }
          value = { defs={} expr=v3644[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 3[32]) }
          value = { defs={} expr=v3636[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 2[32]) }
          value = { defs={} expr=v3634[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3580[32] 12[32]) 1[32]) }
          value = { defs={} expr=v3632[8] }
          flags = { rdonly }
        address = { defs={0x080484e0} expr=(add[32] v3580[32] 12[32]) }
          value = { defs={} expr=v3630[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048520:push   ebp
    registers:
        ax      = { defs={} expr=v3746[32] }
        cx      = { defs={} expr=v3747[32] }
        dx      = { defs={} expr=v3748[32] }
        bx      = { defs={} expr=v3749[32] }
        sp      = { defs={0x08048520} expr=(add[32] v3750[32] -4[32]) }
        bp      = { defs={} expr=v3751[32] }
        si      = { defs={} expr=v3752[32] }
        di      = { defs={} expr=v3753[32] }
        es      = { defs={} expr=v3754[16] }
        cs      = { defs={} expr=v3755[16] }
        ss      = { defs={} expr=v3756[16] }
        ds      = { defs={} expr=v3757[16] }
        fs      = { defs={} expr=v3758[16] }
        gs      = { defs={} expr=v3759[16] }
        cf      = { defs={} expr=v3760[1] }
        ?1      = { defs={} expr=v3761[1] }
        pf      = { defs={} expr=v3762[1] }
        ?3      = { defs={} expr=v3763[1] }
        af      = { defs={} expr=v3764[1] }
        ?5      = { defs={} expr=v3765[1] }
        zf      = { defs={} expr=v3766[1] }
        sf      = { defs={} expr=v3767[1] }
        tf      = { defs={} expr=v3768[1] }
        if      = { defs={} expr=v3769[1] }
        df      = { defs={} expr=v3770[1] }
        of      = { defs={} expr=v3771[1] }
        iopl0   = { defs={} expr=v3772[1] }
        iopl1   = { defs={} expr=v3773[1] }
        nt      = { defs={} expr=v3774[1] }
        ?15     = { defs={} expr=v3775[1] }
        rf      = { defs={} expr=v3776[1] }
        vm      = { defs={} expr=v3777[1] }
        ac      = { defs={} expr=v3778[1] }
        vif     = { defs={} expr=v3779[1] }
        vip     = { defs={} expr=v3780[1] }
        id      = { defs={} expr=v3781[1] }
        ?22     = { defs={} expr=v3782[1] }
        ?23     = { defs={} expr=v3783[1] }
        ?24     = { defs={} expr=v3784[1] }
        ?25     = { defs={} expr=v3785[1] }
        ?26     = { defs={} expr=v3786[1] }
        ?27     = { defs={} expr=v3787[1] }
        ?28     = { defs={} expr=v3788[1] }
        ?29     = { defs={} expr=v3789[1] }
        ?30     = { defs={} expr=v3790[1] }
        ?31     = { defs={} expr=v3791[1] }
        ip      = { defs={0x08048520} expr=0x08048521[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3751[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3750[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3751[32]) }
          flags = { }
    init mem:
0x8048521:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v3746[32] }
        cx      = { defs={} expr=v3747[32] }
        dx      = { defs={} expr=v3748[32] }
        bx      = { defs={} expr=v3749[32] }
        sp      = { defs={0x08048520} expr=(add[32] v3750[32] -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3750[32] -4[32]) }
        si      = { defs={} expr=v3752[32] }
        di      = { defs={} expr=v3753[32] }
        es      = { defs={} expr=v3754[16] }
        cs      = { defs={} expr=v3755[16] }
        ss      = { defs={} expr=v3756[16] }
        ds      = { defs={} expr=v3757[16] }
        fs      = { defs={} expr=v3758[16] }
        gs      = { defs={} expr=v3759[16] }
        cf      = { defs={} expr=v3760[1] }
        ?1      = { defs={} expr=v3761[1] }
        pf      = { defs={} expr=v3762[1] }
        ?3      = { defs={} expr=v3763[1] }
        af      = { defs={} expr=v3764[1] }
        ?5      = { defs={} expr=v3765[1] }
        zf      = { defs={} expr=v3766[1] }
        sf      = { defs={} expr=v3767[1] }
        tf      = { defs={} expr=v3768[1] }
        if      = { defs={} expr=v3769[1] }
        df      = { defs={} expr=v3770[1] }
        of      = { defs={} expr=v3771[1] }
        iopl0   = { defs={} expr=v3772[1] }
        iopl1   = { defs={} expr=v3773[1] }
        nt      = { defs={} expr=v3774[1] }
        ?15     = { defs={} expr=v3775[1] }
        rf      = { defs={} expr=v3776[1] }
        vm      = { defs={} expr=v3777[1] }
        ac      = { defs={} expr=v3778[1] }
        vif     = { defs={} expr=v3779[1] }
        vip     = { defs={} expr=v3780[1] }
        id      = { defs={} expr=v3781[1] }
        ?22     = { defs={} expr=v3782[1] }
        ?23     = { defs={} expr=v3783[1] }
        ?24     = { defs={} expr=v3784[1] }
        ?25     = { defs={} expr=v3785[1] }
        ?26     = { defs={} expr=v3786[1] }
        ?27     = { defs={} expr=v3787[1] }
        ?28     = { defs={} expr=v3788[1] }
        ?29     = { defs={} expr=v3789[1] }
        ?30     = { defs={} expr=v3790[1] }
        ?31     = { defs={} expr=v3791[1] }
        ip      = { defs={0x08048520,0x08048521} expr=0x08048523[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3751[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3750[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3751[32]) }
          flags = { }
    init mem:
0x8048523:push   edi
    registers:
        ax      = { defs={} expr=v3746[32] }
        cx      = { defs={} expr=v3747[32] }
        dx      = { defs={} expr=v3748[32] }
        bx      = { defs={} expr=v3749[32] }
        sp      = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3750[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3750[32] -4[32]) }
        si      = { defs={} expr=v3752[32] }
        di      = { defs={} expr=v3753[32] }
        es      = { defs={} expr=v3754[16] }
        cs      = { defs={} expr=v3755[16] }
        ss      = { defs={} expr=v3756[16] }
        ds      = { defs={} expr=v3757[16] }
        fs      = { defs={} expr=v3758[16] }
        gs      = { defs={} expr=v3759[16] }
        cf      = { defs={} expr=v3760[1] }
        ?1      = { defs={} expr=v3761[1] }
        pf      = { defs={} expr=v3762[1] }
        ?3      = { defs={} expr=v3763[1] }
        af      = { defs={} expr=v3764[1] }
        ?5      = { defs={} expr=v3765[1] }
        zf      = { defs={} expr=v3766[1] }
        sf      = { defs={} expr=v3767[1] }
        tf      = { defs={} expr=v3768[1] }
        if      = { defs={} expr=v3769[1] }
        df      = { defs={} expr=v3770[1] }
        of      = { defs={} expr=v3771[1] }
        iopl0   = { defs={} expr=v3772[1] }
        iopl1   = { defs={} expr=v3773[1] }
        nt      = { defs={} expr=v3774[1] }
        ?15     = { defs={} expr=v3775[1] }
        rf      = { defs={} expr=v3776[1] }
        vm      = { defs={} expr=v3777[1] }
        ac      = { defs={} expr=v3778[1] }
        vif     = { defs={} expr=v3779[1] }
        vip     = { defs={} expr=v3780[1] }
        id      = { defs={} expr=v3781[1] }
        ?22     = { defs={} expr=v3782[1] }
        ?23     = { defs={} expr=v3783[1] }
        ?24     = { defs={} expr=v3784[1] }
        ?25     = { defs={} expr=v3785[1] }
        ?26     = { defs={} expr=v3786[1] }
        ?27     = { defs={} expr=v3787[1] }
        ?28     = { defs={} expr=v3788[1] }
        ?29     = { defs={} expr=v3789[1] }
        ?30     = { defs={} expr=v3790[1] }
        ?31     = { defs={} expr=v3791[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523} expr=0x08048524[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3753[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3750[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3751[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3750[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3751[32]) }
          flags = { }
    init mem:
0x8048524:push   esi
    registers:
        ax      = { defs={} expr=v3746[32] }
        cx      = { defs={} expr=v3747[32] }
        dx      = { defs={} expr=v3748[32] }
        bx      = { defs={} expr=v3749[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3750[32] -4[32]) }
        si      = { defs={} expr=v3752[32] }
        di      = { defs={} expr=v3753[32] }
        es      = { defs={} expr=v3754[16] }
        cs      = { defs={} expr=v3755[16] }
        ss      = { defs={} expr=v3756[16] }
        ds      = { defs={} expr=v3757[16] }
        fs      = { defs={} expr=v3758[16] }
        gs      = { defs={} expr=v3759[16] }
        cf      = { defs={} expr=v3760[1] }
        ?1      = { defs={} expr=v3761[1] }
        pf      = { defs={} expr=v3762[1] }
        ?3      = { defs={} expr=v3763[1] }
        af      = { defs={} expr=v3764[1] }
        ?5      = { defs={} expr=v3765[1] }
        zf      = { defs={} expr=v3766[1] }
        sf      = { defs={} expr=v3767[1] }
        tf      = { defs={} expr=v3768[1] }
        if      = { defs={} expr=v3769[1] }
        df      = { defs={} expr=v3770[1] }
        of      = { defs={} expr=v3771[1] }
        iopl0   = { defs={} expr=v3772[1] }
        iopl1   = { defs={} expr=v3773[1] }
        nt      = { defs={} expr=v3774[1] }
        ?15     = { defs={} expr=v3775[1] }
        rf      = { defs={} expr=v3776[1] }
        vm      = { defs={} expr=v3777[1] }
        ac      = { defs={} expr=v3778[1] }
        vif     = { defs={} expr=v3779[1] }
        vip     = { defs={} expr=v3780[1] }
        id      = { defs={} expr=v3781[1] }
        ?22     = { defs={} expr=v3782[1] }
        ?23     = { defs={} expr=v3783[1] }
        ?24     = { defs={} expr=v3784[1] }
        ?25     = { defs={} expr=v3785[1] }
        ?26     = { defs={} expr=v3786[1] }
        ?27     = { defs={} expr=v3787[1] }
        ?28     = { defs={} expr=v3788[1] }
        ?29     = { defs={} expr=v3789[1] }
        ?30     = { defs={} expr=v3790[1] }
        ?31     = { defs={} expr=v3791[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524} expr=0x08048525[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3752[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3753[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3750[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3751[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3750[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3751[32]) }
          flags = { }
    init mem:
0x8048525:push   ebx
    registers:
        ax      = { defs={} expr=v3746[32] }
        cx      = { defs={} expr=v3747[32] }
        dx      = { defs={} expr=v3748[32] }
        bx      = { defs={} expr=v3749[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3750[32] -4[32]) }
        si      = { defs={} expr=v3752[32] }
        di      = { defs={} expr=v3753[32] }
        es      = { defs={} expr=v3754[16] }
        cs      = { defs={} expr=v3755[16] }
        ss      = { defs={} expr=v3756[16] }
        ds      = { defs={} expr=v3757[16] }
        fs      = { defs={} expr=v3758[16] }
        gs      = { defs={} expr=v3759[16] }
        cf      = { defs={} expr=v3760[1] }
        ?1      = { defs={} expr=v3761[1] }
        pf      = { defs={} expr=v3762[1] }
        ?3      = { defs={} expr=v3763[1] }
        af      = { defs={} expr=v3764[1] }
        ?5      = { defs={} expr=v3765[1] }
        zf      = { defs={} expr=v3766[1] }
        sf      = { defs={} expr=v3767[1] }
        tf      = { defs={} expr=v3768[1] }
        if      = { defs={} expr=v3769[1] }
        df      = { defs={} expr=v3770[1] }
        of      = { defs={} expr=v3771[1] }
        iopl0   = { defs={} expr=v3772[1] }
        iopl1   = { defs={} expr=v3773[1] }
        nt      = { defs={} expr=v3774[1] }
        ?15     = { defs={} expr=v3775[1] }
        rf      = { defs={} expr=v3776[1] }
        vm      = { defs={} expr=v3777[1] }
        ac      = { defs={} expr=v3778[1] }
        vif     = { defs={} expr=v3779[1] }
        vip     = { defs={} expr=v3780[1] }
        id      = { defs={} expr=v3781[1] }
        ?22     = { defs={} expr=v3782[1] }
        ?23     = { defs={} expr=v3783[1] }
        ?24     = { defs={} expr=v3784[1] }
        ?25     = { defs={} expr=v3785[1] }
        ?26     = { defs={} expr=v3786[1] }
        ?27     = { defs={} expr=v3787[1] }
        ?28     = { defs={} expr=v3788[1] }
        ?29     = { defs={} expr=v3789[1] }
        ?30     = { defs={} expr=v3790[1] }
        ?31     = { defs={} expr=v3791[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525} expr=0x08048526[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3749[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3752[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3753[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3750[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3751[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3750[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3751[32]) }
          flags = { }
    init mem:
0x8048526:sub    esp, 0x0c
    registers:
        ax      = { defs={} expr=v3746[32] }
        cx      = { defs={} expr=v3747[32] }
        dx      = { defs={} expr=v3748[32] }
        bx      = { defs={} expr=v3749[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3750[32] -4[32]) }
        si      = { defs={} expr=v3752[32] }
        di      = { defs={} expr=v3753[32] }
        es      = { defs={} expr=v3754[16] }
        cs      = { defs={} expr=v3755[16] }
        ss      = { defs={} expr=v3756[16] }
        ds      = { defs={} expr=v3757[16] }
        fs      = { defs={} expr=v3758[16] }
        gs      = { defs={} expr=v3759[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v3761[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v3763[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v3765[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v3768[1] }
        if      = { defs={} expr=v3769[1] }
        df      = { defs={} expr=v3770[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v3772[1] }
        iopl1   = { defs={} expr=v3773[1] }
        nt      = { defs={} expr=v3774[1] }
        ?15     = { defs={} expr=v3775[1] }
        rf      = { defs={} expr=v3776[1] }
        vm      = { defs={} expr=v3777[1] }
        ac      = { defs={} expr=v3778[1] }
        vif     = { defs={} expr=v3779[1] }
        vip     = { defs={} expr=v3780[1] }
        id      = { defs={} expr=v3781[1] }
        ?22     = { defs={} expr=v3782[1] }
        ?23     = { defs={} expr=v3783[1] }
        ?24     = { defs={} expr=v3784[1] }
        ?25     = { defs={} expr=v3785[1] }
        ?26     = { defs={} expr=v3786[1] }
        ?27     = { defs={} expr=v3787[1] }
        ?28     = { defs={} expr=v3788[1] }
        ?29     = { defs={} expr=v3789[1] }
        ?30     = { defs={} expr=v3790[1] }
        ?31     = { defs={} expr=v3791[1] }
        ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526} expr=0x08048529[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3749[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3752[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3753[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3750[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3751[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3750[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3751[32]) }
          flags = { }
    init mem:
0x8048529:call   0x0804852e<<Insn>>
    registers:
        ax      = { defs={} expr=v3746[32] }
        cx      = { defs={} expr=v3747[32] }
        dx      = { defs={} expr=v3748[32] }
        bx      = { defs={} expr=v3749[32] }
        sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
        bp      = { defs={0x08048520,0x08048521} expr=(add[32] v3750[32] -4[32]) }
        si      = { defs={} expr=v3752[32] }
        di      = { defs={} expr=v3753[32] }
        es      = { defs={} expr=v3754[16] }
        cs      = { defs={} expr=v3755[16] }
        ss      = { defs={} expr=v3756[16] }
        ds      = { defs={} expr=v3757[16] }
        fs      = { defs={} expr=v3758[16] }
        gs      = { defs={} expr=v3759[16] }
        cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?1      = { defs={} expr=v3761[1] }
        pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
        ?3      = { defs={} expr=v3763[1] }
        af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        ?5      = { defs={} expr=v3765[1] }
        zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
        tf      = { defs={} expr=v3768[1] }
        if      = { defs={} expr=v3769[1] }
        df      = { defs={} expr=v3770[1] }
        of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
        iopl0   = { defs={} expr=v3772[1] }
        iopl1   = { defs={} expr=v3773[1] }
        nt      = { defs={} expr=v3774[1] }
        ?15     = { defs={} expr=v3775[1] }
        rf      = { defs={} expr=v3776[1] }
        vm      = { defs={} expr=v3777[1] }
        ac      = { defs={} expr=v3778[1] }
        vif     = { defs={} expr=v3779[1] }
        vip     = { defs={} expr=v3780[1] }
        id      = { defs={} expr=v3781[1] }
        ?22     = { defs={} expr=v3782[1] }
        ?23     = { defs={} expr=v3783[1] }
        ?24     = { defs={} expr=v3784[1] }
        ?25     = { defs={} expr=v3785[1] }
        ?26     = { defs={} expr=v3786[1] }
        ?27     = { defs={} expr=v3787[1] }
        ?28     = { defs={} expr=v3788[1] }
        ?29     = { defs={} expr=v3789[1] }
        ?30     = { defs={} expr=v3790[1] }
        ?31     = { defs={} expr=v3791[1] }
        ip      = { defs={0x08048529} expr=0x0804852e[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
          value = { defs={} expr=46[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3749[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3749[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3752[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3752[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3750[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3753[32]) }
          flags = { }
        address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v3750[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3753[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v3751[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3750[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v3751[32]) }
          flags = { }
        address = { defs={0x08048520} expr=(add[32] v3750[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v3751[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
    registers:
        ax      = { defs={} expr=v3840[32] }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={} expr=v3842[32] }
        bx      = { defs={0x0804852e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) }
        sp      = { defs={0x0804852e} expr=(add[32] v3844[32] 4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={} expr=v3854[1] }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={} expr=v3856[1] }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={} expr=v3858[1] }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={} expr=v3860[1] }
        sf      = { defs={} expr=v3861[1] }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={} expr=v3865[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804852e} expr=0x0804852f[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
0x804852f:add    ebx, 0x0000119a
    registers:
        ax      = { defs={} expr=v3840[32] }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={} expr=v3842[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3844[32] 4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])) }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=0[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804852e,0x0804852f} expr=0x08048535[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={} expr=v3842[32] }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3844[32] 4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])) }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=0[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535} expr=0x0804853b[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3844[32] 4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) 4506[33]))))) }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]))))))) }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8])))) 4506[33]))))) }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])) }
        sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32])) }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={0x0804852e,0x0804852f} expr=0[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b} expr=0x08048541[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
0x8048541:sub    eax, edx
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])) }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3844[32] 4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=1[1] }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(zerop[1] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0x08048543[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
0x8048543:sar    eax, 0x02
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3844[32] 4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=1[1] }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={0x08048543} expr=v3898[1] }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={0x08048543} expr=v3901[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=0x08048546[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3844[32] 4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=1[1] }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={0x08048543} expr=v3898[1] }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={0x08048543} expr=v3901[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=0x08048549[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v3845[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
0x8048549:dec    eax
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3844[32] 4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=1[1] }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=1[1] }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=0[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549} expr=0x0804854a[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v3845[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
0x804854a:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3844[32] 4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=1[1] }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=0[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a} expr=0x0804854d[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v3845[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
0x804854d:je     0x0804856b<<Insn>>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) }
        sp      = { defs={0x0804852e} expr=(add[32] v3844[32] 4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=1[1] }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=0[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a,0x0804854d} expr=0x0804856b[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v3845[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
0x804856b:call   0x080485b0<_fini>
    registers:
        ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
        cx      = { defs={} expr=v3841[32] }
        dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) }
        bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) }
        sp      = { defs={0x0804852e,0x0804856b} expr=(add[32] (add[32] v3844[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v3845[32] }
        si      = { defs={} expr=v3846[32] }
        di      = { defs={} expr=v3847[32] }
        es      = { defs={} expr=v3848[16] }
        cs      = { defs={} expr=v3849[16] }
        ss      = { defs={} expr=v3850[16] }
        ds      = { defs={} expr=v3851[16] }
        fs      = { defs={} expr=v3852[16] }
        gs      = { defs={} expr=v3853[16] }
        cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?1      = { defs={} expr=v3855[1] }
        pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=1[1] }
        ?3      = { defs={} expr=v3857[1] }
        af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
        ?5      = { defs={} expr=v3859[1] }
        zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
        tf      = { defs={} expr=v3862[1] }
        if      = { defs={} expr=v3863[1] }
        df      = { defs={} expr=v3864[1] }
        of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=0[1] }
        iopl0   = { defs={} expr=v3866[1] }
        iopl1   = { defs={} expr=v3867[1] }
        nt      = { defs={} expr=v3868[1] }
        ?15     = { defs={} expr=v3869[1] }
        rf      = { defs={} expr=v3870[1] }
        vm      = { defs={} expr=v3871[1] }
        ac      = { defs={} expr=v3872[1] }
        vif     = { defs={} expr=v3873[1] }
        vip     = { defs={} expr=v3874[1] }
        id      = { defs={} expr=v3875[1] }
        ?22     = { defs={} expr=v3876[1] }
        ?23     = { defs={} expr=v3877[1] }
        ?24     = { defs={} expr=v3878[1] }
        ?25     = { defs={} expr=v3879[1] }
        ?26     = { defs={} expr=v3880[1] }
        ?27     = { defs={} expr=v3881[1] }
        ?28     = { defs={} expr=v3882[1] }
        ?29     = { defs={} expr=v3883[1] }
        ?30     = { defs={} expr=v3884[1] }
        ?31     = { defs={} expr=v3885[1] }
        ip      = { defs={0x0804856b} expr=0x080485b0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v3844[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3844[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v3844[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x0804852e,0x0804856b} expr=(add[32] (add[32] v3844[32] 4[32]) -4[32]) }
          value = { defs={} expr=112[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3845[32] -16[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
        address = { defs={0x08048546} expr=(add[32] v3845[32] -16[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3888[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3889[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3890[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3891[8]))) 4506[32]) -224[32])) 1[32])))) }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v3844[32] 3[32]) }
          value = { defs={} expr=v3891[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 2[32]) }
          value = { defs={} expr=v3890[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v3844[32] 1[32]) }
          value = { defs={} expr=v3889[8] }
          flags = { rdonly }
        address = { defs={} expr=v3844[32] }
          value = { defs={} expr=v3888[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
    registers:
        ax      = { defs={} expr=v3950[32] }
        cx      = { defs={} expr=v3951[32] }
        dx      = { defs={} expr=v3952[32] }
        bx      = { defs={} expr=v3953[32] }
        sp      = { defs={} expr=v3954[32] }
        bp      = { defs={} expr=v3955[32] }
        si      = { defs={0x0804854f} expr=(add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) }
        di      = { defs={} expr=v3957[32] }
        es      = { defs={} expr=v3958[16] }
        cs      = { defs={} expr=v3959[16] }
        ss      = { defs={} expr=v3960[16] }
        ds      = { defs={} expr=v3961[16] }
        fs      = { defs={} expr=v3962[16] }
        gs      = { defs={} expr=v3963[16] }
        cf      = { defs={} expr=v3964[1] }
        ?1      = { defs={} expr=v3965[1] }
        pf      = { defs={} expr=v3966[1] }
        ?3      = { defs={} expr=v3967[1] }
        af      = { defs={} expr=v3968[1] }
        ?5      = { defs={} expr=v3969[1] }
        zf      = { defs={} expr=v3970[1] }
        sf      = { defs={} expr=v3971[1] }
        tf      = { defs={} expr=v3972[1] }
        if      = { defs={} expr=v3973[1] }
        df      = { defs={} expr=v3974[1] }
        of      = { defs={} expr=v3975[1] }
        iopl0   = { defs={} expr=v3976[1] }
        iopl1   = { defs={} expr=v3977[1] }
        nt      = { defs={} expr=v3978[1] }
        ?15     = { defs={} expr=v3979[1] }
        rf      = { defs={} expr=v3980[1] }
        vm      = { defs={} expr=v3981[1] }
        ac      = { defs={} expr=v3982[1] }
        vif     = { defs={} expr=v3983[1] }
        vip     = { defs={} expr=v3984[1] }
        id      = { defs={} expr=v3985[1] }
        ?22     = { defs={} expr=v3986[1] }
        ?23     = { defs={} expr=v3987[1] }
        ?24     = { defs={} expr=v3988[1] }
        ?25     = { defs={} expr=v3989[1] }
        ?26     = { defs={} expr=v3990[1] }
        ?27     = { defs={} expr=v3991[1] }
        ?28     = { defs={} expr=v3992[1] }
        ?29     = { defs={} expr=v3993[1] }
        ?30     = { defs={} expr=v3994[1] }
        ?31     = { defs={} expr=v3995[1] }
        ip      = { defs={0x0804854f} expr=0x08048552[32] }
    memory:
    init mem:
0x8048552:xor    edi, edi
    registers:
        ax      = { defs={} expr=v3950[32] }
        cx      = { defs={} expr=v3951[32] }
        dx      = { defs={} expr=v3952[32] }
        bx      = { defs={} expr=v3953[32] }
        sp      = { defs={} expr=v3954[32] }
        bp      = { defs={} expr=v3955[32] }
        si      = { defs={0x0804854f} expr=(add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v3958[16] }
        cs      = { defs={} expr=v3959[16] }
        ss      = { defs={} expr=v3960[16] }
        ds      = { defs={} expr=v3961[16] }
        fs      = { defs={} expr=v3962[16] }
        gs      = { defs={} expr=v3963[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v3965[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v3967[1] }
        af      = { defs={0x08048552} expr=v3996[1] }
        ?5      = { defs={} expr=v3969[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v3972[1] }
        if      = { defs={} expr=v3973[1] }
        df      = { defs={} expr=v3974[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v3976[1] }
        iopl1   = { defs={} expr=v3977[1] }
        nt      = { defs={} expr=v3978[1] }
        ?15     = { defs={} expr=v3979[1] }
        rf      = { defs={} expr=v3980[1] }
        vm      = { defs={} expr=v3981[1] }
        ac      = { defs={} expr=v3982[1] }
        vif     = { defs={} expr=v3983[1] }
        vip     = { defs={} expr=v3984[1] }
        id      = { defs={} expr=v3985[1] }
        ?22     = { defs={} expr=v3986[1] }
        ?23     = { defs={} expr=v3987[1] }
        ?24     = { defs={} expr=v3988[1] }
        ?25     = { defs={} expr=v3989[1] }
        ?26     = { defs={} expr=v3990[1] }
        ?27     = { defs={} expr=v3991[1] }
        ?28     = { defs={} expr=v3992[1] }
        ?29     = { defs={} expr=v3993[1] }
        ?30     = { defs={} expr=v3994[1] }
        ?31     = { defs={} expr=v3995[1] }
        ip      = { defs={0x0804854f,0x08048552} expr=0x08048554[32] }
    memory:
    init mem:
0x8048554:lea    esi, [esi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3950[32] }
        cx      = { defs={} expr=v3951[32] }
        dx      = { defs={} expr=v3952[32] }
        bx      = { defs={} expr=v3953[32] }
        sp      = { defs={} expr=v3954[32] }
        bp      = { defs={} expr=v3955[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) }
        di      = { defs={0x08048552} expr=0[32] }
        es      = { defs={} expr=v3958[16] }
        cs      = { defs={} expr=v3959[16] }
        ss      = { defs={} expr=v3960[16] }
        ds      = { defs={} expr=v3961[16] }
        fs      = { defs={} expr=v3962[16] }
        gs      = { defs={} expr=v3963[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v3965[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v3967[1] }
        af      = { defs={0x08048552} expr=v3996[1] }
        ?5      = { defs={} expr=v3969[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v3972[1] }
        if      = { defs={} expr=v3973[1] }
        df      = { defs={} expr=v3974[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v3976[1] }
        iopl1   = { defs={} expr=v3977[1] }
        nt      = { defs={} expr=v3978[1] }
        ?15     = { defs={} expr=v3979[1] }
        rf      = { defs={} expr=v3980[1] }
        vm      = { defs={} expr=v3981[1] }
        ac      = { defs={} expr=v3982[1] }
        vif     = { defs={} expr=v3983[1] }
        vip     = { defs={} expr=v3984[1] }
        id      = { defs={} expr=v3985[1] }
        ?22     = { defs={} expr=v3986[1] }
        ?23     = { defs={} expr=v3987[1] }
        ?24     = { defs={} expr=v3988[1] }
        ?25     = { defs={} expr=v3989[1] }
        ?26     = { defs={} expr=v3990[1] }
        ?27     = { defs={} expr=v3991[1] }
        ?28     = { defs={} expr=v3992[1] }
        ?29     = { defs={} expr=v3993[1] }
        ?30     = { defs={} expr=v3994[1] }
        ?31     = { defs={} expr=v3995[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554} expr=0x0804855a[32] }
    memory:
    init mem:
0x804855a:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={} expr=v3950[32] }
        cx      = { defs={} expr=v3951[32] }
        dx      = { defs={} expr=v3952[32] }
        bx      = { defs={} expr=v3953[32] }
        sp      = { defs={} expr=v3954[32] }
        bp      = { defs={} expr=v3955[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v3958[16] }
        cs      = { defs={} expr=v3959[16] }
        ss      = { defs={} expr=v3960[16] }
        ds      = { defs={} expr=v3961[16] }
        fs      = { defs={} expr=v3962[16] }
        gs      = { defs={} expr=v3963[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v3965[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v3967[1] }
        af      = { defs={0x08048552} expr=v3996[1] }
        ?5      = { defs={} expr=v3969[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v3972[1] }
        if      = { defs={} expr=v3973[1] }
        df      = { defs={} expr=v3974[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v3976[1] }
        iopl1   = { defs={} expr=v3977[1] }
        nt      = { defs={} expr=v3978[1] }
        ?15     = { defs={} expr=v3979[1] }
        rf      = { defs={} expr=v3980[1] }
        vm      = { defs={} expr=v3981[1] }
        ac      = { defs={} expr=v3982[1] }
        vif     = { defs={} expr=v3983[1] }
        vip     = { defs={} expr=v3984[1] }
        id      = { defs={} expr=v3985[1] }
        ?22     = { defs={} expr=v3986[1] }
        ?23     = { defs={} expr=v3987[1] }
        ?24     = { defs={} expr=v3988[1] }
        ?25     = { defs={} expr=v3989[1] }
        ?26     = { defs={} expr=v3990[1] }
        ?27     = { defs={} expr=v3991[1] }
        ?28     = { defs={} expr=v3992[1] }
        ?29     = { defs={} expr=v3993[1] }
        ?30     = { defs={} expr=v3994[1] }
        ?31     = { defs={} expr=v3995[1] }
        ip      = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a} expr=0x08048560[32] }
    memory:
    init mem:
0x8048560:call   DWORD PTR ds:[esi]
    registers:
        ax      = { defs={} expr=v3950[32] }
        cx      = { defs={} expr=v3951[32] }
        dx      = { defs={} expr=v3952[32] }
        bx      = { defs={} expr=v3953[32] }
        sp      = { defs={0x08048560} expr=(add[32] v3954[32] -4[32]) }
        bp      = { defs={} expr=v3955[32] }
        si      = { defs={0x0804854f,0x08048554} expr=(add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) }
        di      = { defs={0x08048552,0x0804855a} expr=0[32] }
        es      = { defs={} expr=v3958[16] }
        cs      = { defs={} expr=v3959[16] }
        ss      = { defs={} expr=v3960[16] }
        ds      = { defs={} expr=v3961[16] }
        fs      = { defs={} expr=v3962[16] }
        gs      = { defs={} expr=v3963[16] }
        cf      = { defs={0x08048552} expr=0[1] }
        ?1      = { defs={} expr=v3965[1] }
        pf      = { defs={0x08048552} expr=1[1] }
        ?3      = { defs={} expr=v3967[1] }
        af      = { defs={0x08048552} expr=v3996[1] }
        ?5      = { defs={} expr=v3969[1] }
        zf      = { defs={0x08048552} expr=1[1] }
        sf      = { defs={0x08048552} expr=0[1] }
        tf      = { defs={} expr=v3972[1] }
        if      = { defs={} expr=v3973[1] }
        df      = { defs={} expr=v3974[1] }
        of      = { defs={0x08048552} expr=0[1] }
        iopl0   = { defs={} expr=v3976[1] }
        iopl1   = { defs={} expr=v3977[1] }
        nt      = { defs={} expr=v3978[1] }
        ?15     = { defs={} expr=v3979[1] }
        rf      = { defs={} expr=v3980[1] }
        vm      = { defs={} expr=v3981[1] }
        ac      = { defs={} expr=v3982[1] }
        vif     = { defs={} expr=v3983[1] }
        vip     = { defs={} expr=v3984[1] }
        id      = { defs={} expr=v3985[1] }
        ?22     = { defs={} expr=v3986[1] }
        ?23     = { defs={} expr=v3987[1] }
        ?24     = { defs={} expr=v3988[1] }
        ?25     = { defs={} expr=v3989[1] }
        ?26     = { defs={} expr=v3990[1] }
        ?27     = { defs={} expr=v3991[1] }
        ?28     = { defs={} expr=v3992[1] }
        ?29     = { defs={} expr=v3993[1] }
        ?30     = { defs={} expr=v3994[1] }
        ?31     = { defs={} expr=v3995[1] }
        ip      = { defs={0x08048560} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4000[8] (add[32] (add[32] v3954[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v3954[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v3954[32] -4[32]) 1[32]) -123[8]) (add[32] v3954[32] -4[32]) 98[8]) (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) v3999[8]) (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4002[8] (add[32] (add[32] v3954[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v3954[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v3954[32] -4[32]) 1[32]) -123[8]) (add[32] v3954[32] -4[32]) 98[8]) (add[32] (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) 1[32]) v4001[8]) (add[32] (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4004[8] (add[32] (add[32] v3954[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v3954[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v3954[32] -4[32]) 1[32]) -123[8]) (add[32] v3954[32] -4[32]) 98[8]) (add[32] (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) 2[32]) v4003[8]) (add[32] (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4006[8] (add[32] (add[32] v3954[32] -4[32]) 3[32]) 8[8]) (add[32] (add[32] v3954[32] -4[32]) 2[32]) 4[8]) (add[32] (add[32] v3954[32] -4[32]) 1[32]) -123[8]) (add[32] v3954[32] -4[32]) 98[8]) (add[32] (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) 3[32]) v4005[8]) (add[32] (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) 3[32]))))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] v3954[32] -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3954[32] -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v3954[32] -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048560} expr=(add[32] v3954[32] -4[32]) }
          value = { defs={} expr=98[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) 3[32]) }
          value = { defs={} expr=v4005[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) 2[32]) }
          value = { defs={} expr=v4003[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) 1[32]) }
          value = { defs={} expr=v4001[8] }
          flags = { rdonly }
        address = { defs={0x0804854f,0x08048554} expr=(add[32] v3952[32] (extract[32] 0[32] 32[32] (umul[40] v3950[32] 4[8]))) }
          value = { defs={} expr=v3999[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
    registers:
        ax      = { defs={} expr=v4059[32] }
        cx      = { defs={} expr=v4060[32] }
        dx      = { defs={} expr=v4061[32] }
        bx      = { defs={} expr=v4062[32] }
        sp      = { defs={} expr=v4063[32] }
        bp      = { defs={} expr=v4064[32] }
        si      = { defs={} expr=v4065[32] }
        di      = { defs={0x08048562} expr=(add[32] v4066[32] 1[32]) }
        es      = { defs={} expr=v4067[16] }
        cs      = { defs={} expr=v4068[16] }
        ss      = { defs={} expr=v4069[16] }
        ds      = { defs={} expr=v4070[16] }
        fs      = { defs={} expr=v4071[16] }
        gs      = { defs={} expr=v4072[16] }
        cf      = { defs={} expr=v4073[1] }
        ?1      = { defs={} expr=v4074[1] }
        pf      = { defs={0x08048562} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4066[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4066[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4066[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4066[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4066[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4066[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4066[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4066[32] 1[32]))))))) }
        ?3      = { defs={} expr=v4076[1] }
        af      = { defs={0x08048562} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4066[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v4066[32]) 1[33]))))) }
        ?5      = { defs={} expr=v4078[1] }
        zf      = { defs={0x08048562} expr=(zerop[1] (add[32] v4066[32] 1[32])) }
        sf      = { defs={0x08048562} expr=(extract[1] 31[32] 32[32] (add[32] v4066[32] 1[32])) }
        tf      = { defs={} expr=v4081[1] }
        if      = { defs={} expr=v4082[1] }
        df      = { defs={} expr=v4083[1] }
        of      = { defs={0x08048562} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4066[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v4066[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4066[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v4066[32]) 1[33])))))) }
        iopl0   = { defs={} expr=v4085[1] }
        iopl1   = { defs={} expr=v4086[1] }
        nt      = { defs={} expr=v4087[1] }
        ?15     = { defs={} expr=v4088[1] }
        rf      = { defs={} expr=v4089[1] }
        vm      = { defs={} expr=v4090[1] }
        ac      = { defs={} expr=v4091[1] }
        vif     = { defs={} expr=v4092[1] }
        vip     = { defs={} expr=v4093[1] }
        id      = { defs={} expr=v4094[1] }
        ?22     = { defs={} expr=v4095[1] }
        ?23     = { defs={} expr=v4096[1] }
        ?24     = { defs={} expr=v4097[1] }
        ?25     = { defs={} expr=v4098[1] }
        ?26     = { defs={} expr=v4099[1] }
        ?27     = { defs={} expr=v4100[1] }
        ?28     = { defs={} expr=v4101[1] }
        ?29     = { defs={} expr=v4102[1] }
        ?30     = { defs={} expr=v4103[1] }
        ?31     = { defs={} expr=v4104[1] }
        ip      = { defs={0x08048562} expr=0x08048563[32] }
    memory:
    init mem:
0x8048563:sub    esi, 0x04
    registers:
        ax      = { defs={} expr=v4059[32] }
        cx      = { defs={} expr=v4060[32] }
        dx      = { defs={} expr=v4061[32] }
        bx      = { defs={} expr=v4062[32] }
        sp      = { defs={} expr=v4063[32] }
        bp      = { defs={} expr=v4064[32] }
        si      = { defs={0x08048563} expr=(add[32] v4065[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v4066[32] 1[32]) }
        es      = { defs={} expr=v4067[16] }
        cs      = { defs={} expr=v4068[16] }
        ss      = { defs={} expr=v4069[16] }
        ds      = { defs={} expr=v4070[16] }
        fs      = { defs={} expr=v4071[16] }
        gs      = { defs={} expr=v4072[16] }
        cf      = { defs={0x08048563} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4065[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4065[32]) 4294967292[33])))))) }
        ?1      = { defs={} expr=v4074[1] }
        pf      = { defs={0x08048563} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4065[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4065[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4065[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4065[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4065[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4065[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4065[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4065[32] -4[32]))))))) }
        ?3      = { defs={} expr=v4076[1] }
        af      = { defs={0x08048563} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4065[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4065[32]) 4294967292[33])))))) }
        ?5      = { defs={} expr=v4078[1] }
        zf      = { defs={0x08048563} expr=(zerop[1] (add[32] v4065[32] -4[32])) }
        sf      = { defs={0x08048563} expr=(extract[1] 31[32] 32[32] (add[32] v4065[32] -4[32])) }
        tf      = { defs={} expr=v4081[1] }
        if      = { defs={} expr=v4082[1] }
        df      = { defs={} expr=v4083[1] }
        of      = { defs={0x08048563} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4065[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4065[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4065[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v4065[32]) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v4085[1] }
        iopl1   = { defs={} expr=v4086[1] }
        nt      = { defs={} expr=v4087[1] }
        ?15     = { defs={} expr=v4088[1] }
        rf      = { defs={} expr=v4089[1] }
        vm      = { defs={} expr=v4090[1] }
        ac      = { defs={} expr=v4091[1] }
        vif     = { defs={} expr=v4092[1] }
        vip     = { defs={} expr=v4093[1] }
        id      = { defs={} expr=v4094[1] }
        ?22     = { defs={} expr=v4095[1] }
        ?23     = { defs={} expr=v4096[1] }
        ?24     = { defs={} expr=v4097[1] }
        ?25     = { defs={} expr=v4098[1] }
        ?26     = { defs={} expr=v4099[1] }
        ?27     = { defs={} expr=v4100[1] }
        ?28     = { defs={} expr=v4101[1] }
        ?29     = { defs={} expr=v4102[1] }
        ?30     = { defs={} expr=v4103[1] }
        ?31     = { defs={} expr=v4104[1] }
        ip      = { defs={0x08048562,0x08048563} expr=0x08048566[32] }
    memory:
    init mem:
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
    registers:
        ax      = { defs={} expr=v4059[32] }
        cx      = { defs={} expr=v4060[32] }
        dx      = { defs={} expr=v4061[32] }
        bx      = { defs={} expr=v4062[32] }
        sp      = { defs={} expr=v4063[32] }
        bp      = { defs={} expr=v4064[32] }
        si      = { defs={0x08048563} expr=(add[32] v4065[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v4066[32] 1[32]) }
        es      = { defs={} expr=v4067[16] }
        cs      = { defs={} expr=v4068[16] }
        ss      = { defs={} expr=v4069[16] }
        ds      = { defs={} expr=v4070[16] }
        fs      = { defs={} expr=v4071[16] }
        gs      = { defs={} expr=v4072[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v4074[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v4076[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v4078[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v4081[1] }
        if      = { defs={} expr=v4082[1] }
        df      = { defs={} expr=v4083[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v4085[1] }
        iopl1   = { defs={} expr=v4086[1] }
        nt      = { defs={} expr=v4087[1] }
        ?15     = { defs={} expr=v4088[1] }
        rf      = { defs={} expr=v4089[1] }
        vm      = { defs={} expr=v4090[1] }
        ac      = { defs={} expr=v4091[1] }
        vif     = { defs={} expr=v4092[1] }
        vip     = { defs={} expr=v4093[1] }
        id      = { defs={} expr=v4094[1] }
        ?22     = { defs={} expr=v4095[1] }
        ?23     = { defs={} expr=v4096[1] }
        ?24     = { defs={} expr=v4097[1] }
        ?25     = { defs={} expr=v4098[1] }
        ?26     = { defs={} expr=v4099[1] }
        ?27     = { defs={} expr=v4100[1] }
        ?28     = { defs={} expr=v4101[1] }
        ?29     = { defs={} expr=v4102[1] }
        ?30     = { defs={} expr=v4103[1] }
        ?31     = { defs={} expr=v4104[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566} expr=0x08048569[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4064[32] -16[32]) 3[32]) }
          value = { defs={} expr=v4110[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4064[32] -16[32]) 2[32]) }
          value = { defs={} expr=v4109[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4064[32] -16[32]) 1[32]) }
          value = { defs={} expr=v4108[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v4064[32] -16[32]) }
          value = { defs={} expr=v4107[8] }
          flags = { rdonly }
0x8048569:jne    0x08048560<<Insn>>
    registers:
        ax      = { defs={} expr=v4059[32] }
        cx      = { defs={} expr=v4060[32] }
        dx      = { defs={} expr=v4061[32] }
        bx      = { defs={} expr=v4062[32] }
        sp      = { defs={} expr=v4063[32] }
        bp      = { defs={} expr=v4064[32] }
        si      = { defs={0x08048563} expr=(add[32] v4065[32] -4[32]) }
        di      = { defs={0x08048562} expr=(add[32] v4066[32] 1[32]) }
        es      = { defs={} expr=v4067[16] }
        cs      = { defs={} expr=v4068[16] }
        ss      = { defs={} expr=v4069[16] }
        ds      = { defs={} expr=v4070[16] }
        fs      = { defs={} expr=v4071[16] }
        gs      = { defs={} expr=v4072[16] }
        cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) 1[33]))))))) }
        ?1      = { defs={} expr=v4074[1] }
        pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))))))) }
        ?3      = { defs={} expr=v4076[1] }
        af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) 1[33]))))))) }
        ?5      = { defs={} expr=v4078[1] }
        zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32]))) }
        sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32]))) }
        tf      = { defs={} expr=v4081[1] }
        if      = { defs={} expr=v4082[1] }
        df      = { defs={} expr=v4083[1] }
        of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v4066[32] 1[32]))) 1[33]))))))) }
        iopl0   = { defs={} expr=v4085[1] }
        iopl1   = { defs={} expr=v4086[1] }
        nt      = { defs={} expr=v4087[1] }
        ?15     = { defs={} expr=v4088[1] }
        rf      = { defs={} expr=v4089[1] }
        vm      = { defs={} expr=v4090[1] }
        ac      = { defs={} expr=v4091[1] }
        vif     = { defs={} expr=v4092[1] }
        vip     = { defs={} expr=v4093[1] }
        id      = { defs={} expr=v4094[1] }
        ?22     = { defs={} expr=v4095[1] }
        ?23     = { defs={} expr=v4096[1] }
        ?24     = { defs={} expr=v4097[1] }
        ?25     = { defs={} expr=v4098[1] }
        ?26     = { defs={} expr=v4099[1] }
        ?27     = { defs={} expr=v4100[1] }
        ?28     = { defs={} expr=v4101[1] }
        ?29     = { defs={} expr=v4102[1] }
        ?30     = { defs={} expr=v4103[1] }
        ?31     = { defs={} expr=v4104[1] }
        ip      = { defs={0x08048562,0x08048563,0x08048566,0x08048569} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4107[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4108[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4109[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4110[8]))) (add[32] (invert[32] (add[32] v4066[32] 1[32])) 1[32])))) 0x08048560[32] 0x0804856b[32]) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4064[32] -16[32]) 3[32]) }
          value = { defs={} expr=v4110[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4064[32] -16[32]) 2[32]) }
          value = { defs={} expr=v4109[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4064[32] -16[32]) 1[32]) }
          value = { defs={} expr=v4108[8] }
          flags = { rdonly }
        address = { defs={0x08048566} expr=(add[32] v4064[32] -16[32]) }
          value = { defs={} expr=v4107[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
    registers:
        ax      = { defs={} expr=v4163[32] }
        cx      = { defs={} expr=v4164[32] }
        dx      = { defs={} expr=v4165[32] }
        bx      = { defs={} expr=v4166[32] }
        sp      = { defs={0x08048570} expr=(add[32] v4167[32] 12[32]) }
        bp      = { defs={} expr=v4168[32] }
        si      = { defs={} expr=v4169[32] }
        di      = { defs={} expr=v4170[32] }
        es      = { defs={} expr=v4171[16] }
        cs      = { defs={} expr=v4172[16] }
        ss      = { defs={} expr=v4173[16] }
        ds      = { defs={} expr=v4174[16] }
        fs      = { defs={} expr=v4175[16] }
        gs      = { defs={} expr=v4176[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4178[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4180[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4182[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4167[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4167[32] 12[32])) }
        tf      = { defs={} expr=v4185[1] }
        if      = { defs={} expr=v4186[1] }
        df      = { defs={} expr=v4187[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4189[1] }
        iopl1   = { defs={} expr=v4190[1] }
        nt      = { defs={} expr=v4191[1] }
        ?15     = { defs={} expr=v4192[1] }
        rf      = { defs={} expr=v4193[1] }
        vm      = { defs={} expr=v4194[1] }
        ac      = { defs={} expr=v4195[1] }
        vif     = { defs={} expr=v4196[1] }
        vip     = { defs={} expr=v4197[1] }
        id      = { defs={} expr=v4198[1] }
        ?22     = { defs={} expr=v4199[1] }
        ?23     = { defs={} expr=v4200[1] }
        ?24     = { defs={} expr=v4201[1] }
        ?25     = { defs={} expr=v4202[1] }
        ?26     = { defs={} expr=v4203[1] }
        ?27     = { defs={} expr=v4204[1] }
        ?28     = { defs={} expr=v4205[1] }
        ?29     = { defs={} expr=v4206[1] }
        ?30     = { defs={} expr=v4207[1] }
        ?31     = { defs={} expr=v4208[1] }
        ip      = { defs={0x08048570} expr=0x08048573[32] }
    memory:
    init mem:
0x8048573:pop    ebx
    registers:
        ax      = { defs={} expr=v4163[32] }
        cx      = { defs={} expr=v4164[32] }
        dx      = { defs={} expr=v4165[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4211[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4212[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4213[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4214[8]))) }
        sp      = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v4167[32] 12[32]) 4[32]) }
        bp      = { defs={} expr=v4168[32] }
        si      = { defs={} expr=v4169[32] }
        di      = { defs={} expr=v4170[32] }
        es      = { defs={} expr=v4171[16] }
        cs      = { defs={} expr=v4172[16] }
        ss      = { defs={} expr=v4173[16] }
        ds      = { defs={} expr=v4174[16] }
        fs      = { defs={} expr=v4175[16] }
        gs      = { defs={} expr=v4176[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4178[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4180[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4182[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4167[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4167[32] 12[32])) }
        tf      = { defs={} expr=v4185[1] }
        if      = { defs={} expr=v4186[1] }
        df      = { defs={} expr=v4187[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4189[1] }
        iopl1   = { defs={} expr=v4190[1] }
        nt      = { defs={} expr=v4191[1] }
        ?15     = { defs={} expr=v4192[1] }
        rf      = { defs={} expr=v4193[1] }
        vm      = { defs={} expr=v4194[1] }
        ac      = { defs={} expr=v4195[1] }
        vif     = { defs={} expr=v4196[1] }
        vip     = { defs={} expr=v4197[1] }
        id      = { defs={} expr=v4198[1] }
        ?22     = { defs={} expr=v4199[1] }
        ?23     = { defs={} expr=v4200[1] }
        ?24     = { defs={} expr=v4201[1] }
        ?25     = { defs={} expr=v4202[1] }
        ?26     = { defs={} expr=v4203[1] }
        ?27     = { defs={} expr=v4204[1] }
        ?28     = { defs={} expr=v4205[1] }
        ?29     = { defs={} expr=v4206[1] }
        ?30     = { defs={} expr=v4207[1] }
        ?31     = { defs={} expr=v4208[1] }
        ip      = { defs={0x08048570,0x08048573} expr=0x08048574[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 3[32]) }
          value = { defs={} expr=v4214[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 2[32]) }
          value = { defs={} expr=v4213[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 1[32]) }
          value = { defs={} expr=v4212[8] }
          flags = { rdonly }
        address = { defs={0x08048570} expr=(add[32] v4167[32] 12[32]) }
          value = { defs={} expr=v4211[8] }
          flags = { rdonly }
0x8048574:pop    esi
    registers:
        ax      = { defs={} expr=v4163[32] }
        cx      = { defs={} expr=v4164[32] }
        dx      = { defs={} expr=v4165[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4211[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4212[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4213[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4214[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v4168[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4221[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4222[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4223[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4224[8]))) }
        di      = { defs={} expr=v4170[32] }
        es      = { defs={} expr=v4171[16] }
        cs      = { defs={} expr=v4172[16] }
        ss      = { defs={} expr=v4173[16] }
        ds      = { defs={} expr=v4174[16] }
        fs      = { defs={} expr=v4175[16] }
        gs      = { defs={} expr=v4176[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4178[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4180[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4182[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4167[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4167[32] 12[32])) }
        tf      = { defs={} expr=v4185[1] }
        if      = { defs={} expr=v4186[1] }
        df      = { defs={} expr=v4187[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4189[1] }
        iopl1   = { defs={} expr=v4190[1] }
        nt      = { defs={} expr=v4191[1] }
        ?15     = { defs={} expr=v4192[1] }
        rf      = { defs={} expr=v4193[1] }
        vm      = { defs={} expr=v4194[1] }
        ac      = { defs={} expr=v4195[1] }
        vif     = { defs={} expr=v4196[1] }
        vip     = { defs={} expr=v4197[1] }
        id      = { defs={} expr=v4198[1] }
        ?22     = { defs={} expr=v4199[1] }
        ?23     = { defs={} expr=v4200[1] }
        ?24     = { defs={} expr=v4201[1] }
        ?25     = { defs={} expr=v4202[1] }
        ?26     = { defs={} expr=v4203[1] }
        ?27     = { defs={} expr=v4204[1] }
        ?28     = { defs={} expr=v4205[1] }
        ?29     = { defs={} expr=v4206[1] }
        ?30     = { defs={} expr=v4207[1] }
        ?31     = { defs={} expr=v4208[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574} expr=0x08048575[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4224[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4223[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4222[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v4167[32] 12[32]) 4[32]) }
          value = { defs={} expr=v4221[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 3[32]) }
          value = { defs={} expr=v4214[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 2[32]) }
          value = { defs={} expr=v4213[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 1[32]) }
          value = { defs={} expr=v4212[8] }
          flags = { rdonly }
        address = { defs={0x08048570} expr=(add[32] v4167[32] 12[32]) }
          value = { defs={} expr=v4211[8] }
          flags = { rdonly }
0x8048575:pop    edi
    registers:
        ax      = { defs={} expr=v4163[32] }
        cx      = { defs={} expr=v4164[32] }
        dx      = { defs={} expr=v4165[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4211[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4212[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4213[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4214[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={} expr=v4168[32] }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4221[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4222[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4223[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4224[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4231[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4232[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4233[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4234[8]))) }
        es      = { defs={} expr=v4171[16] }
        cs      = { defs={} expr=v4172[16] }
        ss      = { defs={} expr=v4173[16] }
        ds      = { defs={} expr=v4174[16] }
        fs      = { defs={} expr=v4175[16] }
        gs      = { defs={} expr=v4176[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4178[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4180[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4182[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4167[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4167[32] 12[32])) }
        tf      = { defs={} expr=v4185[1] }
        if      = { defs={} expr=v4186[1] }
        df      = { defs={} expr=v4187[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4189[1] }
        iopl1   = { defs={} expr=v4190[1] }
        nt      = { defs={} expr=v4191[1] }
        ?15     = { defs={} expr=v4192[1] }
        rf      = { defs={} expr=v4193[1] }
        vm      = { defs={} expr=v4194[1] }
        ac      = { defs={} expr=v4195[1] }
        vif     = { defs={} expr=v4196[1] }
        vip     = { defs={} expr=v4197[1] }
        id      = { defs={} expr=v4198[1] }
        ?22     = { defs={} expr=v4199[1] }
        ?23     = { defs={} expr=v4200[1] }
        ?24     = { defs={} expr=v4201[1] }
        ?25     = { defs={} expr=v4202[1] }
        ?26     = { defs={} expr=v4203[1] }
        ?27     = { defs={} expr=v4204[1] }
        ?28     = { defs={} expr=v4205[1] }
        ?29     = { defs={} expr=v4206[1] }
        ?30     = { defs={} expr=v4207[1] }
        ?31     = { defs={} expr=v4208[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=0x08048576[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4234[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4233[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4232[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4231[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4224[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4223[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4222[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v4167[32] 12[32]) 4[32]) }
          value = { defs={} expr=v4221[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 3[32]) }
          value = { defs={} expr=v4214[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 2[32]) }
          value = { defs={} expr=v4213[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 1[32]) }
          value = { defs={} expr=v4212[8] }
          flags = { rdonly }
        address = { defs={0x08048570} expr=(add[32] v4167[32] 12[32]) }
          value = { defs={} expr=v4211[8] }
          flags = { rdonly }
0x8048576:pop    ebp
    registers:
        ax      = { defs={} expr=v4163[32] }
        cx      = { defs={} expr=v4164[32] }
        dx      = { defs={} expr=v4165[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4211[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4212[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4213[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4214[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4241[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4242[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4243[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4244[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4221[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4222[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4223[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4224[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4231[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4232[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4233[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4234[8]))) }
        es      = { defs={} expr=v4171[16] }
        cs      = { defs={} expr=v4172[16] }
        ss      = { defs={} expr=v4173[16] }
        ds      = { defs={} expr=v4174[16] }
        fs      = { defs={} expr=v4175[16] }
        gs      = { defs={} expr=v4176[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4178[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4180[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4182[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4167[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4167[32] 12[32])) }
        tf      = { defs={} expr=v4185[1] }
        if      = { defs={} expr=v4186[1] }
        df      = { defs={} expr=v4187[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4189[1] }
        iopl1   = { defs={} expr=v4190[1] }
        nt      = { defs={} expr=v4191[1] }
        ?15     = { defs={} expr=v4192[1] }
        rf      = { defs={} expr=v4193[1] }
        vm      = { defs={} expr=v4194[1] }
        ac      = { defs={} expr=v4195[1] }
        vif     = { defs={} expr=v4196[1] }
        vip     = { defs={} expr=v4197[1] }
        id      = { defs={} expr=v4198[1] }
        ?22     = { defs={} expr=v4199[1] }
        ?23     = { defs={} expr=v4200[1] }
        ?24     = { defs={} expr=v4201[1] }
        ?25     = { defs={} expr=v4202[1] }
        ?26     = { defs={} expr=v4203[1] }
        ?27     = { defs={} expr=v4204[1] }
        ?28     = { defs={} expr=v4205[1] }
        ?29     = { defs={} expr=v4206[1] }
        ?30     = { defs={} expr=v4207[1] }
        ?31     = { defs={} expr=v4208[1] }
        ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=0x08048577[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4244[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4243[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4242[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4241[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4234[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4233[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4232[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4231[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4224[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4223[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4222[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v4167[32] 12[32]) 4[32]) }
          value = { defs={} expr=v4221[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 3[32]) }
          value = { defs={} expr=v4214[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 2[32]) }
          value = { defs={} expr=v4213[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 1[32]) }
          value = { defs={} expr=v4212[8] }
          flags = { rdonly }
        address = { defs={0x08048570} expr=(add[32] v4167[32] 12[32]) }
          value = { defs={} expr=v4211[8] }
          flags = { rdonly }
0x8048577:ret    
    registers:
        ax      = { defs={} expr=v4163[32] }
        cx      = { defs={} expr=v4164[32] }
        dx      = { defs={} expr=v4165[32] }
        bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4211[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4212[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4213[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4214[8]))) }
        sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4241[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4242[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4243[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4244[8]))) }
        si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4221[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4222[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4223[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4224[8]))) }
        di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4231[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4232[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4233[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4234[8]))) }
        es      = { defs={} expr=v4171[16] }
        cs      = { defs={} expr=v4172[16] }
        ss      = { defs={} expr=v4173[16] }
        ds      = { defs={} expr=v4174[16] }
        fs      = { defs={} expr=v4175[16] }
        gs      = { defs={} expr=v4176[16] }
        cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?1      = { defs={} expr=v4178[1] }
        pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v4167[32] 12[32]))))))) }
        ?3      = { defs={} expr=v4180[1] }
        af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) }
        ?5      = { defs={} expr=v4182[1] }
        zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v4167[32] 12[32])) }
        sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v4167[32] 12[32])) }
        tf      = { defs={} expr=v4185[1] }
        if      = { defs={} expr=v4186[1] }
        df      = { defs={} expr=v4187[1] }
        of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v4167[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v4167[32]) 12[33])))))) }
        iopl0   = { defs={} expr=v4189[1] }
        iopl1   = { defs={} expr=v4190[1] }
        nt      = { defs={} expr=v4191[1] }
        ?15     = { defs={} expr=v4192[1] }
        rf      = { defs={} expr=v4193[1] }
        vm      = { defs={} expr=v4194[1] }
        ac      = { defs={} expr=v4195[1] }
        vif     = { defs={} expr=v4196[1] }
        vip     = { defs={} expr=v4197[1] }
        id      = { defs={} expr=v4198[1] }
        ?22     = { defs={} expr=v4199[1] }
        ?23     = { defs={} expr=v4200[1] }
        ?24     = { defs={} expr=v4201[1] }
        ?25     = { defs={} expr=v4202[1] }
        ?26     = { defs={} expr=v4203[1] }
        ?27     = { defs={} expr=v4204[1] }
        ?28     = { defs={} expr=v4205[1] }
        ?29     = { defs={} expr=v4206[1] }
        ?30     = { defs={} expr=v4207[1] }
        ?31     = { defs={} expr=v4208[1] }
        ip      = { defs={0x08048577} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4251[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4252[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4253[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4254[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4254[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4253[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4252[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4251[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4244[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4243[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4242[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4241[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4234[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4233[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4232[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4231[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4224[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4223[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4167[32] 12[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4222[8] }
          flags = { rdonly }
        address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v4167[32] 12[32]) 4[32]) }
          value = { defs={} expr=v4221[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 3[32]) }
          value = { defs={} expr=v4214[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 2[32]) }
          value = { defs={} expr=v4213[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4167[32] 12[32]) 1[32]) }
          value = { defs={} expr=v4212[8] }
          flags = { rdonly }
        address = { defs={0x08048570} expr=(add[32] v4167[32] 12[32]) }
          value = { defs={} expr=v4211[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048580:push   ebp
    registers:
        ax      = { defs={} expr=v4307[32] }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={} expr=v4310[32] }
        sp      = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
        bp      = { defs={} expr=v4312[32] }
        si      = { defs={} expr=v4313[32] }
        di      = { defs={} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={} expr=v4321[1] }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={} expr=v4323[1] }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={} expr=v4325[1] }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={} expr=v4327[1] }
        sf      = { defs={} expr=v4328[1] }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={} expr=v4332[1] }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580} expr=0x08048581[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
0x8048581:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4307[32] }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={} expr=v4310[32] }
        sp      = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={} expr=v4313[32] }
        di      = { defs={} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={} expr=v4321[1] }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={} expr=v4323[1] }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={} expr=v4325[1] }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={} expr=v4327[1] }
        sf      = { defs={} expr=v4328[1] }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={} expr=v4332[1] }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580,0x08048581} expr=0x08048583[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
0x8048583:push   ebx
    registers:
        ax      = { defs={} expr=v4307[32] }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={} expr=v4310[32] }
        sp      = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={} expr=v4313[32] }
        di      = { defs={} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={} expr=v4321[1] }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={} expr=v4323[1] }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={} expr=v4325[1] }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={} expr=v4327[1] }
        sf      = { defs={} expr=v4328[1] }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={} expr=v4332[1] }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583} expr=0x08048584[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4310[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
0x8048584:sub    esp, 0x04
    registers:
        ax      = { defs={} expr=v4307[32] }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={} expr=v4310[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={} expr=v4313[32] }
        di      = { defs={} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584} expr=0x08048587[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4310[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
0x8048587:mov    ebx, 0x080495e8<.ctors>
    registers:
        ax      = { defs={} expr=v4307[32] }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={} expr=v4313[32] }
        di      = { defs={} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587} expr=0x0804858c[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4310[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={} expr=v4313[32] }
        di      = { defs={} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]))))))) }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33])))))) }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])) }
        sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32])) }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v4311[32] -4[32]) -4[32])) 4294967292[33])))))) }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c} expr=0x08048591[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4310[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v4361[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v4359[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
0x8048591:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={} expr=v4313[32] }
        di      = { defs={} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591} expr=0x08048594[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4310[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v4361[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v4359[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
0x8048594:je     0x080485ac<<Insn>>
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={} expr=v4313[32] }
        di      = { defs={} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594} expr=0x08048596[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4310[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v4361[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v4359[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
0x8048596:lea    esi, [esi + 0x00]
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={0x08048596} expr=v4313[32] }
        di      = { defs={} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596} expr=0x08048599[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4310[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v4361[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v4359[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
0x8048599:lea    edi, [edi + 0x00000000]
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={0x08048587} expr=0x080495e8[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={0x08048596} expr=v4313[32] }
        di      = { defs={0x08048599} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32]))))))) }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32]))))) 1[33])))))) }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])) }
        sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) 1[32])) }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={0x0804858c,0x08048591} expr=0[1] }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596,0x08048599} expr=0x080485a0[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4310[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v4361[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v4359[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
0x80485a0:sub    ebx, 0x04
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={0x08048587,0x080485a0} expr=0x080495e4[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={0x08048596} expr=v4313[32] }
        di      = { defs={0x08048599} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={0x08048587,0x080485a0} expr=1[1] }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        sf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={0x08048587,0x080485a0} expr=0[1] }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594,0x08048596,0x08048599,0x080485a0} expr=0x080485a3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4310[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v4361[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v4359[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
0x80485a3:call   eax
    registers:
        ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) }
        cx      = { defs={} expr=v4308[32] }
        dx      = { defs={} expr=v4309[32] }
        bx      = { defs={0x08048587,0x080485a0} expr=0x080495e4[32] }
        sp      = { defs={0x08048580,0x08048583,0x08048584,0x080485a3} expr=(add[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x08048580,0x08048581} expr=(add[32] v4311[32] -4[32]) }
        si      = { defs={0x08048596} expr=v4313[32] }
        di      = { defs={0x08048599} expr=v4314[32] }
        es      = { defs={} expr=v4315[16] }
        cs      = { defs={} expr=v4316[16] }
        ss      = { defs={} expr=v4317[16] }
        ds      = { defs={} expr=v4318[16] }
        fs      = { defs={} expr=v4319[16] }
        gs      = { defs={} expr=v4320[16] }
        cf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?1      = { defs={} expr=v4322[1] }
        pf      = { defs={0x08048587,0x080485a0} expr=1[1] }
        ?3      = { defs={} expr=v4324[1] }
        af      = { defs={0x08048587,0x080485a0} expr=0[1] }
        ?5      = { defs={} expr=v4326[1] }
        zf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        sf      = { defs={0x08048587,0x080485a0} expr=0[1] }
        tf      = { defs={} expr=v4329[1] }
        if      = { defs={} expr=v4330[1] }
        df      = { defs={} expr=v4331[1] }
        of      = { defs={0x08048587,0x080485a0} expr=0[1] }
        iopl0   = { defs={} expr=v4333[1] }
        iopl1   = { defs={} expr=v4334[1] }
        nt      = { defs={} expr=v4335[1] }
        ?15     = { defs={} expr=v4336[1] }
        rf      = { defs={} expr=v4337[1] }
        vm      = { defs={} expr=v4338[1] }
        ac      = { defs={} expr=v4339[1] }
        vif     = { defs={} expr=v4340[1] }
        vip     = { defs={} expr=v4341[1] }
        id      = { defs={} expr=v4342[1] }
        ?22     = { defs={} expr=v4343[1] }
        ?23     = { defs={} expr=v4344[1] }
        ?24     = { defs={} expr=v4345[1] }
        ?25     = { defs={} expr=v4346[1] }
        ?26     = { defs={} expr=v4347[1] }
        ?27     = { defs={} expr=v4348[1] }
        ?28     = { defs={} expr=v4349[1] }
        ?29     = { defs={} expr=v4350[1] }
        ?30     = { defs={} expr=v4351[1] }
        ?31     = { defs={} expr=v4352[1] }
        ip      = { defs={0x0804858c,0x080485a3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4356[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e8[32] v4355[8]) 0x080495e8[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4358[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495e9[32] v4357[8]) 0x080495e9[32])))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4360[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495ea[32] v4359[8]) 0x080495ea[32])))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4362[8] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4310[32])) (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) -4[32]) (extract[8] 0[32] 8[32] v4310[32])) (add[32] (add[32] v4311[32] -4[32]) 3[32]) (extract[8] 24[32] 32[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 2[32]) (extract[8] 16[32] 24[32] v4312[32])) (add[32] (add[32] v4311[32] -4[32]) 1[32]) (extract[8] 8[32] 16[32] v4312[32])) (add[32] v4311[32] -4[32]) (extract[8] 0[32] 8[32] v4312[32])) 0x080495eb[32] v4361[8]) 0x080495eb[32])))) }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x08048580,0x08048583,0x08048584,0x080485a3} expr=(add[32] (add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-91[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4311[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4310[32]) }
          flags = { }
        address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v4311[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4310[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4312[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4311[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4312[32]) }
          flags = { }
        address = { defs={0x08048580} expr=(add[32] v4311[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4312[32]) }
          flags = { }
    init mem:
        address = { defs={} expr=0x080495eb[32] }
          value = { defs={} expr=v4361[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495ea[32] }
          value = { defs={} expr=v4359[8] }
          flags = { rdonly }
        address = { defs={} expr=0x080495e9[32] }
          value = { defs={} expr=v4357[8] }
          flags = { rdonly }
        address = { defs={0x0804858c} expr=0x080495e8[32] }
          value = { defs={} expr=v4355[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) }
        cx      = { defs={} expr=v4416[32] }
        dx      = { defs={} expr=v4417[32] }
        bx      = { defs={} expr=v4418[32] }
        sp      = { defs={} expr=v4419[32] }
        bp      = { defs={} expr=v4420[32] }
        si      = { defs={} expr=v4421[32] }
        di      = { defs={} expr=v4422[32] }
        es      = { defs={} expr=v4423[16] }
        cs      = { defs={} expr=v4424[16] }
        ss      = { defs={} expr=v4425[16] }
        ds      = { defs={} expr=v4426[16] }
        fs      = { defs={} expr=v4427[16] }
        gs      = { defs={} expr=v4428[16] }
        cf      = { defs={} expr=v4429[1] }
        ?1      = { defs={} expr=v4430[1] }
        pf      = { defs={} expr=v4431[1] }
        ?3      = { defs={} expr=v4432[1] }
        af      = { defs={} expr=v4433[1] }
        ?5      = { defs={} expr=v4434[1] }
        zf      = { defs={} expr=v4435[1] }
        sf      = { defs={} expr=v4436[1] }
        tf      = { defs={} expr=v4437[1] }
        if      = { defs={} expr=v4438[1] }
        df      = { defs={} expr=v4439[1] }
        of      = { defs={} expr=v4440[1] }
        iopl0   = { defs={} expr=v4441[1] }
        iopl1   = { defs={} expr=v4442[1] }
        nt      = { defs={} expr=v4443[1] }
        ?15     = { defs={} expr=v4444[1] }
        rf      = { defs={} expr=v4445[1] }
        vm      = { defs={} expr=v4446[1] }
        ac      = { defs={} expr=v4447[1] }
        vif     = { defs={} expr=v4448[1] }
        vip     = { defs={} expr=v4449[1] }
        id      = { defs={} expr=v4450[1] }
        ?22     = { defs={} expr=v4451[1] }
        ?23     = { defs={} expr=v4452[1] }
        ?24     = { defs={} expr=v4453[1] }
        ?25     = { defs={} expr=v4454[1] }
        ?26     = { defs={} expr=v4455[1] }
        ?27     = { defs={} expr=v4456[1] }
        ?28     = { defs={} expr=v4457[1] }
        ?29     = { defs={} expr=v4458[1] }
        ?30     = { defs={} expr=v4459[1] }
        ?31     = { defs={} expr=v4460[1] }
        ip      = { defs={0x080485a5} expr=0x080485a7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4418[32] 3[32]) }
          value = { defs={} expr=v4466[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4418[32] 2[32]) }
          value = { defs={} expr=v4465[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4418[32] 1[32]) }
          value = { defs={} expr=v4464[8] }
          flags = { rdonly }
        address = { defs={} expr=v4418[32] }
          value = { defs={} expr=v4463[8] }
          flags = { rdonly }
0x80485a7:cmp    eax, 0xff<-0x01>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) }
        cx      = { defs={} expr=v4416[32] }
        dx      = { defs={} expr=v4417[32] }
        bx      = { defs={} expr=v4418[32] }
        sp      = { defs={} expr=v4419[32] }
        bp      = { defs={} expr=v4420[32] }
        si      = { defs={} expr=v4421[32] }
        di      = { defs={} expr=v4422[32] }
        es      = { defs={} expr=v4423[16] }
        cs      = { defs={} expr=v4424[16] }
        ss      = { defs={} expr=v4425[16] }
        ds      = { defs={} expr=v4426[16] }
        fs      = { defs={} expr=v4427[16] }
        gs      = { defs={} expr=v4428[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v4430[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4432[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v4434[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32])) }
        tf      = { defs={} expr=v4437[1] }
        if      = { defs={} expr=v4438[1] }
        df      = { defs={} expr=v4439[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=0[1] }
        iopl0   = { defs={} expr=v4441[1] }
        iopl1   = { defs={} expr=v4442[1] }
        nt      = { defs={} expr=v4443[1] }
        ?15     = { defs={} expr=v4444[1] }
        rf      = { defs={} expr=v4445[1] }
        vm      = { defs={} expr=v4446[1] }
        ac      = { defs={} expr=v4447[1] }
        vif     = { defs={} expr=v4448[1] }
        vip     = { defs={} expr=v4449[1] }
        id      = { defs={} expr=v4450[1] }
        ?22     = { defs={} expr=v4451[1] }
        ?23     = { defs={} expr=v4452[1] }
        ?24     = { defs={} expr=v4453[1] }
        ?25     = { defs={} expr=v4454[1] }
        ?26     = { defs={} expr=v4455[1] }
        ?27     = { defs={} expr=v4456[1] }
        ?28     = { defs={} expr=v4457[1] }
        ?29     = { defs={} expr=v4458[1] }
        ?30     = { defs={} expr=v4459[1] }
        ?31     = { defs={} expr=v4460[1] }
        ip      = { defs={0x080485a5,0x080485a7} expr=0x080485aa[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4418[32] 3[32]) }
          value = { defs={} expr=v4466[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4418[32] 2[32]) }
          value = { defs={} expr=v4465[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4418[32] 1[32]) }
          value = { defs={} expr=v4464[8] }
          flags = { rdonly }
        address = { defs={} expr=v4418[32] }
          value = { defs={} expr=v4463[8] }
          flags = { rdonly }
0x80485aa:jne    0x080485a0<<Insn>>
    registers:
        ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) }
        cx      = { defs={} expr=v4416[32] }
        dx      = { defs={} expr=v4417[32] }
        bx      = { defs={} expr=v4418[32] }
        sp      = { defs={} expr=v4419[32] }
        bp      = { defs={} expr=v4420[32] }
        si      = { defs={} expr=v4421[32] }
        di      = { defs={} expr=v4422[32] }
        es      = { defs={} expr=v4423[16] }
        cs      = { defs={} expr=v4424[16] }
        ss      = { defs={} expr=v4425[16] }
        ds      = { defs={} expr=v4426[16] }
        fs      = { defs={} expr=v4427[16] }
        gs      = { defs={} expr=v4428[16] }
        cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8])))) 1[33])))))) }
        ?1      = { defs={} expr=v4430[1] }
        pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32]))))))) }
        ?3      = { defs={} expr=v4432[1] }
        af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8])))) 1[33])))))) }
        ?5      = { defs={} expr=v4434[1] }
        zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32])) }
        sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4463[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4464[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4465[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4466[8]))) 1[32])) }
        tf      = { defs={} expr=v4437[1] }
        if      = { defs={} expr=v4438[1] }
        df      = { defs={} expr=v4439[1] }
        of      = { defs={0x080485a5,0x080485a7} expr=0[1] }
        iopl0   = { defs={} expr=v4441[1] }
        iopl1   = { defs={} expr=v4442[1] }
        nt      = { defs={} expr=v4443[1] }
        ?15     = { defs={} expr=v4444[1] }
        rf      = { defs={} expr=v4445[1] }
        vm      = { defs={} expr=v4446[1] }
        ac      = { defs={} expr=v4447[1] }
        vif     = { defs={} expr=v4448[1] }
        vip     = { defs={} expr=v4449[1] }
        id      = { defs={} expr=v4450[1] }
        ?22     = { defs={} expr=v4451[1] }
        ?23     = { defs={} expr=v4452[1] }
        ?24     = { defs={} expr=v4453[1] }
        ?25     = { defs={} expr=v4454[1] }
        ?26     = { defs={} expr=v4455[1] }
        ?27     = { defs={} expr=v4456[1] }
        ?28     = { defs={} expr=v4457[1] }
        ?29     = { defs={} expr=v4458[1] }
        ?30     = { defs={} expr=v4459[1] }
        ?31     = { defs={} expr=v4460[1] }
        ip      = { defs={0x080485a5,0x080485a7,0x080485aa} expr=0x080485a0[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4418[32] 3[32]) }
          value = { defs={} expr=v4466[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4418[32] 2[32]) }
          value = { defs={} expr=v4465[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4418[32] 1[32]) }
          value = { defs={} expr=v4464[8] }
          flags = { rdonly }
        address = { defs={} expr=v4418[32] }
          value = { defs={} expr=v4463[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4567[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4568[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4569[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4570[8]))) }
        cx      = { defs={} expr=v4520[32] }
        dx      = { defs={} expr=v4521[32] }
        bx      = { defs={} expr=v4522[32] }
        sp      = { defs={0x080485ac} expr=(add[32] v4523[32] 4[32]) }
        bp      = { defs={} expr=v4524[32] }
        si      = { defs={} expr=v4525[32] }
        di      = { defs={} expr=v4526[32] }
        es      = { defs={} expr=v4527[16] }
        cs      = { defs={} expr=v4528[16] }
        ss      = { defs={} expr=v4529[16] }
        ds      = { defs={} expr=v4530[16] }
        fs      = { defs={} expr=v4531[16] }
        gs      = { defs={} expr=v4532[16] }
        cf      = { defs={} expr=v4533[1] }
        ?1      = { defs={} expr=v4534[1] }
        pf      = { defs={} expr=v4535[1] }
        ?3      = { defs={} expr=v4536[1] }
        af      = { defs={} expr=v4537[1] }
        ?5      = { defs={} expr=v4538[1] }
        zf      = { defs={} expr=v4539[1] }
        sf      = { defs={} expr=v4540[1] }
        tf      = { defs={} expr=v4541[1] }
        if      = { defs={} expr=v4542[1] }
        df      = { defs={} expr=v4543[1] }
        of      = { defs={} expr=v4544[1] }
        iopl0   = { defs={} expr=v4545[1] }
        iopl1   = { defs={} expr=v4546[1] }
        nt      = { defs={} expr=v4547[1] }
        ?15     = { defs={} expr=v4548[1] }
        rf      = { defs={} expr=v4549[1] }
        vm      = { defs={} expr=v4550[1] }
        ac      = { defs={} expr=v4551[1] }
        vif     = { defs={} expr=v4552[1] }
        vip     = { defs={} expr=v4553[1] }
        id      = { defs={} expr=v4554[1] }
        ?22     = { defs={} expr=v4555[1] }
        ?23     = { defs={} expr=v4556[1] }
        ?24     = { defs={} expr=v4557[1] }
        ?25     = { defs={} expr=v4558[1] }
        ?26     = { defs={} expr=v4559[1] }
        ?27     = { defs={} expr=v4560[1] }
        ?28     = { defs={} expr=v4561[1] }
        ?29     = { defs={} expr=v4562[1] }
        ?30     = { defs={} expr=v4563[1] }
        ?31     = { defs={} expr=v4564[1] }
        ip      = { defs={0x080485ac} expr=0x080485ad[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4523[32] 3[32]) }
          value = { defs={} expr=v4570[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 2[32]) }
          value = { defs={} expr=v4569[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 1[32]) }
          value = { defs={} expr=v4568[8] }
          flags = { rdonly }
        address = { defs={} expr=v4523[32] }
          value = { defs={} expr=v4567[8] }
          flags = { rdonly }
0x80485ad:pop    ebx
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4567[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4568[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4569[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4570[8]))) }
        cx      = { defs={} expr=v4520[32] }
        dx      = { defs={} expr=v4521[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4577[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4578[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4579[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4580[8]))) }
        sp      = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v4523[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v4524[32] }
        si      = { defs={} expr=v4525[32] }
        di      = { defs={} expr=v4526[32] }
        es      = { defs={} expr=v4527[16] }
        cs      = { defs={} expr=v4528[16] }
        ss      = { defs={} expr=v4529[16] }
        ds      = { defs={} expr=v4530[16] }
        fs      = { defs={} expr=v4531[16] }
        gs      = { defs={} expr=v4532[16] }
        cf      = { defs={} expr=v4533[1] }
        ?1      = { defs={} expr=v4534[1] }
        pf      = { defs={} expr=v4535[1] }
        ?3      = { defs={} expr=v4536[1] }
        af      = { defs={} expr=v4537[1] }
        ?5      = { defs={} expr=v4538[1] }
        zf      = { defs={} expr=v4539[1] }
        sf      = { defs={} expr=v4540[1] }
        tf      = { defs={} expr=v4541[1] }
        if      = { defs={} expr=v4542[1] }
        df      = { defs={} expr=v4543[1] }
        of      = { defs={} expr=v4544[1] }
        iopl0   = { defs={} expr=v4545[1] }
        iopl1   = { defs={} expr=v4546[1] }
        nt      = { defs={} expr=v4547[1] }
        ?15     = { defs={} expr=v4548[1] }
        rf      = { defs={} expr=v4549[1] }
        vm      = { defs={} expr=v4550[1] }
        ac      = { defs={} expr=v4551[1] }
        vif     = { defs={} expr=v4552[1] }
        vip     = { defs={} expr=v4553[1] }
        id      = { defs={} expr=v4554[1] }
        ?22     = { defs={} expr=v4555[1] }
        ?23     = { defs={} expr=v4556[1] }
        ?24     = { defs={} expr=v4557[1] }
        ?25     = { defs={} expr=v4558[1] }
        ?26     = { defs={} expr=v4559[1] }
        ?27     = { defs={} expr=v4560[1] }
        ?28     = { defs={} expr=v4561[1] }
        ?29     = { defs={} expr=v4562[1] }
        ?30     = { defs={} expr=v4563[1] }
        ?31     = { defs={} expr=v4564[1] }
        ip      = { defs={0x080485ac,0x080485ad} expr=0x080485ae[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4523[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4580[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4523[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4579[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4523[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4578[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=(add[32] v4523[32] 4[32]) }
          value = { defs={} expr=v4577[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 3[32]) }
          value = { defs={} expr=v4570[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 2[32]) }
          value = { defs={} expr=v4569[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 1[32]) }
          value = { defs={} expr=v4568[8] }
          flags = { rdonly }
        address = { defs={} expr=v4523[32] }
          value = { defs={} expr=v4567[8] }
          flags = { rdonly }
0x80485ae:pop    ebp
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4567[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4568[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4569[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4570[8]))) }
        cx      = { defs={} expr=v4520[32] }
        dx      = { defs={} expr=v4521[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4577[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4578[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4579[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4580[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4587[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4588[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4589[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4590[8]))) }
        si      = { defs={} expr=v4525[32] }
        di      = { defs={} expr=v4526[32] }
        es      = { defs={} expr=v4527[16] }
        cs      = { defs={} expr=v4528[16] }
        ss      = { defs={} expr=v4529[16] }
        ds      = { defs={} expr=v4530[16] }
        fs      = { defs={} expr=v4531[16] }
        gs      = { defs={} expr=v4532[16] }
        cf      = { defs={} expr=v4533[1] }
        ?1      = { defs={} expr=v4534[1] }
        pf      = { defs={} expr=v4535[1] }
        ?3      = { defs={} expr=v4536[1] }
        af      = { defs={} expr=v4537[1] }
        ?5      = { defs={} expr=v4538[1] }
        zf      = { defs={} expr=v4539[1] }
        sf      = { defs={} expr=v4540[1] }
        tf      = { defs={} expr=v4541[1] }
        if      = { defs={} expr=v4542[1] }
        df      = { defs={} expr=v4543[1] }
        of      = { defs={} expr=v4544[1] }
        iopl0   = { defs={} expr=v4545[1] }
        iopl1   = { defs={} expr=v4546[1] }
        nt      = { defs={} expr=v4547[1] }
        ?15     = { defs={} expr=v4548[1] }
        rf      = { defs={} expr=v4549[1] }
        vm      = { defs={} expr=v4550[1] }
        ac      = { defs={} expr=v4551[1] }
        vif     = { defs={} expr=v4552[1] }
        vip     = { defs={} expr=v4553[1] }
        id      = { defs={} expr=v4554[1] }
        ?22     = { defs={} expr=v4555[1] }
        ?23     = { defs={} expr=v4556[1] }
        ?24     = { defs={} expr=v4557[1] }
        ?25     = { defs={} expr=v4558[1] }
        ?26     = { defs={} expr=v4559[1] }
        ?27     = { defs={} expr=v4560[1] }
        ?28     = { defs={} expr=v4561[1] }
        ?29     = { defs={} expr=v4562[1] }
        ?30     = { defs={} expr=v4563[1] }
        ?31     = { defs={} expr=v4564[1] }
        ip      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=0x080485af[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4590[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4589[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4588[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v4523[32] 4[32]) 4[32]) }
          value = { defs={} expr=v4587[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4523[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4580[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4523[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4579[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4523[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4578[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=(add[32] v4523[32] 4[32]) }
          value = { defs={} expr=v4577[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 3[32]) }
          value = { defs={} expr=v4570[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 2[32]) }
          value = { defs={} expr=v4569[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 1[32]) }
          value = { defs={} expr=v4568[8] }
          flags = { rdonly }
        address = { defs={} expr=v4523[32] }
          value = { defs={} expr=v4567[8] }
          flags = { rdonly }
0x80485af:ret    
    registers:
        ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4567[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4568[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4569[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4570[8]))) }
        cx      = { defs={} expr=v4520[32] }
        dx      = { defs={} expr=v4521[32] }
        bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4577[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4578[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4579[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4580[8]))) }
        sp      = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 4[32]) 4[32]) }
        bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4587[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4588[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4589[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4590[8]))) }
        si      = { defs={} expr=v4525[32] }
        di      = { defs={} expr=v4526[32] }
        es      = { defs={} expr=v4527[16] }
        cs      = { defs={} expr=v4528[16] }
        ss      = { defs={} expr=v4529[16] }
        ds      = { defs={} expr=v4530[16] }
        fs      = { defs={} expr=v4531[16] }
        gs      = { defs={} expr=v4532[16] }
        cf      = { defs={} expr=v4533[1] }
        ?1      = { defs={} expr=v4534[1] }
        pf      = { defs={} expr=v4535[1] }
        ?3      = { defs={} expr=v4536[1] }
        af      = { defs={} expr=v4537[1] }
        ?5      = { defs={} expr=v4538[1] }
        zf      = { defs={} expr=v4539[1] }
        sf      = { defs={} expr=v4540[1] }
        tf      = { defs={} expr=v4541[1] }
        if      = { defs={} expr=v4542[1] }
        df      = { defs={} expr=v4543[1] }
        of      = { defs={} expr=v4544[1] }
        iopl0   = { defs={} expr=v4545[1] }
        iopl1   = { defs={} expr=v4546[1] }
        nt      = { defs={} expr=v4547[1] }
        ?15     = { defs={} expr=v4548[1] }
        rf      = { defs={} expr=v4549[1] }
        vm      = { defs={} expr=v4550[1] }
        ac      = { defs={} expr=v4551[1] }
        vif     = { defs={} expr=v4552[1] }
        vip     = { defs={} expr=v4553[1] }
        id      = { defs={} expr=v4554[1] }
        ?22     = { defs={} expr=v4555[1] }
        ?23     = { defs={} expr=v4556[1] }
        ?24     = { defs={} expr=v4557[1] }
        ?25     = { defs={} expr=v4558[1] }
        ?26     = { defs={} expr=v4559[1] }
        ?27     = { defs={} expr=v4560[1] }
        ?28     = { defs={} expr=v4561[1] }
        ?29     = { defs={} expr=v4562[1] }
        ?30     = { defs={} expr=v4563[1] }
        ?31     = { defs={} expr=v4564[1] }
        ip      = { defs={0x080485af} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4597[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4598[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4599[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4600[8]))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4600[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4599[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4598[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 4[32]) }
          value = { defs={} expr=v4597[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 3[32]) }
          value = { defs={} expr=v4590[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 2[32]) }
          value = { defs={} expr=v4589[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4523[32] 4[32]) 4[32]) 1[32]) }
          value = { defs={} expr=v4588[8] }
          flags = { rdonly }
        address = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v4523[32] 4[32]) 4[32]) }
          value = { defs={} expr=v4587[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4523[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4580[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4523[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4579[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4523[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4578[8] }
          flags = { rdonly }
        address = { defs={0x080485ac} expr=(add[32] v4523[32] 4[32]) }
          value = { defs={} expr=v4577[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 3[32]) }
          value = { defs={} expr=v4570[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 2[32]) }
          value = { defs={} expr=v4569[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4523[32] 1[32]) }
          value = { defs={} expr=v4568[8] }
          flags = { rdonly }
        address = { defs={} expr=v4523[32] }
          value = { defs={} expr=v4567[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
    registers:
        ax      = { defs={} expr=v4653[32] }
        cx      = { defs={} expr=v4654[32] }
        dx      = { defs={} expr=v4655[32] }
        bx      = { defs={} expr=v4656[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v4657[32] -4[32]) }
        bp      = { defs={} expr=v4658[32] }
        si      = { defs={} expr=v4659[32] }
        di      = { defs={} expr=v4660[32] }
        es      = { defs={} expr=v4661[16] }
        cs      = { defs={} expr=v4662[16] }
        ss      = { defs={} expr=v4663[16] }
        ds      = { defs={} expr=v4664[16] }
        fs      = { defs={} expr=v4665[16] }
        gs      = { defs={} expr=v4666[16] }
        cf      = { defs={} expr=v4667[1] }
        ?1      = { defs={} expr=v4668[1] }
        pf      = { defs={} expr=v4669[1] }
        ?3      = { defs={} expr=v4670[1] }
        af      = { defs={} expr=v4671[1] }
        ?5      = { defs={} expr=v4672[1] }
        zf      = { defs={} expr=v4673[1] }
        sf      = { defs={} expr=v4674[1] }
        tf      = { defs={} expr=v4675[1] }
        if      = { defs={} expr=v4676[1] }
        df      = { defs={} expr=v4677[1] }
        of      = { defs={} expr=v4678[1] }
        iopl0   = { defs={} expr=v4679[1] }
        iopl1   = { defs={} expr=v4680[1] }
        nt      = { defs={} expr=v4681[1] }
        ?15     = { defs={} expr=v4682[1] }
        rf      = { defs={} expr=v4683[1] }
        vm      = { defs={} expr=v4684[1] }
        ac      = { defs={} expr=v4685[1] }
        vif     = { defs={} expr=v4686[1] }
        vip     = { defs={} expr=v4687[1] }
        id      = { defs={} expr=v4688[1] }
        ?22     = { defs={} expr=v4689[1] }
        ?23     = { defs={} expr=v4690[1] }
        ?24     = { defs={} expr=v4691[1] }
        ?25     = { defs={} expr=v4692[1] }
        ?26     = { defs={} expr=v4693[1] }
        ?27     = { defs={} expr=v4694[1] }
        ?28     = { defs={} expr=v4695[1] }
        ?29     = { defs={} expr=v4696[1] }
        ?30     = { defs={} expr=v4697[1] }
        ?31     = { defs={} expr=v4698[1] }
        ip      = { defs={0x080485b0} expr=0x080485b1[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4658[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4658[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4658[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v4657[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4658[32]) }
          flags = { }
    init mem:
0x80485b1:mov    ebp, esp
    registers:
        ax      = { defs={} expr=v4653[32] }
        cx      = { defs={} expr=v4654[32] }
        dx      = { defs={} expr=v4655[32] }
        bx      = { defs={} expr=v4656[32] }
        sp      = { defs={0x080485b0} expr=(add[32] v4657[32] -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v4657[32] -4[32]) }
        si      = { defs={} expr=v4659[32] }
        di      = { defs={} expr=v4660[32] }
        es      = { defs={} expr=v4661[16] }
        cs      = { defs={} expr=v4662[16] }
        ss      = { defs={} expr=v4663[16] }
        ds      = { defs={} expr=v4664[16] }
        fs      = { defs={} expr=v4665[16] }
        gs      = { defs={} expr=v4666[16] }
        cf      = { defs={} expr=v4667[1] }
        ?1      = { defs={} expr=v4668[1] }
        pf      = { defs={} expr=v4669[1] }
        ?3      = { defs={} expr=v4670[1] }
        af      = { defs={} expr=v4671[1] }
        ?5      = { defs={} expr=v4672[1] }
        zf      = { defs={} expr=v4673[1] }
        sf      = { defs={} expr=v4674[1] }
        tf      = { defs={} expr=v4675[1] }
        if      = { defs={} expr=v4676[1] }
        df      = { defs={} expr=v4677[1] }
        of      = { defs={} expr=v4678[1] }
        iopl0   = { defs={} expr=v4679[1] }
        iopl1   = { defs={} expr=v4680[1] }
        nt      = { defs={} expr=v4681[1] }
        ?15     = { defs={} expr=v4682[1] }
        rf      = { defs={} expr=v4683[1] }
        vm      = { defs={} expr=v4684[1] }
        ac      = { defs={} expr=v4685[1] }
        vif     = { defs={} expr=v4686[1] }
        vip     = { defs={} expr=v4687[1] }
        id      = { defs={} expr=v4688[1] }
        ?22     = { defs={} expr=v4689[1] }
        ?23     = { defs={} expr=v4690[1] }
        ?24     = { defs={} expr=v4691[1] }
        ?25     = { defs={} expr=v4692[1] }
        ?26     = { defs={} expr=v4693[1] }
        ?27     = { defs={} expr=v4694[1] }
        ?28     = { defs={} expr=v4695[1] }
        ?29     = { defs={} expr=v4696[1] }
        ?30     = { defs={} expr=v4697[1] }
        ?31     = { defs={} expr=v4698[1] }
        ip      = { defs={0x080485b0,0x080485b1} expr=0x080485b3[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4658[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4658[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4658[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v4657[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4658[32]) }
          flags = { }
    init mem:
0x80485b3:push   ebx
    registers:
        ax      = { defs={} expr=v4653[32] }
        cx      = { defs={} expr=v4654[32] }
        dx      = { defs={} expr=v4655[32] }
        bx      = { defs={} expr=v4656[32] }
        sp      = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v4657[32] -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v4657[32] -4[32]) }
        si      = { defs={} expr=v4659[32] }
        di      = { defs={} expr=v4660[32] }
        es      = { defs={} expr=v4661[16] }
        cs      = { defs={} expr=v4662[16] }
        ss      = { defs={} expr=v4663[16] }
        ds      = { defs={} expr=v4664[16] }
        fs      = { defs={} expr=v4665[16] }
        gs      = { defs={} expr=v4666[16] }
        cf      = { defs={} expr=v4667[1] }
        ?1      = { defs={} expr=v4668[1] }
        pf      = { defs={} expr=v4669[1] }
        ?3      = { defs={} expr=v4670[1] }
        af      = { defs={} expr=v4671[1] }
        ?5      = { defs={} expr=v4672[1] }
        zf      = { defs={} expr=v4673[1] }
        sf      = { defs={} expr=v4674[1] }
        tf      = { defs={} expr=v4675[1] }
        if      = { defs={} expr=v4676[1] }
        df      = { defs={} expr=v4677[1] }
        of      = { defs={} expr=v4678[1] }
        iopl0   = { defs={} expr=v4679[1] }
        iopl1   = { defs={} expr=v4680[1] }
        nt      = { defs={} expr=v4681[1] }
        ?15     = { defs={} expr=v4682[1] }
        rf      = { defs={} expr=v4683[1] }
        vm      = { defs={} expr=v4684[1] }
        ac      = { defs={} expr=v4685[1] }
        vif     = { defs={} expr=v4686[1] }
        vip     = { defs={} expr=v4687[1] }
        id      = { defs={} expr=v4688[1] }
        ?22     = { defs={} expr=v4689[1] }
        ?23     = { defs={} expr=v4690[1] }
        ?24     = { defs={} expr=v4691[1] }
        ?25     = { defs={} expr=v4692[1] }
        ?26     = { defs={} expr=v4693[1] }
        ?27     = { defs={} expr=v4694[1] }
        ?28     = { defs={} expr=v4695[1] }
        ?29     = { defs={} expr=v4696[1] }
        ?30     = { defs={} expr=v4697[1] }
        ?31     = { defs={} expr=v4698[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3} expr=0x080485b4[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4656[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4656[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4656[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v4657[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4656[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4658[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4658[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4658[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v4657[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4658[32]) }
          flags = { }
    init mem:
0x80485b4:push   eax
    registers:
        ax      = { defs={} expr=v4653[32] }
        cx      = { defs={} expr=v4654[32] }
        dx      = { defs={} expr=v4655[32] }
        bx      = { defs={} expr=v4656[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v4657[32] -4[32]) }
        si      = { defs={} expr=v4659[32] }
        di      = { defs={} expr=v4660[32] }
        es      = { defs={} expr=v4661[16] }
        cs      = { defs={} expr=v4662[16] }
        ss      = { defs={} expr=v4663[16] }
        ds      = { defs={} expr=v4664[16] }
        fs      = { defs={} expr=v4665[16] }
        gs      = { defs={} expr=v4666[16] }
        cf      = { defs={} expr=v4667[1] }
        ?1      = { defs={} expr=v4668[1] }
        pf      = { defs={} expr=v4669[1] }
        ?3      = { defs={} expr=v4670[1] }
        af      = { defs={} expr=v4671[1] }
        ?5      = { defs={} expr=v4672[1] }
        zf      = { defs={} expr=v4673[1] }
        sf      = { defs={} expr=v4674[1] }
        tf      = { defs={} expr=v4675[1] }
        if      = { defs={} expr=v4676[1] }
        df      = { defs={} expr=v4677[1] }
        of      = { defs={} expr=v4678[1] }
        iopl0   = { defs={} expr=v4679[1] }
        iopl1   = { defs={} expr=v4680[1] }
        nt      = { defs={} expr=v4681[1] }
        ?15     = { defs={} expr=v4682[1] }
        rf      = { defs={} expr=v4683[1] }
        vm      = { defs={} expr=v4684[1] }
        ac      = { defs={} expr=v4685[1] }
        vif     = { defs={} expr=v4686[1] }
        vip     = { defs={} expr=v4687[1] }
        id      = { defs={} expr=v4688[1] }
        ?22     = { defs={} expr=v4689[1] }
        ?23     = { defs={} expr=v4690[1] }
        ?24     = { defs={} expr=v4691[1] }
        ?25     = { defs={} expr=v4692[1] }
        ?26     = { defs={} expr=v4693[1] }
        ?27     = { defs={} expr=v4694[1] }
        ?28     = { defs={} expr=v4695[1] }
        ?29     = { defs={} expr=v4696[1] }
        ?30     = { defs={} expr=v4697[1] }
        ?31     = { defs={} expr=v4698[1] }
        ip      = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4} expr=0x080485b5[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4653[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4653[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4653[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4653[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4656[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4656[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4656[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v4657[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4656[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4658[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4658[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4658[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v4657[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4658[32]) }
          flags = { }
    init mem:
0x80485b5:call   0x080485ba<<Insn>>
    registers:
        ax      = { defs={} expr=v4653[32] }
        cx      = { defs={} expr=v4654[32] }
        dx      = { defs={} expr=v4655[32] }
        bx      = { defs={} expr=v4656[32] }
        sp      = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) -4[32]) }
        bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v4657[32] -4[32]) }
        si      = { defs={} expr=v4659[32] }
        di      = { defs={} expr=v4660[32] }
        es      = { defs={} expr=v4661[16] }
        cs      = { defs={} expr=v4662[16] }
        ss      = { defs={} expr=v4663[16] }
        ds      = { defs={} expr=v4664[16] }
        fs      = { defs={} expr=v4665[16] }
        gs      = { defs={} expr=v4666[16] }
        cf      = { defs={} expr=v4667[1] }
        ?1      = { defs={} expr=v4668[1] }
        pf      = { defs={} expr=v4669[1] }
        ?3      = { defs={} expr=v4670[1] }
        af      = { defs={} expr=v4671[1] }
        ?5      = { defs={} expr=v4672[1] }
        zf      = { defs={} expr=v4673[1] }
        sf      = { defs={} expr=v4674[1] }
        tf      = { defs={} expr=v4675[1] }
        if      = { defs={} expr=v4676[1] }
        df      = { defs={} expr=v4677[1] }
        of      = { defs={} expr=v4678[1] }
        iopl0   = { defs={} expr=v4679[1] }
        iopl1   = { defs={} expr=v4680[1] }
        nt      = { defs={} expr=v4681[1] }
        ?15     = { defs={} expr=v4682[1] }
        rf      = { defs={} expr=v4683[1] }
        vm      = { defs={} expr=v4684[1] }
        ac      = { defs={} expr=v4685[1] }
        vif     = { defs={} expr=v4686[1] }
        vip     = { defs={} expr=v4687[1] }
        id      = { defs={} expr=v4688[1] }
        ?22     = { defs={} expr=v4689[1] }
        ?23     = { defs={} expr=v4690[1] }
        ?24     = { defs={} expr=v4691[1] }
        ?25     = { defs={} expr=v4692[1] }
        ?26     = { defs={} expr=v4693[1] }
        ?27     = { defs={} expr=v4694[1] }
        ?28     = { defs={} expr=v4695[1] }
        ?29     = { defs={} expr=v4696[1] }
        ?30     = { defs={} expr=v4697[1] }
        ?31     = { defs={} expr=v4698[1] }
        ip      = { defs={0x080485b5} expr=0x080485ba[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=-70[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4653[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4653[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4653[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4653[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4656[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4656[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4657[32] -4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4656[32]) }
          flags = { }
        address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v4657[32] -4[32]) -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4656[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 3[32]) }
          value = { defs={} expr=(extract[8] 24[32] 32[32] v4658[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 2[32]) }
          value = { defs={} expr=(extract[8] 16[32] 24[32] v4658[32]) }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] v4657[32] -4[32]) 1[32]) }
          value = { defs={} expr=(extract[8] 8[32] 16[32] v4658[32]) }
          flags = { }
        address = { defs={0x080485b0} expr=(add[32] v4657[32] -4[32]) }
          value = { defs={} expr=(extract[8] 0[32] 8[32] v4658[32]) }
          flags = { }
    init mem:
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
    registers:
        ax      = { defs={} expr=v4747[32] }
        cx      = { defs={} expr=v4748[32] }
        dx      = { defs={} expr=v4749[32] }
        bx      = { defs={0x080485ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) }
        sp      = { defs={0x080485ba} expr=(add[32] v4751[32] 4[32]) }
        bp      = { defs={} expr=v4752[32] }
        si      = { defs={} expr=v4753[32] }
        di      = { defs={} expr=v4754[32] }
        es      = { defs={} expr=v4755[16] }
        cs      = { defs={} expr=v4756[16] }
        ss      = { defs={} expr=v4757[16] }
        ds      = { defs={} expr=v4758[16] }
        fs      = { defs={} expr=v4759[16] }
        gs      = { defs={} expr=v4760[16] }
        cf      = { defs={} expr=v4761[1] }
        ?1      = { defs={} expr=v4762[1] }
        pf      = { defs={} expr=v4763[1] }
        ?3      = { defs={} expr=v4764[1] }
        af      = { defs={} expr=v4765[1] }
        ?5      = { defs={} expr=v4766[1] }
        zf      = { defs={} expr=v4767[1] }
        sf      = { defs={} expr=v4768[1] }
        tf      = { defs={} expr=v4769[1] }
        if      = { defs={} expr=v4770[1] }
        df      = { defs={} expr=v4771[1] }
        of      = { defs={} expr=v4772[1] }
        iopl0   = { defs={} expr=v4773[1] }
        iopl1   = { defs={} expr=v4774[1] }
        nt      = { defs={} expr=v4775[1] }
        ?15     = { defs={} expr=v4776[1] }
        rf      = { defs={} expr=v4777[1] }
        vm      = { defs={} expr=v4778[1] }
        ac      = { defs={} expr=v4779[1] }
        vif     = { defs={} expr=v4780[1] }
        vip     = { defs={} expr=v4781[1] }
        id      = { defs={} expr=v4782[1] }
        ?22     = { defs={} expr=v4783[1] }
        ?23     = { defs={} expr=v4784[1] }
        ?24     = { defs={} expr=v4785[1] }
        ?25     = { defs={} expr=v4786[1] }
        ?26     = { defs={} expr=v4787[1] }
        ?27     = { defs={} expr=v4788[1] }
        ?28     = { defs={} expr=v4789[1] }
        ?29     = { defs={} expr=v4790[1] }
        ?30     = { defs={} expr=v4791[1] }
        ?31     = { defs={} expr=v4792[1] }
        ip      = { defs={0x080485ba} expr=0x080485bb[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4751[32] 3[32]) }
          value = { defs={} expr=v4798[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4751[32] 2[32]) }
          value = { defs={} expr=v4797[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4751[32] 1[32]) }
          value = { defs={} expr=v4796[8] }
          flags = { rdonly }
        address = { defs={} expr=v4751[32] }
          value = { defs={} expr=v4795[8] }
          flags = { rdonly }
0x80485bb:add    ebx, 0x0000110e
    registers:
        ax      = { defs={} expr=v4747[32] }
        cx      = { defs={} expr=v4748[32] }
        dx      = { defs={} expr=v4749[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]) }
        sp      = { defs={0x080485ba} expr=(add[32] v4751[32] 4[32]) }
        bp      = { defs={} expr=v4752[32] }
        si      = { defs={} expr=v4753[32] }
        di      = { defs={} expr=v4754[32] }
        es      = { defs={} expr=v4755[16] }
        cs      = { defs={} expr=v4756[16] }
        ss      = { defs={} expr=v4757[16] }
        ds      = { defs={} expr=v4758[16] }
        fs      = { defs={} expr=v4759[16] }
        gs      = { defs={} expr=v4760[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v4762[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v4764[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v4766[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32])) }
        tf      = { defs={} expr=v4769[1] }
        if      = { defs={} expr=v4770[1] }
        df      = { defs={} expr=v4771[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=0[1] }
        iopl0   = { defs={} expr=v4773[1] }
        iopl1   = { defs={} expr=v4774[1] }
        nt      = { defs={} expr=v4775[1] }
        ?15     = { defs={} expr=v4776[1] }
        rf      = { defs={} expr=v4777[1] }
        vm      = { defs={} expr=v4778[1] }
        ac      = { defs={} expr=v4779[1] }
        vif     = { defs={} expr=v4780[1] }
        vip     = { defs={} expr=v4781[1] }
        id      = { defs={} expr=v4782[1] }
        ?22     = { defs={} expr=v4783[1] }
        ?23     = { defs={} expr=v4784[1] }
        ?24     = { defs={} expr=v4785[1] }
        ?25     = { defs={} expr=v4786[1] }
        ?26     = { defs={} expr=v4787[1] }
        ?27     = { defs={} expr=v4788[1] }
        ?28     = { defs={} expr=v4789[1] }
        ?29     = { defs={} expr=v4790[1] }
        ?30     = { defs={} expr=v4791[1] }
        ?31     = { defs={} expr=v4792[1] }
        ip      = { defs={0x080485ba,0x080485bb} expr=0x080485c1[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4751[32] 3[32]) }
          value = { defs={} expr=v4798[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4751[32] 2[32]) }
          value = { defs={} expr=v4797[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4751[32] 1[32]) }
          value = { defs={} expr=v4796[8] }
          flags = { rdonly }
        address = { defs={} expr=v4751[32] }
          value = { defs={} expr=v4795[8] }
          flags = { rdonly }
0x80485c1:call   0x08048390<__do_global_dtors_aux>
    registers:
        ax      = { defs={} expr=v4747[32] }
        cx      = { defs={} expr=v4748[32] }
        dx      = { defs={} expr=v4749[32] }
        bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]) }
        sp      = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v4751[32] 4[32]) -4[32]) }
        bp      = { defs={} expr=v4752[32] }
        si      = { defs={} expr=v4753[32] }
        di      = { defs={} expr=v4754[32] }
        es      = { defs={} expr=v4755[16] }
        cs      = { defs={} expr=v4756[16] }
        ss      = { defs={} expr=v4757[16] }
        ds      = { defs={} expr=v4758[16] }
        fs      = { defs={} expr=v4759[16] }
        gs      = { defs={} expr=v4760[16] }
        cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8])))) 4366[33]))))) }
        ?1      = { defs={} expr=v4762[1] }
        pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32]))))))) }
        ?3      = { defs={} expr=v4764[1] }
        af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8])))) 4366[33]))))) }
        ?5      = { defs={} expr=v4766[1] }
        zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32])) }
        sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4795[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4796[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4797[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4798[8]))) 4366[32])) }
        tf      = { defs={} expr=v4769[1] }
        if      = { defs={} expr=v4770[1] }
        df      = { defs={} expr=v4771[1] }
        of      = { defs={0x080485ba,0x080485bb} expr=0[1] }
        iopl0   = { defs={} expr=v4773[1] }
        iopl1   = { defs={} expr=v4774[1] }
        nt      = { defs={} expr=v4775[1] }
        ?15     = { defs={} expr=v4776[1] }
        rf      = { defs={} expr=v4777[1] }
        vm      = { defs={} expr=v4778[1] }
        ac      = { defs={} expr=v4779[1] }
        vif     = { defs={} expr=v4780[1] }
        vip     = { defs={} expr=v4781[1] }
        id      = { defs={} expr=v4782[1] }
        ?22     = { defs={} expr=v4783[1] }
        ?23     = { defs={} expr=v4784[1] }
        ?24     = { defs={} expr=v4785[1] }
        ?25     = { defs={} expr=v4786[1] }
        ?26     = { defs={} expr=v4787[1] }
        ?27     = { defs={} expr=v4788[1] }
        ?28     = { defs={} expr=v4789[1] }
        ?29     = { defs={} expr=v4790[1] }
        ?30     = { defs={} expr=v4791[1] }
        ?31     = { defs={} expr=v4792[1] }
        ip      = { defs={0x080485c1} expr=0x08048390[32] }
    memory:
        address = { defs={} expr=(add[32] (add[32] (add[32] v4751[32] 4[32]) -4[32]) 3[32]) }
          value = { defs={} expr=8[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4751[32] 4[32]) -4[32]) 2[32]) }
          value = { defs={} expr=4[8] }
          flags = { }
        address = { defs={} expr=(add[32] (add[32] (add[32] v4751[32] 4[32]) -4[32]) 1[32]) }
          value = { defs={} expr=-123[8] }
          flags = { }
        address = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v4751[32] 4[32]) -4[32]) }
          value = { defs={} expr=-58[8] }
          flags = { }
    init mem:
        address = { defs={} expr=(add[32] v4751[32] 3[32]) }
          value = { defs={} expr=v4798[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4751[32] 2[32]) }
          value = { defs={} expr=v4797[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4751[32] 1[32]) }
          value = { defs={} expr=v4796[8] }
          flags = { rdonly }
        address = { defs={} expr=v4751[32] }
          value = { defs={} expr=v4795[8] }
          flags = { rdonly }
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4899[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4900[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4901[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4902[8]))) }
        cx      = { defs={} expr=v4852[32] }
        dx      = { defs={} expr=v4853[32] }
        bx      = { defs={} expr=v4854[32] }
        sp      = { defs={0x080485c6} expr=(add[32] v4855[32] 4[32]) }
        bp      = { defs={} expr=v4856[32] }
        si      = { defs={} expr=v4857[32] }
        di      = { defs={} expr=v4858[32] }
        es      = { defs={} expr=v4859[16] }
        cs      = { defs={} expr=v4860[16] }
        ss      = { defs={} expr=v4861[16] }
        ds      = { defs={} expr=v4862[16] }
        fs      = { defs={} expr=v4863[16] }
        gs      = { defs={} expr=v4864[16] }
        cf      = { defs={} expr=v4865[1] }
        ?1      = { defs={} expr=v4866[1] }
        pf      = { defs={} expr=v4867[1] }
        ?3      = { defs={} expr=v4868[1] }
        af      = { defs={} expr=v4869[1] }
        ?5      = { defs={} expr=v4870[1] }
        zf      = { defs={} expr=v4871[1] }
        sf      = { defs={} expr=v4872[1] }
        tf      = { defs={} expr=v4873[1] }
        if      = { defs={} expr=v4874[1] }
        df      = { defs={} expr=v4875[1] }
        of      = { defs={} expr=v4876[1] }
        iopl0   = { defs={} expr=v4877[1] }
        iopl1   = { defs={} expr=v4878[1] }
        nt      = { defs={} expr=v4879[1] }
        ?15     = { defs={} expr=v4880[1] }
        rf      = { defs={} expr=v4881[1] }
        vm      = { defs={} expr=v4882[1] }
        ac      = { defs={} expr=v4883[1] }
        vif     = { defs={} expr=v4884[1] }
        vip     = { defs={} expr=v4885[1] }
        id      = { defs={} expr=v4886[1] }
        ?22     = { defs={} expr=v4887[1] }
        ?23     = { defs={} expr=v4888[1] }
        ?24     = { defs={} expr=v4889[1] }
        ?25     = { defs={} expr=v4890[1] }
        ?26     = { defs={} expr=v4891[1] }
        ?27     = { defs={} expr=v4892[1] }
        ?28     = { defs={} expr=v4893[1] }
        ?29     = { defs={} expr=v4894[1] }
        ?30     = { defs={} expr=v4895[1] }
        ?31     = { defs={} expr=v4896[1] }
        ip      = { defs={0x080485c6} expr=0x080485c7[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4855[32] 3[32]) }
          value = { defs={} expr=v4902[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 2[32]) }
          value = { defs={} expr=v4901[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 1[32]) }
          value = { defs={} expr=v4900[8] }
          flags = { rdonly }
        address = { defs={} expr=v4855[32] }
          value = { defs={} expr=v4899[8] }
          flags = { rdonly }
0x80485c7:pop    ebx
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4899[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4900[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4901[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4902[8]))) }
        cx      = { defs={} expr=v4852[32] }
        dx      = { defs={} expr=v4853[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4909[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4910[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4911[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4912[8]))) }
        sp      = { defs={0x080485c6,0x080485c7} expr=(add[32] (add[32] v4855[32] 4[32]) 4[32]) }
        bp      = { defs={} expr=v4856[32] }
        si      = { defs={} expr=v4857[32] }
        di      = { defs={} expr=v4858[32] }
        es      = { defs={} expr=v4859[16] }
        cs      = { defs={} expr=v4860[16] }
        ss      = { defs={} expr=v4861[16] }
        ds      = { defs={} expr=v4862[16] }
        fs      = { defs={} expr=v4863[16] }
        gs      = { defs={} expr=v4864[16] }
        cf      = { defs={} expr=v4865[1] }
        ?1      = { defs={} expr=v4866[1] }
        pf      = { defs={} expr=v4867[1] }
        ?3      = { defs={} expr=v4868[1] }
        af      = { defs={} expr=v4869[1] }
        ?5      = { defs={} expr=v4870[1] }
        zf      = { defs={} expr=v4871[1] }
        sf      = { defs={} expr=v4872[1] }
        tf      = { defs={} expr=v4873[1] }
        if      = { defs={} expr=v4874[1] }
        df      = { defs={} expr=v4875[1] }
        of      = { defs={} expr=v4876[1] }
        iopl0   = { defs={} expr=v4877[1] }
        iopl1   = { defs={} expr=v4878[1] }
        nt      = { defs={} expr=v4879[1] }
        ?15     = { defs={} expr=v4880[1] }
        rf      = { defs={} expr=v4881[1] }
        vm      = { defs={} expr=v4882[1] }
        ac      = { defs={} expr=v4883[1] }
        vif     = { defs={} expr=v4884[1] }
        vip     = { defs={} expr=v4885[1] }
        id      = { defs={} expr=v4886[1] }
        ?22     = { defs={} expr=v4887[1] }
        ?23     = { defs={} expr=v4888[1] }
        ?24     = { defs={} expr=v4889[1] }
        ?25     = { defs={} expr=v4890[1] }
        ?26     = { defs={} expr=v4891[1] }
        ?27     = { defs={} expr=v4892[1] }
        ?28     = { defs={} expr=v4893[1] }
        ?29     = { defs={} expr=v4894[1] }
        ?30     = { defs={} expr=v4895[1] }
        ?31     = { defs={} expr=v4896[1] }
        ip      = { defs={0x080485c6,0x080485c7} expr=0x080485c8[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4855[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4912[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4855[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4911[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4855[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4910[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=(add[32] v4855[32] 4[32]) }
          value = { defs={} expr=v4909[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 3[32]) }
          value = { defs={} expr=v4902[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 2[32]) }
          value = { defs={} expr=v4901[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 1[32]) }
          value = { defs={} expr=v4900[8] }
          flags = { rdonly }
        address = { defs={} expr=v4855[32] }
          value = { defs={} expr=v4899[8] }
          flags = { rdonly }
0x80485c8:leave  
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4899[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4900[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4901[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4902[8]))) }
        cx      = { defs={} expr=v4852[32] }
        dx      = { defs={} expr=v4853[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4909[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4910[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4911[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4912[8]))) }
        sp      = { defs={0x080485c8} expr=(add[32] v4856[32] 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4920[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) v4856[32] v4919[8]) v4856[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4922[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) (add[32] v4856[32] 1[32]) v4921[8]) (add[32] v4856[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4924[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) (add[32] v4856[32] 2[32]) v4923[8]) (add[32] v4856[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4926[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) (add[32] v4856[32] 3[32]) v4925[8]) (add[32] v4856[32] 3[32]))))) }
        si      = { defs={} expr=v4857[32] }
        di      = { defs={} expr=v4858[32] }
        es      = { defs={} expr=v4859[16] }
        cs      = { defs={} expr=v4860[16] }
        ss      = { defs={} expr=v4861[16] }
        ds      = { defs={} expr=v4862[16] }
        fs      = { defs={} expr=v4863[16] }
        gs      = { defs={} expr=v4864[16] }
        cf      = { defs={} expr=v4865[1] }
        ?1      = { defs={} expr=v4866[1] }
        pf      = { defs={} expr=v4867[1] }
        ?3      = { defs={} expr=v4868[1] }
        af      = { defs={} expr=v4869[1] }
        ?5      = { defs={} expr=v4870[1] }
        zf      = { defs={} expr=v4871[1] }
        sf      = { defs={} expr=v4872[1] }
        tf      = { defs={} expr=v4873[1] }
        if      = { defs={} expr=v4874[1] }
        df      = { defs={} expr=v4875[1] }
        of      = { defs={} expr=v4876[1] }
        iopl0   = { defs={} expr=v4877[1] }
        iopl1   = { defs={} expr=v4878[1] }
        nt      = { defs={} expr=v4879[1] }
        ?15     = { defs={} expr=v4880[1] }
        rf      = { defs={} expr=v4881[1] }
        vm      = { defs={} expr=v4882[1] }
        ac      = { defs={} expr=v4883[1] }
        vif     = { defs={} expr=v4884[1] }
        vip     = { defs={} expr=v4885[1] }
        id      = { defs={} expr=v4886[1] }
        ?22     = { defs={} expr=v4887[1] }
        ?23     = { defs={} expr=v4888[1] }
        ?24     = { defs={} expr=v4889[1] }
        ?25     = { defs={} expr=v4890[1] }
        ?26     = { defs={} expr=v4891[1] }
        ?27     = { defs={} expr=v4892[1] }
        ?28     = { defs={} expr=v4893[1] }
        ?29     = { defs={} expr=v4894[1] }
        ?30     = { defs={} expr=v4895[1] }
        ?31     = { defs={} expr=v4896[1] }
        ip      = { defs={0x080485c6,0x080485c7,0x080485c8} expr=0x080485c9[32] }
    memory:
    init mem:
        address = { defs={} expr=(add[32] v4856[32] 3[32]) }
          value = { defs={} expr=v4925[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4856[32] 2[32]) }
          value = { defs={} expr=v4923[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4856[32] 1[32]) }
          value = { defs={} expr=v4921[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v4856[32] }
          value = { defs={} expr=v4919[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4855[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4912[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4855[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4911[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4855[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4910[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=(add[32] v4855[32] 4[32]) }
          value = { defs={} expr=v4909[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 3[32]) }
          value = { defs={} expr=v4902[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 2[32]) }
          value = { defs={} expr=v4901[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 1[32]) }
          value = { defs={} expr=v4900[8] }
          flags = { rdonly }
        address = { defs={} expr=v4855[32] }
          value = { defs={} expr=v4899[8] }
          flags = { rdonly }
0x80485c9:ret    
    registers:
        ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4899[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4900[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4901[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4902[8]))) }
        cx      = { defs={} expr=v4852[32] }
        dx      = { defs={} expr=v4853[32] }
        bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4909[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4910[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4911[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4912[8]))) }
        sp      = { defs={0x080485c8,0x080485c9} expr=(add[32] (add[32] v4856[32] 4[32]) 4[32]) }
        bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4920[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) v4856[32] v4919[8]) v4856[32])) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4922[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) (add[32] v4856[32] 1[32]) v4921[8]) (add[32] v4856[32] 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4924[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) (add[32] v4856[32] 2[32]) v4923[8]) (add[32] v4856[32] 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4926[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) (add[32] v4856[32] 3[32]) v4925[8]) (add[32] v4856[32] 3[32]))))) }
        si      = { defs={} expr=v4857[32] }
        di      = { defs={} expr=v4858[32] }
        es      = { defs={} expr=v4859[16] }
        cs      = { defs={} expr=v4860[16] }
        ss      = { defs={} expr=v4861[16] }
        ds      = { defs={} expr=v4862[16] }
        fs      = { defs={} expr=v4863[16] }
        gs      = { defs={} expr=v4864[16] }
        cf      = { defs={} expr=v4865[1] }
        ?1      = { defs={} expr=v4866[1] }
        pf      = { defs={} expr=v4867[1] }
        ?3      = { defs={} expr=v4868[1] }
        af      = { defs={} expr=v4869[1] }
        ?5      = { defs={} expr=v4870[1] }
        zf      = { defs={} expr=v4871[1] }
        sf      = { defs={} expr=v4872[1] }
        tf      = { defs={} expr=v4873[1] }
        if      = { defs={} expr=v4874[1] }
        df      = { defs={} expr=v4875[1] }
        of      = { defs={} expr=v4876[1] }
        iopl0   = { defs={} expr=v4877[1] }
        iopl1   = { defs={} expr=v4878[1] }
        nt      = { defs={} expr=v4879[1] }
        ?15     = { defs={} expr=v4880[1] }
        rf      = { defs={} expr=v4881[1] }
        vm      = { defs={} expr=v4882[1] }
        ac      = { defs={} expr=v4883[1] }
        vif     = { defs={} expr=v4884[1] }
        vip     = { defs={} expr=v4885[1] }
        id      = { defs={} expr=v4886[1] }
        ?22     = { defs={} expr=v4887[1] }
        ?23     = { defs={} expr=v4888[1] }
        ?24     = { defs={} expr=v4889[1] }
        ?25     = { defs={} expr=v4890[1] }
        ?26     = { defs={} expr=v4891[1] }
        ?27     = { defs={} expr=v4892[1] }
        ?28     = { defs={} expr=v4893[1] }
        ?29     = { defs={} expr=v4894[1] }
        ?30     = { defs={} expr=v4895[1] }
        ?31     = { defs={} expr=v4896[1] }
        ip      = { defs={0x080485c9} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4934[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) (add[32] v4856[32] 4[32]) v4933[8]) (add[32] v4856[32] 4[32]))) (shr0[32] 8[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4936[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) (add[32] (add[32] v4856[32] 4[32]) 1[32]) v4935[8]) (add[32] (add[32] v4856[32] 4[32]) 1[32]))))) (shr0[32] 16[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4938[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) (add[32] (add[32] v4856[32] 4[32]) 2[32]) v4937[8]) (add[32] (add[32] v4856[32] 4[32]) 2[32]))))) (shr0[32] 24[32] (uextend[32] 32[32] (read[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] (write[8] m4940[8] (add[32] (add[32] v4855[32] 4[32]) 3[32]) v4912[8]) (add[32] (add[32] v4855[32] 4[32]) 2[32]) v4911[8]) (add[32] (add[32] v4855[32] 4[32]) 1[32]) v4910[8]) (add[32] v4855[32] 4[32]) v4909[8]) (add[32] v4855[32] 3[32]) v4902[8]) (add[32] v4855[32] 2[32]) v4901[8]) (add[32] v4855[32] 1[32]) v4900[8]) v4855[32] v4899[8]) (add[32] (add[32] v4856[32] 4[32]) 3[32]) v4939[8]) (add[32] (add[32] v4856[32] 4[32]) 3[32]))))) }
    memory:
    init mem:
        address = { defs={} expr=(add[32] (add[32] v4856[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4939[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4856[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4937[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4856[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4935[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=(add[32] v4856[32] 4[32]) }
          value = { defs={} expr=v4933[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4856[32] 3[32]) }
          value = { defs={} expr=v4925[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4856[32] 2[32]) }
          value = { defs={} expr=v4923[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4856[32] 1[32]) }
          value = { defs={} expr=v4921[8] }
          flags = { rdonly }
        address = { defs={0x080485c8} expr=v4856[32] }
          value = { defs={} expr=v4919[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4855[32] 4[32]) 3[32]) }
          value = { defs={} expr=v4912[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4855[32] 4[32]) 2[32]) }
          value = { defs={} expr=v4911[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] (add[32] v4855[32] 4[32]) 1[32]) }
          value = { defs={} expr=v4910[8] }
          flags = { rdonly }
        address = { defs={0x080485c6} expr=(add[32] v4855[32] 4[32]) }
          value = { defs={} expr=v4909[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 3[32]) }
          value = { defs={} expr=v4902[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 2[32]) }
          value = { defs={} expr=v4901[8] }
          flags = { rdonly }
        address = { defs={} expr=(add[32] v4855[32] 1[32]) }
          value = { defs={} expr=v4900[8] }
          flags = { rdonly }
        address = { defs={} expr=v4855[32] }
          value = { defs={} expr=v4899[8] }
          flags = { rdonly }
analyzed headers: 1
