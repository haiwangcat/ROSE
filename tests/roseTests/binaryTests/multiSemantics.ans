=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
registers:
    ax      = { v31311 }
    cx      = { v31312 }
    dx      = { v31313 }
    bx      = { v31314 }
    sp      = { v31315-0x4 }
    bp      = { v31316 }
    si      = { v31317 }
    di      = { v31318 }
    es      = { v31319 }
    cs      = { v31320 }
    ss      = { v31321 }
    ds      = { v31322 }
    fs      = { v31323 }
    gs      = { v31324 }
    cf      = { v31325 }
    ?1      = { v31326 }
    pf      = { v31327 }
    ?3      = { v31328 }
    af      = { v31329 }
    ?5      = { v31330 }
    zf      = { v31331 }
    sf      = { v31332 }
    tf      = { v31333 }
    if      = { v31334 }
    df      = { v31335 }
    of      = { v31336 }
    iopl0   = { v31337 }
    iopl1   = { v31338 }
    nt      = { v31339 }
    ?15     = { v31340 }
    rf      = { v31341 }
    vm      = { v31342 }
    ac      = { v31343 }
    vif     = { v31344 }
    vip     = { v31345 }
    id      = { v31346 }
    ?22     = { v31347 }
    ?23     = { v31348 }
    ?24     = { v31349 }
    ?25     = { v31350 }
    ?26     = { v31351 }
    ?27     = { v31352 }
    ?28     = { v31353 }
    ?29     = { v31354 }
    ?30     = { v31355 }
    ?31     = { v31356 }
    ip      = { 0x80482c9 }
memory:
    address = { v31315-0x4 }
      value = { v31316 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v48[32] }
    cx      = { defs={} expr=v49[32] }
    dx      = { defs={} expr=v50[32] }
    bx      = { defs={} expr=v51[32] }
    sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
    bp      = { defs={} expr=v53[32] }
    si      = { defs={} expr=v54[32] }
    di      = { defs={} expr=v55[32] }
    es      = { defs={} expr=v56[16] }
    cs      = { defs={} expr=v57[16] }
    ss      = { defs={} expr=v58[16] }
    ds      = { defs={} expr=v59[16] }
    fs      = { defs={} expr=v60[16] }
    gs      = { defs={} expr=v61[16] }
    cf      = { defs={} expr=v62[1] }
    ?1      = { defs={} expr=v63[1] }
    pf      = { defs={} expr=v64[1] }
    ?3      = { defs={} expr=v65[1] }
    af      = { defs={} expr=v66[1] }
    ?5      = { defs={} expr=v67[1] }
    zf      = { defs={} expr=v68[1] }
    sf      = { defs={} expr=v69[1] }
    tf      = { defs={} expr=v70[1] }
    if      = { defs={} expr=v71[1] }
    df      = { defs={} expr=v72[1] }
    of      = { defs={} expr=v73[1] }
    iopl0   = { defs={} expr=v74[1] }
    iopl1   = { defs={} expr=v75[1] }
    nt      = { defs={} expr=v76[1] }
    ?15     = { defs={} expr=v77[1] }
    rf      = { defs={} expr=v78[1] }
    vm      = { defs={} expr=v79[1] }
    ac      = { defs={} expr=v80[1] }
    vif     = { defs={} expr=v81[1] }
    vip     = { defs={} expr=v82[1] }
    id      = { defs={} expr=v83[1] }
    ?22     = { defs={} expr=v84[1] }
    ?23     = { defs={} expr=v85[1] }
    ?24     = { defs={} expr=v86[1] }
    ?25     = { defs={} expr=v87[1] }
    ?26     = { defs={} expr=v88[1] }
    ?27     = { defs={} expr=v89[1] }
    ?28     = { defs={} expr=v90[1] }
    ?29     = { defs={} expr=v91[1] }
    ?30     = { defs={} expr=v92[1] }
    ?31     = { defs={} expr=v93[1] }
    ip      = { defs={0x080482c8} expr=0x080482c9[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
      flags = { }
    address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
      flags = { }
init mem:
null state
null state
0x80482c9:mov    ebp, esp
registers:
    ax      = { v31311 }
    cx      = { v31312 }
    dx      = { v31313 }
    bx      = { v31314 }
    sp      = { v31315-0x4 }
    bp      = { v31315-0x4 }
    si      = { v31317 }
    di      = { v31318 }
    es      = { v31319 }
    cs      = { v31320 }
    ss      = { v31321 }
    ds      = { v31322 }
    fs      = { v31323 }
    gs      = { v31324 }
    cf      = { v31325 }
    ?1      = { v31326 }
    pf      = { v31327 }
    ?3      = { v31328 }
    af      = { v31329 }
    ?5      = { v31330 }
    zf      = { v31331 }
    sf      = { v31332 }
    tf      = { v31333 }
    if      = { v31334 }
    df      = { v31335 }
    of      = { v31336 }
    iopl0   = { v31337 }
    iopl1   = { v31338 }
    nt      = { v31339 }
    ?15     = { v31340 }
    rf      = { v31341 }
    vm      = { v31342 }
    ac      = { v31343 }
    vif     = { v31344 }
    vip     = { v31345 }
    id      = { v31346 }
    ?22     = { v31347 }
    ?23     = { v31348 }
    ?24     = { v31349 }
    ?25     = { v31350 }
    ?26     = { v31351 }
    ?27     = { v31352 }
    ?28     = { v31353 }
    ?29     = { v31354 }
    ?30     = { v31355 }
    ?31     = { v31356 }
    ip      = { 0x80482cb }
memory:
    address = { v31315-0x4 }
      value = { v31316 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v48[32] }
    cx      = { defs={} expr=v49[32] }
    dx      = { defs={} expr=v50[32] }
    bx      = { defs={} expr=v51[32] }
    sp      = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
    bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
    si      = { defs={} expr=v54[32] }
    di      = { defs={} expr=v55[32] }
    es      = { defs={} expr=v56[16] }
    cs      = { defs={} expr=v57[16] }
    ss      = { defs={} expr=v58[16] }
    ds      = { defs={} expr=v59[16] }
    fs      = { defs={} expr=v60[16] }
    gs      = { defs={} expr=v61[16] }
    cf      = { defs={} expr=v62[1] }
    ?1      = { defs={} expr=v63[1] }
    pf      = { defs={} expr=v64[1] }
    ?3      = { defs={} expr=v65[1] }
    af      = { defs={} expr=v66[1] }
    ?5      = { defs={} expr=v67[1] }
    zf      = { defs={} expr=v68[1] }
    sf      = { defs={} expr=v69[1] }
    tf      = { defs={} expr=v70[1] }
    if      = { defs={} expr=v71[1] }
    df      = { defs={} expr=v72[1] }
    of      = { defs={} expr=v73[1] }
    iopl0   = { defs={} expr=v74[1] }
    iopl1   = { defs={} expr=v75[1] }
    nt      = { defs={} expr=v76[1] }
    ?15     = { defs={} expr=v77[1] }
    rf      = { defs={} expr=v78[1] }
    vm      = { defs={} expr=v79[1] }
    ac      = { defs={} expr=v80[1] }
    vif     = { defs={} expr=v81[1] }
    vip     = { defs={} expr=v82[1] }
    id      = { defs={} expr=v83[1] }
    ?22     = { defs={} expr=v84[1] }
    ?23     = { defs={} expr=v85[1] }
    ?24     = { defs={} expr=v86[1] }
    ?25     = { defs={} expr=v87[1] }
    ?26     = { defs={} expr=v88[1] }
    ?27     = { defs={} expr=v89[1] }
    ?28     = { defs={} expr=v90[1] }
    ?29     = { defs={} expr=v91[1] }
    ?30     = { defs={} expr=v92[1] }
    ?31     = { defs={} expr=v93[1] }
    ip      = { defs={0x080482c8,0x080482c9} expr=0x080482cb[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
      flags = { }
    address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
      flags = { }
init mem:
null state
null state
0x80482cb:sub    esp, 0x08
registers:
    ax      = { v31311 }
    cx      = { v31312 }
    dx      = { v31313 }
    bx      = { v31314 }
    sp      = { v31315-0xc }
    bp      = { v31315-0x4 }
    si      = { v31317 }
    di      = { v31318 }
    es      = { v31319 }
    cs      = { v31320 }
    ss      = { v31321 }
    ds      = { v31322 }
    fs      = { v31323 }
    gs      = { v31324 }
    cf      = { -v31422+0x1 }
    ?1      = { v31326 }
    pf      = { -v31412+0x1 }
    ?3      = { v31328 }
    af      = { -v31419+0x1 }
    ?5      = { v31330 }
    zf      = { v31417 }
    sf      = { v31415 }
    tf      = { v31333 }
    if      = { v31334 }
    df      = { v31335 }
    of      = { v31429 }
    iopl0   = { v31337 }
    iopl1   = { v31338 }
    nt      = { v31339 }
    ?15     = { v31340 }
    rf      = { v31341 }
    vm      = { v31342 }
    ac      = { v31343 }
    vif     = { v31344 }
    vip     = { v31345 }
    id      = { v31346 }
    ?22     = { v31347 }
    ?23     = { v31348 }
    ?24     = { v31349 }
    ?25     = { v31350 }
    ?26     = { v31351 }
    ?27     = { v31352 }
    ?28     = { v31353 }
    ?29     = { v31354 }
    ?30     = { v31355 }
    ?31     = { v31356 }
    ip      = { 0x80482ce }
memory:
    address = { v31315-0x4 }
      value = { v31316 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v48[32] }
    cx      = { defs={} expr=v49[32] }
    dx      = { defs={} expr=v50[32] }
    bx      = { defs={} expr=v51[32] }
    sp      = { defs={0x080482c8,0x080482cb} expr=(add[32] (add[32] v52[32] -4[32]) -8[32]) }
    bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
    si      = { defs={} expr=v54[32] }
    di      = { defs={} expr=v55[32] }
    es      = { defs={} expr=v56[16] }
    cs      = { defs={} expr=v57[16] }
    ss      = { defs={} expr=v58[16] }
    ds      = { defs={} expr=v59[16] }
    fs      = { defs={} expr=v60[16] }
    gs      = { defs={} expr=v61[16] }
    cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v63[1] }
    pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v65[1] }
    af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v67[1] }
    zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
    sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v70[1] }
    if      = { defs={} expr=v71[1] }
    df      = { defs={} expr=v72[1] }
    of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v74[1] }
    iopl1   = { defs={} expr=v75[1] }
    nt      = { defs={} expr=v76[1] }
    ?15     = { defs={} expr=v77[1] }
    rf      = { defs={} expr=v78[1] }
    vm      = { defs={} expr=v79[1] }
    ac      = { defs={} expr=v80[1] }
    vif     = { defs={} expr=v81[1] }
    vip     = { defs={} expr=v82[1] }
    id      = { defs={} expr=v83[1] }
    ?22     = { defs={} expr=v84[1] }
    ?23     = { defs={} expr=v85[1] }
    ?24     = { defs={} expr=v86[1] }
    ?25     = { defs={} expr=v87[1] }
    ?26     = { defs={} expr=v88[1] }
    ?27     = { defs={} expr=v89[1] }
    ?28     = { defs={} expr=v90[1] }
    ?29     = { defs={} expr=v91[1] }
    ?30     = { defs={} expr=v92[1] }
    ?31     = { defs={} expr=v93[1] }
    ip      = { defs={0x080482c8,0x080482c9,0x080482cb} expr=0x080482ce[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
      flags = { }
    address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
      flags = { }
init mem:
null state
null state
0x80482ce:call   0x08048364<call_gmon_start>
registers:
    ax      = { v31311 }
    cx      = { v31312 }
    dx      = { v31313 }
    bx      = { v31314 }
    sp      = { v31315-0x10 }
    bp      = { v31315-0x4 }
    si      = { v31317 }
    di      = { v31318 }
    es      = { v31319 }
    cs      = { v31320 }
    ss      = { v31321 }
    ds      = { v31322 }
    fs      = { v31323 }
    gs      = { v31324 }
    cf      = { -v31422+0x1 }
    ?1      = { v31326 }
    pf      = { -v31412+0x1 }
    ?3      = { v31328 }
    af      = { -v31419+0x1 }
    ?5      = { v31330 }
    zf      = { v31417 }
    sf      = { v31415 }
    tf      = { v31333 }
    if      = { v31334 }
    df      = { v31335 }
    of      = { v31429 }
    iopl0   = { v31337 }
    iopl1   = { v31338 }
    nt      = { v31339 }
    ?15     = { v31340 }
    rf      = { v31341 }
    vm      = { v31342 }
    ac      = { v31343 }
    vif     = { v31344 }
    vip     = { v31345 }
    id      = { v31346 }
    ?22     = { v31347 }
    ?23     = { v31348 }
    ?24     = { v31349 }
    ?25     = { v31350 }
    ?26     = { v31351 }
    ?27     = { v31352 }
    ?28     = { v31353 }
    ?29     = { v31354 }
    ?30     = { v31355 }
    ?31     = { v31356 }
    ip      = { 0x8048364 }
memory:
    address = { v31315-0x4 }
      value = { v31316 }
      flags = { size=4 }
    address = { v31315-0x10 }
      value = { 0x80482d3 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v48[32] }
    cx      = { defs={} expr=v49[32] }
    dx      = { defs={} expr=v50[32] }
    bx      = { defs={} expr=v51[32] }
    sp      = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
    bp      = { defs={0x080482c8,0x080482c9} expr=(add[32] v52[32] -4[32]) }
    si      = { defs={} expr=v54[32] }
    di      = { defs={} expr=v55[32] }
    es      = { defs={} expr=v56[16] }
    cs      = { defs={} expr=v57[16] }
    ss      = { defs={} expr=v58[16] }
    ds      = { defs={} expr=v59[16] }
    fs      = { defs={} expr=v60[16] }
    gs      = { defs={} expr=v61[16] }
    cf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v63[1] }
    pf      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v52[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v65[1] }
    af      = { defs={0x080482c8,0x080482cb} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v67[1] }
    zf      = { defs={0x080482c8,0x080482cb} expr=(zerop[1] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
    sf      = { defs={0x080482c8,0x080482cb} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v52[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v70[1] }
    if      = { defs={} expr=v71[1] }
    df      = { defs={} expr=v72[1] }
    of      = { defs={0x080482c8,0x080482cb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v52[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v74[1] }
    iopl1   = { defs={} expr=v75[1] }
    nt      = { defs={} expr=v76[1] }
    ?15     = { defs={} expr=v77[1] }
    rf      = { defs={} expr=v78[1] }
    vm      = { defs={} expr=v79[1] }
    ac      = { defs={} expr=v80[1] }
    vif     = { defs={} expr=v81[1] }
    vip     = { defs={} expr=v82[1] }
    id      = { defs={} expr=v83[1] }
    ?22     = { defs={} expr=v84[1] }
    ?23     = { defs={} expr=v85[1] }
    ?24     = { defs={} expr=v86[1] }
    ?25     = { defs={} expr=v87[1] }
    ?26     = { defs={} expr=v88[1] }
    ?27     = { defs={} expr=v89[1] }
    ?28     = { defs={} expr=v90[1] }
    ?29     = { defs={} expr=v91[1] }
    ?30     = { defs={} expr=v92[1] }
    ?31     = { defs={} expr=v93[1] }
    ip      = { defs={0x080482ce} expr=0x08048364[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-126[8] }
      flags = { }
    address = { defs={0x080482c8,0x080482cb,0x080482ce} expr=(add[32] (add[32] (add[32] v52[32] -4[32]) -8[32]) -4[32]) }
      value = { defs={} expr=-45[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v53[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v52[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v53[32]) }
      flags = { }
    address = { defs={0x080482c8} expr=(add[32] v52[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v53[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0<frame_dummy>
registers:
    ax      = { v31489 }
    cx      = { v31490 }
    dx      = { v31491 }
    bx      = { v31492 }
    sp      = { v31493-0x4 }
    bp      = { v31494 }
    si      = { v31495 }
    di      = { v31496 }
    es      = { v31497 }
    cs      = { v31498 }
    ss      = { v31499 }
    ds      = { v31500 }
    fs      = { v31501 }
    gs      = { v31502 }
    cf      = { v31503 }
    ?1      = { v31504 }
    pf      = { v31505 }
    ?3      = { v31506 }
    af      = { v31507 }
    ?5      = { v31508 }
    zf      = { v31509 }
    sf      = { v31510 }
    tf      = { v31511 }
    if      = { v31512 }
    df      = { v31513 }
    of      = { v31514 }
    iopl0   = { v31515 }
    iopl1   = { v31516 }
    nt      = { v31517 }
    ?15     = { v31518 }
    rf      = { v31519 }
    vm      = { v31520 }
    ac      = { v31521 }
    vif     = { v31522 }
    vip     = { v31523 }
    id      = { v31524 }
    ?22     = { v31525 }
    ?23     = { v31526 }
    ?24     = { v31527 }
    ?25     = { v31528 }
    ?26     = { v31529 }
    ?27     = { v31530 }
    ?28     = { v31531 }
    ?29     = { v31532 }
    ?30     = { v31533 }
    ?31     = { v31534 }
    ip      = { 0x80483d0 }
memory:
    address = { v31493-0x4 }
      value = { 0x80482d8 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v204[32] }
    cx      = { defs={} expr=v205[32] }
    dx      = { defs={} expr=v206[32] }
    bx      = { defs={} expr=v207[32] }
    sp      = { defs={0x080482d3} expr=(add[32] v208[32] -4[32]) }
    bp      = { defs={} expr=v209[32] }
    si      = { defs={} expr=v210[32] }
    di      = { defs={} expr=v211[32] }
    es      = { defs={} expr=v212[16] }
    cs      = { defs={} expr=v213[16] }
    ss      = { defs={} expr=v214[16] }
    ds      = { defs={} expr=v215[16] }
    fs      = { defs={} expr=v216[16] }
    gs      = { defs={} expr=v217[16] }
    cf      = { defs={} expr=v218[1] }
    ?1      = { defs={} expr=v219[1] }
    pf      = { defs={} expr=v220[1] }
    ?3      = { defs={} expr=v221[1] }
    af      = { defs={} expr=v222[1] }
    ?5      = { defs={} expr=v223[1] }
    zf      = { defs={} expr=v224[1] }
    sf      = { defs={} expr=v225[1] }
    tf      = { defs={} expr=v226[1] }
    if      = { defs={} expr=v227[1] }
    df      = { defs={} expr=v228[1] }
    of      = { defs={} expr=v229[1] }
    iopl0   = { defs={} expr=v230[1] }
    iopl1   = { defs={} expr=v231[1] }
    nt      = { defs={} expr=v232[1] }
    ?15     = { defs={} expr=v233[1] }
    rf      = { defs={} expr=v234[1] }
    vm      = { defs={} expr=v235[1] }
    ac      = { defs={} expr=v236[1] }
    vif     = { defs={} expr=v237[1] }
    vip     = { defs={} expr=v238[1] }
    id      = { defs={} expr=v239[1] }
    ?22     = { defs={} expr=v240[1] }
    ?23     = { defs={} expr=v241[1] }
    ?24     = { defs={} expr=v242[1] }
    ?25     = { defs={} expr=v243[1] }
    ?26     = { defs={} expr=v244[1] }
    ?27     = { defs={} expr=v245[1] }
    ?28     = { defs={} expr=v246[1] }
    ?29     = { defs={} expr=v247[1] }
    ?30     = { defs={} expr=v248[1] }
    ?31     = { defs={} expr=v249[1] }
    ip      = { defs={0x080482d3} expr=0x080483d0[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v208[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v208[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v208[32] -4[32]) 1[32]) }
      value = { defs={} expr=-126[8] }
      flags = { }
    address = { defs={0x080482d3} expr=(add[32] v208[32] -4[32]) }
      value = { defs={} expr=-40[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580<__do_global_ctors_aux>
registers:
    ax      = { v31594 }
    cx      = { v31595 }
    dx      = { v31596 }
    bx      = { v31597 }
    sp      = { v31598-0x4 }
    bp      = { v31599 }
    si      = { v31600 }
    di      = { v31601 }
    es      = { v31602 }
    cs      = { v31603 }
    ss      = { v31604 }
    ds      = { v31605 }
    fs      = { v31606 }
    gs      = { v31607 }
    cf      = { v31608 }
    ?1      = { v31609 }
    pf      = { v31610 }
    ?3      = { v31611 }
    af      = { v31612 }
    ?5      = { v31613 }
    zf      = { v31614 }
    sf      = { v31615 }
    tf      = { v31616 }
    if      = { v31617 }
    df      = { v31618 }
    of      = { v31619 }
    iopl0   = { v31620 }
    iopl1   = { v31621 }
    nt      = { v31622 }
    ?15     = { v31623 }
    rf      = { v31624 }
    vm      = { v31625 }
    ac      = { v31626 }
    vif     = { v31627 }
    vip     = { v31628 }
    id      = { v31629 }
    ?22     = { v31630 }
    ?23     = { v31631 }
    ?24     = { v31632 }
    ?25     = { v31633 }
    ?26     = { v31634 }
    ?27     = { v31635 }
    ?28     = { v31636 }
    ?29     = { v31637 }
    ?30     = { v31638 }
    ?31     = { v31639 }
    ip      = { 0x8048580 }
memory:
    address = { v31598-0x4 }
      value = { 0x80482dd }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v309[32] }
    cx      = { defs={} expr=v310[32] }
    dx      = { defs={} expr=v311[32] }
    bx      = { defs={} expr=v312[32] }
    sp      = { defs={0x080482d8} expr=(add[32] v313[32] -4[32]) }
    bp      = { defs={} expr=v314[32] }
    si      = { defs={} expr=v315[32] }
    di      = { defs={} expr=v316[32] }
    es      = { defs={} expr=v317[16] }
    cs      = { defs={} expr=v318[16] }
    ss      = { defs={} expr=v319[16] }
    ds      = { defs={} expr=v320[16] }
    fs      = { defs={} expr=v321[16] }
    gs      = { defs={} expr=v322[16] }
    cf      = { defs={} expr=v323[1] }
    ?1      = { defs={} expr=v324[1] }
    pf      = { defs={} expr=v325[1] }
    ?3      = { defs={} expr=v326[1] }
    af      = { defs={} expr=v327[1] }
    ?5      = { defs={} expr=v328[1] }
    zf      = { defs={} expr=v329[1] }
    sf      = { defs={} expr=v330[1] }
    tf      = { defs={} expr=v331[1] }
    if      = { defs={} expr=v332[1] }
    df      = { defs={} expr=v333[1] }
    of      = { defs={} expr=v334[1] }
    iopl0   = { defs={} expr=v335[1] }
    iopl1   = { defs={} expr=v336[1] }
    nt      = { defs={} expr=v337[1] }
    ?15     = { defs={} expr=v338[1] }
    rf      = { defs={} expr=v339[1] }
    vm      = { defs={} expr=v340[1] }
    ac      = { defs={} expr=v341[1] }
    vif     = { defs={} expr=v342[1] }
    vip     = { defs={} expr=v343[1] }
    id      = { defs={} expr=v344[1] }
    ?22     = { defs={} expr=v345[1] }
    ?23     = { defs={} expr=v346[1] }
    ?24     = { defs={} expr=v347[1] }
    ?25     = { defs={} expr=v348[1] }
    ?26     = { defs={} expr=v349[1] }
    ?27     = { defs={} expr=v350[1] }
    ?28     = { defs={} expr=v351[1] }
    ?29     = { defs={} expr=v352[1] }
    ?30     = { defs={} expr=v353[1] }
    ?31     = { defs={} expr=v354[1] }
    ip      = { defs={0x080482d8} expr=0x08048580[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v313[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v313[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v313[32] -4[32]) 1[32]) }
      value = { defs={} expr=-126[8] }
      flags = { }
    address = { defs={0x080482d8} expr=(add[32] v313[32] -4[32]) }
      value = { defs={} expr=-35[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
registers:
    ax      = { v31699 }
    cx      = { v31700 }
    dx      = { v31701 }
    bx      = { v31702 }
    sp      = { v31704+0x4 }
    bp      = { v31755 }
    si      = { v31705 }
    di      = { v31706 }
    es      = { v31707 }
    cs      = { v31708 }
    ss      = { v31709 }
    ds      = { v31710 }
    fs      = { v31711 }
    gs      = { v31712 }
    cf      = { v31713 }
    ?1      = { v31714 }
    pf      = { v31715 }
    ?3      = { v31716 }
    af      = { v31717 }
    ?5      = { v31718 }
    zf      = { v31719 }
    sf      = { v31720 }
    tf      = { v31721 }
    if      = { v31722 }
    df      = { v31723 }
    of      = { v31724 }
    iopl0   = { v31725 }
    iopl1   = { v31726 }
    nt      = { v31727 }
    ?15     = { v31728 }
    rf      = { v31729 }
    vm      = { v31730 }
    ac      = { v31731 }
    vif     = { v31732 }
    vip     = { v31733 }
    id      = { v31734 }
    ?22     = { v31735 }
    ?23     = { v31736 }
    ?24     = { v31737 }
    ?25     = { v31738 }
    ?26     = { v31739 }
    ?27     = { v31740 }
    ?28     = { v31741 }
    ?29     = { v31742 }
    ?30     = { v31743 }
    ?31     = { v31744 }
    ip      = { 0x80482de }
memory:
    address = { v31704 }
      value = { v31755 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v414[32] }
    cx      = { defs={} expr=v415[32] }
    dx      = { defs={} expr=v416[32] }
    bx      = { defs={} expr=v417[32] }
    sp      = { defs={0x080482dd} expr=(add[32] v419[32] 4[32]) }
    bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v472[8]) (shr0[32] 8[32] (uextend[32] 32[32] v473[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v474[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v475[8]))) }
    si      = { defs={} expr=v420[32] }
    di      = { defs={} expr=v421[32] }
    es      = { defs={} expr=v422[16] }
    cs      = { defs={} expr=v423[16] }
    ss      = { defs={} expr=v424[16] }
    ds      = { defs={} expr=v425[16] }
    fs      = { defs={} expr=v426[16] }
    gs      = { defs={} expr=v427[16] }
    cf      = { defs={} expr=v428[1] }
    ?1      = { defs={} expr=v429[1] }
    pf      = { defs={} expr=v430[1] }
    ?3      = { defs={} expr=v431[1] }
    af      = { defs={} expr=v432[1] }
    ?5      = { defs={} expr=v433[1] }
    zf      = { defs={} expr=v434[1] }
    sf      = { defs={} expr=v435[1] }
    tf      = { defs={} expr=v436[1] }
    if      = { defs={} expr=v437[1] }
    df      = { defs={} expr=v438[1] }
    of      = { defs={} expr=v439[1] }
    iopl0   = { defs={} expr=v440[1] }
    iopl1   = { defs={} expr=v441[1] }
    nt      = { defs={} expr=v442[1] }
    ?15     = { defs={} expr=v443[1] }
    rf      = { defs={} expr=v444[1] }
    vm      = { defs={} expr=v445[1] }
    ac      = { defs={} expr=v446[1] }
    vif     = { defs={} expr=v447[1] }
    vip     = { defs={} expr=v448[1] }
    id      = { defs={} expr=v449[1] }
    ?22     = { defs={} expr=v450[1] }
    ?23     = { defs={} expr=v451[1] }
    ?24     = { defs={} expr=v452[1] }
    ?25     = { defs={} expr=v453[1] }
    ?26     = { defs={} expr=v454[1] }
    ?27     = { defs={} expr=v455[1] }
    ?28     = { defs={} expr=v456[1] }
    ?29     = { defs={} expr=v457[1] }
    ?30     = { defs={} expr=v458[1] }
    ?31     = { defs={} expr=v459[1] }
    ip      = { defs={0x080482dd} expr=0x080482de[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v419[32] 3[32]) }
      value = { defs={} expr=v475[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v419[32] 2[32]) }
      value = { defs={} expr=v474[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v419[32] 1[32]) }
      value = { defs={} expr=v473[8] }
      flags = { rdonly }
    address = { defs={0x080482dd} expr=v419[32] }
      value = { defs={} expr=v472[8] }
      flags = { rdonly }
null state
null state
0x80482de:ret    
registers:
    ax      = { v31699 }
    cx      = { v31700 }
    dx      = { v31701 }
    bx      = { v31702 }
    sp      = { v31704+0x8 }
    bp      = { v31755 }
    si      = { v31705 }
    di      = { v31706 }
    es      = { v31707 }
    cs      = { v31708 }
    ss      = { v31709 }
    ds      = { v31710 }
    fs      = { v31711 }
    gs      = { v31712 }
    cf      = { v31713 }
    ?1      = { v31714 }
    pf      = { v31715 }
    ?3      = { v31716 }
    af      = { v31717 }
    ?5      = { v31718 }
    zf      = { v31719 }
    sf      = { v31720 }
    tf      = { v31721 }
    if      = { v31722 }
    df      = { v31723 }
    of      = { v31724 }
    iopl0   = { v31725 }
    iopl1   = { v31726 }
    nt      = { v31727 }
    ?15     = { v31728 }
    rf      = { v31729 }
    vm      = { v31730 }
    ac      = { v31731 }
    vif     = { v31732 }
    vip     = { v31733 }
    id      = { v31734 }
    ?22     = { v31735 }
    ?23     = { v31736 }
    ?24     = { v31737 }
    ?25     = { v31738 }
    ?26     = { v31739 }
    ?27     = { v31740 }
    ?28     = { v31741 }
    ?29     = { v31742 }
    ?30     = { v31743 }
    ?31     = { v31744 }
    ip      = { v31767 }
memory:
    address = { v31704 }
      value = { v31755 }
      flags = { size=4; read-only }
    address = { v31704+0x4 }
      value = { v31767 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v414[32] }
    cx      = { defs={} expr=v415[32] }
    dx      = { defs={} expr=v416[32] }
    bx      = { defs={} expr=v417[32] }
    sp      = { defs={0x080482dd,0x080482de} expr=(add[32] (add[32] v419[32] 4[32]) 4[32]) }
    bp      = { defs={0x080482dd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v472[8]) (shr0[32] 8[32] (uextend[32] 32[32] v473[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v474[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v475[8]))) }
    si      = { defs={} expr=v420[32] }
    di      = { defs={} expr=v421[32] }
    es      = { defs={} expr=v422[16] }
    cs      = { defs={} expr=v423[16] }
    ss      = { defs={} expr=v424[16] }
    ds      = { defs={} expr=v425[16] }
    fs      = { defs={} expr=v426[16] }
    gs      = { defs={} expr=v427[16] }
    cf      = { defs={} expr=v428[1] }
    ?1      = { defs={} expr=v429[1] }
    pf      = { defs={} expr=v430[1] }
    ?3      = { defs={} expr=v431[1] }
    af      = { defs={} expr=v432[1] }
    ?5      = { defs={} expr=v433[1] }
    zf      = { defs={} expr=v434[1] }
    sf      = { defs={} expr=v435[1] }
    tf      = { defs={} expr=v436[1] }
    if      = { defs={} expr=v437[1] }
    df      = { defs={} expr=v438[1] }
    of      = { defs={} expr=v439[1] }
    iopl0   = { defs={} expr=v440[1] }
    iopl1   = { defs={} expr=v441[1] }
    nt      = { defs={} expr=v442[1] }
    ?15     = { defs={} expr=v443[1] }
    rf      = { defs={} expr=v444[1] }
    vm      = { defs={} expr=v445[1] }
    ac      = { defs={} expr=v446[1] }
    vif     = { defs={} expr=v447[1] }
    vip     = { defs={} expr=v448[1] }
    id      = { defs={} expr=v449[1] }
    ?22     = { defs={} expr=v450[1] }
    ?23     = { defs={} expr=v451[1] }
    ?24     = { defs={} expr=v452[1] }
    ?25     = { defs={} expr=v453[1] }
    ?26     = { defs={} expr=v454[1] }
    ?27     = { defs={} expr=v455[1] }
    ?28     = { defs={} expr=v456[1] }
    ?29     = { defs={} expr=v457[1] }
    ?30     = { defs={} expr=v458[1] }
    ?31     = { defs={} expr=v459[1] }
    ip      = { defs={0x080482de} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v493[8]) (shr0[32] 8[32] (uextend[32] 32[32] v494[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v495[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v496[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v419[32] 4[32]) 3[32]) }
      value = { defs={} expr=v496[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v419[32] 4[32]) 2[32]) }
      value = { defs={} expr=v495[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v419[32] 4[32]) 1[32]) }
      value = { defs={} expr=v494[8] }
      flags = { rdonly }
    address = { defs={0x080482dd} expr=(add[32] v419[32] 4[32]) }
      value = { defs={} expr=v493[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v419[32] 3[32]) }
      value = { defs={} expr=v475[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v419[32] 2[32]) }
      value = { defs={} expr=v474[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v419[32] 1[32]) }
      value = { defs={} expr=v473[8] }
      flags = { rdonly }
    address = { defs={0x080482dd} expr=v419[32] }
      value = { defs={} expr=v472[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f0:jmp    DWORD PTR ds:[0x080496d4<.got.plt+0x0c>]
registers:
    ax      = { v31818 }
    cx      = { v31819 }
    dx      = { v31820 }
    bx      = { v31821 }
    sp      = { v31822 }
    bp      = { v31823 }
    si      = { v31824 }
    di      = { v31825 }
    es      = { v31826 }
    cs      = { v31827 }
    ss      = { v31828 }
    ds      = { v31829 }
    fs      = { v31830 }
    gs      = { v31831 }
    cf      = { v31832 }
    ?1      = { v31833 }
    pf      = { v31834 }
    ?3      = { v31835 }
    af      = { v31836 }
    ?5      = { v31837 }
    zf      = { v31838 }
    sf      = { v31839 }
    tf      = { v31840 }
    if      = { v31841 }
    df      = { v31842 }
    of      = { v31843 }
    iopl0   = { v31844 }
    iopl1   = { v31845 }
    nt      = { v31846 }
    ?15     = { v31847 }
    rf      = { v31848 }
    vm      = { v31849 }
    ac      = { v31850 }
    vif     = { v31851 }
    vip     = { v31852 }
    id      = { v31853 }
    ?22     = { v31854 }
    ?23     = { v31855 }
    ?24     = { v31856 }
    ?25     = { v31857 }
    ?26     = { v31858 }
    ?27     = { v31859 }
    ?28     = { v31860 }
    ?29     = { v31861 }
    ?30     = { v31862 }
    ?31     = { v31863 }
    ip      = { v31871 }
memory:
    address = { 0x80496d4 }
      value = { v31871 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v551[32] }
    cx      = { defs={} expr=v552[32] }
    dx      = { defs={} expr=v553[32] }
    bx      = { defs={} expr=v554[32] }
    sp      = { defs={} expr=v555[32] }
    bp      = { defs={} expr=v556[32] }
    si      = { defs={} expr=v557[32] }
    di      = { defs={} expr=v558[32] }
    es      = { defs={} expr=v559[16] }
    cs      = { defs={} expr=v560[16] }
    ss      = { defs={} expr=v561[16] }
    ds      = { defs={} expr=v562[16] }
    fs      = { defs={} expr=v563[16] }
    gs      = { defs={} expr=v564[16] }
    cf      = { defs={} expr=v565[1] }
    ?1      = { defs={} expr=v566[1] }
    pf      = { defs={} expr=v567[1] }
    ?3      = { defs={} expr=v568[1] }
    af      = { defs={} expr=v569[1] }
    ?5      = { defs={} expr=v570[1] }
    zf      = { defs={} expr=v571[1] }
    sf      = { defs={} expr=v572[1] }
    tf      = { defs={} expr=v573[1] }
    if      = { defs={} expr=v574[1] }
    df      = { defs={} expr=v575[1] }
    of      = { defs={} expr=v576[1] }
    iopl0   = { defs={} expr=v577[1] }
    iopl1   = { defs={} expr=v578[1] }
    nt      = { defs={} expr=v579[1] }
    ?15     = { defs={} expr=v580[1] }
    rf      = { defs={} expr=v581[1] }
    vm      = { defs={} expr=v582[1] }
    ac      = { defs={} expr=v583[1] }
    vif     = { defs={} expr=v584[1] }
    vip     = { defs={} expr=v585[1] }
    id      = { defs={} expr=v586[1] }
    ?22     = { defs={} expr=v587[1] }
    ?23     = { defs={} expr=v588[1] }
    ?24     = { defs={} expr=v589[1] }
    ?25     = { defs={} expr=v590[1] }
    ?26     = { defs={} expr=v591[1] }
    ?27     = { defs={} expr=v592[1] }
    ?28     = { defs={} expr=v593[1] }
    ?29     = { defs={} expr=v594[1] }
    ?30     = { defs={} expr=v595[1] }
    ?31     = { defs={} expr=v596[1] }
    ip      = { defs={0x080482f0} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v606[8]) (shr0[32] 8[32] (uextend[32] 32[32] v607[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v608[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v609[8]))) }
memory:
init mem:
    address = { defs={} expr=0x080496d7[32] }
      value = { defs={} expr=v609[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496d6[32] }
      value = { defs={} expr=v608[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496d5[32] }
      value = { defs={} expr=v607[8] }
      flags = { rdonly }
    address = { defs={0x080482f0} expr=0x080496d4[32] }
      value = { defs={} expr=v606[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8<.got.plt+0x10>]
registers:
    ax      = { v31922 }
    cx      = { v31923 }
    dx      = { v31924 }
    bx      = { v31925 }
    sp      = { v31926 }
    bp      = { v31927 }
    si      = { v31928 }
    di      = { v31929 }
    es      = { v31930 }
    cs      = { v31931 }
    ss      = { v31932 }
    ds      = { v31933 }
    fs      = { v31934 }
    gs      = { v31935 }
    cf      = { v31936 }
    ?1      = { v31937 }
    pf      = { v31938 }
    ?3      = { v31939 }
    af      = { v31940 }
    ?5      = { v31941 }
    zf      = { v31942 }
    sf      = { v31943 }
    tf      = { v31944 }
    if      = { v31945 }
    df      = { v31946 }
    of      = { v31947 }
    iopl0   = { v31948 }
    iopl1   = { v31949 }
    nt      = { v31950 }
    ?15     = { v31951 }
    rf      = { v31952 }
    vm      = { v31953 }
    ac      = { v31954 }
    vif     = { v31955 }
    vip     = { v31956 }
    id      = { v31957 }
    ?22     = { v31958 }
    ?23     = { v31959 }
    ?24     = { v31960 }
    ?25     = { v31961 }
    ?26     = { v31962 }
    ?27     = { v31963 }
    ?28     = { v31964 }
    ?29     = { v31965 }
    ?30     = { v31966 }
    ?31     = { v31967 }
    ip      = { v31975 }
memory:
    address = { 0x80496d8 }
      value = { v31975 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v664[32] }
    cx      = { defs={} expr=v665[32] }
    dx      = { defs={} expr=v666[32] }
    bx      = { defs={} expr=v667[32] }
    sp      = { defs={} expr=v668[32] }
    bp      = { defs={} expr=v669[32] }
    si      = { defs={} expr=v670[32] }
    di      = { defs={} expr=v671[32] }
    es      = { defs={} expr=v672[16] }
    cs      = { defs={} expr=v673[16] }
    ss      = { defs={} expr=v674[16] }
    ds      = { defs={} expr=v675[16] }
    fs      = { defs={} expr=v676[16] }
    gs      = { defs={} expr=v677[16] }
    cf      = { defs={} expr=v678[1] }
    ?1      = { defs={} expr=v679[1] }
    pf      = { defs={} expr=v680[1] }
    ?3      = { defs={} expr=v681[1] }
    af      = { defs={} expr=v682[1] }
    ?5      = { defs={} expr=v683[1] }
    zf      = { defs={} expr=v684[1] }
    sf      = { defs={} expr=v685[1] }
    tf      = { defs={} expr=v686[1] }
    if      = { defs={} expr=v687[1] }
    df      = { defs={} expr=v688[1] }
    of      = { defs={} expr=v689[1] }
    iopl0   = { defs={} expr=v690[1] }
    iopl1   = { defs={} expr=v691[1] }
    nt      = { defs={} expr=v692[1] }
    ?15     = { defs={} expr=v693[1] }
    rf      = { defs={} expr=v694[1] }
    vm      = { defs={} expr=v695[1] }
    ac      = { defs={} expr=v696[1] }
    vif     = { defs={} expr=v697[1] }
    vip     = { defs={} expr=v698[1] }
    id      = { defs={} expr=v699[1] }
    ?22     = { defs={} expr=v700[1] }
    ?23     = { defs={} expr=v701[1] }
    ?24     = { defs={} expr=v702[1] }
    ?25     = { defs={} expr=v703[1] }
    ?26     = { defs={} expr=v704[1] }
    ?27     = { defs={} expr=v705[1] }
    ?28     = { defs={} expr=v706[1] }
    ?29     = { defs={} expr=v707[1] }
    ?30     = { defs={} expr=v708[1] }
    ?31     = { defs={} expr=v709[1] }
    ip      = { defs={0x08048300} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v719[8]) (shr0[32] 8[32] (uextend[32] 32[32] v720[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v721[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v722[8]))) }
memory:
init mem:
    address = { defs={} expr=0x080496db[32] }
      value = { defs={} expr=v722[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496da[32] }
      value = { defs={} expr=v721[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496d9[32] }
      value = { defs={} expr=v720[8] }
      flags = { rdonly }
    address = { defs={0x08048300} expr=0x080496d8[32] }
      value = { defs={} expr=v719[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc<.got.plt+0x14>]
registers:
    ax      = { v32026 }
    cx      = { v32027 }
    dx      = { v32028 }
    bx      = { v32029 }
    sp      = { v32030 }
    bp      = { v32031 }
    si      = { v32032 }
    di      = { v32033 }
    es      = { v32034 }
    cs      = { v32035 }
    ss      = { v32036 }
    ds      = { v32037 }
    fs      = { v32038 }
    gs      = { v32039 }
    cf      = { v32040 }
    ?1      = { v32041 }
    pf      = { v32042 }
    ?3      = { v32043 }
    af      = { v32044 }
    ?5      = { v32045 }
    zf      = { v32046 }
    sf      = { v32047 }
    tf      = { v32048 }
    if      = { v32049 }
    df      = { v32050 }
    of      = { v32051 }
    iopl0   = { v32052 }
    iopl1   = { v32053 }
    nt      = { v32054 }
    ?15     = { v32055 }
    rf      = { v32056 }
    vm      = { v32057 }
    ac      = { v32058 }
    vif     = { v32059 }
    vip     = { v32060 }
    id      = { v32061 }
    ?22     = { v32062 }
    ?23     = { v32063 }
    ?24     = { v32064 }
    ?25     = { v32065 }
    ?26     = { v32066 }
    ?27     = { v32067 }
    ?28     = { v32068 }
    ?29     = { v32069 }
    ?30     = { v32070 }
    ?31     = { v32071 }
    ip      = { v32079 }
memory:
    address = { 0x80496dc }
      value = { v32079 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v777[32] }
    cx      = { defs={} expr=v778[32] }
    dx      = { defs={} expr=v779[32] }
    bx      = { defs={} expr=v780[32] }
    sp      = { defs={} expr=v781[32] }
    bp      = { defs={} expr=v782[32] }
    si      = { defs={} expr=v783[32] }
    di      = { defs={} expr=v784[32] }
    es      = { defs={} expr=v785[16] }
    cs      = { defs={} expr=v786[16] }
    ss      = { defs={} expr=v787[16] }
    ds      = { defs={} expr=v788[16] }
    fs      = { defs={} expr=v789[16] }
    gs      = { defs={} expr=v790[16] }
    cf      = { defs={} expr=v791[1] }
    ?1      = { defs={} expr=v792[1] }
    pf      = { defs={} expr=v793[1] }
    ?3      = { defs={} expr=v794[1] }
    af      = { defs={} expr=v795[1] }
    ?5      = { defs={} expr=v796[1] }
    zf      = { defs={} expr=v797[1] }
    sf      = { defs={} expr=v798[1] }
    tf      = { defs={} expr=v799[1] }
    if      = { defs={} expr=v800[1] }
    df      = { defs={} expr=v801[1] }
    of      = { defs={} expr=v802[1] }
    iopl0   = { defs={} expr=v803[1] }
    iopl1   = { defs={} expr=v804[1] }
    nt      = { defs={} expr=v805[1] }
    ?15     = { defs={} expr=v806[1] }
    rf      = { defs={} expr=v807[1] }
    vm      = { defs={} expr=v808[1] }
    ac      = { defs={} expr=v809[1] }
    vif     = { defs={} expr=v810[1] }
    vip     = { defs={} expr=v811[1] }
    id      = { defs={} expr=v812[1] }
    ?22     = { defs={} expr=v813[1] }
    ?23     = { defs={} expr=v814[1] }
    ?24     = { defs={} expr=v815[1] }
    ?25     = { defs={} expr=v816[1] }
    ?26     = { defs={} expr=v817[1] }
    ?27     = { defs={} expr=v818[1] }
    ?28     = { defs={} expr=v819[1] }
    ?29     = { defs={} expr=v820[1] }
    ?30     = { defs={} expr=v821[1] }
    ?31     = { defs={} expr=v822[1] }
    ip      = { defs={0x08048310} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v832[8]) (shr0[32] 8[32] (uextend[32] 32[32] v833[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v834[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v835[8]))) }
memory:
init mem:
    address = { defs={} expr=0x080496df[32] }
      value = { defs={} expr=v835[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496de[32] }
      value = { defs={} expr=v834[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496dd[32] }
      value = { defs={} expr=v833[8] }
      flags = { rdonly }
    address = { defs={0x08048310} expr=0x080496dc[32] }
      value = { defs={} expr=v832[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0<.got.plt+0x18>]
registers:
    ax      = { v32130 }
    cx      = { v32131 }
    dx      = { v32132 }
    bx      = { v32133 }
    sp      = { v32134 }
    bp      = { v32135 }
    si      = { v32136 }
    di      = { v32137 }
    es      = { v32138 }
    cs      = { v32139 }
    ss      = { v32140 }
    ds      = { v32141 }
    fs      = { v32142 }
    gs      = { v32143 }
    cf      = { v32144 }
    ?1      = { v32145 }
    pf      = { v32146 }
    ?3      = { v32147 }
    af      = { v32148 }
    ?5      = { v32149 }
    zf      = { v32150 }
    sf      = { v32151 }
    tf      = { v32152 }
    if      = { v32153 }
    df      = { v32154 }
    of      = { v32155 }
    iopl0   = { v32156 }
    iopl1   = { v32157 }
    nt      = { v32158 }
    ?15     = { v32159 }
    rf      = { v32160 }
    vm      = { v32161 }
    ac      = { v32162 }
    vif     = { v32163 }
    vip     = { v32164 }
    id      = { v32165 }
    ?22     = { v32166 }
    ?23     = { v32167 }
    ?24     = { v32168 }
    ?25     = { v32169 }
    ?26     = { v32170 }
    ?27     = { v32171 }
    ?28     = { v32172 }
    ?29     = { v32173 }
    ?30     = { v32174 }
    ?31     = { v32175 }
    ip      = { v32183 }
memory:
    address = { 0x80496e0 }
      value = { v32183 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v890[32] }
    cx      = { defs={} expr=v891[32] }
    dx      = { defs={} expr=v892[32] }
    bx      = { defs={} expr=v893[32] }
    sp      = { defs={} expr=v894[32] }
    bp      = { defs={} expr=v895[32] }
    si      = { defs={} expr=v896[32] }
    di      = { defs={} expr=v897[32] }
    es      = { defs={} expr=v898[16] }
    cs      = { defs={} expr=v899[16] }
    ss      = { defs={} expr=v900[16] }
    ds      = { defs={} expr=v901[16] }
    fs      = { defs={} expr=v902[16] }
    gs      = { defs={} expr=v903[16] }
    cf      = { defs={} expr=v904[1] }
    ?1      = { defs={} expr=v905[1] }
    pf      = { defs={} expr=v906[1] }
    ?3      = { defs={} expr=v907[1] }
    af      = { defs={} expr=v908[1] }
    ?5      = { defs={} expr=v909[1] }
    zf      = { defs={} expr=v910[1] }
    sf      = { defs={} expr=v911[1] }
    tf      = { defs={} expr=v912[1] }
    if      = { defs={} expr=v913[1] }
    df      = { defs={} expr=v914[1] }
    of      = { defs={} expr=v915[1] }
    iopl0   = { defs={} expr=v916[1] }
    iopl1   = { defs={} expr=v917[1] }
    nt      = { defs={} expr=v918[1] }
    ?15     = { defs={} expr=v919[1] }
    rf      = { defs={} expr=v920[1] }
    vm      = { defs={} expr=v921[1] }
    ac      = { defs={} expr=v922[1] }
    vif     = { defs={} expr=v923[1] }
    vip     = { defs={} expr=v924[1] }
    id      = { defs={} expr=v925[1] }
    ?22     = { defs={} expr=v926[1] }
    ?23     = { defs={} expr=v927[1] }
    ?24     = { defs={} expr=v928[1] }
    ?25     = { defs={} expr=v929[1] }
    ?26     = { defs={} expr=v930[1] }
    ?27     = { defs={} expr=v931[1] }
    ?28     = { defs={} expr=v932[1] }
    ?29     = { defs={} expr=v933[1] }
    ?30     = { defs={} expr=v934[1] }
    ?31     = { defs={} expr=v935[1] }
    ip      = { defs={0x08048320} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v945[8]) (shr0[32] 8[32] (uextend[32] 32[32] v946[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v947[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v948[8]))) }
memory:
init mem:
    address = { defs={} expr=0x080496e3[32] }
      value = { defs={} expr=v948[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496e2[32] }
      value = { defs={} expr=v947[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496e1[32] }
      value = { defs={} expr=v946[8] }
      flags = { rdonly }
    address = { defs={0x08048320} expr=0x080496e0[32] }
      value = { defs={} expr=v945[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4<.got.plt+0x1c>]
registers:
    ax      = { v32234 }
    cx      = { v32235 }
    dx      = { v32236 }
    bx      = { v32237 }
    sp      = { v32238 }
    bp      = { v32239 }
    si      = { v32240 }
    di      = { v32241 }
    es      = { v32242 }
    cs      = { v32243 }
    ss      = { v32244 }
    ds      = { v32245 }
    fs      = { v32246 }
    gs      = { v32247 }
    cf      = { v32248 }
    ?1      = { v32249 }
    pf      = { v32250 }
    ?3      = { v32251 }
    af      = { v32252 }
    ?5      = { v32253 }
    zf      = { v32254 }
    sf      = { v32255 }
    tf      = { v32256 }
    if      = { v32257 }
    df      = { v32258 }
    of      = { v32259 }
    iopl0   = { v32260 }
    iopl1   = { v32261 }
    nt      = { v32262 }
    ?15     = { v32263 }
    rf      = { v32264 }
    vm      = { v32265 }
    ac      = { v32266 }
    vif     = { v32267 }
    vip     = { v32268 }
    id      = { v32269 }
    ?22     = { v32270 }
    ?23     = { v32271 }
    ?24     = { v32272 }
    ?25     = { v32273 }
    ?26     = { v32274 }
    ?27     = { v32275 }
    ?28     = { v32276 }
    ?29     = { v32277 }
    ?30     = { v32278 }
    ?31     = { v32279 }
    ip      = { v32287 }
memory:
    address = { 0x80496e4 }
      value = { v32287 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1003[32] }
    cx      = { defs={} expr=v1004[32] }
    dx      = { defs={} expr=v1005[32] }
    bx      = { defs={} expr=v1006[32] }
    sp      = { defs={} expr=v1007[32] }
    bp      = { defs={} expr=v1008[32] }
    si      = { defs={} expr=v1009[32] }
    di      = { defs={} expr=v1010[32] }
    es      = { defs={} expr=v1011[16] }
    cs      = { defs={} expr=v1012[16] }
    ss      = { defs={} expr=v1013[16] }
    ds      = { defs={} expr=v1014[16] }
    fs      = { defs={} expr=v1015[16] }
    gs      = { defs={} expr=v1016[16] }
    cf      = { defs={} expr=v1017[1] }
    ?1      = { defs={} expr=v1018[1] }
    pf      = { defs={} expr=v1019[1] }
    ?3      = { defs={} expr=v1020[1] }
    af      = { defs={} expr=v1021[1] }
    ?5      = { defs={} expr=v1022[1] }
    zf      = { defs={} expr=v1023[1] }
    sf      = { defs={} expr=v1024[1] }
    tf      = { defs={} expr=v1025[1] }
    if      = { defs={} expr=v1026[1] }
    df      = { defs={} expr=v1027[1] }
    of      = { defs={} expr=v1028[1] }
    iopl0   = { defs={} expr=v1029[1] }
    iopl1   = { defs={} expr=v1030[1] }
    nt      = { defs={} expr=v1031[1] }
    ?15     = { defs={} expr=v1032[1] }
    rf      = { defs={} expr=v1033[1] }
    vm      = { defs={} expr=v1034[1] }
    ac      = { defs={} expr=v1035[1] }
    vif     = { defs={} expr=v1036[1] }
    vip     = { defs={} expr=v1037[1] }
    id      = { defs={} expr=v1038[1] }
    ?22     = { defs={} expr=v1039[1] }
    ?23     = { defs={} expr=v1040[1] }
    ?24     = { defs={} expr=v1041[1] }
    ?25     = { defs={} expr=v1042[1] }
    ?26     = { defs={} expr=v1043[1] }
    ?27     = { defs={} expr=v1044[1] }
    ?28     = { defs={} expr=v1045[1] }
    ?29     = { defs={} expr=v1046[1] }
    ?30     = { defs={} expr=v1047[1] }
    ?31     = { defs={} expr=v1048[1] }
    ip      = { defs={0x08048330} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1058[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1059[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1060[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1061[8]))) }
memory:
init mem:
    address = { defs={} expr=0x080496e7[32] }
      value = { defs={} expr=v1061[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496e6[32] }
      value = { defs={} expr=v1060[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496e5[32] }
      value = { defs={} expr=v1059[8] }
      flags = { rdonly }
    address = { defs={0x08048330} expr=0x080496e4[32] }
      value = { defs={} expr=v1058[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
registers:
    ax      = { v32338 }
    cx      = { v32339 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32342 }
    bp      = { 0x0 }
    si      = { v32344 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { 0x1 }
    ?3      = { v32355 }
    af      = { v32412 }
    ?5      = { v32357 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x8048342 }
memory:
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={} expr=v1117[32] }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={} expr=v1120[32] }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={} expr=v1122[32] }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048340} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048340} expr=1[1] }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048340} expr=v1190[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048340} expr=1[1] }
    sf      = { defs={0x08048340} expr=0[1] }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048340} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340} expr=0x08048342[32] }
memory:
init mem:
null state
null state
0x8048342:pop    esi
registers:
    ax      = { v32338 }
    cx      = { v32339 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32342+0x4 }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { 0x1 }
    ?3      = { v32355 }
    af      = { v32412 }
    ?5      = { v32357 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x8048343 }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={} expr=v1117[32] }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342} expr=(add[32] v1120[32] 4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048340} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048340} expr=1[1] }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048340} expr=v1190[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048340} expr=1[1] }
    sf      = { defs={0x08048340} expr=0[1] }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048340} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342} expr=0x08048343[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x8048343:mov    ecx, esp
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32342+0x4 }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { 0x1 }
    ?3      = { v32355 }
    af      = { v32412 }
    ?5      = { v32357 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x8048345 }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342} expr=(add[32] v1120[32] 4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048340} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048340} expr=1[1] }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048340} expr=v1190[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048340} expr=1[1] }
    sf      = { defs={0x08048340} expr=0[1] }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048340} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343} expr=0x08048345[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x8048345:and    esp, 0xf0<-0x10>
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32436 }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { -v32466+0x1 }
    ?3      = { v32355 }
    af      = { v32474 }
    ?5      = { v32357 }
    zf      = { v32471 }
    sf      = { v32469 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x8048348 }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342,0x08048345} expr=(bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048345} expr=v1244[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345} expr=0x08048348[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x8048348:push   eax
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32436-0x4 }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { -v32466+0x1 }
    ?3      = { v32355 }
    af      = { v32474 }
    ?5      = { v32357 }
    zf      = { v32471 }
    sf      = { v32469 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x8048349 }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only; clobbered }
    address = { v32436-0x4 }
      value = { v32338 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048345} expr=v1244[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348} expr=0x08048349[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1116[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1116[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x8048349:push   esp
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32436-0x8 }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { -v32466+0x1 }
    ?3      = { v32355 }
    af      = { v32474 }
    ?5      = { v32357 }
    zf      = { v32471 }
    sf      = { v32469 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x804834a }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only; clobbered }
    address = { v32436-0x4 }
      value = { v32338 }
      flags = { size=4 }
    address = { v32436-0x8 }
      value = { v32436-0x4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048345} expr=v1244[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349} expr=0x0804834a[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1116[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1116[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x804834a:push   edx
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32436-0xc }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { -v32466+0x1 }
    ?3      = { v32355 }
    af      = { v32474 }
    ?5      = { v32357 }
    zf      = { v32471 }
    sf      = { v32469 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x804834b }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only; clobbered }
    address = { v32436-0x4 }
      value = { v32338 }
      flags = { size=4 }
    address = { v32436-0x8 }
      value = { v32436-0x4 }
      flags = { size=4 }
    address = { v32436-0xc }
      value = { v32340 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048345} expr=v1244[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a} expr=0x0804834b[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1118[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1116[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1116[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x804834b:push   0x08048520<__libc_csu_fini>
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32436-0x10 }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { -v32466+0x1 }
    ?3      = { v32355 }
    af      = { v32474 }
    ?5      = { v32357 }
    zf      = { v32471 }
    sf      = { v32469 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x8048350 }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only; clobbered }
    address = { v32436-0x4 }
      value = { v32338 }
      flags = { size=4 }
    address = { v32436-0x8 }
      value = { v32436-0x4 }
      flags = { size=4 }
    address = { v32436-0xc }
      value = { v32340 }
      flags = { size=4 }
    address = { v32436-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048345} expr=v1244[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=0x08048350[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1118[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1116[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1116[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x8048350:push   0x080484b0<__libc_csu_init>
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32436-0x14 }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { -v32466+0x1 }
    ?3      = { v32355 }
    af      = { v32474 }
    ?5      = { v32357 }
    zf      = { v32471 }
    sf      = { v32469 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x8048355 }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only; clobbered }
    address = { v32436-0x4 }
      value = { v32338 }
      flags = { size=4 }
    address = { v32436-0x8 }
      value = { v32436-0x4 }
      flags = { size=4 }
    address = { v32436-0xc }
      value = { v32340 }
      flags = { size=4 }
    address = { v32436-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
    address = { v32436-0x14 }
      value = { 0x80484b0 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048345} expr=v1244[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=0x08048355[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-80[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1118[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1116[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1116[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x8048355:push   ecx
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32436-0x18 }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { -v32466+0x1 }
    ?3      = { v32355 }
    af      = { v32474 }
    ?5      = { v32357 }
    zf      = { v32471 }
    sf      = { v32469 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x8048356 }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only; clobbered }
    address = { v32436-0x4 }
      value = { v32338 }
      flags = { size=4 }
    address = { v32436-0x8 }
      value = { v32436-0x4 }
      flags = { size=4 }
    address = { v32436-0xc }
      value = { v32340 }
      flags = { size=4 }
    address = { v32436-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
    address = { v32436-0x14 }
      value = { 0x80484b0 }
      flags = { size=4 }
    address = { v32436-0x18 }
      value = { v32342+0x4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048345} expr=v1244[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=0x08048356[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-80[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1118[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1116[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1116[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x8048356:push   esi
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32436-0x1c }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { -v32466+0x1 }
    ?3      = { v32355 }
    af      = { v32474 }
    ?5      = { v32357 }
    zf      = { v32471 }
    sf      = { v32469 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x8048357 }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only; clobbered }
    address = { v32436-0x4 }
      value = { v32338 }
      flags = { size=4 }
    address = { v32436-0x8 }
      value = { v32436-0x4 }
      flags = { size=4 }
    address = { v32436-0xc }
      value = { v32340 }
      flags = { size=4 }
    address = { v32436-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
    address = { v32436-0x14 }
      value = { 0x80484b0 }
      flags = { size=4 }
    address = { v32436-0x18 }
      value = { v32342+0x4 }
      flags = { size=4 }
    address = { v32436-0x1c }
      value = { v32423 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048345} expr=v1244[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=0x08048357[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-80[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1118[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1116[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1116[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x8048357:push   0x08048410<main>
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32436-0x20 }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { -v32466+0x1 }
    ?3      = { v32355 }
    af      = { v32474 }
    ?5      = { v32357 }
    zf      = { v32471 }
    sf      = { v32469 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x804835c }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only; clobbered }
    address = { v32436-0x4 }
      value = { v32338 }
      flags = { size=4 }
    address = { v32436-0x8 }
      value = { v32436-0x4 }
      flags = { size=4 }
    address = { v32436-0xc }
      value = { v32340 }
      flags = { size=4 }
    address = { v32436-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
    address = { v32436-0x14 }
      value = { 0x80484b0 }
      flags = { size=4 }
    address = { v32436-0x18 }
      value = { v32342+0x4 }
      flags = { size=4 }
    address = { v32436-0x1c }
      value = { v32423 }
      flags = { size=4 }
    address = { v32436-0x20 }
      value = { 0x8048410 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048345} expr=v1244[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x08048340,0x08048342,0x08048343,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=0x0804835c[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=16[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-80[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1118[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1116[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1116[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
0x804835c:call   0x08048310<__libc_start_main@plt>
registers:
    ax      = { v32338 }
    cx      = { v32342+0x4 }
    dx      = { v32340 }
    bx      = { v32341 }
    sp      = { v32436-0x24 }
    bp      = { 0x0 }
    si      = { v32423 }
    di      = { v32345 }
    es      = { v32346 }
    cs      = { v32347 }
    ss      = { v32348 }
    ds      = { v32349 }
    fs      = { v32350 }
    gs      = { v32351 }
    cf      = { 0x0 }
    ?1      = { v32353 }
    pf      = { -v32466+0x1 }
    ?3      = { v32355 }
    af      = { v32474 }
    ?5      = { v32357 }
    zf      = { v32471 }
    sf      = { v32469 }
    tf      = { v32360 }
    if      = { v32361 }
    df      = { v32362 }
    of      = { 0x0 }
    iopl0   = { v32364 }
    iopl1   = { v32365 }
    nt      = { v32366 }
    ?15     = { v32367 }
    rf      = { v32368 }
    vm      = { v32369 }
    ac      = { v32370 }
    vif     = { v32371 }
    vip     = { v32372 }
    id      = { v32373 }
    ?22     = { v32374 }
    ?23     = { v32375 }
    ?24     = { v32376 }
    ?25     = { v32377 }
    ?26     = { v32378 }
    ?27     = { v32379 }
    ?28     = { v32380 }
    ?29     = { v32381 }
    ?30     = { v32382 }
    ?31     = { v32383 }
    ip      = { 0x8048310 }
memory:
    address = { v32342 }
      value = { v32423 }
      flags = { size=4; read-only; clobbered }
    address = { v32436-0x4 }
      value = { v32338 }
      flags = { size=4 }
    address = { v32436-0x8 }
      value = { v32436-0x4 }
      flags = { size=4 }
    address = { v32436-0xc }
      value = { v32340 }
      flags = { size=4 }
    address = { v32436-0x10 }
      value = { 0x8048520 }
      flags = { size=4 }
    address = { v32436-0x14 }
      value = { 0x80484b0 }
      flags = { size=4 }
    address = { v32436-0x18 }
      value = { v32342+0x4 }
      flags = { size=4 }
    address = { v32436-0x1c }
      value = { v32423 }
      flags = { size=4 }
    address = { v32436-0x20 }
      value = { 0x8048410 }
      flags = { size=4 }
    address = { v32436-0x24 }
      value = { 0x8048361 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1116[32] }
    cx      = { defs={0x08048342,0x08048343} expr=(add[32] v1120[32] 4[32]) }
    dx      = { defs={} expr=v1118[32] }
    bx      = { defs={} expr=v1119[32] }
    sp      = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048340} expr=0[32] }
    si      = { defs={0x08048342} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8]))) }
    di      = { defs={} expr=v1123[32] }
    es      = { defs={} expr=v1124[16] }
    cs      = { defs={} expr=v1125[16] }
    ss      = { defs={} expr=v1126[16] }
    ds      = { defs={} expr=v1127[16] }
    fs      = { defs={} expr=v1128[16] }
    gs      = { defs={} expr=v1129[16] }
    cf      = { defs={0x08048345} expr=0[1] }
    ?1      = { defs={} expr=v1131[1] }
    pf      = { defs={0x08048342,0x08048345} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v1133[1] }
    af      = { defs={0x08048345} expr=v1244[1] }
    ?5      = { defs={} expr=v1135[1] }
    zf      = { defs={0x08048342,0x08048345} expr=(zerop[1] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    sf      = { defs={0x08048342,0x08048345} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32])) }
    tf      = { defs={} expr=v1138[1] }
    if      = { defs={} expr=v1139[1] }
    df      = { defs={} expr=v1140[1] }
    of      = { defs={0x08048345} expr=0[1] }
    iopl0   = { defs={} expr=v1142[1] }
    iopl1   = { defs={} expr=v1143[1] }
    nt      = { defs={} expr=v1144[1] }
    ?15     = { defs={} expr=v1145[1] }
    rf      = { defs={} expr=v1146[1] }
    vm      = { defs={} expr=v1147[1] }
    ac      = { defs={} expr=v1148[1] }
    vif     = { defs={} expr=v1149[1] }
    vip     = { defs={} expr=v1150[1] }
    id      = { defs={} expr=v1151[1] }
    ?22     = { defs={} expr=v1152[1] }
    ?23     = { defs={} expr=v1153[1] }
    ?24     = { defs={} expr=v1154[1] }
    ?25     = { defs={} expr=v1155[1] }
    ?26     = { defs={} expr=v1156[1] }
    ?27     = { defs={} expr=v1157[1] }
    ?28     = { defs={} expr=v1158[1] }
    ?29     = { defs={} expr=v1159[1] }
    ?30     = { defs={} expr=v1160[1] }
    ?31     = { defs={} expr=v1161[1] }
    ip      = { defs={0x0804835c} expr=0x08048310[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-125[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357,0x0804835c} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=97[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356,0x08048357} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=16[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355,0x08048356} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1203[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1204[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1205[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1206[8])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350,0x08048355} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v1120[32] 4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b,0x08048350} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-80[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a,0x0804834b} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=32[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1118[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349,0x0804834a} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1118[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348,0x08048349} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1116[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1116[32]) }
      flags = { }
    address = { defs={0x08048342,0x08048345,0x08048348} expr=(add[32] (bv-and[32] (add[32] v1120[32] 4[32]) -16[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1116[32]) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v1120[32] 3[32]) }
      value = { defs={} expr=v1206[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 2[32]) }
      value = { defs={} expr=v1205[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1120[32] 1[32]) }
      value = { defs={} expr=v1204[8] }
      flags = { rdonly }
    address = { defs={} expr=v1120[32] }
      value = { defs={} expr=v1203[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
registers:
    ax      = { v32607 }
    cx      = { v32608 }
    dx      = { v32609 }
    bx      = { v32610 }
    sp      = { v32611 }
    bp      = { v32612 }
    si      = { v32613 }
    di      = { v32614 }
    es      = { v32615 }
    cs      = { v32616 }
    ss      = { v32617 }
    ds      = { v32618 }
    fs      = { v32619 }
    gs      = { v32620 }
    cf      = { v32621 }
    ?1      = { v32622 }
    pf      = { v32623 }
    ?3      = { v32624 }
    af      = { v32625 }
    ?5      = { v32626 }
    zf      = { v32627 }
    sf      = { v32628 }
    tf      = { v32629 }
    if      = { v32630 }
    df      = { v32631 }
    of      = { v32632 }
    iopl0   = { v32633 }
    iopl1   = { v32634 }
    nt      = { v32635 }
    ?15     = { v32636 }
    rf      = { v32637 }
    vm      = { v32638 }
    ac      = { v32639 }
    vif     = { v32640 }
    vip     = { v32641 }
    id      = { v32642 }
    ?22     = { v32643 }
    ?23     = { v32644 }
    ?24     = { v32645 }
    ?25     = { v32646 }
    ?26     = { v32647 }
    ?27     = { v32648 }
    ?28     = { v32649 }
    ?29     = { v32650 }
    ?30     = { v32651 }
    ?31     = { v32652 }
    ip      = { 0x8048361 }
memory:
registers:
    ax      = { defs={} expr=v1377[32] }
    cx      = { defs={} expr=v1378[32] }
    dx      = { defs={} expr=v1379[32] }
    bx      = { defs={} expr=v1380[32] }
    sp      = { defs={} expr=v1381[32] }
    bp      = { defs={} expr=v1382[32] }
    si      = { defs={} expr=v1383[32] }
    di      = { defs={} expr=v1384[32] }
    es      = { defs={} expr=v1385[16] }
    cs      = { defs={} expr=v1386[16] }
    ss      = { defs={} expr=v1387[16] }
    ds      = { defs={} expr=v1388[16] }
    fs      = { defs={} expr=v1389[16] }
    gs      = { defs={} expr=v1390[16] }
    cf      = { defs={} expr=v1391[1] }
    ?1      = { defs={} expr=v1392[1] }
    pf      = { defs={} expr=v1393[1] }
    ?3      = { defs={} expr=v1394[1] }
    af      = { defs={} expr=v1395[1] }
    ?5      = { defs={} expr=v1396[1] }
    zf      = { defs={} expr=v1397[1] }
    sf      = { defs={} expr=v1398[1] }
    tf      = { defs={} expr=v1399[1] }
    if      = { defs={} expr=v1400[1] }
    df      = { defs={} expr=v1401[1] }
    of      = { defs={} expr=v1402[1] }
    iopl0   = { defs={} expr=v1403[1] }
    iopl1   = { defs={} expr=v1404[1] }
    nt      = { defs={} expr=v1405[1] }
    ?15     = { defs={} expr=v1406[1] }
    rf      = { defs={} expr=v1407[1] }
    vm      = { defs={} expr=v1408[1] }
    ac      = { defs={} expr=v1409[1] }
    vif     = { defs={} expr=v1410[1] }
    vip     = { defs={} expr=v1411[1] }
    id      = { defs={} expr=v1412[1] }
    ?22     = { defs={} expr=v1413[1] }
    ?23     = { defs={} expr=v1414[1] }
    ?24     = { defs={} expr=v1415[1] }
    ?25     = { defs={} expr=v1416[1] }
    ?26     = { defs={} expr=v1417[1] }
    ?27     = { defs={} expr=v1418[1] }
    ?28     = { defs={} expr=v1419[1] }
    ?29     = { defs={} expr=v1420[1] }
    ?30     = { defs={} expr=v1421[1] }
    ?31     = { defs={} expr=v1422[1] }
    ip      = { defs={0x08048361} expr=0x08048361[32] }
memory:
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048364:push   ebp
registers:
    ax      = { v32706 }
    cx      = { v32707 }
    dx      = { v32708 }
    bx      = { v32709 }
    sp      = { v32710-0x4 }
    bp      = { v32711 }
    si      = { v32712 }
    di      = { v32713 }
    es      = { v32714 }
    cs      = { v32715 }
    ss      = { v32716 }
    ds      = { v32717 }
    fs      = { v32718 }
    gs      = { v32719 }
    cf      = { v32720 }
    ?1      = { v32721 }
    pf      = { v32722 }
    ?3      = { v32723 }
    af      = { v32724 }
    ?5      = { v32725 }
    zf      = { v32726 }
    sf      = { v32727 }
    tf      = { v32728 }
    if      = { v32729 }
    df      = { v32730 }
    of      = { v32731 }
    iopl0   = { v32732 }
    iopl1   = { v32733 }
    nt      = { v32734 }
    ?15     = { v32735 }
    rf      = { v32736 }
    vm      = { v32737 }
    ac      = { v32738 }
    vif     = { v32739 }
    vip     = { v32740 }
    id      = { v32741 }
    ?22     = { v32742 }
    ?23     = { v32743 }
    ?24     = { v32744 }
    ?25     = { v32745 }
    ?26     = { v32746 }
    ?27     = { v32747 }
    ?28     = { v32748 }
    ?29     = { v32749 }
    ?30     = { v32750 }
    ?31     = { v32751 }
    ip      = { 0x8048365 }
memory:
    address = { v32710-0x4 }
      value = { v32711 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1476[32] }
    cx      = { defs={} expr=v1477[32] }
    dx      = { defs={} expr=v1478[32] }
    bx      = { defs={} expr=v1479[32] }
    sp      = { defs={0x08048364} expr=(add[32] v1480[32] -4[32]) }
    bp      = { defs={} expr=v1481[32] }
    si      = { defs={} expr=v1482[32] }
    di      = { defs={} expr=v1483[32] }
    es      = { defs={} expr=v1484[16] }
    cs      = { defs={} expr=v1485[16] }
    ss      = { defs={} expr=v1486[16] }
    ds      = { defs={} expr=v1487[16] }
    fs      = { defs={} expr=v1488[16] }
    gs      = { defs={} expr=v1489[16] }
    cf      = { defs={} expr=v1490[1] }
    ?1      = { defs={} expr=v1491[1] }
    pf      = { defs={} expr=v1492[1] }
    ?3      = { defs={} expr=v1493[1] }
    af      = { defs={} expr=v1494[1] }
    ?5      = { defs={} expr=v1495[1] }
    zf      = { defs={} expr=v1496[1] }
    sf      = { defs={} expr=v1497[1] }
    tf      = { defs={} expr=v1498[1] }
    if      = { defs={} expr=v1499[1] }
    df      = { defs={} expr=v1500[1] }
    of      = { defs={} expr=v1501[1] }
    iopl0   = { defs={} expr=v1502[1] }
    iopl1   = { defs={} expr=v1503[1] }
    nt      = { defs={} expr=v1504[1] }
    ?15     = { defs={} expr=v1505[1] }
    rf      = { defs={} expr=v1506[1] }
    vm      = { defs={} expr=v1507[1] }
    ac      = { defs={} expr=v1508[1] }
    vif     = { defs={} expr=v1509[1] }
    vip     = { defs={} expr=v1510[1] }
    id      = { defs={} expr=v1511[1] }
    ?22     = { defs={} expr=v1512[1] }
    ?23     = { defs={} expr=v1513[1] }
    ?24     = { defs={} expr=v1514[1] }
    ?25     = { defs={} expr=v1515[1] }
    ?26     = { defs={} expr=v1516[1] }
    ?27     = { defs={} expr=v1517[1] }
    ?28     = { defs={} expr=v1518[1] }
    ?29     = { defs={} expr=v1519[1] }
    ?30     = { defs={} expr=v1520[1] }
    ?31     = { defs={} expr=v1521[1] }
    ip      = { defs={0x08048364} expr=0x08048365[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1481[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1481[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1481[32]) }
      flags = { }
    address = { defs={0x08048364} expr=(add[32] v1480[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1481[32]) }
      flags = { }
init mem:
null state
null state
0x8048365:mov    ebp, esp
registers:
    ax      = { v32706 }
    cx      = { v32707 }
    dx      = { v32708 }
    bx      = { v32709 }
    sp      = { v32710-0x4 }
    bp      = { v32710-0x4 }
    si      = { v32712 }
    di      = { v32713 }
    es      = { v32714 }
    cs      = { v32715 }
    ss      = { v32716 }
    ds      = { v32717 }
    fs      = { v32718 }
    gs      = { v32719 }
    cf      = { v32720 }
    ?1      = { v32721 }
    pf      = { v32722 }
    ?3      = { v32723 }
    af      = { v32724 }
    ?5      = { v32725 }
    zf      = { v32726 }
    sf      = { v32727 }
    tf      = { v32728 }
    if      = { v32729 }
    df      = { v32730 }
    of      = { v32731 }
    iopl0   = { v32732 }
    iopl1   = { v32733 }
    nt      = { v32734 }
    ?15     = { v32735 }
    rf      = { v32736 }
    vm      = { v32737 }
    ac      = { v32738 }
    vif     = { v32739 }
    vip     = { v32740 }
    id      = { v32741 }
    ?22     = { v32742 }
    ?23     = { v32743 }
    ?24     = { v32744 }
    ?25     = { v32745 }
    ?26     = { v32746 }
    ?27     = { v32747 }
    ?28     = { v32748 }
    ?29     = { v32749 }
    ?30     = { v32750 }
    ?31     = { v32751 }
    ip      = { 0x8048367 }
memory:
    address = { v32710-0x4 }
      value = { v32711 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1476[32] }
    cx      = { defs={} expr=v1477[32] }
    dx      = { defs={} expr=v1478[32] }
    bx      = { defs={} expr=v1479[32] }
    sp      = { defs={0x08048364} expr=(add[32] v1480[32] -4[32]) }
    bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1480[32] -4[32]) }
    si      = { defs={} expr=v1482[32] }
    di      = { defs={} expr=v1483[32] }
    es      = { defs={} expr=v1484[16] }
    cs      = { defs={} expr=v1485[16] }
    ss      = { defs={} expr=v1486[16] }
    ds      = { defs={} expr=v1487[16] }
    fs      = { defs={} expr=v1488[16] }
    gs      = { defs={} expr=v1489[16] }
    cf      = { defs={} expr=v1490[1] }
    ?1      = { defs={} expr=v1491[1] }
    pf      = { defs={} expr=v1492[1] }
    ?3      = { defs={} expr=v1493[1] }
    af      = { defs={} expr=v1494[1] }
    ?5      = { defs={} expr=v1495[1] }
    zf      = { defs={} expr=v1496[1] }
    sf      = { defs={} expr=v1497[1] }
    tf      = { defs={} expr=v1498[1] }
    if      = { defs={} expr=v1499[1] }
    df      = { defs={} expr=v1500[1] }
    of      = { defs={} expr=v1501[1] }
    iopl0   = { defs={} expr=v1502[1] }
    iopl1   = { defs={} expr=v1503[1] }
    nt      = { defs={} expr=v1504[1] }
    ?15     = { defs={} expr=v1505[1] }
    rf      = { defs={} expr=v1506[1] }
    vm      = { defs={} expr=v1507[1] }
    ac      = { defs={} expr=v1508[1] }
    vif     = { defs={} expr=v1509[1] }
    vip     = { defs={} expr=v1510[1] }
    id      = { defs={} expr=v1511[1] }
    ?22     = { defs={} expr=v1512[1] }
    ?23     = { defs={} expr=v1513[1] }
    ?24     = { defs={} expr=v1514[1] }
    ?25     = { defs={} expr=v1515[1] }
    ?26     = { defs={} expr=v1516[1] }
    ?27     = { defs={} expr=v1517[1] }
    ?28     = { defs={} expr=v1518[1] }
    ?29     = { defs={} expr=v1519[1] }
    ?30     = { defs={} expr=v1520[1] }
    ?31     = { defs={} expr=v1521[1] }
    ip      = { defs={0x08048364,0x08048365} expr=0x08048367[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1481[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1481[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1481[32]) }
      flags = { }
    address = { defs={0x08048364} expr=(add[32] v1480[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1481[32]) }
      flags = { }
init mem:
null state
null state
0x8048367:push   ebx
registers:
    ax      = { v32706 }
    cx      = { v32707 }
    dx      = { v32708 }
    bx      = { v32709 }
    sp      = { v32710-0x8 }
    bp      = { v32710-0x4 }
    si      = { v32712 }
    di      = { v32713 }
    es      = { v32714 }
    cs      = { v32715 }
    ss      = { v32716 }
    ds      = { v32717 }
    fs      = { v32718 }
    gs      = { v32719 }
    cf      = { v32720 }
    ?1      = { v32721 }
    pf      = { v32722 }
    ?3      = { v32723 }
    af      = { v32724 }
    ?5      = { v32725 }
    zf      = { v32726 }
    sf      = { v32727 }
    tf      = { v32728 }
    if      = { v32729 }
    df      = { v32730 }
    of      = { v32731 }
    iopl0   = { v32732 }
    iopl1   = { v32733 }
    nt      = { v32734 }
    ?15     = { v32735 }
    rf      = { v32736 }
    vm      = { v32737 }
    ac      = { v32738 }
    vif     = { v32739 }
    vip     = { v32740 }
    id      = { v32741 }
    ?22     = { v32742 }
    ?23     = { v32743 }
    ?24     = { v32744 }
    ?25     = { v32745 }
    ?26     = { v32746 }
    ?27     = { v32747 }
    ?28     = { v32748 }
    ?29     = { v32749 }
    ?30     = { v32750 }
    ?31     = { v32751 }
    ip      = { 0x8048368 }
memory:
    address = { v32710-0x4 }
      value = { v32711 }
      flags = { size=4 }
    address = { v32710-0x8 }
      value = { v32709 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1476[32] }
    cx      = { defs={} expr=v1477[32] }
    dx      = { defs={} expr=v1478[32] }
    bx      = { defs={} expr=v1479[32] }
    sp      = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1480[32] -4[32]) -4[32]) }
    bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1480[32] -4[32]) }
    si      = { defs={} expr=v1482[32] }
    di      = { defs={} expr=v1483[32] }
    es      = { defs={} expr=v1484[16] }
    cs      = { defs={} expr=v1485[16] }
    ss      = { defs={} expr=v1486[16] }
    ds      = { defs={} expr=v1487[16] }
    fs      = { defs={} expr=v1488[16] }
    gs      = { defs={} expr=v1489[16] }
    cf      = { defs={} expr=v1490[1] }
    ?1      = { defs={} expr=v1491[1] }
    pf      = { defs={} expr=v1492[1] }
    ?3      = { defs={} expr=v1493[1] }
    af      = { defs={} expr=v1494[1] }
    ?5      = { defs={} expr=v1495[1] }
    zf      = { defs={} expr=v1496[1] }
    sf      = { defs={} expr=v1497[1] }
    tf      = { defs={} expr=v1498[1] }
    if      = { defs={} expr=v1499[1] }
    df      = { defs={} expr=v1500[1] }
    of      = { defs={} expr=v1501[1] }
    iopl0   = { defs={} expr=v1502[1] }
    iopl1   = { defs={} expr=v1503[1] }
    nt      = { defs={} expr=v1504[1] }
    ?15     = { defs={} expr=v1505[1] }
    rf      = { defs={} expr=v1506[1] }
    vm      = { defs={} expr=v1507[1] }
    ac      = { defs={} expr=v1508[1] }
    vif     = { defs={} expr=v1509[1] }
    vip     = { defs={} expr=v1510[1] }
    id      = { defs={} expr=v1511[1] }
    ?22     = { defs={} expr=v1512[1] }
    ?23     = { defs={} expr=v1513[1] }
    ?24     = { defs={} expr=v1514[1] }
    ?25     = { defs={} expr=v1515[1] }
    ?26     = { defs={} expr=v1516[1] }
    ?27     = { defs={} expr=v1517[1] }
    ?28     = { defs={} expr=v1518[1] }
    ?29     = { defs={} expr=v1519[1] }
    ?30     = { defs={} expr=v1520[1] }
    ?31     = { defs={} expr=v1521[1] }
    ip      = { defs={0x08048364,0x08048365,0x08048367} expr=0x08048368[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1479[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1479[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1479[32]) }
      flags = { }
    address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1480[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1479[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1481[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1481[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1481[32]) }
      flags = { }
    address = { defs={0x08048364} expr=(add[32] v1480[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1481[32]) }
      flags = { }
init mem:
null state
null state
0x8048368:push   ecx
registers:
    ax      = { v32706 }
    cx      = { v32707 }
    dx      = { v32708 }
    bx      = { v32709 }
    sp      = { v32710-0xc }
    bp      = { v32710-0x4 }
    si      = { v32712 }
    di      = { v32713 }
    es      = { v32714 }
    cs      = { v32715 }
    ss      = { v32716 }
    ds      = { v32717 }
    fs      = { v32718 }
    gs      = { v32719 }
    cf      = { v32720 }
    ?1      = { v32721 }
    pf      = { v32722 }
    ?3      = { v32723 }
    af      = { v32724 }
    ?5      = { v32725 }
    zf      = { v32726 }
    sf      = { v32727 }
    tf      = { v32728 }
    if      = { v32729 }
    df      = { v32730 }
    of      = { v32731 }
    iopl0   = { v32732 }
    iopl1   = { v32733 }
    nt      = { v32734 }
    ?15     = { v32735 }
    rf      = { v32736 }
    vm      = { v32737 }
    ac      = { v32738 }
    vif     = { v32739 }
    vip     = { v32740 }
    id      = { v32741 }
    ?22     = { v32742 }
    ?23     = { v32743 }
    ?24     = { v32744 }
    ?25     = { v32745 }
    ?26     = { v32746 }
    ?27     = { v32747 }
    ?28     = { v32748 }
    ?29     = { v32749 }
    ?30     = { v32750 }
    ?31     = { v32751 }
    ip      = { 0x8048369 }
memory:
    address = { v32710-0x4 }
      value = { v32711 }
      flags = { size=4 }
    address = { v32710-0x8 }
      value = { v32709 }
      flags = { size=4 }
    address = { v32710-0xc }
      value = { v32707 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1476[32] }
    cx      = { defs={} expr=v1477[32] }
    dx      = { defs={} expr=v1478[32] }
    bx      = { defs={} expr=v1479[32] }
    sp      = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1480[32] -4[32]) }
    si      = { defs={} expr=v1482[32] }
    di      = { defs={} expr=v1483[32] }
    es      = { defs={} expr=v1484[16] }
    cs      = { defs={} expr=v1485[16] }
    ss      = { defs={} expr=v1486[16] }
    ds      = { defs={} expr=v1487[16] }
    fs      = { defs={} expr=v1488[16] }
    gs      = { defs={} expr=v1489[16] }
    cf      = { defs={} expr=v1490[1] }
    ?1      = { defs={} expr=v1491[1] }
    pf      = { defs={} expr=v1492[1] }
    ?3      = { defs={} expr=v1493[1] }
    af      = { defs={} expr=v1494[1] }
    ?5      = { defs={} expr=v1495[1] }
    zf      = { defs={} expr=v1496[1] }
    sf      = { defs={} expr=v1497[1] }
    tf      = { defs={} expr=v1498[1] }
    if      = { defs={} expr=v1499[1] }
    df      = { defs={} expr=v1500[1] }
    of      = { defs={} expr=v1501[1] }
    iopl0   = { defs={} expr=v1502[1] }
    iopl1   = { defs={} expr=v1503[1] }
    nt      = { defs={} expr=v1504[1] }
    ?15     = { defs={} expr=v1505[1] }
    rf      = { defs={} expr=v1506[1] }
    vm      = { defs={} expr=v1507[1] }
    ac      = { defs={} expr=v1508[1] }
    vif     = { defs={} expr=v1509[1] }
    vip     = { defs={} expr=v1510[1] }
    id      = { defs={} expr=v1511[1] }
    ?22     = { defs={} expr=v1512[1] }
    ?23     = { defs={} expr=v1513[1] }
    ?24     = { defs={} expr=v1514[1] }
    ?25     = { defs={} expr=v1515[1] }
    ?26     = { defs={} expr=v1516[1] }
    ?27     = { defs={} expr=v1517[1] }
    ?28     = { defs={} expr=v1518[1] }
    ?29     = { defs={} expr=v1519[1] }
    ?30     = { defs={} expr=v1520[1] }
    ?31     = { defs={} expr=v1521[1] }
    ip      = { defs={0x08048364,0x08048365,0x08048367,0x08048368} expr=0x08048369[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1477[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1477[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1477[32]) }
      flags = { }
    address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1477[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1479[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1479[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1479[32]) }
      flags = { }
    address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1480[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1479[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1481[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1481[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1481[32]) }
      flags = { }
    address = { defs={0x08048364} expr=(add[32] v1480[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1481[32]) }
      flags = { }
init mem:
null state
null state
0x8048369:call   0x0804836e<<Insn>>
registers:
    ax      = { v32706 }
    cx      = { v32707 }
    dx      = { v32708 }
    bx      = { v32709 }
    sp      = { v32710-0x10 }
    bp      = { v32710-0x4 }
    si      = { v32712 }
    di      = { v32713 }
    es      = { v32714 }
    cs      = { v32715 }
    ss      = { v32716 }
    ds      = { v32717 }
    fs      = { v32718 }
    gs      = { v32719 }
    cf      = { v32720 }
    ?1      = { v32721 }
    pf      = { v32722 }
    ?3      = { v32723 }
    af      = { v32724 }
    ?5      = { v32725 }
    zf      = { v32726 }
    sf      = { v32727 }
    tf      = { v32728 }
    if      = { v32729 }
    df      = { v32730 }
    of      = { v32731 }
    iopl0   = { v32732 }
    iopl1   = { v32733 }
    nt      = { v32734 }
    ?15     = { v32735 }
    rf      = { v32736 }
    vm      = { v32737 }
    ac      = { v32738 }
    vif     = { v32739 }
    vip     = { v32740 }
    id      = { v32741 }
    ?22     = { v32742 }
    ?23     = { v32743 }
    ?24     = { v32744 }
    ?25     = { v32745 }
    ?26     = { v32746 }
    ?27     = { v32747 }
    ?28     = { v32748 }
    ?29     = { v32749 }
    ?30     = { v32750 }
    ?31     = { v32751 }
    ip      = { 0x804836e }
memory:
    address = { v32710-0x4 }
      value = { v32711 }
      flags = { size=4 }
    address = { v32710-0x8 }
      value = { v32709 }
      flags = { size=4 }
    address = { v32710-0xc }
      value = { v32707 }
      flags = { size=4 }
    address = { v32710-0x10 }
      value = { 0x804836e }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1476[32] }
    cx      = { defs={} expr=v1477[32] }
    dx      = { defs={} expr=v1478[32] }
    bx      = { defs={} expr=v1479[32] }
    sp      = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048364,0x08048365} expr=(add[32] v1480[32] -4[32]) }
    si      = { defs={} expr=v1482[32] }
    di      = { defs={} expr=v1483[32] }
    es      = { defs={} expr=v1484[16] }
    cs      = { defs={} expr=v1485[16] }
    ss      = { defs={} expr=v1486[16] }
    ds      = { defs={} expr=v1487[16] }
    fs      = { defs={} expr=v1488[16] }
    gs      = { defs={} expr=v1489[16] }
    cf      = { defs={} expr=v1490[1] }
    ?1      = { defs={} expr=v1491[1] }
    pf      = { defs={} expr=v1492[1] }
    ?3      = { defs={} expr=v1493[1] }
    af      = { defs={} expr=v1494[1] }
    ?5      = { defs={} expr=v1495[1] }
    zf      = { defs={} expr=v1496[1] }
    sf      = { defs={} expr=v1497[1] }
    tf      = { defs={} expr=v1498[1] }
    if      = { defs={} expr=v1499[1] }
    df      = { defs={} expr=v1500[1] }
    of      = { defs={} expr=v1501[1] }
    iopl0   = { defs={} expr=v1502[1] }
    iopl1   = { defs={} expr=v1503[1] }
    nt      = { defs={} expr=v1504[1] }
    ?15     = { defs={} expr=v1505[1] }
    rf      = { defs={} expr=v1506[1] }
    vm      = { defs={} expr=v1507[1] }
    ac      = { defs={} expr=v1508[1] }
    vif     = { defs={} expr=v1509[1] }
    vip     = { defs={} expr=v1510[1] }
    id      = { defs={} expr=v1511[1] }
    ?22     = { defs={} expr=v1512[1] }
    ?23     = { defs={} expr=v1513[1] }
    ?24     = { defs={} expr=v1514[1] }
    ?25     = { defs={} expr=v1515[1] }
    ?26     = { defs={} expr=v1516[1] }
    ?27     = { defs={} expr=v1517[1] }
    ?28     = { defs={} expr=v1518[1] }
    ?29     = { defs={} expr=v1519[1] }
    ?30     = { defs={} expr=v1520[1] }
    ?31     = { defs={} expr=v1521[1] }
    ip      = { defs={0x08048369} expr=0x0804836e[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-125[8] }
      flags = { }
    address = { defs={0x08048364,0x08048367,0x08048368,0x08048369} expr=(add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=110[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1477[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1477[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1477[32]) }
      flags = { }
    address = { defs={0x08048364,0x08048367,0x08048368} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1477[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1479[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1479[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v1480[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1479[32]) }
      flags = { }
    address = { defs={0x08048364,0x08048367} expr=(add[32] (add[32] v1480[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1479[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v1481[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v1481[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1480[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v1481[32]) }
      flags = { }
    address = { defs={0x08048364} expr=(add[32] v1480[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v1481[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
registers:
    ax      = { v32843 }
    cx      = { v32844 }
    dx      = { v32845 }
    bx      = { v32898 }
    sp      = { v32847+0x4 }
    bp      = { v32848 }
    si      = { v32849 }
    di      = { v32850 }
    es      = { v32851 }
    cs      = { v32852 }
    ss      = { v32853 }
    ds      = { v32854 }
    fs      = { v32855 }
    gs      = { v32856 }
    cf      = { v32857 }
    ?1      = { v32858 }
    pf      = { v32859 }
    ?3      = { v32860 }
    af      = { v32861 }
    ?5      = { v32862 }
    zf      = { v32863 }
    sf      = { v32864 }
    tf      = { v32865 }
    if      = { v32866 }
    df      = { v32867 }
    of      = { v32868 }
    iopl0   = { v32869 }
    iopl1   = { v32870 }
    nt      = { v32871 }
    ?15     = { v32872 }
    rf      = { v32873 }
    vm      = { v32874 }
    ac      = { v32875 }
    vif     = { v32876 }
    vip     = { v32877 }
    id      = { v32878 }
    ?22     = { v32879 }
    ?23     = { v32880 }
    ?24     = { v32881 }
    ?25     = { v32882 }
    ?26     = { v32883 }
    ?27     = { v32884 }
    ?28     = { v32885 }
    ?29     = { v32886 }
    ?30     = { v32887 }
    ?31     = { v32888 }
    ip      = { 0x804836f }
memory:
    address = { v32847 }
      value = { v32898 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1613[32] }
    cx      = { defs={} expr=v1614[32] }
    dx      = { defs={} expr=v1615[32] }
    bx      = { defs={0x0804836e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) }
    sp      = { defs={0x0804836e} expr=(add[32] v1617[32] 4[32]) }
    bp      = { defs={} expr=v1618[32] }
    si      = { defs={} expr=v1619[32] }
    di      = { defs={} expr=v1620[32] }
    es      = { defs={} expr=v1621[16] }
    cs      = { defs={} expr=v1622[16] }
    ss      = { defs={} expr=v1623[16] }
    ds      = { defs={} expr=v1624[16] }
    fs      = { defs={} expr=v1625[16] }
    gs      = { defs={} expr=v1626[16] }
    cf      = { defs={} expr=v1627[1] }
    ?1      = { defs={} expr=v1628[1] }
    pf      = { defs={} expr=v1629[1] }
    ?3      = { defs={} expr=v1630[1] }
    af      = { defs={} expr=v1631[1] }
    ?5      = { defs={} expr=v1632[1] }
    zf      = { defs={} expr=v1633[1] }
    sf      = { defs={} expr=v1634[1] }
    tf      = { defs={} expr=v1635[1] }
    if      = { defs={} expr=v1636[1] }
    df      = { defs={} expr=v1637[1] }
    of      = { defs={} expr=v1638[1] }
    iopl0   = { defs={} expr=v1639[1] }
    iopl1   = { defs={} expr=v1640[1] }
    nt      = { defs={} expr=v1641[1] }
    ?15     = { defs={} expr=v1642[1] }
    rf      = { defs={} expr=v1643[1] }
    vm      = { defs={} expr=v1644[1] }
    ac      = { defs={} expr=v1645[1] }
    vif     = { defs={} expr=v1646[1] }
    vip     = { defs={} expr=v1647[1] }
    id      = { defs={} expr=v1648[1] }
    ?22     = { defs={} expr=v1649[1] }
    ?23     = { defs={} expr=v1650[1] }
    ?24     = { defs={} expr=v1651[1] }
    ?25     = { defs={} expr=v1652[1] }
    ?26     = { defs={} expr=v1653[1] }
    ?27     = { defs={} expr=v1654[1] }
    ?28     = { defs={} expr=v1655[1] }
    ?29     = { defs={} expr=v1656[1] }
    ?30     = { defs={} expr=v1657[1] }
    ?31     = { defs={} expr=v1658[1] }
    ip      = { defs={0x0804836e} expr=0x0804836f[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1617[32] 3[32]) }
      value = { defs={} expr=v1673[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 2[32]) }
      value = { defs={} expr=v1672[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 1[32]) }
      value = { defs={} expr=v1671[8] }
      flags = { rdonly }
    address = { defs={} expr=v1617[32] }
      value = { defs={} expr=v1670[8] }
      flags = { rdonly }
null state
null state
0x804836f:add    ebx, 0x0000135a
registers:
    ax      = { v32843 }
    cx      = { v32844 }
    dx      = { v32845 }
    bx      = { v32898+0x135a }
    sp      = { v32847+0x4 }
    bp      = { v32848 }
    si      = { v32849 }
    di      = { v32850 }
    es      = { v32851 }
    cs      = { v32852 }
    ss      = { v32853 }
    ds      = { v32854 }
    fs      = { v32855 }
    gs      = { v32856 }
    cf      = { v32947 }
    ?1      = { v32858 }
    pf      = { -v32938+0x1 }
    ?3      = { v32860 }
    af      = { v32945 }
    ?5      = { v32862 }
    zf      = { v32943 }
    sf      = { v32941 }
    tf      = { v32865 }
    if      = { v32866 }
    df      = { v32867 }
    of      = { v32953 }
    iopl0   = { v32869 }
    iopl1   = { v32870 }
    nt      = { v32871 }
    ?15     = { v32872 }
    rf      = { v32873 }
    vm      = { v32874 }
    ac      = { v32875 }
    vif     = { v32876 }
    vip     = { v32877 }
    id      = { v32878 }
    ?22     = { v32879 }
    ?23     = { v32880 }
    ?24     = { v32881 }
    ?25     = { v32882 }
    ?26     = { v32883 }
    ?27     = { v32884 }
    ?28     = { v32885 }
    ?29     = { v32886 }
    ?30     = { v32887 }
    ?31     = { v32888 }
    ip      = { 0x8048375 }
memory:
    address = { v32847 }
      value = { v32898 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1613[32] }
    cx      = { defs={} expr=v1614[32] }
    dx      = { defs={} expr=v1615[32] }
    bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) }
    sp      = { defs={0x0804836e} expr=(add[32] v1617[32] 4[32]) }
    bp      = { defs={} expr=v1618[32] }
    si      = { defs={} expr=v1619[32] }
    di      = { defs={} expr=v1620[32] }
    es      = { defs={} expr=v1621[16] }
    cs      = { defs={} expr=v1622[16] }
    ss      = { defs={} expr=v1623[16] }
    ds      = { defs={} expr=v1624[16] }
    fs      = { defs={} expr=v1625[16] }
    gs      = { defs={} expr=v1626[16] }
    cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) 4954[33]))))) }
    ?1      = { defs={} expr=v1628[1] }
    pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))))))) }
    ?3      = { defs={} expr=v1630[1] }
    af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) 4954[33]))))) }
    ?5      = { defs={} expr=v1632[1] }
    zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32])) }
    sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32])) }
    tf      = { defs={} expr=v1635[1] }
    if      = { defs={} expr=v1636[1] }
    df      = { defs={} expr=v1637[1] }
    of      = { defs={0x0804836e,0x0804836f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) 4954[33])))))) }
    iopl0   = { defs={} expr=v1639[1] }
    iopl1   = { defs={} expr=v1640[1] }
    nt      = { defs={} expr=v1641[1] }
    ?15     = { defs={} expr=v1642[1] }
    rf      = { defs={} expr=v1643[1] }
    vm      = { defs={} expr=v1644[1] }
    ac      = { defs={} expr=v1645[1] }
    vif     = { defs={} expr=v1646[1] }
    vip     = { defs={} expr=v1647[1] }
    id      = { defs={} expr=v1648[1] }
    ?22     = { defs={} expr=v1649[1] }
    ?23     = { defs={} expr=v1650[1] }
    ?24     = { defs={} expr=v1651[1] }
    ?25     = { defs={} expr=v1652[1] }
    ?26     = { defs={} expr=v1653[1] }
    ?27     = { defs={} expr=v1654[1] }
    ?28     = { defs={} expr=v1655[1] }
    ?29     = { defs={} expr=v1656[1] }
    ?30     = { defs={} expr=v1657[1] }
    ?31     = { defs={} expr=v1658[1] }
    ip      = { defs={0x0804836e,0x0804836f} expr=0x08048375[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1617[32] 3[32]) }
      value = { defs={} expr=v1673[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 2[32]) }
      value = { defs={} expr=v1672[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 1[32]) }
      value = { defs={} expr=v1671[8] }
      flags = { rdonly }
    address = { defs={} expr=v1617[32] }
      value = { defs={} expr=v1670[8] }
      flags = { rdonly }
null state
null state
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
registers:
    ax      = { v32843 }
    cx      = { v32844 }
    dx      = { v32963 }
    bx      = { v32898+0x135a }
    sp      = { v32847+0x4 }
    bp      = { v32848 }
    si      = { v32849 }
    di      = { v32850 }
    es      = { v32851 }
    cs      = { v32852 }
    ss      = { v32853 }
    ds      = { v32854 }
    fs      = { v32855 }
    gs      = { v32856 }
    cf      = { v32947 }
    ?1      = { v32858 }
    pf      = { -v32938+0x1 }
    ?3      = { v32860 }
    af      = { v32945 }
    ?5      = { v32862 }
    zf      = { v32943 }
    sf      = { v32941 }
    tf      = { v32865 }
    if      = { v32866 }
    df      = { v32867 }
    of      = { v32953 }
    iopl0   = { v32869 }
    iopl1   = { v32870 }
    nt      = { v32871 }
    ?15     = { v32872 }
    rf      = { v32873 }
    vm      = { v32874 }
    ac      = { v32875 }
    vif     = { v32876 }
    vip     = { v32877 }
    id      = { v32878 }
    ?22     = { v32879 }
    ?23     = { v32880 }
    ?24     = { v32881 }
    ?25     = { v32882 }
    ?26     = { v32883 }
    ?27     = { v32884 }
    ?28     = { v32885 }
    ?29     = { v32886 }
    ?30     = { v32887 }
    ?31     = { v32888 }
    ip      = { 0x804837b }
memory:
    address = { v32847 }
      value = { v32898 }
      flags = { size=4; read-only }
    address = { v32898+0x1356 }
      value = { v32963 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1613[32] }
    cx      = { defs={} expr=v1614[32] }
    dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) }
    bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) }
    sp      = { defs={0x0804836e} expr=(add[32] v1617[32] 4[32]) }
    bp      = { defs={} expr=v1618[32] }
    si      = { defs={} expr=v1619[32] }
    di      = { defs={} expr=v1620[32] }
    es      = { defs={} expr=v1621[16] }
    cs      = { defs={} expr=v1622[16] }
    ss      = { defs={} expr=v1623[16] }
    ds      = { defs={} expr=v1624[16] }
    fs      = { defs={} expr=v1625[16] }
    gs      = { defs={} expr=v1626[16] }
    cf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) 4954[33]))))) }
    ?1      = { defs={} expr=v1628[1] }
    pf      = { defs={0x0804836e,0x0804836f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]))))))) }
    ?3      = { defs={} expr=v1630[1] }
    af      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) 4954[33]))))) }
    ?5      = { defs={} expr=v1632[1] }
    zf      = { defs={0x0804836e,0x0804836f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32])) }
    sf      = { defs={0x0804836e,0x0804836f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32])) }
    tf      = { defs={} expr=v1635[1] }
    if      = { defs={} expr=v1636[1] }
    df      = { defs={} expr=v1637[1] }
    of      = { defs={0x0804836e,0x0804836f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8])))) 4954[33])))))) }
    iopl0   = { defs={} expr=v1639[1] }
    iopl1   = { defs={} expr=v1640[1] }
    nt      = { defs={} expr=v1641[1] }
    ?15     = { defs={} expr=v1642[1] }
    rf      = { defs={} expr=v1643[1] }
    vm      = { defs={} expr=v1644[1] }
    ac      = { defs={} expr=v1645[1] }
    vif     = { defs={} expr=v1646[1] }
    vip     = { defs={} expr=v1647[1] }
    id      = { defs={} expr=v1648[1] }
    ?22     = { defs={} expr=v1649[1] }
    ?23     = { defs={} expr=v1650[1] }
    ?24     = { defs={} expr=v1651[1] }
    ?25     = { defs={} expr=v1652[1] }
    ?26     = { defs={} expr=v1653[1] }
    ?27     = { defs={} expr=v1654[1] }
    ?28     = { defs={} expr=v1655[1] }
    ?29     = { defs={} expr=v1656[1] }
    ?30     = { defs={} expr=v1657[1] }
    ?31     = { defs={} expr=v1658[1] }
    ip      = { defs={0x0804836e,0x0804836f,0x08048375} expr=0x0804837b[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) 3[32]) }
      value = { defs={} expr=v1725[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) 2[32]) }
      value = { defs={} expr=v1724[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) 1[32]) }
      value = { defs={} expr=v1723[8] }
      flags = { rdonly }
    address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) }
      value = { defs={} expr=v1722[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 3[32]) }
      value = { defs={} expr=v1673[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 2[32]) }
      value = { defs={} expr=v1672[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 1[32]) }
      value = { defs={} expr=v1671[8] }
      flags = { rdonly }
    address = { defs={} expr=v1617[32] }
      value = { defs={} expr=v1670[8] }
      flags = { rdonly }
null state
null state
0x804837b:test   edx, edx
registers:
    ax      = { v32843 }
    cx      = { v32844 }
    dx      = { v32963 }
    bx      = { v32898+0x135a }
    sp      = { v32847+0x4 }
    bp      = { v32848 }
    si      = { v32849 }
    di      = { v32850 }
    es      = { v32851 }
    cs      = { v32852 }
    ss      = { v32853 }
    ds      = { v32854 }
    fs      = { v32855 }
    gs      = { v32856 }
    cf      = { 0x0 }
    ?1      = { v32858 }
    pf      = { -v33001+0x1 }
    ?3      = { v32860 }
    af      = { v33009 }
    ?5      = { v32862 }
    zf      = { v33006 }
    sf      = { v33004 }
    tf      = { v32865 }
    if      = { v32866 }
    df      = { v32867 }
    of      = { 0x0 }
    iopl0   = { v32869 }
    iopl1   = { v32870 }
    nt      = { v32871 }
    ?15     = { v32872 }
    rf      = { v32873 }
    vm      = { v32874 }
    ac      = { v32875 }
    vif     = { v32876 }
    vip     = { v32877 }
    id      = { v32878 }
    ?22     = { v32879 }
    ?23     = { v32880 }
    ?24     = { v32881 }
    ?25     = { v32882 }
    ?26     = { v32883 }
    ?27     = { v32884 }
    ?28     = { v32885 }
    ?29     = { v32886 }
    ?30     = { v32887 }
    ?31     = { v32888 }
    ip      = { 0x804837d }
memory:
    address = { v32847 }
      value = { v32898 }
      flags = { size=4; read-only }
    address = { v32898+0x1356 }
      value = { v32963 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1613[32] }
    cx      = { defs={} expr=v1614[32] }
    dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) }
    bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) }
    sp      = { defs={0x0804836e} expr=(add[32] v1617[32] 4[32]) }
    bp      = { defs={} expr=v1618[32] }
    si      = { defs={} expr=v1619[32] }
    di      = { defs={} expr=v1620[32] }
    es      = { defs={} expr=v1621[16] }
    cs      = { defs={} expr=v1622[16] }
    ss      = { defs={} expr=v1623[16] }
    ds      = { defs={} expr=v1624[16] }
    fs      = { defs={} expr=v1625[16] }
    gs      = { defs={} expr=v1626[16] }
    cf      = { defs={0x0804837b} expr=0[1] }
    ?1      = { defs={} expr=v1628[1] }
    pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))))))) }
    ?3      = { defs={} expr=v1630[1] }
    af      = { defs={0x0804837b} expr=v1758[1] }
    ?5      = { defs={} expr=v1632[1] }
    zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))))) }
    sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))))) }
    tf      = { defs={} expr=v1635[1] }
    if      = { defs={} expr=v1636[1] }
    df      = { defs={} expr=v1637[1] }
    of      = { defs={0x0804837b} expr=0[1] }
    iopl0   = { defs={} expr=v1639[1] }
    iopl1   = { defs={} expr=v1640[1] }
    nt      = { defs={} expr=v1641[1] }
    ?15     = { defs={} expr=v1642[1] }
    rf      = { defs={} expr=v1643[1] }
    vm      = { defs={} expr=v1644[1] }
    ac      = { defs={} expr=v1645[1] }
    vif     = { defs={} expr=v1646[1] }
    vip     = { defs={} expr=v1647[1] }
    id      = { defs={} expr=v1648[1] }
    ?22     = { defs={} expr=v1649[1] }
    ?23     = { defs={} expr=v1650[1] }
    ?24     = { defs={} expr=v1651[1] }
    ?25     = { defs={} expr=v1652[1] }
    ?26     = { defs={} expr=v1653[1] }
    ?27     = { defs={} expr=v1654[1] }
    ?28     = { defs={} expr=v1655[1] }
    ?29     = { defs={} expr=v1656[1] }
    ?30     = { defs={} expr=v1657[1] }
    ?31     = { defs={} expr=v1658[1] }
    ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b} expr=0x0804837d[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) 3[32]) }
      value = { defs={} expr=v1725[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) 2[32]) }
      value = { defs={} expr=v1724[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) 1[32]) }
      value = { defs={} expr=v1723[8] }
      flags = { rdonly }
    address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) }
      value = { defs={} expr=v1722[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 3[32]) }
      value = { defs={} expr=v1673[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 2[32]) }
      value = { defs={} expr=v1672[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 1[32]) }
      value = { defs={} expr=v1671[8] }
      flags = { rdonly }
    address = { defs={} expr=v1617[32] }
      value = { defs={} expr=v1670[8] }
      flags = { rdonly }
null state
null state
0x804837d:je     0x08048384<<Insn>>
registers:
    ax      = { v32843 }
    cx      = { v32844 }
    dx      = { v32963 }
    bx      = { v32898+0x135a }
    sp      = { v32847+0x4 }
    bp      = { v32848 }
    si      = { v32849 }
    di      = { v32850 }
    es      = { v32851 }
    cs      = { v32852 }
    ss      = { v32853 }
    ds      = { v32854 }
    fs      = { v32855 }
    gs      = { v32856 }
    cf      = { 0x0 }
    ?1      = { v32858 }
    pf      = { -v33001+0x1 }
    ?3      = { v32860 }
    af      = { v33009 }
    ?5      = { v32862 }
    zf      = { v33006 }
    sf      = { v33004 }
    tf      = { v32865 }
    if      = { v32866 }
    df      = { v32867 }
    of      = { 0x0 }
    iopl0   = { v32869 }
    iopl1   = { v32870 }
    nt      = { v32871 }
    ?15     = { v32872 }
    rf      = { v32873 }
    vm      = { v32874 }
    ac      = { v32875 }
    vif     = { v32876 }
    vip     = { v32877 }
    id      = { v32878 }
    ?22     = { v32879 }
    ?23     = { v32880 }
    ?24     = { v32881 }
    ?25     = { v32882 }
    ?26     = { v32883 }
    ?27     = { v32884 }
    ?28     = { v32885 }
    ?29     = { v32886 }
    ?30     = { v32887 }
    ?31     = { v32888 }
    ip      = { v33019 }
memory:
    address = { v32847 }
      value = { v32898 }
      flags = { size=4; read-only }
    address = { v32898+0x1356 }
      value = { v32963 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v1613[32] }
    cx      = { defs={} expr=v1614[32] }
    dx      = { defs={0x08048375} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) }
    bx      = { defs={0x0804836e,0x0804836f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) }
    sp      = { defs={0x0804836e} expr=(add[32] v1617[32] 4[32]) }
    bp      = { defs={} expr=v1618[32] }
    si      = { defs={} expr=v1619[32] }
    di      = { defs={} expr=v1620[32] }
    es      = { defs={} expr=v1621[16] }
    cs      = { defs={} expr=v1622[16] }
    ss      = { defs={} expr=v1623[16] }
    ds      = { defs={} expr=v1624[16] }
    fs      = { defs={} expr=v1625[16] }
    gs      = { defs={} expr=v1626[16] }
    cf      = { defs={0x0804837b} expr=0[1] }
    ?1      = { defs={} expr=v1628[1] }
    pf      = { defs={0x08048375,0x0804837b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8])))))))))) }
    ?3      = { defs={} expr=v1630[1] }
    af      = { defs={0x0804837b} expr=v1758[1] }
    ?5      = { defs={} expr=v1632[1] }
    zf      = { defs={0x08048375,0x0804837b} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))))) }
    sf      = { defs={0x08048375,0x0804837b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))))) }
    tf      = { defs={} expr=v1635[1] }
    if      = { defs={} expr=v1636[1] }
    df      = { defs={} expr=v1637[1] }
    of      = { defs={0x0804837b} expr=0[1] }
    iopl0   = { defs={} expr=v1639[1] }
    iopl1   = { defs={} expr=v1640[1] }
    nt      = { defs={} expr=v1641[1] }
    ?15     = { defs={} expr=v1642[1] }
    rf      = { defs={} expr=v1643[1] }
    vm      = { defs={} expr=v1644[1] }
    ac      = { defs={} expr=v1645[1] }
    vif     = { defs={} expr=v1646[1] }
    vip     = { defs={} expr=v1647[1] }
    id      = { defs={} expr=v1648[1] }
    ?22     = { defs={} expr=v1649[1] }
    ?23     = { defs={} expr=v1650[1] }
    ?24     = { defs={} expr=v1651[1] }
    ?25     = { defs={} expr=v1652[1] }
    ?26     = { defs={} expr=v1653[1] }
    ?27     = { defs={} expr=v1654[1] }
    ?28     = { defs={} expr=v1655[1] }
    ?29     = { defs={} expr=v1656[1] }
    ?30     = { defs={} expr=v1657[1] }
    ?31     = { defs={} expr=v1658[1] }
    ip      = { defs={0x0804836e,0x0804836f,0x08048375,0x0804837b,0x0804837d} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1722[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1723[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1724[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1725[8]))))) 0x08048384[32] 0x0804837f[32]) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) 3[32]) }
      value = { defs={} expr=v1725[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) 2[32]) }
      value = { defs={} expr=v1724[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) 1[32]) }
      value = { defs={} expr=v1723[8] }
      flags = { rdonly }
    address = { defs={0x0804836e,0x0804836f,0x08048375} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1670[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1671[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1672[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1673[8]))) 4954[32]) -4[32]) }
      value = { defs={} expr=v1722[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 3[32]) }
      value = { defs={} expr=v1673[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 2[32]) }
      value = { defs={} expr=v1672[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1617[32] 1[32]) }
      value = { defs={} expr=v1671[8] }
      flags = { rdonly }
    address = { defs={} expr=v1617[32] }
      value = { defs={} expr=v1670[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330<__gmon_start__@plt>
registers:
    ax      = { v33069 }
    cx      = { v33070 }
    dx      = { v33071 }
    bx      = { v33072 }
    sp      = { v33073-0x4 }
    bp      = { v33074 }
    si      = { v33075 }
    di      = { v33076 }
    es      = { v33077 }
    cs      = { v33078 }
    ss      = { v33079 }
    ds      = { v33080 }
    fs      = { v33081 }
    gs      = { v33082 }
    cf      = { v33083 }
    ?1      = { v33084 }
    pf      = { v33085 }
    ?3      = { v33086 }
    af      = { v33087 }
    ?5      = { v33088 }
    zf      = { v33089 }
    sf      = { v33090 }
    tf      = { v33091 }
    if      = { v33092 }
    df      = { v33093 }
    of      = { v33094 }
    iopl0   = { v33095 }
    iopl1   = { v33096 }
    nt      = { v33097 }
    ?15     = { v33098 }
    rf      = { v33099 }
    vm      = { v33100 }
    ac      = { v33101 }
    vif     = { v33102 }
    vip     = { v33103 }
    id      = { v33104 }
    ?22     = { v33105 }
    ?23     = { v33106 }
    ?24     = { v33107 }
    ?25     = { v33108 }
    ?26     = { v33109 }
    ?27     = { v33110 }
    ?28     = { v33111 }
    ?29     = { v33112 }
    ?30     = { v33113 }
    ?31     = { v33114 }
    ip      = { 0x8048330 }
memory:
    address = { v33073-0x4 }
      value = { 0x8048384 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v1817[32] }
    cx      = { defs={} expr=v1818[32] }
    dx      = { defs={} expr=v1819[32] }
    bx      = { defs={} expr=v1820[32] }
    sp      = { defs={0x0804837f} expr=(add[32] v1821[32] -4[32]) }
    bp      = { defs={} expr=v1822[32] }
    si      = { defs={} expr=v1823[32] }
    di      = { defs={} expr=v1824[32] }
    es      = { defs={} expr=v1825[16] }
    cs      = { defs={} expr=v1826[16] }
    ss      = { defs={} expr=v1827[16] }
    ds      = { defs={} expr=v1828[16] }
    fs      = { defs={} expr=v1829[16] }
    gs      = { defs={} expr=v1830[16] }
    cf      = { defs={} expr=v1831[1] }
    ?1      = { defs={} expr=v1832[1] }
    pf      = { defs={} expr=v1833[1] }
    ?3      = { defs={} expr=v1834[1] }
    af      = { defs={} expr=v1835[1] }
    ?5      = { defs={} expr=v1836[1] }
    zf      = { defs={} expr=v1837[1] }
    sf      = { defs={} expr=v1838[1] }
    tf      = { defs={} expr=v1839[1] }
    if      = { defs={} expr=v1840[1] }
    df      = { defs={} expr=v1841[1] }
    of      = { defs={} expr=v1842[1] }
    iopl0   = { defs={} expr=v1843[1] }
    iopl1   = { defs={} expr=v1844[1] }
    nt      = { defs={} expr=v1845[1] }
    ?15     = { defs={} expr=v1846[1] }
    rf      = { defs={} expr=v1847[1] }
    vm      = { defs={} expr=v1848[1] }
    ac      = { defs={} expr=v1849[1] }
    vif     = { defs={} expr=v1850[1] }
    vip     = { defs={} expr=v1851[1] }
    id      = { defs={} expr=v1852[1] }
    ?22     = { defs={} expr=v1853[1] }
    ?23     = { defs={} expr=v1854[1] }
    ?24     = { defs={} expr=v1855[1] }
    ?25     = { defs={} expr=v1856[1] }
    ?26     = { defs={} expr=v1857[1] }
    ?27     = { defs={} expr=v1858[1] }
    ?28     = { defs={} expr=v1859[1] }
    ?29     = { defs={} expr=v1860[1] }
    ?30     = { defs={} expr=v1861[1] }
    ?31     = { defs={} expr=v1862[1] }
    ip      = { defs={0x0804837f} expr=0x08048330[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v1821[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1821[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v1821[32] -4[32]) 1[32]) }
      value = { defs={} expr=-125[8] }
      flags = { }
    address = { defs={0x0804837f} expr=(add[32] v1821[32] -4[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
registers:
    ax      = { v33229 }
    cx      = { v33175 }
    dx      = { v33176 }
    bx      = { v33177 }
    sp      = { v33178+0x4 }
    bp      = { v33179 }
    si      = { v33180 }
    di      = { v33181 }
    es      = { v33182 }
    cs      = { v33183 }
    ss      = { v33184 }
    ds      = { v33185 }
    fs      = { v33186 }
    gs      = { v33187 }
    cf      = { v33188 }
    ?1      = { v33189 }
    pf      = { v33190 }
    ?3      = { v33191 }
    af      = { v33192 }
    ?5      = { v33193 }
    zf      = { v33194 }
    sf      = { v33195 }
    tf      = { v33196 }
    if      = { v33197 }
    df      = { v33198 }
    of      = { v33199 }
    iopl0   = { v33200 }
    iopl1   = { v33201 }
    nt      = { v33202 }
    ?15     = { v33203 }
    rf      = { v33204 }
    vm      = { v33205 }
    ac      = { v33206 }
    vif     = { v33207 }
    vip     = { v33208 }
    id      = { v33209 }
    ?22     = { v33210 }
    ?23     = { v33211 }
    ?24     = { v33212 }
    ?25     = { v33213 }
    ?26     = { v33214 }
    ?27     = { v33215 }
    ?28     = { v33216 }
    ?29     = { v33217 }
    ?30     = { v33218 }
    ?31     = { v33219 }
    ip      = { 0x8048385 }
memory:
    address = { v33178 }
      value = { v33229 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) }
    cx      = { defs={} expr=v1923[32] }
    dx      = { defs={} expr=v1924[32] }
    bx      = { defs={} expr=v1925[32] }
    sp      = { defs={0x08048384} expr=(add[32] v1926[32] 4[32]) }
    bp      = { defs={} expr=v1927[32] }
    si      = { defs={} expr=v1928[32] }
    di      = { defs={} expr=v1929[32] }
    es      = { defs={} expr=v1930[16] }
    cs      = { defs={} expr=v1931[16] }
    ss      = { defs={} expr=v1932[16] }
    ds      = { defs={} expr=v1933[16] }
    fs      = { defs={} expr=v1934[16] }
    gs      = { defs={} expr=v1935[16] }
    cf      = { defs={} expr=v1936[1] }
    ?1      = { defs={} expr=v1937[1] }
    pf      = { defs={} expr=v1938[1] }
    ?3      = { defs={} expr=v1939[1] }
    af      = { defs={} expr=v1940[1] }
    ?5      = { defs={} expr=v1941[1] }
    zf      = { defs={} expr=v1942[1] }
    sf      = { defs={} expr=v1943[1] }
    tf      = { defs={} expr=v1944[1] }
    if      = { defs={} expr=v1945[1] }
    df      = { defs={} expr=v1946[1] }
    of      = { defs={} expr=v1947[1] }
    iopl0   = { defs={} expr=v1948[1] }
    iopl1   = { defs={} expr=v1949[1] }
    nt      = { defs={} expr=v1950[1] }
    ?15     = { defs={} expr=v1951[1] }
    rf      = { defs={} expr=v1952[1] }
    vm      = { defs={} expr=v1953[1] }
    ac      = { defs={} expr=v1954[1] }
    vif     = { defs={} expr=v1955[1] }
    vip     = { defs={} expr=v1956[1] }
    id      = { defs={} expr=v1957[1] }
    ?22     = { defs={} expr=v1958[1] }
    ?23     = { defs={} expr=v1959[1] }
    ?24     = { defs={} expr=v1960[1] }
    ?25     = { defs={} expr=v1961[1] }
    ?26     = { defs={} expr=v1962[1] }
    ?27     = { defs={} expr=v1963[1] }
    ?28     = { defs={} expr=v1964[1] }
    ?29     = { defs={} expr=v1965[1] }
    ?30     = { defs={} expr=v1966[1] }
    ?31     = { defs={} expr=v1967[1] }
    ip      = { defs={0x08048384} expr=0x08048385[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1926[32] 3[32]) }
      value = { defs={} expr=v1982[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 2[32]) }
      value = { defs={} expr=v1981[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 1[32]) }
      value = { defs={} expr=v1980[8] }
      flags = { rdonly }
    address = { defs={} expr=v1926[32] }
      value = { defs={} expr=v1979[8] }
      flags = { rdonly }
null state
null state
0x8048385:pop    ebx
registers:
    ax      = { v33229 }
    cx      = { v33175 }
    dx      = { v33176 }
    bx      = { v33239 }
    sp      = { v33178+0x8 }
    bp      = { v33179 }
    si      = { v33180 }
    di      = { v33181 }
    es      = { v33182 }
    cs      = { v33183 }
    ss      = { v33184 }
    ds      = { v33185 }
    fs      = { v33186 }
    gs      = { v33187 }
    cf      = { v33188 }
    ?1      = { v33189 }
    pf      = { v33190 }
    ?3      = { v33191 }
    af      = { v33192 }
    ?5      = { v33193 }
    zf      = { v33194 }
    sf      = { v33195 }
    tf      = { v33196 }
    if      = { v33197 }
    df      = { v33198 }
    of      = { v33199 }
    iopl0   = { v33200 }
    iopl1   = { v33201 }
    nt      = { v33202 }
    ?15     = { v33203 }
    rf      = { v33204 }
    vm      = { v33205 }
    ac      = { v33206 }
    vif     = { v33207 }
    vip     = { v33208 }
    id      = { v33209 }
    ?22     = { v33210 }
    ?23     = { v33211 }
    ?24     = { v33212 }
    ?25     = { v33213 }
    ?26     = { v33214 }
    ?27     = { v33215 }
    ?28     = { v33216 }
    ?29     = { v33217 }
    ?30     = { v33218 }
    ?31     = { v33219 }
    ip      = { 0x8048386 }
memory:
    address = { v33178 }
      value = { v33229 }
      flags = { size=4; read-only }
    address = { v33178+0x4 }
      value = { v33239 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) }
    cx      = { defs={} expr=v1923[32] }
    dx      = { defs={} expr=v1924[32] }
    bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1998[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1999[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2000[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2001[8]))) }
    sp      = { defs={0x08048384,0x08048385} expr=(add[32] (add[32] v1926[32] 4[32]) 4[32]) }
    bp      = { defs={} expr=v1927[32] }
    si      = { defs={} expr=v1928[32] }
    di      = { defs={} expr=v1929[32] }
    es      = { defs={} expr=v1930[16] }
    cs      = { defs={} expr=v1931[16] }
    ss      = { defs={} expr=v1932[16] }
    ds      = { defs={} expr=v1933[16] }
    fs      = { defs={} expr=v1934[16] }
    gs      = { defs={} expr=v1935[16] }
    cf      = { defs={} expr=v1936[1] }
    ?1      = { defs={} expr=v1937[1] }
    pf      = { defs={} expr=v1938[1] }
    ?3      = { defs={} expr=v1939[1] }
    af      = { defs={} expr=v1940[1] }
    ?5      = { defs={} expr=v1941[1] }
    zf      = { defs={} expr=v1942[1] }
    sf      = { defs={} expr=v1943[1] }
    tf      = { defs={} expr=v1944[1] }
    if      = { defs={} expr=v1945[1] }
    df      = { defs={} expr=v1946[1] }
    of      = { defs={} expr=v1947[1] }
    iopl0   = { defs={} expr=v1948[1] }
    iopl1   = { defs={} expr=v1949[1] }
    nt      = { defs={} expr=v1950[1] }
    ?15     = { defs={} expr=v1951[1] }
    rf      = { defs={} expr=v1952[1] }
    vm      = { defs={} expr=v1953[1] }
    ac      = { defs={} expr=v1954[1] }
    vif     = { defs={} expr=v1955[1] }
    vip     = { defs={} expr=v1956[1] }
    id      = { defs={} expr=v1957[1] }
    ?22     = { defs={} expr=v1958[1] }
    ?23     = { defs={} expr=v1959[1] }
    ?24     = { defs={} expr=v1960[1] }
    ?25     = { defs={} expr=v1961[1] }
    ?26     = { defs={} expr=v1962[1] }
    ?27     = { defs={} expr=v1963[1] }
    ?28     = { defs={} expr=v1964[1] }
    ?29     = { defs={} expr=v1965[1] }
    ?30     = { defs={} expr=v1966[1] }
    ?31     = { defs={} expr=v1967[1] }
    ip      = { defs={0x08048384,0x08048385} expr=0x08048386[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v1926[32] 4[32]) 3[32]) }
      value = { defs={} expr=v2001[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v1926[32] 4[32]) 2[32]) }
      value = { defs={} expr=v2000[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v1926[32] 4[32]) 1[32]) }
      value = { defs={} expr=v1999[8] }
      flags = { rdonly }
    address = { defs={0x08048384} expr=(add[32] v1926[32] 4[32]) }
      value = { defs={} expr=v1998[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 3[32]) }
      value = { defs={} expr=v1982[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 2[32]) }
      value = { defs={} expr=v1981[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 1[32]) }
      value = { defs={} expr=v1980[8] }
      flags = { rdonly }
    address = { defs={} expr=v1926[32] }
      value = { defs={} expr=v1979[8] }
      flags = { rdonly }
null state
null state
0x8048386:leave  
registers:
    ax      = { v33229 }
    cx      = { v33175 }
    dx      = { v33176 }
    bx      = { v33239 }
    sp      = { v33179+0x4 }
    bp      = { v33250 }
    si      = { v33180 }
    di      = { v33181 }
    es      = { v33182 }
    cs      = { v33183 }
    ss      = { v33184 }
    ds      = { v33185 }
    fs      = { v33186 }
    gs      = { v33187 }
    cf      = { v33188 }
    ?1      = { v33189 }
    pf      = { v33190 }
    ?3      = { v33191 }
    af      = { v33192 }
    ?5      = { v33193 }
    zf      = { v33194 }
    sf      = { v33195 }
    tf      = { v33196 }
    if      = { v33197 }
    df      = { v33198 }
    of      = { v33199 }
    iopl0   = { v33200 }
    iopl1   = { v33201 }
    nt      = { v33202 }
    ?15     = { v33203 }
    rf      = { v33204 }
    vm      = { v33205 }
    ac      = { v33206 }
    vif     = { v33207 }
    vip     = { v33208 }
    id      = { v33209 }
    ?22     = { v33210 }
    ?23     = { v33211 }
    ?24     = { v33212 }
    ?25     = { v33213 }
    ?26     = { v33214 }
    ?27     = { v33215 }
    ?28     = { v33216 }
    ?29     = { v33217 }
    ?30     = { v33218 }
    ?31     = { v33219 }
    ip      = { 0x8048387 }
memory:
    address = { v33178 }
      value = { v33229 }
      flags = { size=4; read-only }
    address = { v33178+0x4 }
      value = { v33239 }
      flags = { size=4; read-only }
    address = { v33179 }
      value = { v33250 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) }
    cx      = { defs={} expr=v1923[32] }
    dx      = { defs={} expr=v1924[32] }
    bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1998[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1999[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2000[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2001[8]))) }
    sp      = { defs={0x08048386} expr=(add[32] v1927[32] 4[32]) }
    bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2021[8]))) }
    si      = { defs={} expr=v1928[32] }
    di      = { defs={} expr=v1929[32] }
    es      = { defs={} expr=v1930[16] }
    cs      = { defs={} expr=v1931[16] }
    ss      = { defs={} expr=v1932[16] }
    ds      = { defs={} expr=v1933[16] }
    fs      = { defs={} expr=v1934[16] }
    gs      = { defs={} expr=v1935[16] }
    cf      = { defs={} expr=v1936[1] }
    ?1      = { defs={} expr=v1937[1] }
    pf      = { defs={} expr=v1938[1] }
    ?3      = { defs={} expr=v1939[1] }
    af      = { defs={} expr=v1940[1] }
    ?5      = { defs={} expr=v1941[1] }
    zf      = { defs={} expr=v1942[1] }
    sf      = { defs={} expr=v1943[1] }
    tf      = { defs={} expr=v1944[1] }
    if      = { defs={} expr=v1945[1] }
    df      = { defs={} expr=v1946[1] }
    of      = { defs={} expr=v1947[1] }
    iopl0   = { defs={} expr=v1948[1] }
    iopl1   = { defs={} expr=v1949[1] }
    nt      = { defs={} expr=v1950[1] }
    ?15     = { defs={} expr=v1951[1] }
    rf      = { defs={} expr=v1952[1] }
    vm      = { defs={} expr=v1953[1] }
    ac      = { defs={} expr=v1954[1] }
    vif     = { defs={} expr=v1955[1] }
    vip     = { defs={} expr=v1956[1] }
    id      = { defs={} expr=v1957[1] }
    ?22     = { defs={} expr=v1958[1] }
    ?23     = { defs={} expr=v1959[1] }
    ?24     = { defs={} expr=v1960[1] }
    ?25     = { defs={} expr=v1961[1] }
    ?26     = { defs={} expr=v1962[1] }
    ?27     = { defs={} expr=v1963[1] }
    ?28     = { defs={} expr=v1964[1] }
    ?29     = { defs={} expr=v1965[1] }
    ?30     = { defs={} expr=v1966[1] }
    ?31     = { defs={} expr=v1967[1] }
    ip      = { defs={0x08048384,0x08048385,0x08048386} expr=0x08048387[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v1927[32] 3[32]) }
      value = { defs={} expr=v2021[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1927[32] 2[32]) }
      value = { defs={} expr=v2020[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1927[32] 1[32]) }
      value = { defs={} expr=v2019[8] }
      flags = { rdonly }
    address = { defs={0x08048386} expr=v1927[32] }
      value = { defs={} expr=v2018[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v1926[32] 4[32]) 3[32]) }
      value = { defs={} expr=v2001[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v1926[32] 4[32]) 2[32]) }
      value = { defs={} expr=v2000[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v1926[32] 4[32]) 1[32]) }
      value = { defs={} expr=v1999[8] }
      flags = { rdonly }
    address = { defs={0x08048384} expr=(add[32] v1926[32] 4[32]) }
      value = { defs={} expr=v1998[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 3[32]) }
      value = { defs={} expr=v1982[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 2[32]) }
      value = { defs={} expr=v1981[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 1[32]) }
      value = { defs={} expr=v1980[8] }
      flags = { rdonly }
    address = { defs={} expr=v1926[32] }
      value = { defs={} expr=v1979[8] }
      flags = { rdonly }
null state
null state
0x8048387:ret    
registers:
    ax      = { v33229 }
    cx      = { v33175 }
    dx      = { v33176 }
    bx      = { v33239 }
    sp      = { v33179+0x8 }
    bp      = { v33250 }
    si      = { v33180 }
    di      = { v33181 }
    es      = { v33182 }
    cs      = { v33183 }
    ss      = { v33184 }
    ds      = { v33185 }
    fs      = { v33186 }
    gs      = { v33187 }
    cf      = { v33188 }
    ?1      = { v33189 }
    pf      = { v33190 }
    ?3      = { v33191 }
    af      = { v33192 }
    ?5      = { v33193 }
    zf      = { v33194 }
    sf      = { v33195 }
    tf      = { v33196 }
    if      = { v33197 }
    df      = { v33198 }
    of      = { v33199 }
    iopl0   = { v33200 }
    iopl1   = { v33201 }
    nt      = { v33202 }
    ?15     = { v33203 }
    rf      = { v33204 }
    vm      = { v33205 }
    ac      = { v33206 }
    vif     = { v33207 }
    vip     = { v33208 }
    id      = { v33209 }
    ?22     = { v33210 }
    ?23     = { v33211 }
    ?24     = { v33212 }
    ?25     = { v33213 }
    ?26     = { v33214 }
    ?27     = { v33215 }
    ?28     = { v33216 }
    ?29     = { v33217 }
    ?30     = { v33218 }
    ?31     = { v33219 }
    ip      = { v33262 }
memory:
    address = { v33178 }
      value = { v33229 }
      flags = { size=4; read-only }
    address = { v33178+0x4 }
      value = { v33239 }
      flags = { size=4; read-only }
    address = { v33179 }
      value = { v33250 }
      flags = { size=4; read-only }
    address = { v33179+0x4 }
      value = { v33262 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048384} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1979[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1980[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v1981[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v1982[8]))) }
    cx      = { defs={} expr=v1923[32] }
    dx      = { defs={} expr=v1924[32] }
    bx      = { defs={0x08048385} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v1998[8]) (shr0[32] 8[32] (uextend[32] 32[32] v1999[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2000[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2001[8]))) }
    sp      = { defs={0x08048386,0x08048387} expr=(add[32] (add[32] v1927[32] 4[32]) 4[32]) }
    bp      = { defs={0x08048386} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2018[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2019[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2020[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2021[8]))) }
    si      = { defs={} expr=v1928[32] }
    di      = { defs={} expr=v1929[32] }
    es      = { defs={} expr=v1930[16] }
    cs      = { defs={} expr=v1931[16] }
    ss      = { defs={} expr=v1932[16] }
    ds      = { defs={} expr=v1933[16] }
    fs      = { defs={} expr=v1934[16] }
    gs      = { defs={} expr=v1935[16] }
    cf      = { defs={} expr=v1936[1] }
    ?1      = { defs={} expr=v1937[1] }
    pf      = { defs={} expr=v1938[1] }
    ?3      = { defs={} expr=v1939[1] }
    af      = { defs={} expr=v1940[1] }
    ?5      = { defs={} expr=v1941[1] }
    zf      = { defs={} expr=v1942[1] }
    sf      = { defs={} expr=v1943[1] }
    tf      = { defs={} expr=v1944[1] }
    if      = { defs={} expr=v1945[1] }
    df      = { defs={} expr=v1946[1] }
    of      = { defs={} expr=v1947[1] }
    iopl0   = { defs={} expr=v1948[1] }
    iopl1   = { defs={} expr=v1949[1] }
    nt      = { defs={} expr=v1950[1] }
    ?15     = { defs={} expr=v1951[1] }
    rf      = { defs={} expr=v1952[1] }
    vm      = { defs={} expr=v1953[1] }
    ac      = { defs={} expr=v1954[1] }
    vif     = { defs={} expr=v1955[1] }
    vip     = { defs={} expr=v1956[1] }
    id      = { defs={} expr=v1957[1] }
    ?22     = { defs={} expr=v1958[1] }
    ?23     = { defs={} expr=v1959[1] }
    ?24     = { defs={} expr=v1960[1] }
    ?25     = { defs={} expr=v1961[1] }
    ?26     = { defs={} expr=v1962[1] }
    ?27     = { defs={} expr=v1963[1] }
    ?28     = { defs={} expr=v1964[1] }
    ?29     = { defs={} expr=v1965[1] }
    ?30     = { defs={} expr=v1966[1] }
    ?31     = { defs={} expr=v1967[1] }
    ip      = { defs={0x08048387} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2039[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2040[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2041[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2042[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v1927[32] 4[32]) 3[32]) }
      value = { defs={} expr=v2042[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v1927[32] 4[32]) 2[32]) }
      value = { defs={} expr=v2041[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v1927[32] 4[32]) 1[32]) }
      value = { defs={} expr=v2040[8] }
      flags = { rdonly }
    address = { defs={0x08048386} expr=(add[32] v1927[32] 4[32]) }
      value = { defs={} expr=v2039[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1927[32] 3[32]) }
      value = { defs={} expr=v2021[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1927[32] 2[32]) }
      value = { defs={} expr=v2020[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1927[32] 1[32]) }
      value = { defs={} expr=v2019[8] }
      flags = { rdonly }
    address = { defs={0x08048386} expr=v1927[32] }
      value = { defs={} expr=v2018[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v1926[32] 4[32]) 3[32]) }
      value = { defs={} expr=v2001[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v1926[32] 4[32]) 2[32]) }
      value = { defs={} expr=v2000[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v1926[32] 4[32]) 1[32]) }
      value = { defs={} expr=v1999[8] }
      flags = { rdonly }
    address = { defs={0x08048384} expr=(add[32] v1926[32] 4[32]) }
      value = { defs={} expr=v1998[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 3[32]) }
      value = { defs={} expr=v1982[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 2[32]) }
      value = { defs={} expr=v1981[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v1926[32] 1[32]) }
      value = { defs={} expr=v1980[8] }
      flags = { rdonly }
    address = { defs={} expr=v1926[32] }
      value = { defs={} expr=v1979[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048390:push   ebp
registers:
    ax      = { v33313 }
    cx      = { v33314 }
    dx      = { v33315 }
    bx      = { v33316 }
    sp      = { v33317-0x4 }
    bp      = { v33318 }
    si      = { v33319 }
    di      = { v33320 }
    es      = { v33321 }
    cs      = { v33322 }
    ss      = { v33323 }
    ds      = { v33324 }
    fs      = { v33325 }
    gs      = { v33326 }
    cf      = { v33327 }
    ?1      = { v33328 }
    pf      = { v33329 }
    ?3      = { v33330 }
    af      = { v33331 }
    ?5      = { v33332 }
    zf      = { v33333 }
    sf      = { v33334 }
    tf      = { v33335 }
    if      = { v33336 }
    df      = { v33337 }
    of      = { v33338 }
    iopl0   = { v33339 }
    iopl1   = { v33340 }
    nt      = { v33341 }
    ?15     = { v33342 }
    rf      = { v33343 }
    vm      = { v33344 }
    ac      = { v33345 }
    vif     = { v33346 }
    vip     = { v33347 }
    id      = { v33348 }
    ?22     = { v33349 }
    ?23     = { v33350 }
    ?24     = { v33351 }
    ?25     = { v33352 }
    ?26     = { v33353 }
    ?27     = { v33354 }
    ?28     = { v33355 }
    ?29     = { v33356 }
    ?30     = { v33357 }
    ?31     = { v33358 }
    ip      = { 0x8048391 }
memory:
    address = { v33317-0x4 }
      value = { v33318 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v2097[32] }
    cx      = { defs={} expr=v2098[32] }
    dx      = { defs={} expr=v2099[32] }
    bx      = { defs={} expr=v2100[32] }
    sp      = { defs={0x08048390} expr=(add[32] v2101[32] -4[32]) }
    bp      = { defs={} expr=v2102[32] }
    si      = { defs={} expr=v2103[32] }
    di      = { defs={} expr=v2104[32] }
    es      = { defs={} expr=v2105[16] }
    cs      = { defs={} expr=v2106[16] }
    ss      = { defs={} expr=v2107[16] }
    ds      = { defs={} expr=v2108[16] }
    fs      = { defs={} expr=v2109[16] }
    gs      = { defs={} expr=v2110[16] }
    cf      = { defs={} expr=v2111[1] }
    ?1      = { defs={} expr=v2112[1] }
    pf      = { defs={} expr=v2113[1] }
    ?3      = { defs={} expr=v2114[1] }
    af      = { defs={} expr=v2115[1] }
    ?5      = { defs={} expr=v2116[1] }
    zf      = { defs={} expr=v2117[1] }
    sf      = { defs={} expr=v2118[1] }
    tf      = { defs={} expr=v2119[1] }
    if      = { defs={} expr=v2120[1] }
    df      = { defs={} expr=v2121[1] }
    of      = { defs={} expr=v2122[1] }
    iopl0   = { defs={} expr=v2123[1] }
    iopl1   = { defs={} expr=v2124[1] }
    nt      = { defs={} expr=v2125[1] }
    ?15     = { defs={} expr=v2126[1] }
    rf      = { defs={} expr=v2127[1] }
    vm      = { defs={} expr=v2128[1] }
    ac      = { defs={} expr=v2129[1] }
    vif     = { defs={} expr=v2130[1] }
    vip     = { defs={} expr=v2131[1] }
    id      = { defs={} expr=v2132[1] }
    ?22     = { defs={} expr=v2133[1] }
    ?23     = { defs={} expr=v2134[1] }
    ?24     = { defs={} expr=v2135[1] }
    ?25     = { defs={} expr=v2136[1] }
    ?26     = { defs={} expr=v2137[1] }
    ?27     = { defs={} expr=v2138[1] }
    ?28     = { defs={} expr=v2139[1] }
    ?29     = { defs={} expr=v2140[1] }
    ?30     = { defs={} expr=v2141[1] }
    ?31     = { defs={} expr=v2142[1] }
    ip      = { defs={0x08048390} expr=0x08048391[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2102[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2102[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2102[32]) }
      flags = { }
    address = { defs={0x08048390} expr=(add[32] v2101[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2102[32]) }
      flags = { }
init mem:
null state
null state
0x8048391:mov    ebp, esp
registers:
    ax      = { v33313 }
    cx      = { v33314 }
    dx      = { v33315 }
    bx      = { v33316 }
    sp      = { v33317-0x4 }
    bp      = { v33317-0x4 }
    si      = { v33319 }
    di      = { v33320 }
    es      = { v33321 }
    cs      = { v33322 }
    ss      = { v33323 }
    ds      = { v33324 }
    fs      = { v33325 }
    gs      = { v33326 }
    cf      = { v33327 }
    ?1      = { v33328 }
    pf      = { v33329 }
    ?3      = { v33330 }
    af      = { v33331 }
    ?5      = { v33332 }
    zf      = { v33333 }
    sf      = { v33334 }
    tf      = { v33335 }
    if      = { v33336 }
    df      = { v33337 }
    of      = { v33338 }
    iopl0   = { v33339 }
    iopl1   = { v33340 }
    nt      = { v33341 }
    ?15     = { v33342 }
    rf      = { v33343 }
    vm      = { v33344 }
    ac      = { v33345 }
    vif     = { v33346 }
    vip     = { v33347 }
    id      = { v33348 }
    ?22     = { v33349 }
    ?23     = { v33350 }
    ?24     = { v33351 }
    ?25     = { v33352 }
    ?26     = { v33353 }
    ?27     = { v33354 }
    ?28     = { v33355 }
    ?29     = { v33356 }
    ?30     = { v33357 }
    ?31     = { v33358 }
    ip      = { 0x8048393 }
memory:
    address = { v33317-0x4 }
      value = { v33318 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v2097[32] }
    cx      = { defs={} expr=v2098[32] }
    dx      = { defs={} expr=v2099[32] }
    bx      = { defs={} expr=v2100[32] }
    sp      = { defs={0x08048390} expr=(add[32] v2101[32] -4[32]) }
    bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2101[32] -4[32]) }
    si      = { defs={} expr=v2103[32] }
    di      = { defs={} expr=v2104[32] }
    es      = { defs={} expr=v2105[16] }
    cs      = { defs={} expr=v2106[16] }
    ss      = { defs={} expr=v2107[16] }
    ds      = { defs={} expr=v2108[16] }
    fs      = { defs={} expr=v2109[16] }
    gs      = { defs={} expr=v2110[16] }
    cf      = { defs={} expr=v2111[1] }
    ?1      = { defs={} expr=v2112[1] }
    pf      = { defs={} expr=v2113[1] }
    ?3      = { defs={} expr=v2114[1] }
    af      = { defs={} expr=v2115[1] }
    ?5      = { defs={} expr=v2116[1] }
    zf      = { defs={} expr=v2117[1] }
    sf      = { defs={} expr=v2118[1] }
    tf      = { defs={} expr=v2119[1] }
    if      = { defs={} expr=v2120[1] }
    df      = { defs={} expr=v2121[1] }
    of      = { defs={} expr=v2122[1] }
    iopl0   = { defs={} expr=v2123[1] }
    iopl1   = { defs={} expr=v2124[1] }
    nt      = { defs={} expr=v2125[1] }
    ?15     = { defs={} expr=v2126[1] }
    rf      = { defs={} expr=v2127[1] }
    vm      = { defs={} expr=v2128[1] }
    ac      = { defs={} expr=v2129[1] }
    vif     = { defs={} expr=v2130[1] }
    vip     = { defs={} expr=v2131[1] }
    id      = { defs={} expr=v2132[1] }
    ?22     = { defs={} expr=v2133[1] }
    ?23     = { defs={} expr=v2134[1] }
    ?24     = { defs={} expr=v2135[1] }
    ?25     = { defs={} expr=v2136[1] }
    ?26     = { defs={} expr=v2137[1] }
    ?27     = { defs={} expr=v2138[1] }
    ?28     = { defs={} expr=v2139[1] }
    ?29     = { defs={} expr=v2140[1] }
    ?30     = { defs={} expr=v2141[1] }
    ?31     = { defs={} expr=v2142[1] }
    ip      = { defs={0x08048390,0x08048391} expr=0x08048393[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2102[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2102[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2102[32]) }
      flags = { }
    address = { defs={0x08048390} expr=(add[32] v2101[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2102[32]) }
      flags = { }
init mem:
null state
null state
0x8048393:sub    esp, 0x08
registers:
    ax      = { v33313 }
    cx      = { v33314 }
    dx      = { v33315 }
    bx      = { v33316 }
    sp      = { v33317-0xc }
    bp      = { v33317-0x4 }
    si      = { v33319 }
    di      = { v33320 }
    es      = { v33321 }
    cs      = { v33322 }
    ss      = { v33323 }
    ds      = { v33324 }
    fs      = { v33325 }
    gs      = { v33326 }
    cf      = { -v33424+0x1 }
    ?1      = { v33328 }
    pf      = { -v33414+0x1 }
    ?3      = { v33330 }
    af      = { -v33421+0x1 }
    ?5      = { v33332 }
    zf      = { v33419 }
    sf      = { v33417 }
    tf      = { v33335 }
    if      = { v33336 }
    df      = { v33337 }
    of      = { v33431 }
    iopl0   = { v33339 }
    iopl1   = { v33340 }
    nt      = { v33341 }
    ?15     = { v33342 }
    rf      = { v33343 }
    vm      = { v33344 }
    ac      = { v33345 }
    vif     = { v33346 }
    vip     = { v33347 }
    id      = { v33348 }
    ?22     = { v33349 }
    ?23     = { v33350 }
    ?24     = { v33351 }
    ?25     = { v33352 }
    ?26     = { v33353 }
    ?27     = { v33354 }
    ?28     = { v33355 }
    ?29     = { v33356 }
    ?30     = { v33357 }
    ?31     = { v33358 }
    ip      = { 0x8048396 }
memory:
    address = { v33317-0x4 }
      value = { v33318 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v2097[32] }
    cx      = { defs={} expr=v2098[32] }
    dx      = { defs={} expr=v2099[32] }
    bx      = { defs={} expr=v2100[32] }
    sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2101[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2101[32] -4[32]) }
    si      = { defs={} expr=v2103[32] }
    di      = { defs={} expr=v2104[32] }
    es      = { defs={} expr=v2105[16] }
    cs      = { defs={} expr=v2106[16] }
    ss      = { defs={} expr=v2107[16] }
    ds      = { defs={} expr=v2108[16] }
    fs      = { defs={} expr=v2109[16] }
    gs      = { defs={} expr=v2110[16] }
    cf      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2101[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2101[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v2112[1] }
    pf      = { defs={0x08048390,0x08048393} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2101[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2101[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2101[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2101[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2101[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2101[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2101[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2101[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v2114[1] }
    af      = { defs={0x08048390,0x08048393} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2101[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2101[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v2116[1] }
    zf      = { defs={0x08048390,0x08048393} expr=(zerop[1] (add[32] (add[32] v2101[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048390,0x08048393} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2101[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v2119[1] }
    if      = { defs={} expr=v2120[1] }
    df      = { defs={} expr=v2121[1] }
    of      = { defs={0x08048390,0x08048393} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2101[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2101[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2101[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2101[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v2123[1] }
    iopl1   = { defs={} expr=v2124[1] }
    nt      = { defs={} expr=v2125[1] }
    ?15     = { defs={} expr=v2126[1] }
    rf      = { defs={} expr=v2127[1] }
    vm      = { defs={} expr=v2128[1] }
    ac      = { defs={} expr=v2129[1] }
    vif     = { defs={} expr=v2130[1] }
    vip     = { defs={} expr=v2131[1] }
    id      = { defs={} expr=v2132[1] }
    ?22     = { defs={} expr=v2133[1] }
    ?23     = { defs={} expr=v2134[1] }
    ?24     = { defs={} expr=v2135[1] }
    ?25     = { defs={} expr=v2136[1] }
    ?26     = { defs={} expr=v2137[1] }
    ?27     = { defs={} expr=v2138[1] }
    ?28     = { defs={} expr=v2139[1] }
    ?29     = { defs={} expr=v2140[1] }
    ?30     = { defs={} expr=v2141[1] }
    ?31     = { defs={} expr=v2142[1] }
    ip      = { defs={0x08048390,0x08048391,0x08048393} expr=0x08048396[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2102[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2102[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2102[32]) }
      flags = { }
    address = { defs={0x08048390} expr=(add[32] v2101[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2102[32]) }
      flags = { }
init mem:
null state
null state
0x8048396:cmp    BYTE PTR ds:[0x080496f4<.bss>], 0x00
registers:
    ax      = { v33313 }
    cx      = { v33314 }
    dx      = { v33315 }
    bx      = { v33316 }
    sp      = { v33317-0xc }
    bp      = { v33317-0x4 }
    si      = { v33319 }
    di      = { v33320 }
    es      = { v33321 }
    cs      = { v33322 }
    ss      = { v33323 }
    ds      = { v33324 }
    fs      = { v33325 }
    gs      = { v33326 }
    cf      = { -v33486+0x1 }
    ?1      = { v33328 }
    pf      = { -v33476+0x1 }
    ?3      = { v33330 }
    af      = { -v33483+0x1 }
    ?5      = { v33332 }
    zf      = { v33481 }
    sf      = { v33479 }
    tf      = { v33335 }
    if      = { v33336 }
    df      = { v33337 }
    of      = { v33493 }
    iopl0   = { v33339 }
    iopl1   = { v33340 }
    nt      = { v33341 }
    ?15     = { v33342 }
    rf      = { v33343 }
    vm      = { v33344 }
    ac      = { v33345 }
    vif     = { v33346 }
    vip     = { v33347 }
    id      = { v33348 }
    ?22     = { v33349 }
    ?23     = { v33350 }
    ?24     = { v33351 }
    ?25     = { v33352 }
    ?26     = { v33353 }
    ?27     = { v33354 }
    ?28     = { v33355 }
    ?29     = { v33356 }
    ?30     = { v33357 }
    ?31     = { v33358 }
    ip      = { 0x804839d }
memory:
    address = { v33317-0x4 }
      value = { v33318 }
      flags = { size=4 }
    address = { 0x80496f4 }
      value = { v33442 }
      flags = { size=1; read-only }
registers:
    ax      = { defs={} expr=v2097[32] }
    cx      = { defs={} expr=v2098[32] }
    dx      = { defs={} expr=v2099[32] }
    bx      = { defs={} expr=v2100[32] }
    sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2101[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2101[32] -4[32]) }
    si      = { defs={} expr=v2103[32] }
    di      = { defs={} expr=v2104[32] }
    es      = { defs={} expr=v2105[16] }
    cs      = { defs={} expr=v2106[16] }
    ss      = { defs={} expr=v2107[16] }
    ds      = { defs={} expr=v2108[16] }
    fs      = { defs={} expr=v2109[16] }
    gs      = { defs={} expr=v2110[16] }
    cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2206[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2206[8]) -256[9])))))) }
    ?1      = { defs={} expr=v2112[1] }
    pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v2206[8]) (extract[1] 1[32] 2[32] v2206[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v2206[8]) (extract[1] 3[32] 4[32] v2206[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v2206[8]) (extract[1] 5[32] 6[32] v2206[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v2206[8]) (extract[1] 7[32] 8[32] v2206[8]))))) }
    ?3      = { defs={} expr=v2114[1] }
    af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2206[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2206[8]) -256[9])))))) }
    ?5      = { defs={} expr=v2116[1] }
    zf      = { defs={0x08048396} expr=(zerop[1] v2206[8]) }
    sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] v2206[8]) }
    tf      = { defs={} expr=v2119[1] }
    if      = { defs={} expr=v2120[1] }
    df      = { defs={} expr=v2121[1] }
    of      = { defs={0x08048396} expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2206[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2206[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2206[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2206[8]) -256[9])))))) }
    iopl0   = { defs={} expr=v2123[1] }
    iopl1   = { defs={} expr=v2124[1] }
    nt      = { defs={} expr=v2125[1] }
    ?15     = { defs={} expr=v2126[1] }
    rf      = { defs={} expr=v2127[1] }
    vm      = { defs={} expr=v2128[1] }
    ac      = { defs={} expr=v2129[1] }
    vif     = { defs={} expr=v2130[1] }
    vip     = { defs={} expr=v2131[1] }
    id      = { defs={} expr=v2132[1] }
    ?22     = { defs={} expr=v2133[1] }
    ?23     = { defs={} expr=v2134[1] }
    ?24     = { defs={} expr=v2135[1] }
    ?25     = { defs={} expr=v2136[1] }
    ?26     = { defs={} expr=v2137[1] }
    ?27     = { defs={} expr=v2138[1] }
    ?28     = { defs={} expr=v2139[1] }
    ?29     = { defs={} expr=v2140[1] }
    ?30     = { defs={} expr=v2141[1] }
    ?31     = { defs={} expr=v2142[1] }
    ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396} expr=0x0804839d[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2102[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2102[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2102[32]) }
      flags = { }
    address = { defs={0x08048390} expr=(add[32] v2101[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2102[32]) }
      flags = { }
init mem:
    address = { defs={0x08048396} expr=0x080496f4[32] }
      value = { defs={} expr=v2206[8] }
      flags = { rdonly }
null state
null state
0x804839d:jne    0x080483cc<<Insn>>
registers:
    ax      = { v33313 }
    cx      = { v33314 }
    dx      = { v33315 }
    bx      = { v33316 }
    sp      = { v33317-0xc }
    bp      = { v33317-0x4 }
    si      = { v33319 }
    di      = { v33320 }
    es      = { v33321 }
    cs      = { v33322 }
    ss      = { v33323 }
    ds      = { v33324 }
    fs      = { v33325 }
    gs      = { v33326 }
    cf      = { -v33486+0x1 }
    ?1      = { v33328 }
    pf      = { -v33476+0x1 }
    ?3      = { v33330 }
    af      = { -v33483+0x1 }
    ?5      = { v33332 }
    zf      = { v33481 }
    sf      = { v33479 }
    tf      = { v33335 }
    if      = { v33336 }
    df      = { v33337 }
    of      = { v33493 }
    iopl0   = { v33339 }
    iopl1   = { v33340 }
    nt      = { v33341 }
    ?15     = { v33342 }
    rf      = { v33343 }
    vm      = { v33344 }
    ac      = { v33345 }
    vif     = { v33346 }
    vip     = { v33347 }
    id      = { v33348 }
    ?22     = { v33349 }
    ?23     = { v33350 }
    ?24     = { v33351 }
    ?25     = { v33352 }
    ?26     = { v33353 }
    ?27     = { v33354 }
    ?28     = { v33355 }
    ?29     = { v33356 }
    ?30     = { v33357 }
    ?31     = { v33358 }
    ip      = { v33503 }
memory:
    address = { v33317-0x4 }
      value = { v33318 }
      flags = { size=4 }
    address = { 0x80496f4 }
      value = { v33442 }
      flags = { size=1; read-only }
registers:
    ax      = { defs={} expr=v2097[32] }
    cx      = { defs={} expr=v2098[32] }
    dx      = { defs={} expr=v2099[32] }
    bx      = { defs={} expr=v2100[32] }
    sp      = { defs={0x08048390,0x08048393} expr=(add[32] (add[32] v2101[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048390,0x08048391} expr=(add[32] v2101[32] -4[32]) }
    si      = { defs={} expr=v2103[32] }
    di      = { defs={} expr=v2104[32] }
    es      = { defs={} expr=v2105[16] }
    cs      = { defs={} expr=v2106[16] }
    ss      = { defs={} expr=v2107[16] }
    ds      = { defs={} expr=v2108[16] }
    fs      = { defs={} expr=v2109[16] }
    gs      = { defs={} expr=v2110[16] }
    cf      = { defs={0x08048396} expr=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2206[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2206[8]) -256[9])))))) }
    ?1      = { defs={} expr=v2112[1] }
    pf      = { defs={0x08048396} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] v2206[8]) (extract[1] 1[32] 2[32] v2206[8])) (bv-xor[1] (extract[1] 2[32] 3[32] v2206[8]) (extract[1] 3[32] 4[32] v2206[8]))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] v2206[8]) (extract[1] 5[32] 6[32] v2206[8])) (bv-xor[1] (extract[1] 6[32] 7[32] v2206[8]) (extract[1] 7[32] 8[32] v2206[8]))))) }
    ?3      = { defs={} expr=v2114[1] }
    af      = { defs={0x08048396} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2206[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2206[8]) -256[9])))))) }
    ?5      = { defs={} expr=v2116[1] }
    zf      = { defs={0x08048396} expr=(zerop[1] v2206[8]) }
    sf      = { defs={0x08048396} expr=(extract[1] 7[32] 8[32] v2206[8]) }
    tf      = { defs={} expr=v2119[1] }
    if      = { defs={} expr=v2120[1] }
    df      = { defs={} expr=v2121[1] }
    of      = { defs={0x08048396} expr=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2206[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2206[8]) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] v2206[8]) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] v2206[8]) -256[9])))))) }
    iopl0   = { defs={} expr=v2123[1] }
    iopl1   = { defs={} expr=v2124[1] }
    nt      = { defs={} expr=v2125[1] }
    ?15     = { defs={} expr=v2126[1] }
    rf      = { defs={} expr=v2127[1] }
    vm      = { defs={} expr=v2128[1] }
    ac      = { defs={} expr=v2129[1] }
    vif     = { defs={} expr=v2130[1] }
    vip     = { defs={} expr=v2131[1] }
    id      = { defs={} expr=v2132[1] }
    ?22     = { defs={} expr=v2133[1] }
    ?23     = { defs={} expr=v2134[1] }
    ?24     = { defs={} expr=v2135[1] }
    ?25     = { defs={} expr=v2136[1] }
    ?26     = { defs={} expr=v2137[1] }
    ?27     = { defs={} expr=v2138[1] }
    ?28     = { defs={} expr=v2139[1] }
    ?29     = { defs={} expr=v2140[1] }
    ?30     = { defs={} expr=v2141[1] }
    ?31     = { defs={} expr=v2142[1] }
    ip      = { defs={0x08048390,0x08048391,0x08048393,0x08048396,0x0804839d} expr=(ite[32] (invert[1] (zerop[1] v2206[8])) 0x080483cc[32] 0x0804839f[32]) }
memory:
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2102[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2102[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2101[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2102[32]) }
      flags = { }
    address = { defs={0x08048390} expr=(add[32] v2101[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2102[32]) }
      flags = { }
init mem:
    address = { defs={0x08048396} expr=0x080496f4[32] }
      value = { defs={} expr=v2206[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
registers:
    ax      = { v33606 }
    cx      = { v33554 }
    dx      = { v33555 }
    bx      = { v33556 }
    sp      = { v33557 }
    bp      = { v33558 }
    si      = { v33559 }
    di      = { v33560 }
    es      = { v33561 }
    cs      = { v33562 }
    ss      = { v33563 }
    ds      = { v33564 }
    fs      = { v33565 }
    gs      = { v33566 }
    cf      = { v33567 }
    ?1      = { v33568 }
    pf      = { v33569 }
    ?3      = { v33570 }
    af      = { v33571 }
    ?5      = { v33572 }
    zf      = { v33573 }
    sf      = { v33574 }
    tf      = { v33575 }
    if      = { v33576 }
    df      = { v33577 }
    of      = { v33578 }
    iopl0   = { v33579 }
    iopl1   = { v33580 }
    nt      = { v33581 }
    ?15     = { v33582 }
    rf      = { v33583 }
    vm      = { v33584 }
    ac      = { v33585 }
    vif     = { v33586 }
    vip     = { v33587 }
    id      = { v33588 }
    ?22     = { v33589 }
    ?23     = { v33590 }
    ?24     = { v33591 }
    ?25     = { v33592 }
    ?26     = { v33593 }
    ?27     = { v33594 }
    ?28     = { v33595 }
    ?29     = { v33596 }
    ?30     = { v33597 }
    ?31     = { v33598 }
    ip      = { 0x80483a4 }
memory:
    address = { 0x80496f0 }
      value = { v33606 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) }
    cx      = { defs={} expr=v2296[32] }
    dx      = { defs={} expr=v2297[32] }
    bx      = { defs={} expr=v2298[32] }
    sp      = { defs={} expr=v2299[32] }
    bp      = { defs={} expr=v2300[32] }
    si      = { defs={} expr=v2301[32] }
    di      = { defs={} expr=v2302[32] }
    es      = { defs={} expr=v2303[16] }
    cs      = { defs={} expr=v2304[16] }
    ss      = { defs={} expr=v2305[16] }
    ds      = { defs={} expr=v2306[16] }
    fs      = { defs={} expr=v2307[16] }
    gs      = { defs={} expr=v2308[16] }
    cf      = { defs={} expr=v2309[1] }
    ?1      = { defs={} expr=v2310[1] }
    pf      = { defs={} expr=v2311[1] }
    ?3      = { defs={} expr=v2312[1] }
    af      = { defs={} expr=v2313[1] }
    ?5      = { defs={} expr=v2314[1] }
    zf      = { defs={} expr=v2315[1] }
    sf      = { defs={} expr=v2316[1] }
    tf      = { defs={} expr=v2317[1] }
    if      = { defs={} expr=v2318[1] }
    df      = { defs={} expr=v2319[1] }
    of      = { defs={} expr=v2320[1] }
    iopl0   = { defs={} expr=v2321[1] }
    iopl1   = { defs={} expr=v2322[1] }
    nt      = { defs={} expr=v2323[1] }
    ?15     = { defs={} expr=v2324[1] }
    rf      = { defs={} expr=v2325[1] }
    vm      = { defs={} expr=v2326[1] }
    ac      = { defs={} expr=v2327[1] }
    vif     = { defs={} expr=v2328[1] }
    vip     = { defs={} expr=v2329[1] }
    id      = { defs={} expr=v2330[1] }
    ?22     = { defs={} expr=v2331[1] }
    ?23     = { defs={} expr=v2332[1] }
    ?24     = { defs={} expr=v2333[1] }
    ?25     = { defs={} expr=v2334[1] }
    ?26     = { defs={} expr=v2335[1] }
    ?27     = { defs={} expr=v2336[1] }
    ?28     = { defs={} expr=v2337[1] }
    ?29     = { defs={} expr=v2338[1] }
    ?30     = { defs={} expr=v2339[1] }
    ?31     = { defs={} expr=v2340[1] }
    ip      = { defs={0x0804839f} expr=0x080483a4[32] }
memory:
init mem:
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2353[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2352[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2351[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=0x080496f0[32] }
      value = { defs={} expr=v2350[8] }
      flags = { rdonly }
null state
null state
0x80483a4:mov    edx, DWORD PTR ds:[eax]
registers:
    ax      = { v33606 }
    cx      = { v33554 }
    dx      = { v33614 }
    bx      = { v33556 }
    sp      = { v33557 }
    bp      = { v33558 }
    si      = { v33559 }
    di      = { v33560 }
    es      = { v33561 }
    cs      = { v33562 }
    ss      = { v33563 }
    ds      = { v33564 }
    fs      = { v33565 }
    gs      = { v33566 }
    cf      = { v33567 }
    ?1      = { v33568 }
    pf      = { v33569 }
    ?3      = { v33570 }
    af      = { v33571 }
    ?5      = { v33572 }
    zf      = { v33573 }
    sf      = { v33574 }
    tf      = { v33575 }
    if      = { v33576 }
    df      = { v33577 }
    of      = { v33578 }
    iopl0   = { v33579 }
    iopl1   = { v33580 }
    nt      = { v33581 }
    ?15     = { v33582 }
    rf      = { v33583 }
    vm      = { v33584 }
    ac      = { v33585 }
    vif     = { v33586 }
    vip     = { v33587 }
    id      = { v33588 }
    ?22     = { v33589 }
    ?23     = { v33590 }
    ?24     = { v33591 }
    ?25     = { v33592 }
    ?26     = { v33593 }
    ?27     = { v33594 }
    ?28     = { v33595 }
    ?29     = { v33596 }
    ?30     = { v33597 }
    ?31     = { v33598 }
    ip      = { 0x80483a6 }
memory:
    address = { 0x80496f0 }
      value = { v33606 }
      flags = { size=4; read-only }
    address = { v33606 }
      value = { v33614 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) }
    cx      = { defs={} expr=v2296[32] }
    dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) }
    bx      = { defs={} expr=v2298[32] }
    sp      = { defs={} expr=v2299[32] }
    bp      = { defs={} expr=v2300[32] }
    si      = { defs={} expr=v2301[32] }
    di      = { defs={} expr=v2302[32] }
    es      = { defs={} expr=v2303[16] }
    cs      = { defs={} expr=v2304[16] }
    ss      = { defs={} expr=v2305[16] }
    ds      = { defs={} expr=v2306[16] }
    fs      = { defs={} expr=v2307[16] }
    gs      = { defs={} expr=v2308[16] }
    cf      = { defs={} expr=v2309[1] }
    ?1      = { defs={} expr=v2310[1] }
    pf      = { defs={} expr=v2311[1] }
    ?3      = { defs={} expr=v2312[1] }
    af      = { defs={} expr=v2313[1] }
    ?5      = { defs={} expr=v2314[1] }
    zf      = { defs={} expr=v2315[1] }
    sf      = { defs={} expr=v2316[1] }
    tf      = { defs={} expr=v2317[1] }
    if      = { defs={} expr=v2318[1] }
    df      = { defs={} expr=v2319[1] }
    of      = { defs={} expr=v2320[1] }
    iopl0   = { defs={} expr=v2321[1] }
    iopl1   = { defs={} expr=v2322[1] }
    nt      = { defs={} expr=v2323[1] }
    ?15     = { defs={} expr=v2324[1] }
    rf      = { defs={} expr=v2325[1] }
    vm      = { defs={} expr=v2326[1] }
    ac      = { defs={} expr=v2327[1] }
    vif     = { defs={} expr=v2328[1] }
    vip     = { defs={} expr=v2329[1] }
    id      = { defs={} expr=v2330[1] }
    ?22     = { defs={} expr=v2331[1] }
    ?23     = { defs={} expr=v2332[1] }
    ?24     = { defs={} expr=v2333[1] }
    ?25     = { defs={} expr=v2334[1] }
    ?26     = { defs={} expr=v2335[1] }
    ?27     = { defs={} expr=v2336[1] }
    ?28     = { defs={} expr=v2337[1] }
    ?29     = { defs={} expr=v2338[1] }
    ?30     = { defs={} expr=v2339[1] }
    ?31     = { defs={} expr=v2340[1] }
    ip      = { defs={0x0804839f,0x080483a4} expr=0x080483a6[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) 3[32]) }
      value = { defs={} expr=v2370[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) 2[32]) }
      value = { defs={} expr=v2369[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) 1[32]) }
      value = { defs={} expr=v2368[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) }
      value = { defs={} expr=v2367[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2353[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2352[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2351[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=0x080496f0[32] }
      value = { defs={} expr=v2350[8] }
      flags = { rdonly }
null state
null state
0x80483a6:test   edx, edx
registers:
    ax      = { v33606 }
    cx      = { v33554 }
    dx      = { v33614 }
    bx      = { v33556 }
    sp      = { v33557 }
    bp      = { v33558 }
    si      = { v33559 }
    di      = { v33560 }
    es      = { v33561 }
    cs      = { v33562 }
    ss      = { v33563 }
    ds      = { v33564 }
    fs      = { v33565 }
    gs      = { v33566 }
    cf      = { 0x0 }
    ?1      = { v33568 }
    pf      = { -v33652+0x1 }
    ?3      = { v33570 }
    af      = { v33660 }
    ?5      = { v33572 }
    zf      = { v33657 }
    sf      = { v33655 }
    tf      = { v33575 }
    if      = { v33576 }
    df      = { v33577 }
    of      = { 0x0 }
    iopl0   = { v33579 }
    iopl1   = { v33580 }
    nt      = { v33581 }
    ?15     = { v33582 }
    rf      = { v33583 }
    vm      = { v33584 }
    ac      = { v33585 }
    vif     = { v33586 }
    vip     = { v33587 }
    id      = { v33588 }
    ?22     = { v33589 }
    ?23     = { v33590 }
    ?24     = { v33591 }
    ?25     = { v33592 }
    ?26     = { v33593 }
    ?27     = { v33594 }
    ?28     = { v33595 }
    ?29     = { v33596 }
    ?30     = { v33597 }
    ?31     = { v33598 }
    ip      = { 0x80483a8 }
memory:
    address = { 0x80496f0 }
      value = { v33606 }
      flags = { size=4; read-only }
    address = { v33606 }
      value = { v33614 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) }
    cx      = { defs={} expr=v2296[32] }
    dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) }
    bx      = { defs={} expr=v2298[32] }
    sp      = { defs={} expr=v2299[32] }
    bp      = { defs={} expr=v2300[32] }
    si      = { defs={} expr=v2301[32] }
    di      = { defs={} expr=v2302[32] }
    es      = { defs={} expr=v2303[16] }
    cs      = { defs={} expr=v2304[16] }
    ss      = { defs={} expr=v2305[16] }
    ds      = { defs={} expr=v2306[16] }
    fs      = { defs={} expr=v2307[16] }
    gs      = { defs={} expr=v2308[16] }
    cf      = { defs={0x080483a6} expr=0[1] }
    ?1      = { defs={} expr=v2310[1] }
    pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))))))) }
    ?3      = { defs={} expr=v2312[1] }
    af      = { defs={0x080483a6} expr=v2403[1] }
    ?5      = { defs={} expr=v2314[1] }
    zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))))) }
    sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))))) }
    tf      = { defs={} expr=v2317[1] }
    if      = { defs={} expr=v2318[1] }
    df      = { defs={} expr=v2319[1] }
    of      = { defs={0x080483a6} expr=0[1] }
    iopl0   = { defs={} expr=v2321[1] }
    iopl1   = { defs={} expr=v2322[1] }
    nt      = { defs={} expr=v2323[1] }
    ?15     = { defs={} expr=v2324[1] }
    rf      = { defs={} expr=v2325[1] }
    vm      = { defs={} expr=v2326[1] }
    ac      = { defs={} expr=v2327[1] }
    vif     = { defs={} expr=v2328[1] }
    vip     = { defs={} expr=v2329[1] }
    id      = { defs={} expr=v2330[1] }
    ?22     = { defs={} expr=v2331[1] }
    ?23     = { defs={} expr=v2332[1] }
    ?24     = { defs={} expr=v2333[1] }
    ?25     = { defs={} expr=v2334[1] }
    ?26     = { defs={} expr=v2335[1] }
    ?27     = { defs={} expr=v2336[1] }
    ?28     = { defs={} expr=v2337[1] }
    ?29     = { defs={} expr=v2338[1] }
    ?30     = { defs={} expr=v2339[1] }
    ?31     = { defs={} expr=v2340[1] }
    ip      = { defs={0x0804839f,0x080483a4,0x080483a6} expr=0x080483a8[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) 3[32]) }
      value = { defs={} expr=v2370[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) 2[32]) }
      value = { defs={} expr=v2369[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) 1[32]) }
      value = { defs={} expr=v2368[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) }
      value = { defs={} expr=v2367[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2353[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2352[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2351[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=0x080496f0[32] }
      value = { defs={} expr=v2350[8] }
      flags = { rdonly }
null state
null state
0x80483a8:je     0x080483c5<<Insn>>
registers:
    ax      = { v33606 }
    cx      = { v33554 }
    dx      = { v33614 }
    bx      = { v33556 }
    sp      = { v33557 }
    bp      = { v33558 }
    si      = { v33559 }
    di      = { v33560 }
    es      = { v33561 }
    cs      = { v33562 }
    ss      = { v33563 }
    ds      = { v33564 }
    fs      = { v33565 }
    gs      = { v33566 }
    cf      = { 0x0 }
    ?1      = { v33568 }
    pf      = { -v33652+0x1 }
    ?3      = { v33570 }
    af      = { v33660 }
    ?5      = { v33572 }
    zf      = { v33657 }
    sf      = { v33655 }
    tf      = { v33575 }
    if      = { v33576 }
    df      = { v33577 }
    of      = { 0x0 }
    iopl0   = { v33579 }
    iopl1   = { v33580 }
    nt      = { v33581 }
    ?15     = { v33582 }
    rf      = { v33583 }
    vm      = { v33584 }
    ac      = { v33585 }
    vif     = { v33586 }
    vip     = { v33587 }
    id      = { v33588 }
    ?22     = { v33589 }
    ?23     = { v33590 }
    ?24     = { v33591 }
    ?25     = { v33592 }
    ?26     = { v33593 }
    ?27     = { v33594 }
    ?28     = { v33595 }
    ?29     = { v33596 }
    ?30     = { v33597 }
    ?31     = { v33598 }
    ip      = { v33670 }
memory:
    address = { 0x80496f0 }
      value = { v33606 }
      flags = { size=4; read-only }
    address = { v33606 }
      value = { v33614 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) }
    cx      = { defs={} expr=v2296[32] }
    dx      = { defs={0x080483a4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) }
    bx      = { defs={} expr=v2298[32] }
    sp      = { defs={} expr=v2299[32] }
    bp      = { defs={} expr=v2300[32] }
    si      = { defs={} expr=v2301[32] }
    di      = { defs={} expr=v2302[32] }
    es      = { defs={} expr=v2303[16] }
    cs      = { defs={} expr=v2304[16] }
    ss      = { defs={} expr=v2305[16] }
    ds      = { defs={} expr=v2306[16] }
    fs      = { defs={} expr=v2307[16] }
    gs      = { defs={} expr=v2308[16] }
    cf      = { defs={0x080483a6} expr=0[1] }
    ?1      = { defs={} expr=v2310[1] }
    pf      = { defs={0x080483a4,0x080483a6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8])))))))))) }
    ?3      = { defs={} expr=v2312[1] }
    af      = { defs={0x080483a6} expr=v2403[1] }
    ?5      = { defs={} expr=v2314[1] }
    zf      = { defs={0x080483a4,0x080483a6} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))))) }
    sf      = { defs={0x080483a4,0x080483a6} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))))) }
    tf      = { defs={} expr=v2317[1] }
    if      = { defs={} expr=v2318[1] }
    df      = { defs={} expr=v2319[1] }
    of      = { defs={0x080483a6} expr=0[1] }
    iopl0   = { defs={} expr=v2321[1] }
    iopl1   = { defs={} expr=v2322[1] }
    nt      = { defs={} expr=v2323[1] }
    ?15     = { defs={} expr=v2324[1] }
    rf      = { defs={} expr=v2325[1] }
    vm      = { defs={} expr=v2326[1] }
    ac      = { defs={} expr=v2327[1] }
    vif     = { defs={} expr=v2328[1] }
    vip     = { defs={} expr=v2329[1] }
    id      = { defs={} expr=v2330[1] }
    ?22     = { defs={} expr=v2331[1] }
    ?23     = { defs={} expr=v2332[1] }
    ?24     = { defs={} expr=v2333[1] }
    ?25     = { defs={} expr=v2334[1] }
    ?26     = { defs={} expr=v2335[1] }
    ?27     = { defs={} expr=v2336[1] }
    ?28     = { defs={} expr=v2337[1] }
    ?29     = { defs={} expr=v2338[1] }
    ?30     = { defs={} expr=v2339[1] }
    ?31     = { defs={} expr=v2340[1] }
    ip      = { defs={0x0804839f,0x080483a4,0x080483a6,0x080483a8} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2367[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2368[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2369[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2370[8]))))) 0x080483c5[32] 0x080483aa[32]) }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) 3[32]) }
      value = { defs={} expr=v2370[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) 2[32]) }
      value = { defs={} expr=v2369[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) 1[32]) }
      value = { defs={} expr=v2368[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2350[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2351[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2352[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2353[8]))) }
      value = { defs={} expr=v2367[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2353[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2352[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2351[8] }
      flags = { rdonly }
    address = { defs={0x0804839f} expr=0x080496f0[32] }
      value = { defs={} expr=v2350[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
registers:
    ax      = { v33720 }
    cx      = { v33721 }
    dx      = { v33722 }
    bx      = { v33723 }
    sp      = { v33724 }
    bp      = { v33725 }
    si      = { v33726 }
    di      = { v33727 }
    es      = { v33728 }
    cs      = { v33729 }
    ss      = { v33730 }
    ds      = { v33731 }
    fs      = { v33732 }
    gs      = { v33733 }
    cf      = { v33734 }
    ?1      = { v33735 }
    pf      = { v33736 }
    ?3      = { v33737 }
    af      = { v33738 }
    ?5      = { v33739 }
    zf      = { v33740 }
    sf      = { v33741 }
    tf      = { v33742 }
    if      = { v33743 }
    df      = { v33744 }
    of      = { v33745 }
    iopl0   = { v33746 }
    iopl1   = { v33747 }
    nt      = { v33748 }
    ?15     = { v33749 }
    rf      = { v33750 }
    vm      = { v33751 }
    ac      = { v33752 }
    vif     = { v33753 }
    vip     = { v33754 }
    id      = { v33755 }
    ?22     = { v33756 }
    ?23     = { v33757 }
    ?24     = { v33758 }
    ?25     = { v33759 }
    ?26     = { v33760 }
    ?27     = { v33761 }
    ?28     = { v33762 }
    ?29     = { v33763 }
    ?30     = { v33764 }
    ?31     = { v33765 }
    ip      = { 0x80483b0 }
memory:
registers:
    ax      = { defs={} expr=v2462[32] }
    cx      = { defs={} expr=v2463[32] }
    dx      = { defs={} expr=v2464[32] }
    bx      = { defs={} expr=v2465[32] }
    sp      = { defs={} expr=v2466[32] }
    bp      = { defs={} expr=v2467[32] }
    si      = { defs={0x080483aa} expr=v2468[32] }
    di      = { defs={} expr=v2469[32] }
    es      = { defs={} expr=v2470[16] }
    cs      = { defs={} expr=v2471[16] }
    ss      = { defs={} expr=v2472[16] }
    ds      = { defs={} expr=v2473[16] }
    fs      = { defs={} expr=v2474[16] }
    gs      = { defs={} expr=v2475[16] }
    cf      = { defs={} expr=v2476[1] }
    ?1      = { defs={} expr=v2477[1] }
    pf      = { defs={} expr=v2478[1] }
    ?3      = { defs={} expr=v2479[1] }
    af      = { defs={} expr=v2480[1] }
    ?5      = { defs={} expr=v2481[1] }
    zf      = { defs={} expr=v2482[1] }
    sf      = { defs={} expr=v2483[1] }
    tf      = { defs={} expr=v2484[1] }
    if      = { defs={} expr=v2485[1] }
    df      = { defs={} expr=v2486[1] }
    of      = { defs={} expr=v2487[1] }
    iopl0   = { defs={} expr=v2488[1] }
    iopl1   = { defs={} expr=v2489[1] }
    nt      = { defs={} expr=v2490[1] }
    ?15     = { defs={} expr=v2491[1] }
    rf      = { defs={} expr=v2492[1] }
    vm      = { defs={} expr=v2493[1] }
    ac      = { defs={} expr=v2494[1] }
    vif     = { defs={} expr=v2495[1] }
    vip     = { defs={} expr=v2496[1] }
    id      = { defs={} expr=v2497[1] }
    ?22     = { defs={} expr=v2498[1] }
    ?23     = { defs={} expr=v2499[1] }
    ?24     = { defs={} expr=v2500[1] }
    ?25     = { defs={} expr=v2501[1] }
    ?26     = { defs={} expr=v2502[1] }
    ?27     = { defs={} expr=v2503[1] }
    ?28     = { defs={} expr=v2504[1] }
    ?29     = { defs={} expr=v2505[1] }
    ?30     = { defs={} expr=v2506[1] }
    ?31     = { defs={} expr=v2507[1] }
    ip      = { defs={0x080483aa} expr=0x080483b0[32] }
memory:
init mem:
null state
null state
0x80483b0:add    eax, 0x04
registers:
    ax      = { v33720+0x4 }
    cx      = { v33721 }
    dx      = { v33722 }
    bx      = { v33723 }
    sp      = { v33724 }
    bp      = { v33725 }
    si      = { v33726 }
    di      = { v33727 }
    es      = { v33728 }
    cs      = { v33729 }
    ss      = { v33730 }
    ds      = { v33731 }
    fs      = { v33732 }
    gs      = { v33733 }
    cf      = { v33821 }
    ?1      = { v33735 }
    pf      = { -v33812+0x1 }
    ?3      = { v33737 }
    af      = { v33819 }
    ?5      = { v33739 }
    zf      = { v33817 }
    sf      = { v33815 }
    tf      = { v33742 }
    if      = { v33743 }
    df      = { v33744 }
    of      = { v33827 }
    iopl0   = { v33746 }
    iopl1   = { v33747 }
    nt      = { v33748 }
    ?15     = { v33749 }
    rf      = { v33750 }
    vm      = { v33751 }
    ac      = { v33752 }
    vif     = { v33753 }
    vip     = { v33754 }
    id      = { v33755 }
    ?22     = { v33756 }
    ?23     = { v33757 }
    ?24     = { v33758 }
    ?25     = { v33759 }
    ?26     = { v33760 }
    ?27     = { v33761 }
    ?28     = { v33762 }
    ?29     = { v33763 }
    ?30     = { v33764 }
    ?31     = { v33765 }
    ip      = { 0x80483b3 }
memory:
registers:
    ax      = { defs={0x080483b0} expr=(add[32] v2462[32] 4[32]) }
    cx      = { defs={} expr=v2463[32] }
    dx      = { defs={} expr=v2464[32] }
    bx      = { defs={} expr=v2465[32] }
    sp      = { defs={} expr=v2466[32] }
    bp      = { defs={} expr=v2467[32] }
    si      = { defs={0x080483aa} expr=v2468[32] }
    di      = { defs={} expr=v2469[32] }
    es      = { defs={} expr=v2470[16] }
    cs      = { defs={} expr=v2471[16] }
    ss      = { defs={} expr=v2472[16] }
    ds      = { defs={} expr=v2473[16] }
    fs      = { defs={} expr=v2474[16] }
    gs      = { defs={} expr=v2475[16] }
    cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33]))))) }
    ?1      = { defs={} expr=v2477[1] }
    pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))))))) }
    ?3      = { defs={} expr=v2479[1] }
    af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33]))))) }
    ?5      = { defs={} expr=v2481[1] }
    zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2462[32] 4[32])) }
    sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2462[32] 4[32])) }
    tf      = { defs={} expr=v2484[1] }
    if      = { defs={} expr=v2485[1] }
    df      = { defs={} expr=v2486[1] }
    of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33])))))) }
    iopl0   = { defs={} expr=v2488[1] }
    iopl1   = { defs={} expr=v2489[1] }
    nt      = { defs={} expr=v2490[1] }
    ?15     = { defs={} expr=v2491[1] }
    rf      = { defs={} expr=v2492[1] }
    vm      = { defs={} expr=v2493[1] }
    ac      = { defs={} expr=v2494[1] }
    vif     = { defs={} expr=v2495[1] }
    vip     = { defs={} expr=v2496[1] }
    id      = { defs={} expr=v2497[1] }
    ?22     = { defs={} expr=v2498[1] }
    ?23     = { defs={} expr=v2499[1] }
    ?24     = { defs={} expr=v2500[1] }
    ?25     = { defs={} expr=v2501[1] }
    ?26     = { defs={} expr=v2502[1] }
    ?27     = { defs={} expr=v2503[1] }
    ?28     = { defs={} expr=v2504[1] }
    ?29     = { defs={} expr=v2505[1] }
    ?30     = { defs={} expr=v2506[1] }
    ?31     = { defs={} expr=v2507[1] }
    ip      = { defs={0x080483aa,0x080483b0} expr=0x080483b3[32] }
memory:
init mem:
null state
null state
0x80483b3:mov    DWORD PTR ds:[0x080496f0<.data+8>], eax
registers:
    ax      = { v33720+0x4 }
    cx      = { v33721 }
    dx      = { v33722 }
    bx      = { v33723 }
    sp      = { v33724 }
    bp      = { v33725 }
    si      = { v33726 }
    di      = { v33727 }
    es      = { v33728 }
    cs      = { v33729 }
    ss      = { v33730 }
    ds      = { v33731 }
    fs      = { v33732 }
    gs      = { v33733 }
    cf      = { v33821 }
    ?1      = { v33735 }
    pf      = { -v33812+0x1 }
    ?3      = { v33737 }
    af      = { v33819 }
    ?5      = { v33739 }
    zf      = { v33817 }
    sf      = { v33815 }
    tf      = { v33742 }
    if      = { v33743 }
    df      = { v33744 }
    of      = { v33827 }
    iopl0   = { v33746 }
    iopl1   = { v33747 }
    nt      = { v33748 }
    ?15     = { v33749 }
    rf      = { v33750 }
    vm      = { v33751 }
    ac      = { v33752 }
    vif     = { v33753 }
    vip     = { v33754 }
    id      = { v33755 }
    ?22     = { v33756 }
    ?23     = { v33757 }
    ?24     = { v33758 }
    ?25     = { v33759 }
    ?26     = { v33760 }
    ?27     = { v33761 }
    ?28     = { v33762 }
    ?29     = { v33763 }
    ?30     = { v33764 }
    ?31     = { v33765 }
    ip      = { 0x80483b8 }
memory:
    address = { 0x80496f0 }
      value = { v33720+0x4 }
      flags = { size=4 }
registers:
    ax      = { defs={0x080483b0} expr=(add[32] v2462[32] 4[32]) }
    cx      = { defs={} expr=v2463[32] }
    dx      = { defs={} expr=v2464[32] }
    bx      = { defs={} expr=v2465[32] }
    sp      = { defs={} expr=v2466[32] }
    bp      = { defs={} expr=v2467[32] }
    si      = { defs={0x080483aa} expr=v2468[32] }
    di      = { defs={} expr=v2469[32] }
    es      = { defs={} expr=v2470[16] }
    cs      = { defs={} expr=v2471[16] }
    ss      = { defs={} expr=v2472[16] }
    ds      = { defs={} expr=v2473[16] }
    fs      = { defs={} expr=v2474[16] }
    gs      = { defs={} expr=v2475[16] }
    cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33]))))) }
    ?1      = { defs={} expr=v2477[1] }
    pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))))))) }
    ?3      = { defs={} expr=v2479[1] }
    af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33]))))) }
    ?5      = { defs={} expr=v2481[1] }
    zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2462[32] 4[32])) }
    sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2462[32] 4[32])) }
    tf      = { defs={} expr=v2484[1] }
    if      = { defs={} expr=v2485[1] }
    df      = { defs={} expr=v2486[1] }
    of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33])))))) }
    iopl0   = { defs={} expr=v2488[1] }
    iopl1   = { defs={} expr=v2489[1] }
    nt      = { defs={} expr=v2490[1] }
    ?15     = { defs={} expr=v2491[1] }
    rf      = { defs={} expr=v2492[1] }
    vm      = { defs={} expr=v2493[1] }
    ac      = { defs={} expr=v2494[1] }
    vif     = { defs={} expr=v2495[1] }
    vip     = { defs={} expr=v2496[1] }
    id      = { defs={} expr=v2497[1] }
    ?22     = { defs={} expr=v2498[1] }
    ?23     = { defs={} expr=v2499[1] }
    ?24     = { defs={} expr=v2500[1] }
    ?25     = { defs={} expr=v2501[1] }
    ?26     = { defs={} expr=v2502[1] }
    ?27     = { defs={} expr=v2503[1] }
    ?28     = { defs={} expr=v2504[1] }
    ?29     = { defs={} expr=v2505[1] }
    ?30     = { defs={} expr=v2506[1] }
    ?31     = { defs={} expr=v2507[1] }
    ip      = { defs={0x080483aa,0x080483b0,0x080483b3} expr=0x080483b8[32] }
memory:
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v2462[32] 4[32])) }
      flags = { }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v2462[32] 4[32])) }
      flags = { }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v2462[32] 4[32])) }
      flags = { }
    address = { defs={0x080483b3} expr=0x080496f0[32] }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32])) }
      flags = { }
init mem:
null state
null state
0x80483b8:call   edx
registers:
    ax      = { v33720+0x4 }
    cx      = { v33721 }
    dx      = { v33722 }
    bx      = { v33723 }
    sp      = { v33724-0x4 }
    bp      = { v33725 }
    si      = { v33726 }
    di      = { v33727 }
    es      = { v33728 }
    cs      = { v33729 }
    ss      = { v33730 }
    ds      = { v33731 }
    fs      = { v33732 }
    gs      = { v33733 }
    cf      = { v33821 }
    ?1      = { v33735 }
    pf      = { -v33812+0x1 }
    ?3      = { v33737 }
    af      = { v33819 }
    ?5      = { v33739 }
    zf      = { v33817 }
    sf      = { v33815 }
    tf      = { v33742 }
    if      = { v33743 }
    df      = { v33744 }
    of      = { v33827 }
    iopl0   = { v33746 }
    iopl1   = { v33747 }
    nt      = { v33748 }
    ?15     = { v33749 }
    rf      = { v33750 }
    vm      = { v33751 }
    ac      = { v33752 }
    vif     = { v33753 }
    vip     = { v33754 }
    id      = { v33755 }
    ?22     = { v33756 }
    ?23     = { v33757 }
    ?24     = { v33758 }
    ?25     = { v33759 }
    ?26     = { v33760 }
    ?27     = { v33761 }
    ?28     = { v33762 }
    ?29     = { v33763 }
    ?30     = { v33764 }
    ?31     = { v33765 }
    ip      = { v33722 }
memory:
    address = { 0x80496f0 }
      value = { v33720+0x4 }
      flags = { size=4; clobbered }
    address = { v33724-0x4 }
      value = { 0x80483ba }
      flags = { size=4 }
registers:
    ax      = { defs={0x080483b0} expr=(add[32] v2462[32] 4[32]) }
    cx      = { defs={} expr=v2463[32] }
    dx      = { defs={} expr=v2464[32] }
    bx      = { defs={} expr=v2465[32] }
    sp      = { defs={0x080483b8} expr=(add[32] v2466[32] -4[32]) }
    bp      = { defs={} expr=v2467[32] }
    si      = { defs={0x080483aa} expr=v2468[32] }
    di      = { defs={} expr=v2469[32] }
    es      = { defs={} expr=v2470[16] }
    cs      = { defs={} expr=v2471[16] }
    ss      = { defs={} expr=v2472[16] }
    ds      = { defs={} expr=v2473[16] }
    fs      = { defs={} expr=v2474[16] }
    gs      = { defs={} expr=v2475[16] }
    cf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33]))))) }
    ?1      = { defs={} expr=v2477[1] }
    pf      = { defs={0x080483b0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32]))))))) }
    ?3      = { defs={} expr=v2479[1] }
    af      = { defs={0x080483b0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33]))))) }
    ?5      = { defs={} expr=v2481[1] }
    zf      = { defs={0x080483b0} expr=(zerop[1] (add[32] v2462[32] 4[32])) }
    sf      = { defs={0x080483b0} expr=(extract[1] 31[32] 32[32] (add[32] v2462[32] 4[32])) }
    tf      = { defs={} expr=v2484[1] }
    if      = { defs={} expr=v2485[1] }
    df      = { defs={} expr=v2486[1] }
    of      = { defs={0x080483b0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2462[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2462[32]) 4[33])))))) }
    iopl0   = { defs={} expr=v2488[1] }
    iopl1   = { defs={} expr=v2489[1] }
    nt      = { defs={} expr=v2490[1] }
    ?15     = { defs={} expr=v2491[1] }
    rf      = { defs={} expr=v2492[1] }
    vm      = { defs={} expr=v2493[1] }
    ac      = { defs={} expr=v2494[1] }
    vif     = { defs={} expr=v2495[1] }
    vip     = { defs={} expr=v2496[1] }
    id      = { defs={} expr=v2497[1] }
    ?22     = { defs={} expr=v2498[1] }
    ?23     = { defs={} expr=v2499[1] }
    ?24     = { defs={} expr=v2500[1] }
    ?25     = { defs={} expr=v2501[1] }
    ?26     = { defs={} expr=v2502[1] }
    ?27     = { defs={} expr=v2503[1] }
    ?28     = { defs={} expr=v2504[1] }
    ?29     = { defs={} expr=v2505[1] }
    ?30     = { defs={} expr=v2506[1] }
    ?31     = { defs={} expr=v2507[1] }
    ip      = { defs={0x080483b8} expr=v2464[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2466[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2466[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2466[32] -4[32]) 1[32]) }
      value = { defs={} expr=-125[8] }
      flags = { }
    address = { defs={0x080483b8} expr=(add[32] v2466[32] -4[32]) }
      value = { defs={} expr=-70[8] }
      flags = { }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] v2462[32] 4[32])) }
      flags = { }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] v2462[32] 4[32])) }
      flags = { }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] v2462[32] 4[32])) }
      flags = { }
    address = { defs={0x080483b3} expr=0x080496f0[32] }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] v2462[32] 4[32])) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0<.data+8>]
registers:
    ax      = { v33947 }
    cx      = { v33895 }
    dx      = { v33896 }
    bx      = { v33897 }
    sp      = { v33898 }
    bp      = { v33899 }
    si      = { v33900 }
    di      = { v33901 }
    es      = { v33902 }
    cs      = { v33903 }
    ss      = { v33904 }
    ds      = { v33905 }
    fs      = { v33906 }
    gs      = { v33907 }
    cf      = { v33908 }
    ?1      = { v33909 }
    pf      = { v33910 }
    ?3      = { v33911 }
    af      = { v33912 }
    ?5      = { v33913 }
    zf      = { v33914 }
    sf      = { v33915 }
    tf      = { v33916 }
    if      = { v33917 }
    df      = { v33918 }
    of      = { v33919 }
    iopl0   = { v33920 }
    iopl1   = { v33921 }
    nt      = { v33922 }
    ?15     = { v33923 }
    rf      = { v33924 }
    vm      = { v33925 }
    ac      = { v33926 }
    vif     = { v33927 }
    vip     = { v33928 }
    id      = { v33929 }
    ?22     = { v33930 }
    ?23     = { v33931 }
    ?24     = { v33932 }
    ?25     = { v33933 }
    ?26     = { v33934 }
    ?27     = { v33935 }
    ?28     = { v33936 }
    ?29     = { v33937 }
    ?30     = { v33938 }
    ?31     = { v33939 }
    ip      = { 0x80483bf }
memory:
    address = { 0x80496f0 }
      value = { v33947 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) }
    cx      = { defs={} expr=v2615[32] }
    dx      = { defs={} expr=v2616[32] }
    bx      = { defs={} expr=v2617[32] }
    sp      = { defs={} expr=v2618[32] }
    bp      = { defs={} expr=v2619[32] }
    si      = { defs={} expr=v2620[32] }
    di      = { defs={} expr=v2621[32] }
    es      = { defs={} expr=v2622[16] }
    cs      = { defs={} expr=v2623[16] }
    ss      = { defs={} expr=v2624[16] }
    ds      = { defs={} expr=v2625[16] }
    fs      = { defs={} expr=v2626[16] }
    gs      = { defs={} expr=v2627[16] }
    cf      = { defs={} expr=v2628[1] }
    ?1      = { defs={} expr=v2629[1] }
    pf      = { defs={} expr=v2630[1] }
    ?3      = { defs={} expr=v2631[1] }
    af      = { defs={} expr=v2632[1] }
    ?5      = { defs={} expr=v2633[1] }
    zf      = { defs={} expr=v2634[1] }
    sf      = { defs={} expr=v2635[1] }
    tf      = { defs={} expr=v2636[1] }
    if      = { defs={} expr=v2637[1] }
    df      = { defs={} expr=v2638[1] }
    of      = { defs={} expr=v2639[1] }
    iopl0   = { defs={} expr=v2640[1] }
    iopl1   = { defs={} expr=v2641[1] }
    nt      = { defs={} expr=v2642[1] }
    ?15     = { defs={} expr=v2643[1] }
    rf      = { defs={} expr=v2644[1] }
    vm      = { defs={} expr=v2645[1] }
    ac      = { defs={} expr=v2646[1] }
    vif     = { defs={} expr=v2647[1] }
    vip     = { defs={} expr=v2648[1] }
    id      = { defs={} expr=v2649[1] }
    ?22     = { defs={} expr=v2650[1] }
    ?23     = { defs={} expr=v2651[1] }
    ?24     = { defs={} expr=v2652[1] }
    ?25     = { defs={} expr=v2653[1] }
    ?26     = { defs={} expr=v2654[1] }
    ?27     = { defs={} expr=v2655[1] }
    ?28     = { defs={} expr=v2656[1] }
    ?29     = { defs={} expr=v2657[1] }
    ?30     = { defs={} expr=v2658[1] }
    ?31     = { defs={} expr=v2659[1] }
    ip      = { defs={0x080483ba} expr=0x080483bf[32] }
memory:
init mem:
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2672[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2671[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2670[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=0x080496f0[32] }
      value = { defs={} expr=v2669[8] }
      flags = { rdonly }
null state
null state
0x80483bf:mov    edx, DWORD PTR ds:[eax]
registers:
    ax      = { v33947 }
    cx      = { v33895 }
    dx      = { v33955 }
    bx      = { v33897 }
    sp      = { v33898 }
    bp      = { v33899 }
    si      = { v33900 }
    di      = { v33901 }
    es      = { v33902 }
    cs      = { v33903 }
    ss      = { v33904 }
    ds      = { v33905 }
    fs      = { v33906 }
    gs      = { v33907 }
    cf      = { v33908 }
    ?1      = { v33909 }
    pf      = { v33910 }
    ?3      = { v33911 }
    af      = { v33912 }
    ?5      = { v33913 }
    zf      = { v33914 }
    sf      = { v33915 }
    tf      = { v33916 }
    if      = { v33917 }
    df      = { v33918 }
    of      = { v33919 }
    iopl0   = { v33920 }
    iopl1   = { v33921 }
    nt      = { v33922 }
    ?15     = { v33923 }
    rf      = { v33924 }
    vm      = { v33925 }
    ac      = { v33926 }
    vif     = { v33927 }
    vip     = { v33928 }
    id      = { v33929 }
    ?22     = { v33930 }
    ?23     = { v33931 }
    ?24     = { v33932 }
    ?25     = { v33933 }
    ?26     = { v33934 }
    ?27     = { v33935 }
    ?28     = { v33936 }
    ?29     = { v33937 }
    ?30     = { v33938 }
    ?31     = { v33939 }
    ip      = { 0x80483c1 }
memory:
    address = { 0x80496f0 }
      value = { v33947 }
      flags = { size=4; read-only }
    address = { v33947 }
      value = { v33955 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) }
    cx      = { defs={} expr=v2615[32] }
    dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) }
    bx      = { defs={} expr=v2617[32] }
    sp      = { defs={} expr=v2618[32] }
    bp      = { defs={} expr=v2619[32] }
    si      = { defs={} expr=v2620[32] }
    di      = { defs={} expr=v2621[32] }
    es      = { defs={} expr=v2622[16] }
    cs      = { defs={} expr=v2623[16] }
    ss      = { defs={} expr=v2624[16] }
    ds      = { defs={} expr=v2625[16] }
    fs      = { defs={} expr=v2626[16] }
    gs      = { defs={} expr=v2627[16] }
    cf      = { defs={} expr=v2628[1] }
    ?1      = { defs={} expr=v2629[1] }
    pf      = { defs={} expr=v2630[1] }
    ?3      = { defs={} expr=v2631[1] }
    af      = { defs={} expr=v2632[1] }
    ?5      = { defs={} expr=v2633[1] }
    zf      = { defs={} expr=v2634[1] }
    sf      = { defs={} expr=v2635[1] }
    tf      = { defs={} expr=v2636[1] }
    if      = { defs={} expr=v2637[1] }
    df      = { defs={} expr=v2638[1] }
    of      = { defs={} expr=v2639[1] }
    iopl0   = { defs={} expr=v2640[1] }
    iopl1   = { defs={} expr=v2641[1] }
    nt      = { defs={} expr=v2642[1] }
    ?15     = { defs={} expr=v2643[1] }
    rf      = { defs={} expr=v2644[1] }
    vm      = { defs={} expr=v2645[1] }
    ac      = { defs={} expr=v2646[1] }
    vif     = { defs={} expr=v2647[1] }
    vip     = { defs={} expr=v2648[1] }
    id      = { defs={} expr=v2649[1] }
    ?22     = { defs={} expr=v2650[1] }
    ?23     = { defs={} expr=v2651[1] }
    ?24     = { defs={} expr=v2652[1] }
    ?25     = { defs={} expr=v2653[1] }
    ?26     = { defs={} expr=v2654[1] }
    ?27     = { defs={} expr=v2655[1] }
    ?28     = { defs={} expr=v2656[1] }
    ?29     = { defs={} expr=v2657[1] }
    ?30     = { defs={} expr=v2658[1] }
    ?31     = { defs={} expr=v2659[1] }
    ip      = { defs={0x080483ba,0x080483bf} expr=0x080483c1[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) 3[32]) }
      value = { defs={} expr=v2689[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) 2[32]) }
      value = { defs={} expr=v2688[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) 1[32]) }
      value = { defs={} expr=v2687[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) }
      value = { defs={} expr=v2686[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2672[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2671[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2670[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=0x080496f0[32] }
      value = { defs={} expr=v2669[8] }
      flags = { rdonly }
null state
null state
0x80483c1:test   edx, edx
registers:
    ax      = { v33947 }
    cx      = { v33895 }
    dx      = { v33955 }
    bx      = { v33897 }
    sp      = { v33898 }
    bp      = { v33899 }
    si      = { v33900 }
    di      = { v33901 }
    es      = { v33902 }
    cs      = { v33903 }
    ss      = { v33904 }
    ds      = { v33905 }
    fs      = { v33906 }
    gs      = { v33907 }
    cf      = { 0x0 }
    ?1      = { v33909 }
    pf      = { -v33993+0x1 }
    ?3      = { v33911 }
    af      = { v34001 }
    ?5      = { v33913 }
    zf      = { v33998 }
    sf      = { v33996 }
    tf      = { v33916 }
    if      = { v33917 }
    df      = { v33918 }
    of      = { 0x0 }
    iopl0   = { v33920 }
    iopl1   = { v33921 }
    nt      = { v33922 }
    ?15     = { v33923 }
    rf      = { v33924 }
    vm      = { v33925 }
    ac      = { v33926 }
    vif     = { v33927 }
    vip     = { v33928 }
    id      = { v33929 }
    ?22     = { v33930 }
    ?23     = { v33931 }
    ?24     = { v33932 }
    ?25     = { v33933 }
    ?26     = { v33934 }
    ?27     = { v33935 }
    ?28     = { v33936 }
    ?29     = { v33937 }
    ?30     = { v33938 }
    ?31     = { v33939 }
    ip      = { 0x80483c3 }
memory:
    address = { 0x80496f0 }
      value = { v33947 }
      flags = { size=4; read-only }
    address = { v33947 }
      value = { v33955 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) }
    cx      = { defs={} expr=v2615[32] }
    dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) }
    bx      = { defs={} expr=v2617[32] }
    sp      = { defs={} expr=v2618[32] }
    bp      = { defs={} expr=v2619[32] }
    si      = { defs={} expr=v2620[32] }
    di      = { defs={} expr=v2621[32] }
    es      = { defs={} expr=v2622[16] }
    cs      = { defs={} expr=v2623[16] }
    ss      = { defs={} expr=v2624[16] }
    ds      = { defs={} expr=v2625[16] }
    fs      = { defs={} expr=v2626[16] }
    gs      = { defs={} expr=v2627[16] }
    cf      = { defs={0x080483c1} expr=0[1] }
    ?1      = { defs={} expr=v2629[1] }
    pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))))))) }
    ?3      = { defs={} expr=v2631[1] }
    af      = { defs={0x080483c1} expr=v2722[1] }
    ?5      = { defs={} expr=v2633[1] }
    zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))))) }
    sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))))) }
    tf      = { defs={} expr=v2636[1] }
    if      = { defs={} expr=v2637[1] }
    df      = { defs={} expr=v2638[1] }
    of      = { defs={0x080483c1} expr=0[1] }
    iopl0   = { defs={} expr=v2640[1] }
    iopl1   = { defs={} expr=v2641[1] }
    nt      = { defs={} expr=v2642[1] }
    ?15     = { defs={} expr=v2643[1] }
    rf      = { defs={} expr=v2644[1] }
    vm      = { defs={} expr=v2645[1] }
    ac      = { defs={} expr=v2646[1] }
    vif     = { defs={} expr=v2647[1] }
    vip     = { defs={} expr=v2648[1] }
    id      = { defs={} expr=v2649[1] }
    ?22     = { defs={} expr=v2650[1] }
    ?23     = { defs={} expr=v2651[1] }
    ?24     = { defs={} expr=v2652[1] }
    ?25     = { defs={} expr=v2653[1] }
    ?26     = { defs={} expr=v2654[1] }
    ?27     = { defs={} expr=v2655[1] }
    ?28     = { defs={} expr=v2656[1] }
    ?29     = { defs={} expr=v2657[1] }
    ?30     = { defs={} expr=v2658[1] }
    ?31     = { defs={} expr=v2659[1] }
    ip      = { defs={0x080483ba,0x080483bf,0x080483c1} expr=0x080483c3[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) 3[32]) }
      value = { defs={} expr=v2689[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) 2[32]) }
      value = { defs={} expr=v2688[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) 1[32]) }
      value = { defs={} expr=v2687[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) }
      value = { defs={} expr=v2686[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2672[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2671[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2670[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=0x080496f0[32] }
      value = { defs={} expr=v2669[8] }
      flags = { rdonly }
null state
null state
0x80483c3:jne    0x080483b0<<Insn>>
registers:
    ax      = { v33947 }
    cx      = { v33895 }
    dx      = { v33955 }
    bx      = { v33897 }
    sp      = { v33898 }
    bp      = { v33899 }
    si      = { v33900 }
    di      = { v33901 }
    es      = { v33902 }
    cs      = { v33903 }
    ss      = { v33904 }
    ds      = { v33905 }
    fs      = { v33906 }
    gs      = { v33907 }
    cf      = { 0x0 }
    ?1      = { v33909 }
    pf      = { -v33993+0x1 }
    ?3      = { v33911 }
    af      = { v34001 }
    ?5      = { v33913 }
    zf      = { v33998 }
    sf      = { v33996 }
    tf      = { v33916 }
    if      = { v33917 }
    df      = { v33918 }
    of      = { 0x0 }
    iopl0   = { v33920 }
    iopl1   = { v33921 }
    nt      = { v33922 }
    ?15     = { v33923 }
    rf      = { v33924 }
    vm      = { v33925 }
    ac      = { v33926 }
    vif     = { v33927 }
    vip     = { v33928 }
    id      = { v33929 }
    ?22     = { v33930 }
    ?23     = { v33931 }
    ?24     = { v33932 }
    ?25     = { v33933 }
    ?26     = { v33934 }
    ?27     = { v33935 }
    ?28     = { v33936 }
    ?29     = { v33937 }
    ?30     = { v33938 }
    ?31     = { v33939 }
    ip      = { v34012 }
memory:
    address = { 0x80496f0 }
      value = { v33947 }
      flags = { size=4; read-only }
    address = { v33947 }
      value = { v33955 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) }
    cx      = { defs={} expr=v2615[32] }
    dx      = { defs={0x080483bf} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) }
    bx      = { defs={} expr=v2617[32] }
    sp      = { defs={} expr=v2618[32] }
    bp      = { defs={} expr=v2619[32] }
    si      = { defs={} expr=v2620[32] }
    di      = { defs={} expr=v2621[32] }
    es      = { defs={} expr=v2622[16] }
    cs      = { defs={} expr=v2623[16] }
    ss      = { defs={} expr=v2624[16] }
    ds      = { defs={} expr=v2625[16] }
    fs      = { defs={} expr=v2626[16] }
    gs      = { defs={} expr=v2627[16] }
    cf      = { defs={0x080483c1} expr=0[1] }
    ?1      = { defs={} expr=v2629[1] }
    pf      = { defs={0x080483bf,0x080483c1} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))))))) }
    ?3      = { defs={} expr=v2631[1] }
    af      = { defs={0x080483c1} expr=v2722[1] }
    ?5      = { defs={} expr=v2633[1] }
    zf      = { defs={0x080483bf,0x080483c1} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))))) }
    sf      = { defs={0x080483bf,0x080483c1} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))))) }
    tf      = { defs={} expr=v2636[1] }
    if      = { defs={} expr=v2637[1] }
    df      = { defs={} expr=v2638[1] }
    of      = { defs={0x080483c1} expr=0[1] }
    iopl0   = { defs={} expr=v2640[1] }
    iopl1   = { defs={} expr=v2641[1] }
    nt      = { defs={} expr=v2642[1] }
    ?15     = { defs={} expr=v2643[1] }
    rf      = { defs={} expr=v2644[1] }
    vm      = { defs={} expr=v2645[1] }
    ac      = { defs={} expr=v2646[1] }
    vif     = { defs={} expr=v2647[1] }
    vip     = { defs={} expr=v2648[1] }
    id      = { defs={} expr=v2649[1] }
    ?22     = { defs={} expr=v2650[1] }
    ?23     = { defs={} expr=v2651[1] }
    ?24     = { defs={} expr=v2652[1] }
    ?25     = { defs={} expr=v2653[1] }
    ?26     = { defs={} expr=v2654[1] }
    ?27     = { defs={} expr=v2655[1] }
    ?28     = { defs={} expr=v2656[1] }
    ?29     = { defs={} expr=v2657[1] }
    ?30     = { defs={} expr=v2658[1] }
    ?31     = { defs={} expr=v2659[1] }
    ip      = { defs={0x080483ba,0x080483bf,0x080483c1,0x080483c3} expr=(ite[32] (invert[1] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2686[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2687[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2688[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2689[8])))))) 0x080483b0[32] 0x080483c5[32]) }
memory:
init mem:
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) 3[32]) }
      value = { defs={} expr=v2689[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) 2[32]) }
      value = { defs={} expr=v2688[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) 1[32]) }
      value = { defs={} expr=v2687[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2669[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2670[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2671[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2672[8]))) }
      value = { defs={} expr=v2686[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f3[32] }
      value = { defs={} expr=v2672[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f2[32] }
      value = { defs={} expr=v2671[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f1[32] }
      value = { defs={} expr=v2670[8] }
      flags = { rdonly }
    address = { defs={0x080483ba} expr=0x080496f0[32] }
      value = { defs={} expr=v2669[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4<.bss>], 0x01
registers:
    ax      = { v34062 }
    cx      = { v34063 }
    dx      = { v34064 }
    bx      = { v34065 }
    sp      = { v34066 }
    bp      = { v34067 }
    si      = { v34068 }
    di      = { v34069 }
    es      = { v34070 }
    cs      = { v34071 }
    ss      = { v34072 }
    ds      = { v34073 }
    fs      = { v34074 }
    gs      = { v34075 }
    cf      = { v34076 }
    ?1      = { v34077 }
    pf      = { v34078 }
    ?3      = { v34079 }
    af      = { v34080 }
    ?5      = { v34081 }
    zf      = { v34082 }
    sf      = { v34083 }
    tf      = { v34084 }
    if      = { v34085 }
    df      = { v34086 }
    of      = { v34087 }
    iopl0   = { v34088 }
    iopl1   = { v34089 }
    nt      = { v34090 }
    ?15     = { v34091 }
    rf      = { v34092 }
    vm      = { v34093 }
    ac      = { v34094 }
    vif     = { v34095 }
    vip     = { v34096 }
    id      = { v34097 }
    ?22     = { v34098 }
    ?23     = { v34099 }
    ?24     = { v34100 }
    ?25     = { v34101 }
    ?26     = { v34102 }
    ?27     = { v34103 }
    ?28     = { v34104 }
    ?29     = { v34105 }
    ?30     = { v34106 }
    ?31     = { v34107 }
    ip      = { 0x80483cc }
memory:
    address = { 0x80496f4 }
      value = { 0x1 }
      flags = { size=1 }
registers:
    ax      = { defs={} expr=v2782[32] }
    cx      = { defs={} expr=v2783[32] }
    dx      = { defs={} expr=v2784[32] }
    bx      = { defs={} expr=v2785[32] }
    sp      = { defs={} expr=v2786[32] }
    bp      = { defs={} expr=v2787[32] }
    si      = { defs={} expr=v2788[32] }
    di      = { defs={} expr=v2789[32] }
    es      = { defs={} expr=v2790[16] }
    cs      = { defs={} expr=v2791[16] }
    ss      = { defs={} expr=v2792[16] }
    ds      = { defs={} expr=v2793[16] }
    fs      = { defs={} expr=v2794[16] }
    gs      = { defs={} expr=v2795[16] }
    cf      = { defs={} expr=v2796[1] }
    ?1      = { defs={} expr=v2797[1] }
    pf      = { defs={} expr=v2798[1] }
    ?3      = { defs={} expr=v2799[1] }
    af      = { defs={} expr=v2800[1] }
    ?5      = { defs={} expr=v2801[1] }
    zf      = { defs={} expr=v2802[1] }
    sf      = { defs={} expr=v2803[1] }
    tf      = { defs={} expr=v2804[1] }
    if      = { defs={} expr=v2805[1] }
    df      = { defs={} expr=v2806[1] }
    of      = { defs={} expr=v2807[1] }
    iopl0   = { defs={} expr=v2808[1] }
    iopl1   = { defs={} expr=v2809[1] }
    nt      = { defs={} expr=v2810[1] }
    ?15     = { defs={} expr=v2811[1] }
    rf      = { defs={} expr=v2812[1] }
    vm      = { defs={} expr=v2813[1] }
    ac      = { defs={} expr=v2814[1] }
    vif     = { defs={} expr=v2815[1] }
    vip     = { defs={} expr=v2816[1] }
    id      = { defs={} expr=v2817[1] }
    ?22     = { defs={} expr=v2818[1] }
    ?23     = { defs={} expr=v2819[1] }
    ?24     = { defs={} expr=v2820[1] }
    ?25     = { defs={} expr=v2821[1] }
    ?26     = { defs={} expr=v2822[1] }
    ?27     = { defs={} expr=v2823[1] }
    ?28     = { defs={} expr=v2824[1] }
    ?29     = { defs={} expr=v2825[1] }
    ?30     = { defs={} expr=v2826[1] }
    ?31     = { defs={} expr=v2827[1] }
    ip      = { defs={0x080483c5} expr=0x080483cc[32] }
memory:
    address = { defs={0x080483c5} expr=0x080496f4[32] }
      value = { defs={} expr=1[8] }
      flags = { }
init mem:
null state
null state
0x80483cc:leave  
registers:
    ax      = { v34062 }
    cx      = { v34063 }
    dx      = { v34064 }
    bx      = { v34065 }
    sp      = { v34067+0x4 }
    bp      = { v34125 }
    si      = { v34068 }
    di      = { v34069 }
    es      = { v34070 }
    cs      = { v34071 }
    ss      = { v34072 }
    ds      = { v34073 }
    fs      = { v34074 }
    gs      = { v34075 }
    cf      = { v34076 }
    ?1      = { v34077 }
    pf      = { v34078 }
    ?3      = { v34079 }
    af      = { v34080 }
    ?5      = { v34081 }
    zf      = { v34082 }
    sf      = { v34083 }
    tf      = { v34084 }
    if      = { v34085 }
    df      = { v34086 }
    of      = { v34087 }
    iopl0   = { v34088 }
    iopl1   = { v34089 }
    nt      = { v34090 }
    ?15     = { v34091 }
    rf      = { v34092 }
    vm      = { v34093 }
    ac      = { v34094 }
    vif     = { v34095 }
    vip     = { v34096 }
    id      = { v34097 }
    ?22     = { v34098 }
    ?23     = { v34099 }
    ?24     = { v34100 }
    ?25     = { v34101 }
    ?26     = { v34102 }
    ?27     = { v34103 }
    ?28     = { v34104 }
    ?29     = { v34105 }
    ?30     = { v34106 }
    ?31     = { v34107 }
    ip      = { 0x80483cd }
memory:
    address = { 0x80496f4 }
      value = { 0x1 }
      flags = { size=1 }
    address = { v34067 }
      value = { v34125 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v2782[32] }
    cx      = { defs={} expr=v2783[32] }
    dx      = { defs={} expr=v2784[32] }
    bx      = { defs={} expr=v2785[32] }
    sp      = { defs={0x080483cc} expr=(add[32] v2787[32] 4[32]) }
    bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2847[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2848[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2849[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2850[8]))) }
    si      = { defs={} expr=v2788[32] }
    di      = { defs={} expr=v2789[32] }
    es      = { defs={} expr=v2790[16] }
    cs      = { defs={} expr=v2791[16] }
    ss      = { defs={} expr=v2792[16] }
    ds      = { defs={} expr=v2793[16] }
    fs      = { defs={} expr=v2794[16] }
    gs      = { defs={} expr=v2795[16] }
    cf      = { defs={} expr=v2796[1] }
    ?1      = { defs={} expr=v2797[1] }
    pf      = { defs={} expr=v2798[1] }
    ?3      = { defs={} expr=v2799[1] }
    af      = { defs={} expr=v2800[1] }
    ?5      = { defs={} expr=v2801[1] }
    zf      = { defs={} expr=v2802[1] }
    sf      = { defs={} expr=v2803[1] }
    tf      = { defs={} expr=v2804[1] }
    if      = { defs={} expr=v2805[1] }
    df      = { defs={} expr=v2806[1] }
    of      = { defs={} expr=v2807[1] }
    iopl0   = { defs={} expr=v2808[1] }
    iopl1   = { defs={} expr=v2809[1] }
    nt      = { defs={} expr=v2810[1] }
    ?15     = { defs={} expr=v2811[1] }
    rf      = { defs={} expr=v2812[1] }
    vm      = { defs={} expr=v2813[1] }
    ac      = { defs={} expr=v2814[1] }
    vif     = { defs={} expr=v2815[1] }
    vip     = { defs={} expr=v2816[1] }
    id      = { defs={} expr=v2817[1] }
    ?22     = { defs={} expr=v2818[1] }
    ?23     = { defs={} expr=v2819[1] }
    ?24     = { defs={} expr=v2820[1] }
    ?25     = { defs={} expr=v2821[1] }
    ?26     = { defs={} expr=v2822[1] }
    ?27     = { defs={} expr=v2823[1] }
    ?28     = { defs={} expr=v2824[1] }
    ?29     = { defs={} expr=v2825[1] }
    ?30     = { defs={} expr=v2826[1] }
    ?31     = { defs={} expr=v2827[1] }
    ip      = { defs={0x080483c5,0x080483cc} expr=0x080483cd[32] }
memory:
    address = { defs={0x080483c5} expr=0x080496f4[32] }
      value = { defs={} expr=1[8] }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v2787[32] 3[32]) }
      value = { defs={} expr=v2850[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2787[32] 2[32]) }
      value = { defs={} expr=v2849[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2787[32] 1[32]) }
      value = { defs={} expr=v2848[8] }
      flags = { rdonly }
    address = { defs={0x080483cc} expr=v2787[32] }
      value = { defs={} expr=v2847[8] }
      flags = { rdonly }
null state
null state
0x80483cd:ret    
registers:
    ax      = { v34062 }
    cx      = { v34063 }
    dx      = { v34064 }
    bx      = { v34065 }
    sp      = { v34067+0x8 }
    bp      = { v34125 }
    si      = { v34068 }
    di      = { v34069 }
    es      = { v34070 }
    cs      = { v34071 }
    ss      = { v34072 }
    ds      = { v34073 }
    fs      = { v34074 }
    gs      = { v34075 }
    cf      = { v34076 }
    ?1      = { v34077 }
    pf      = { v34078 }
    ?3      = { v34079 }
    af      = { v34080 }
    ?5      = { v34081 }
    zf      = { v34082 }
    sf      = { v34083 }
    tf      = { v34084 }
    if      = { v34085 }
    df      = { v34086 }
    of      = { v34087 }
    iopl0   = { v34088 }
    iopl1   = { v34089 }
    nt      = { v34090 }
    ?15     = { v34091 }
    rf      = { v34092 }
    vm      = { v34093 }
    ac      = { v34094 }
    vif     = { v34095 }
    vip     = { v34096 }
    id      = { v34097 }
    ?22     = { v34098 }
    ?23     = { v34099 }
    ?24     = { v34100 }
    ?25     = { v34101 }
    ?26     = { v34102 }
    ?27     = { v34103 }
    ?28     = { v34104 }
    ?29     = { v34105 }
    ?30     = { v34106 }
    ?31     = { v34107 }
    ip      = { v34137 }
memory:
    address = { 0x80496f4 }
      value = { 0x1 }
      flags = { size=1 }
    address = { v34067 }
      value = { v34125 }
      flags = { size=4; read-only }
    address = { v34067+0x4 }
      value = { v34137 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v2782[32] }
    cx      = { defs={} expr=v2783[32] }
    dx      = { defs={} expr=v2784[32] }
    bx      = { defs={} expr=v2785[32] }
    sp      = { defs={0x080483cc,0x080483cd} expr=(add[32] (add[32] v2787[32] 4[32]) 4[32]) }
    bp      = { defs={0x080483cc} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2847[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2848[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2849[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2850[8]))) }
    si      = { defs={} expr=v2788[32] }
    di      = { defs={} expr=v2789[32] }
    es      = { defs={} expr=v2790[16] }
    cs      = { defs={} expr=v2791[16] }
    ss      = { defs={} expr=v2792[16] }
    ds      = { defs={} expr=v2793[16] }
    fs      = { defs={} expr=v2794[16] }
    gs      = { defs={} expr=v2795[16] }
    cf      = { defs={} expr=v2796[1] }
    ?1      = { defs={} expr=v2797[1] }
    pf      = { defs={} expr=v2798[1] }
    ?3      = { defs={} expr=v2799[1] }
    af      = { defs={} expr=v2800[1] }
    ?5      = { defs={} expr=v2801[1] }
    zf      = { defs={} expr=v2802[1] }
    sf      = { defs={} expr=v2803[1] }
    tf      = { defs={} expr=v2804[1] }
    if      = { defs={} expr=v2805[1] }
    df      = { defs={} expr=v2806[1] }
    of      = { defs={} expr=v2807[1] }
    iopl0   = { defs={} expr=v2808[1] }
    iopl1   = { defs={} expr=v2809[1] }
    nt      = { defs={} expr=v2810[1] }
    ?15     = { defs={} expr=v2811[1] }
    rf      = { defs={} expr=v2812[1] }
    vm      = { defs={} expr=v2813[1] }
    ac      = { defs={} expr=v2814[1] }
    vif     = { defs={} expr=v2815[1] }
    vip     = { defs={} expr=v2816[1] }
    id      = { defs={} expr=v2817[1] }
    ?22     = { defs={} expr=v2818[1] }
    ?23     = { defs={} expr=v2819[1] }
    ?24     = { defs={} expr=v2820[1] }
    ?25     = { defs={} expr=v2821[1] }
    ?26     = { defs={} expr=v2822[1] }
    ?27     = { defs={} expr=v2823[1] }
    ?28     = { defs={} expr=v2824[1] }
    ?29     = { defs={} expr=v2825[1] }
    ?30     = { defs={} expr=v2826[1] }
    ?31     = { defs={} expr=v2827[1] }
    ip      = { defs={0x080483cd} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v2868[8]) (shr0[32] 8[32] (uextend[32] 32[32] v2869[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v2870[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v2871[8]))) }
memory:
    address = { defs={0x080483c5} expr=0x080496f4[32] }
      value = { defs={} expr=1[8] }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] v2787[32] 4[32]) 3[32]) }
      value = { defs={} expr=v2871[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2787[32] 4[32]) 2[32]) }
      value = { defs={} expr=v2870[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v2787[32] 4[32]) 1[32]) }
      value = { defs={} expr=v2869[8] }
      flags = { rdonly }
    address = { defs={0x080483cc} expr=(add[32] v2787[32] 4[32]) }
      value = { defs={} expr=v2868[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2787[32] 3[32]) }
      value = { defs={} expr=v2850[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2787[32] 2[32]) }
      value = { defs={} expr=v2849[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v2787[32] 1[32]) }
      value = { defs={} expr=v2848[8] }
      flags = { rdonly }
    address = { defs={0x080483cc} expr=v2787[32] }
      value = { defs={} expr=v2847[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483d0:push   ebp
registers:
    ax      = { v34188 }
    cx      = { v34189 }
    dx      = { v34190 }
    bx      = { v34191 }
    sp      = { v34192-0x4 }
    bp      = { v34193 }
    si      = { v34194 }
    di      = { v34195 }
    es      = { v34196 }
    cs      = { v34197 }
    ss      = { v34198 }
    ds      = { v34199 }
    fs      = { v34200 }
    gs      = { v34201 }
    cf      = { v34202 }
    ?1      = { v34203 }
    pf      = { v34204 }
    ?3      = { v34205 }
    af      = { v34206 }
    ?5      = { v34207 }
    zf      = { v34208 }
    sf      = { v34209 }
    tf      = { v34210 }
    if      = { v34211 }
    df      = { v34212 }
    of      = { v34213 }
    iopl0   = { v34214 }
    iopl1   = { v34215 }
    nt      = { v34216 }
    ?15     = { v34217 }
    rf      = { v34218 }
    vm      = { v34219 }
    ac      = { v34220 }
    vif     = { v34221 }
    vip     = { v34222 }
    id      = { v34223 }
    ?22     = { v34224 }
    ?23     = { v34225 }
    ?24     = { v34226 }
    ?25     = { v34227 }
    ?26     = { v34228 }
    ?27     = { v34229 }
    ?28     = { v34230 }
    ?29     = { v34231 }
    ?30     = { v34232 }
    ?31     = { v34233 }
    ip      = { 0x80483d1 }
memory:
    address = { v34192-0x4 }
      value = { v34193 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v2926[32] }
    cx      = { defs={} expr=v2927[32] }
    dx      = { defs={} expr=v2928[32] }
    bx      = { defs={} expr=v2929[32] }
    sp      = { defs={0x080483d0} expr=(add[32] v2930[32] -4[32]) }
    bp      = { defs={} expr=v2931[32] }
    si      = { defs={} expr=v2932[32] }
    di      = { defs={} expr=v2933[32] }
    es      = { defs={} expr=v2934[16] }
    cs      = { defs={} expr=v2935[16] }
    ss      = { defs={} expr=v2936[16] }
    ds      = { defs={} expr=v2937[16] }
    fs      = { defs={} expr=v2938[16] }
    gs      = { defs={} expr=v2939[16] }
    cf      = { defs={} expr=v2940[1] }
    ?1      = { defs={} expr=v2941[1] }
    pf      = { defs={} expr=v2942[1] }
    ?3      = { defs={} expr=v2943[1] }
    af      = { defs={} expr=v2944[1] }
    ?5      = { defs={} expr=v2945[1] }
    zf      = { defs={} expr=v2946[1] }
    sf      = { defs={} expr=v2947[1] }
    tf      = { defs={} expr=v2948[1] }
    if      = { defs={} expr=v2949[1] }
    df      = { defs={} expr=v2950[1] }
    of      = { defs={} expr=v2951[1] }
    iopl0   = { defs={} expr=v2952[1] }
    iopl1   = { defs={} expr=v2953[1] }
    nt      = { defs={} expr=v2954[1] }
    ?15     = { defs={} expr=v2955[1] }
    rf      = { defs={} expr=v2956[1] }
    vm      = { defs={} expr=v2957[1] }
    ac      = { defs={} expr=v2958[1] }
    vif     = { defs={} expr=v2959[1] }
    vip     = { defs={} expr=v2960[1] }
    id      = { defs={} expr=v2961[1] }
    ?22     = { defs={} expr=v2962[1] }
    ?23     = { defs={} expr=v2963[1] }
    ?24     = { defs={} expr=v2964[1] }
    ?25     = { defs={} expr=v2965[1] }
    ?26     = { defs={} expr=v2966[1] }
    ?27     = { defs={} expr=v2967[1] }
    ?28     = { defs={} expr=v2968[1] }
    ?29     = { defs={} expr=v2969[1] }
    ?30     = { defs={} expr=v2970[1] }
    ?31     = { defs={} expr=v2971[1] }
    ip      = { defs={0x080483d0} expr=0x080483d1[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2931[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v2930[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2931[32]) }
      flags = { }
init mem:
null state
null state
0x80483d1:mov    ebp, esp
registers:
    ax      = { v34188 }
    cx      = { v34189 }
    dx      = { v34190 }
    bx      = { v34191 }
    sp      = { v34192-0x4 }
    bp      = { v34192-0x4 }
    si      = { v34194 }
    di      = { v34195 }
    es      = { v34196 }
    cs      = { v34197 }
    ss      = { v34198 }
    ds      = { v34199 }
    fs      = { v34200 }
    gs      = { v34201 }
    cf      = { v34202 }
    ?1      = { v34203 }
    pf      = { v34204 }
    ?3      = { v34205 }
    af      = { v34206 }
    ?5      = { v34207 }
    zf      = { v34208 }
    sf      = { v34209 }
    tf      = { v34210 }
    if      = { v34211 }
    df      = { v34212 }
    of      = { v34213 }
    iopl0   = { v34214 }
    iopl1   = { v34215 }
    nt      = { v34216 }
    ?15     = { v34217 }
    rf      = { v34218 }
    vm      = { v34219 }
    ac      = { v34220 }
    vif     = { v34221 }
    vip     = { v34222 }
    id      = { v34223 }
    ?22     = { v34224 }
    ?23     = { v34225 }
    ?24     = { v34226 }
    ?25     = { v34227 }
    ?26     = { v34228 }
    ?27     = { v34229 }
    ?28     = { v34230 }
    ?29     = { v34231 }
    ?30     = { v34232 }
    ?31     = { v34233 }
    ip      = { 0x80483d3 }
memory:
    address = { v34192-0x4 }
      value = { v34193 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v2926[32] }
    cx      = { defs={} expr=v2927[32] }
    dx      = { defs={} expr=v2928[32] }
    bx      = { defs={} expr=v2929[32] }
    sp      = { defs={0x080483d0} expr=(add[32] v2930[32] -4[32]) }
    bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2930[32] -4[32]) }
    si      = { defs={} expr=v2932[32] }
    di      = { defs={} expr=v2933[32] }
    es      = { defs={} expr=v2934[16] }
    cs      = { defs={} expr=v2935[16] }
    ss      = { defs={} expr=v2936[16] }
    ds      = { defs={} expr=v2937[16] }
    fs      = { defs={} expr=v2938[16] }
    gs      = { defs={} expr=v2939[16] }
    cf      = { defs={} expr=v2940[1] }
    ?1      = { defs={} expr=v2941[1] }
    pf      = { defs={} expr=v2942[1] }
    ?3      = { defs={} expr=v2943[1] }
    af      = { defs={} expr=v2944[1] }
    ?5      = { defs={} expr=v2945[1] }
    zf      = { defs={} expr=v2946[1] }
    sf      = { defs={} expr=v2947[1] }
    tf      = { defs={} expr=v2948[1] }
    if      = { defs={} expr=v2949[1] }
    df      = { defs={} expr=v2950[1] }
    of      = { defs={} expr=v2951[1] }
    iopl0   = { defs={} expr=v2952[1] }
    iopl1   = { defs={} expr=v2953[1] }
    nt      = { defs={} expr=v2954[1] }
    ?15     = { defs={} expr=v2955[1] }
    rf      = { defs={} expr=v2956[1] }
    vm      = { defs={} expr=v2957[1] }
    ac      = { defs={} expr=v2958[1] }
    vif     = { defs={} expr=v2959[1] }
    vip     = { defs={} expr=v2960[1] }
    id      = { defs={} expr=v2961[1] }
    ?22     = { defs={} expr=v2962[1] }
    ?23     = { defs={} expr=v2963[1] }
    ?24     = { defs={} expr=v2964[1] }
    ?25     = { defs={} expr=v2965[1] }
    ?26     = { defs={} expr=v2966[1] }
    ?27     = { defs={} expr=v2967[1] }
    ?28     = { defs={} expr=v2968[1] }
    ?29     = { defs={} expr=v2969[1] }
    ?30     = { defs={} expr=v2970[1] }
    ?31     = { defs={} expr=v2971[1] }
    ip      = { defs={0x080483d0,0x080483d1} expr=0x080483d3[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2931[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v2930[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2931[32]) }
      flags = { }
init mem:
null state
null state
0x80483d3:sub    esp, 0x08
registers:
    ax      = { v34188 }
    cx      = { v34189 }
    dx      = { v34190 }
    bx      = { v34191 }
    sp      = { v34192-0xc }
    bp      = { v34192-0x4 }
    si      = { v34194 }
    di      = { v34195 }
    es      = { v34196 }
    cs      = { v34197 }
    ss      = { v34198 }
    ds      = { v34199 }
    fs      = { v34200 }
    gs      = { v34201 }
    cf      = { -v34299+0x1 }
    ?1      = { v34203 }
    pf      = { -v34289+0x1 }
    ?3      = { v34205 }
    af      = { -v34296+0x1 }
    ?5      = { v34207 }
    zf      = { v34294 }
    sf      = { v34292 }
    tf      = { v34210 }
    if      = { v34211 }
    df      = { v34212 }
    of      = { v34306 }
    iopl0   = { v34214 }
    iopl1   = { v34215 }
    nt      = { v34216 }
    ?15     = { v34217 }
    rf      = { v34218 }
    vm      = { v34219 }
    ac      = { v34220 }
    vif     = { v34221 }
    vip     = { v34222 }
    id      = { v34223 }
    ?22     = { v34224 }
    ?23     = { v34225 }
    ?24     = { v34226 }
    ?25     = { v34227 }
    ?26     = { v34228 }
    ?27     = { v34229 }
    ?28     = { v34230 }
    ?29     = { v34231 }
    ?30     = { v34232 }
    ?31     = { v34233 }
    ip      = { 0x80483d6 }
memory:
    address = { v34192-0x4 }
      value = { v34193 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v2926[32] }
    cx      = { defs={} expr=v2927[32] }
    dx      = { defs={} expr=v2928[32] }
    bx      = { defs={} expr=v2929[32] }
    sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2930[32] -4[32]) -8[32]) }
    bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2930[32] -4[32]) }
    si      = { defs={} expr=v2932[32] }
    di      = { defs={} expr=v2933[32] }
    es      = { defs={} expr=v2934[16] }
    cs      = { defs={} expr=v2935[16] }
    ss      = { defs={} expr=v2936[16] }
    ds      = { defs={} expr=v2937[16] }
    fs      = { defs={} expr=v2938[16] }
    gs      = { defs={} expr=v2939[16] }
    cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v2941[1] }
    pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v2943[1] }
    af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v2945[1] }
    zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2930[32] -4[32]) -8[32])) }
    sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2930[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v2948[1] }
    if      = { defs={} expr=v2949[1] }
    df      = { defs={} expr=v2950[1] }
    of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v2952[1] }
    iopl1   = { defs={} expr=v2953[1] }
    nt      = { defs={} expr=v2954[1] }
    ?15     = { defs={} expr=v2955[1] }
    rf      = { defs={} expr=v2956[1] }
    vm      = { defs={} expr=v2957[1] }
    ac      = { defs={} expr=v2958[1] }
    vif     = { defs={} expr=v2959[1] }
    vip     = { defs={} expr=v2960[1] }
    id      = { defs={} expr=v2961[1] }
    ?22     = { defs={} expr=v2962[1] }
    ?23     = { defs={} expr=v2963[1] }
    ?24     = { defs={} expr=v2964[1] }
    ?25     = { defs={} expr=v2965[1] }
    ?26     = { defs={} expr=v2966[1] }
    ?27     = { defs={} expr=v2967[1] }
    ?28     = { defs={} expr=v2968[1] }
    ?29     = { defs={} expr=v2969[1] }
    ?30     = { defs={} expr=v2970[1] }
    ?31     = { defs={} expr=v2971[1] }
    ip      = { defs={0x080483d0,0x080483d1,0x080483d3} expr=0x080483d6[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2931[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v2930[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2931[32]) }
      flags = { }
init mem:
null state
null state
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8<.jcr>]
registers:
    ax      = { v34314 }
    cx      = { v34189 }
    dx      = { v34190 }
    bx      = { v34191 }
    sp      = { v34192-0xc }
    bp      = { v34192-0x4 }
    si      = { v34194 }
    di      = { v34195 }
    es      = { v34196 }
    cs      = { v34197 }
    ss      = { v34198 }
    ds      = { v34199 }
    fs      = { v34200 }
    gs      = { v34201 }
    cf      = { -v34299+0x1 }
    ?1      = { v34203 }
    pf      = { -v34289+0x1 }
    ?3      = { v34205 }
    af      = { -v34296+0x1 }
    ?5      = { v34207 }
    zf      = { v34294 }
    sf      = { v34292 }
    tf      = { v34210 }
    if      = { v34211 }
    df      = { v34212 }
    of      = { v34306 }
    iopl0   = { v34214 }
    iopl1   = { v34215 }
    nt      = { v34216 }
    ?15     = { v34217 }
    rf      = { v34218 }
    vm      = { v34219 }
    ac      = { v34220 }
    vif     = { v34221 }
    vip     = { v34222 }
    id      = { v34223 }
    ?22     = { v34224 }
    ?23     = { v34225 }
    ?24     = { v34226 }
    ?25     = { v34227 }
    ?26     = { v34228 }
    ?27     = { v34229 }
    ?28     = { v34230 }
    ?29     = { v34231 }
    ?30     = { v34232 }
    ?31     = { v34233 }
    ip      = { 0x80483db }
memory:
    address = { v34192-0x4 }
      value = { v34193 }
      flags = { size=4 }
    address = { 0x80495f8 }
      value = { v34314 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) }
    cx      = { defs={} expr=v2927[32] }
    dx      = { defs={} expr=v2928[32] }
    bx      = { defs={} expr=v2929[32] }
    sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2930[32] -4[32]) -8[32]) }
    bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2930[32] -4[32]) }
    si      = { defs={} expr=v2932[32] }
    di      = { defs={} expr=v2933[32] }
    es      = { defs={} expr=v2934[16] }
    cs      = { defs={} expr=v2935[16] }
    ss      = { defs={} expr=v2936[16] }
    ds      = { defs={} expr=v2937[16] }
    fs      = { defs={} expr=v2938[16] }
    gs      = { defs={} expr=v2939[16] }
    cf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v2941[1] }
    pf      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2930[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v2943[1] }
    af      = { defs={0x080483d0,0x080483d3} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v2945[1] }
    zf      = { defs={0x080483d0,0x080483d3} expr=(zerop[1] (add[32] (add[32] v2930[32] -4[32]) -8[32])) }
    sf      = { defs={0x080483d0,0x080483d3} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v2930[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v2948[1] }
    if      = { defs={} expr=v2949[1] }
    df      = { defs={} expr=v2950[1] }
    of      = { defs={0x080483d0,0x080483d3} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2930[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v2952[1] }
    iopl1   = { defs={} expr=v2953[1] }
    nt      = { defs={} expr=v2954[1] }
    ?15     = { defs={} expr=v2955[1] }
    rf      = { defs={} expr=v2956[1] }
    vm      = { defs={} expr=v2957[1] }
    ac      = { defs={} expr=v2958[1] }
    vif     = { defs={} expr=v2959[1] }
    vip     = { defs={} expr=v2960[1] }
    id      = { defs={} expr=v2961[1] }
    ?22     = { defs={} expr=v2962[1] }
    ?23     = { defs={} expr=v2963[1] }
    ?24     = { defs={} expr=v2964[1] }
    ?25     = { defs={} expr=v2965[1] }
    ?26     = { defs={} expr=v2966[1] }
    ?27     = { defs={} expr=v2967[1] }
    ?28     = { defs={} expr=v2968[1] }
    ?29     = { defs={} expr=v2969[1] }
    ?30     = { defs={} expr=v2970[1] }
    ?31     = { defs={} expr=v2971[1] }
    ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6} expr=0x080483db[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2931[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v2930[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2931[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495fb[32] }
      value = { defs={} expr=v3035[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495fa[32] }
      value = { defs={} expr=v3034[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495f9[32] }
      value = { defs={} expr=v3033[8] }
      flags = { rdonly }
    address = { defs={0x080483d6} expr=0x080495f8[32] }
      value = { defs={} expr=v3032[8] }
      flags = { rdonly }
null state
null state
0x80483db:test   eax, eax
registers:
    ax      = { v34314 }
    cx      = { v34189 }
    dx      = { v34190 }
    bx      = { v34191 }
    sp      = { v34192-0xc }
    bp      = { v34192-0x4 }
    si      = { v34194 }
    di      = { v34195 }
    es      = { v34196 }
    cs      = { v34197 }
    ss      = { v34198 }
    ds      = { v34199 }
    fs      = { v34200 }
    gs      = { v34201 }
    cf      = { 0x0 }
    ?1      = { v34203 }
    pf      = { -v34352+0x1 }
    ?3      = { v34205 }
    af      = { v34360 }
    ?5      = { v34207 }
    zf      = { v34357 }
    sf      = { v34355 }
    tf      = { v34210 }
    if      = { v34211 }
    df      = { v34212 }
    of      = { 0x0 }
    iopl0   = { v34214 }
    iopl1   = { v34215 }
    nt      = { v34216 }
    ?15     = { v34217 }
    rf      = { v34218 }
    vm      = { v34219 }
    ac      = { v34220 }
    vif     = { v34221 }
    vip     = { v34222 }
    id      = { v34223 }
    ?22     = { v34224 }
    ?23     = { v34225 }
    ?24     = { v34226 }
    ?25     = { v34227 }
    ?26     = { v34228 }
    ?27     = { v34229 }
    ?28     = { v34230 }
    ?29     = { v34231 }
    ?30     = { v34232 }
    ?31     = { v34233 }
    ip      = { 0x80483dd }
memory:
    address = { v34192-0x4 }
      value = { v34193 }
      flags = { size=4 }
    address = { 0x80495f8 }
      value = { v34314 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) }
    cx      = { defs={} expr=v2927[32] }
    dx      = { defs={} expr=v2928[32] }
    bx      = { defs={} expr=v2929[32] }
    sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2930[32] -4[32]) -8[32]) }
    bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2930[32] -4[32]) }
    si      = { defs={} expr=v2932[32] }
    di      = { defs={} expr=v2933[32] }
    es      = { defs={} expr=v2934[16] }
    cs      = { defs={} expr=v2935[16] }
    ss      = { defs={} expr=v2936[16] }
    ds      = { defs={} expr=v2937[16] }
    fs      = { defs={} expr=v2938[16] }
    gs      = { defs={} expr=v2939[16] }
    cf      = { defs={0x080483db} expr=0[1] }
    ?1      = { defs={} expr=v2941[1] }
    pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))))))) }
    ?3      = { defs={} expr=v2943[1] }
    af      = { defs={0x080483db} expr=v3068[1] }
    ?5      = { defs={} expr=v2945[1] }
    zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))))) }
    sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))))) }
    tf      = { defs={} expr=v2948[1] }
    if      = { defs={} expr=v2949[1] }
    df      = { defs={} expr=v2950[1] }
    of      = { defs={0x080483db} expr=0[1] }
    iopl0   = { defs={} expr=v2952[1] }
    iopl1   = { defs={} expr=v2953[1] }
    nt      = { defs={} expr=v2954[1] }
    ?15     = { defs={} expr=v2955[1] }
    rf      = { defs={} expr=v2956[1] }
    vm      = { defs={} expr=v2957[1] }
    ac      = { defs={} expr=v2958[1] }
    vif     = { defs={} expr=v2959[1] }
    vip     = { defs={} expr=v2960[1] }
    id      = { defs={} expr=v2961[1] }
    ?22     = { defs={} expr=v2962[1] }
    ?23     = { defs={} expr=v2963[1] }
    ?24     = { defs={} expr=v2964[1] }
    ?25     = { defs={} expr=v2965[1] }
    ?26     = { defs={} expr=v2966[1] }
    ?27     = { defs={} expr=v2967[1] }
    ?28     = { defs={} expr=v2968[1] }
    ?29     = { defs={} expr=v2969[1] }
    ?30     = { defs={} expr=v2970[1] }
    ?31     = { defs={} expr=v2971[1] }
    ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db} expr=0x080483dd[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2931[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v2930[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2931[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495fb[32] }
      value = { defs={} expr=v3035[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495fa[32] }
      value = { defs={} expr=v3034[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495f9[32] }
      value = { defs={} expr=v3033[8] }
      flags = { rdonly }
    address = { defs={0x080483d6} expr=0x080495f8[32] }
      value = { defs={} expr=v3032[8] }
      flags = { rdonly }
null state
null state
0x80483dd:je     0x08048400<<Insn>>
registers:
    ax      = { v34314 }
    cx      = { v34189 }
    dx      = { v34190 }
    bx      = { v34191 }
    sp      = { v34192-0xc }
    bp      = { v34192-0x4 }
    si      = { v34194 }
    di      = { v34195 }
    es      = { v34196 }
    cs      = { v34197 }
    ss      = { v34198 }
    ds      = { v34199 }
    fs      = { v34200 }
    gs      = { v34201 }
    cf      = { 0x0 }
    ?1      = { v34203 }
    pf      = { -v34352+0x1 }
    ?3      = { v34205 }
    af      = { v34360 }
    ?5      = { v34207 }
    zf      = { v34357 }
    sf      = { v34355 }
    tf      = { v34210 }
    if      = { v34211 }
    df      = { v34212 }
    of      = { 0x0 }
    iopl0   = { v34214 }
    iopl1   = { v34215 }
    nt      = { v34216 }
    ?15     = { v34217 }
    rf      = { v34218 }
    vm      = { v34219 }
    ac      = { v34220 }
    vif     = { v34221 }
    vip     = { v34222 }
    id      = { v34223 }
    ?22     = { v34224 }
    ?23     = { v34225 }
    ?24     = { v34226 }
    ?25     = { v34227 }
    ?26     = { v34228 }
    ?27     = { v34229 }
    ?28     = { v34230 }
    ?29     = { v34231 }
    ?30     = { v34232 }
    ?31     = { v34233 }
    ip      = { v34370 }
memory:
    address = { v34192-0x4 }
      value = { v34193 }
      flags = { size=4 }
    address = { 0x80495f8 }
      value = { v34314 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483d6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) }
    cx      = { defs={} expr=v2927[32] }
    dx      = { defs={} expr=v2928[32] }
    bx      = { defs={} expr=v2929[32] }
    sp      = { defs={0x080483d0,0x080483d3} expr=(add[32] (add[32] v2930[32] -4[32]) -8[32]) }
    bp      = { defs={0x080483d0,0x080483d1} expr=(add[32] v2930[32] -4[32]) }
    si      = { defs={} expr=v2932[32] }
    di      = { defs={} expr=v2933[32] }
    es      = { defs={} expr=v2934[16] }
    cs      = { defs={} expr=v2935[16] }
    ss      = { defs={} expr=v2936[16] }
    ds      = { defs={} expr=v2937[16] }
    fs      = { defs={} expr=v2938[16] }
    gs      = { defs={} expr=v2939[16] }
    cf      = { defs={0x080483db} expr=0[1] }
    ?1      = { defs={} expr=v2941[1] }
    pf      = { defs={0x080483d6,0x080483db} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8])))))))))) }
    ?3      = { defs={} expr=v2943[1] }
    af      = { defs={0x080483db} expr=v3068[1] }
    ?5      = { defs={} expr=v2945[1] }
    zf      = { defs={0x080483d6,0x080483db} expr=(zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))))) }
    sf      = { defs={0x080483d6,0x080483db} expr=(extract[1] 31[32] 32[32] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))))) }
    tf      = { defs={} expr=v2948[1] }
    if      = { defs={} expr=v2949[1] }
    df      = { defs={} expr=v2950[1] }
    of      = { defs={0x080483db} expr=0[1] }
    iopl0   = { defs={} expr=v2952[1] }
    iopl1   = { defs={} expr=v2953[1] }
    nt      = { defs={} expr=v2954[1] }
    ?15     = { defs={} expr=v2955[1] }
    rf      = { defs={} expr=v2956[1] }
    vm      = { defs={} expr=v2957[1] }
    ac      = { defs={} expr=v2958[1] }
    vif     = { defs={} expr=v2959[1] }
    vip     = { defs={} expr=v2960[1] }
    id      = { defs={} expr=v2961[1] }
    ?22     = { defs={} expr=v2962[1] }
    ?23     = { defs={} expr=v2963[1] }
    ?24     = { defs={} expr=v2964[1] }
    ?25     = { defs={} expr=v2965[1] }
    ?26     = { defs={} expr=v2966[1] }
    ?27     = { defs={} expr=v2967[1] }
    ?28     = { defs={} expr=v2968[1] }
    ?29     = { defs={} expr=v2969[1] }
    ?30     = { defs={} expr=v2970[1] }
    ?31     = { defs={} expr=v2971[1] }
    ip      = { defs={0x080483d0,0x080483d1,0x080483d3,0x080483d6,0x080483db,0x080483dd} expr=(ite[32] (zerop[1] (bv-and[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))) (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3032[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3033[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3034[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3035[8]))))) 0x08048400[32] 0x080483df[32]) }
memory:
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v2931[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v2930[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v2931[32]) }
      flags = { }
    address = { defs={0x080483d0} expr=(add[32] v2930[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v2931[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495fb[32] }
      value = { defs={} expr=v3035[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495fa[32] }
      value = { defs={} expr=v3034[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495f9[32] }
      value = { defs={} expr=v3033[8] }
      flags = { rdonly }
    address = { defs={0x080483d6} expr=0x080495f8[32] }
      value = { defs={} expr=v3032[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
registers:
    ax      = { 0x0 }
    cx      = { v34421 }
    dx      = { v34422 }
    bx      = { v34423 }
    sp      = { v34424 }
    bp      = { v34425 }
    si      = { v34426 }
    di      = { v34427 }
    es      = { v34428 }
    cs      = { v34429 }
    ss      = { v34430 }
    ds      = { v34431 }
    fs      = { v34432 }
    gs      = { v34433 }
    cf      = { v34434 }
    ?1      = { v34435 }
    pf      = { v34436 }
    ?3      = { v34437 }
    af      = { v34438 }
    ?5      = { v34439 }
    zf      = { v34440 }
    sf      = { v34441 }
    tf      = { v34442 }
    if      = { v34443 }
    df      = { v34444 }
    of      = { v34445 }
    iopl0   = { v34446 }
    iopl1   = { v34447 }
    nt      = { v34448 }
    ?15     = { v34449 }
    rf      = { v34450 }
    vm      = { v34451 }
    ac      = { v34452 }
    vif     = { v34453 }
    vip     = { v34454 }
    id      = { v34455 }
    ?22     = { v34456 }
    ?23     = { v34457 }
    ?24     = { v34458 }
    ?25     = { v34459 }
    ?26     = { v34460 }
    ?27     = { v34461 }
    ?28     = { v34462 }
    ?29     = { v34463 }
    ?30     = { v34464 }
    ?31     = { v34465 }
    ip      = { 0x80483e4 }
memory:
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v3128[32] }
    dx      = { defs={} expr=v3129[32] }
    bx      = { defs={} expr=v3130[32] }
    sp      = { defs={} expr=v3131[32] }
    bp      = { defs={} expr=v3132[32] }
    si      = { defs={} expr=v3133[32] }
    di      = { defs={} expr=v3134[32] }
    es      = { defs={} expr=v3135[16] }
    cs      = { defs={} expr=v3136[16] }
    ss      = { defs={} expr=v3137[16] }
    ds      = { defs={} expr=v3138[16] }
    fs      = { defs={} expr=v3139[16] }
    gs      = { defs={} expr=v3140[16] }
    cf      = { defs={} expr=v3141[1] }
    ?1      = { defs={} expr=v3142[1] }
    pf      = { defs={} expr=v3143[1] }
    ?3      = { defs={} expr=v3144[1] }
    af      = { defs={} expr=v3145[1] }
    ?5      = { defs={} expr=v3146[1] }
    zf      = { defs={} expr=v3147[1] }
    sf      = { defs={} expr=v3148[1] }
    tf      = { defs={} expr=v3149[1] }
    if      = { defs={} expr=v3150[1] }
    df      = { defs={} expr=v3151[1] }
    of      = { defs={} expr=v3152[1] }
    iopl0   = { defs={} expr=v3153[1] }
    iopl1   = { defs={} expr=v3154[1] }
    nt      = { defs={} expr=v3155[1] }
    ?15     = { defs={} expr=v3156[1] }
    rf      = { defs={} expr=v3157[1] }
    vm      = { defs={} expr=v3158[1] }
    ac      = { defs={} expr=v3159[1] }
    vif     = { defs={} expr=v3160[1] }
    vip     = { defs={} expr=v3161[1] }
    id      = { defs={} expr=v3162[1] }
    ?22     = { defs={} expr=v3163[1] }
    ?23     = { defs={} expr=v3164[1] }
    ?24     = { defs={} expr=v3165[1] }
    ?25     = { defs={} expr=v3166[1] }
    ?26     = { defs={} expr=v3167[1] }
    ?27     = { defs={} expr=v3168[1] }
    ?28     = { defs={} expr=v3169[1] }
    ?29     = { defs={} expr=v3170[1] }
    ?30     = { defs={} expr=v3171[1] }
    ?31     = { defs={} expr=v3172[1] }
    ip      = { defs={0x080483df} expr=0x080483e4[32] }
memory:
init mem:
null state
null state
0x80483e4:test   eax, eax
registers:
    ax      = { 0x0 }
    cx      = { v34421 }
    dx      = { v34422 }
    bx      = { v34423 }
    sp      = { v34424 }
    bp      = { v34425 }
    si      = { v34426 }
    di      = { v34427 }
    es      = { v34428 }
    cs      = { v34429 }
    ss      = { v34430 }
    ds      = { v34431 }
    fs      = { v34432 }
    gs      = { v34433 }
    cf      = { 0x0 }
    ?1      = { v34435 }
    pf      = { 0x1 }
    ?3      = { v34437 }
    af      = { v34499 }
    ?5      = { v34439 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v34442 }
    if      = { v34443 }
    df      = { v34444 }
    of      = { 0x0 }
    iopl0   = { v34446 }
    iopl1   = { v34447 }
    nt      = { v34448 }
    ?15     = { v34449 }
    rf      = { v34450 }
    vm      = { v34451 }
    ac      = { v34452 }
    vif     = { v34453 }
    vip     = { v34454 }
    id      = { v34455 }
    ?22     = { v34456 }
    ?23     = { v34457 }
    ?24     = { v34458 }
    ?25     = { v34459 }
    ?26     = { v34460 }
    ?27     = { v34461 }
    ?28     = { v34462 }
    ?29     = { v34463 }
    ?30     = { v34464 }
    ?31     = { v34465 }
    ip      = { 0x80483e6 }
memory:
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v3128[32] }
    dx      = { defs={} expr=v3129[32] }
    bx      = { defs={} expr=v3130[32] }
    sp      = { defs={} expr=v3131[32] }
    bp      = { defs={} expr=v3132[32] }
    si      = { defs={} expr=v3133[32] }
    di      = { defs={} expr=v3134[32] }
    es      = { defs={} expr=v3135[16] }
    cs      = { defs={} expr=v3136[16] }
    ss      = { defs={} expr=v3137[16] }
    ds      = { defs={} expr=v3138[16] }
    fs      = { defs={} expr=v3139[16] }
    gs      = { defs={} expr=v3140[16] }
    cf      = { defs={0x080483e4} expr=0[1] }
    ?1      = { defs={} expr=v3142[1] }
    pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    ?3      = { defs={} expr=v3144[1] }
    af      = { defs={0x080483e4} expr=v3206[1] }
    ?5      = { defs={} expr=v3146[1] }
    zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
    tf      = { defs={} expr=v3149[1] }
    if      = { defs={} expr=v3150[1] }
    df      = { defs={} expr=v3151[1] }
    of      = { defs={0x080483e4} expr=0[1] }
    iopl0   = { defs={} expr=v3153[1] }
    iopl1   = { defs={} expr=v3154[1] }
    nt      = { defs={} expr=v3155[1] }
    ?15     = { defs={} expr=v3156[1] }
    rf      = { defs={} expr=v3157[1] }
    vm      = { defs={} expr=v3158[1] }
    ac      = { defs={} expr=v3159[1] }
    vif     = { defs={} expr=v3160[1] }
    vip     = { defs={} expr=v3161[1] }
    id      = { defs={} expr=v3162[1] }
    ?22     = { defs={} expr=v3163[1] }
    ?23     = { defs={} expr=v3164[1] }
    ?24     = { defs={} expr=v3165[1] }
    ?25     = { defs={} expr=v3166[1] }
    ?26     = { defs={} expr=v3167[1] }
    ?27     = { defs={} expr=v3168[1] }
    ?28     = { defs={} expr=v3169[1] }
    ?29     = { defs={} expr=v3170[1] }
    ?30     = { defs={} expr=v3171[1] }
    ?31     = { defs={} expr=v3172[1] }
    ip      = { defs={0x080483df,0x080483e4} expr=0x080483e6[32] }
memory:
init mem:
null state
null state
0x80483e6:je     0x08048400<<Insn>>
registers:
    ax      = { 0x0 }
    cx      = { v34421 }
    dx      = { v34422 }
    bx      = { v34423 }
    sp      = { v34424 }
    bp      = { v34425 }
    si      = { v34426 }
    di      = { v34427 }
    es      = { v34428 }
    cs      = { v34429 }
    ss      = { v34430 }
    ds      = { v34431 }
    fs      = { v34432 }
    gs      = { v34433 }
    cf      = { 0x0 }
    ?1      = { v34435 }
    pf      = { 0x1 }
    ?3      = { v34437 }
    af      = { v34499 }
    ?5      = { v34439 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v34442 }
    if      = { v34443 }
    df      = { v34444 }
    of      = { 0x0 }
    iopl0   = { v34446 }
    iopl1   = { v34447 }
    nt      = { v34448 }
    ?15     = { v34449 }
    rf      = { v34450 }
    vm      = { v34451 }
    ac      = { v34452 }
    vif     = { v34453 }
    vip     = { v34454 }
    id      = { v34455 }
    ?22     = { v34456 }
    ?23     = { v34457 }
    ?24     = { v34458 }
    ?25     = { v34459 }
    ?26     = { v34460 }
    ?27     = { v34461 }
    ?28     = { v34462 }
    ?29     = { v34463 }
    ?30     = { v34464 }
    ?31     = { v34465 }
    ip      = { 0x8048400 }
memory:
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v3128[32] }
    dx      = { defs={} expr=v3129[32] }
    bx      = { defs={} expr=v3130[32] }
    sp      = { defs={} expr=v3131[32] }
    bp      = { defs={} expr=v3132[32] }
    si      = { defs={} expr=v3133[32] }
    di      = { defs={} expr=v3134[32] }
    es      = { defs={} expr=v3135[16] }
    cs      = { defs={} expr=v3136[16] }
    ss      = { defs={} expr=v3137[16] }
    ds      = { defs={} expr=v3138[16] }
    fs      = { defs={} expr=v3139[16] }
    gs      = { defs={} expr=v3140[16] }
    cf      = { defs={0x080483e4} expr=0[1] }
    ?1      = { defs={} expr=v3142[1] }
    pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    ?3      = { defs={} expr=v3144[1] }
    af      = { defs={0x080483e4} expr=v3206[1] }
    ?5      = { defs={} expr=v3146[1] }
    zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
    tf      = { defs={} expr=v3149[1] }
    if      = { defs={} expr=v3150[1] }
    df      = { defs={} expr=v3151[1] }
    of      = { defs={0x080483e4} expr=0[1] }
    iopl0   = { defs={} expr=v3153[1] }
    iopl1   = { defs={} expr=v3154[1] }
    nt      = { defs={} expr=v3155[1] }
    ?15     = { defs={} expr=v3156[1] }
    rf      = { defs={} expr=v3157[1] }
    vm      = { defs={} expr=v3158[1] }
    ac      = { defs={} expr=v3159[1] }
    vif     = { defs={} expr=v3160[1] }
    vip     = { defs={} expr=v3161[1] }
    id      = { defs={} expr=v3162[1] }
    ?22     = { defs={} expr=v3163[1] }
    ?23     = { defs={} expr=v3164[1] }
    ?24     = { defs={} expr=v3165[1] }
    ?25     = { defs={} expr=v3166[1] }
    ?26     = { defs={} expr=v3167[1] }
    ?27     = { defs={} expr=v3168[1] }
    ?28     = { defs={} expr=v3169[1] }
    ?29     = { defs={} expr=v3170[1] }
    ?30     = { defs={} expr=v3171[1] }
    ?31     = { defs={} expr=v3172[1] }
    ip      = { defs={0x080483df,0x080483e4,0x080483e6} expr=0x08048400[32] }
memory:
init mem:
null state
null state
0x8048400:mov    esp, ebp
registers:
    ax      = { 0x0 }
    cx      = { v34421 }
    dx      = { v34422 }
    bx      = { v34423 }
    sp      = { v34425 }
    bp      = { v34425 }
    si      = { v34426 }
    di      = { v34427 }
    es      = { v34428 }
    cs      = { v34429 }
    ss      = { v34430 }
    ds      = { v34431 }
    fs      = { v34432 }
    gs      = { v34433 }
    cf      = { 0x0 }
    ?1      = { v34435 }
    pf      = { 0x1 }
    ?3      = { v34437 }
    af      = { v34499 }
    ?5      = { v34439 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v34442 }
    if      = { v34443 }
    df      = { v34444 }
    of      = { 0x0 }
    iopl0   = { v34446 }
    iopl1   = { v34447 }
    nt      = { v34448 }
    ?15     = { v34449 }
    rf      = { v34450 }
    vm      = { v34451 }
    ac      = { v34452 }
    vif     = { v34453 }
    vip     = { v34454 }
    id      = { v34455 }
    ?22     = { v34456 }
    ?23     = { v34457 }
    ?24     = { v34458 }
    ?25     = { v34459 }
    ?26     = { v34460 }
    ?27     = { v34461 }
    ?28     = { v34462 }
    ?29     = { v34463 }
    ?30     = { v34464 }
    ?31     = { v34465 }
    ip      = { 0x8048402 }
memory:
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v3128[32] }
    dx      = { defs={} expr=v3129[32] }
    bx      = { defs={} expr=v3130[32] }
    sp      = { defs={0x08048400} expr=v3132[32] }
    bp      = { defs={} expr=v3132[32] }
    si      = { defs={} expr=v3133[32] }
    di      = { defs={} expr=v3134[32] }
    es      = { defs={} expr=v3135[16] }
    cs      = { defs={} expr=v3136[16] }
    ss      = { defs={} expr=v3137[16] }
    ds      = { defs={} expr=v3138[16] }
    fs      = { defs={} expr=v3139[16] }
    gs      = { defs={} expr=v3140[16] }
    cf      = { defs={0x080483e4} expr=0[1] }
    ?1      = { defs={} expr=v3142[1] }
    pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    ?3      = { defs={} expr=v3144[1] }
    af      = { defs={0x080483e4} expr=v3206[1] }
    ?5      = { defs={} expr=v3146[1] }
    zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
    tf      = { defs={} expr=v3149[1] }
    if      = { defs={} expr=v3150[1] }
    df      = { defs={} expr=v3151[1] }
    of      = { defs={0x080483e4} expr=0[1] }
    iopl0   = { defs={} expr=v3153[1] }
    iopl1   = { defs={} expr=v3154[1] }
    nt      = { defs={} expr=v3155[1] }
    ?15     = { defs={} expr=v3156[1] }
    rf      = { defs={} expr=v3157[1] }
    vm      = { defs={} expr=v3158[1] }
    ac      = { defs={} expr=v3159[1] }
    vif     = { defs={} expr=v3160[1] }
    vip     = { defs={} expr=v3161[1] }
    id      = { defs={} expr=v3162[1] }
    ?22     = { defs={} expr=v3163[1] }
    ?23     = { defs={} expr=v3164[1] }
    ?24     = { defs={} expr=v3165[1] }
    ?25     = { defs={} expr=v3166[1] }
    ?26     = { defs={} expr=v3167[1] }
    ?27     = { defs={} expr=v3168[1] }
    ?28     = { defs={} expr=v3169[1] }
    ?29     = { defs={} expr=v3170[1] }
    ?30     = { defs={} expr=v3171[1] }
    ?31     = { defs={} expr=v3172[1] }
    ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400} expr=0x08048402[32] }
memory:
init mem:
null state
null state
0x8048402:pop    ebp
registers:
    ax      = { 0x0 }
    cx      = { v34421 }
    dx      = { v34422 }
    bx      = { v34423 }
    sp      = { v34425+0x4 }
    bp      = { v34523 }
    si      = { v34426 }
    di      = { v34427 }
    es      = { v34428 }
    cs      = { v34429 }
    ss      = { v34430 }
    ds      = { v34431 }
    fs      = { v34432 }
    gs      = { v34433 }
    cf      = { 0x0 }
    ?1      = { v34435 }
    pf      = { 0x1 }
    ?3      = { v34437 }
    af      = { v34499 }
    ?5      = { v34439 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v34442 }
    if      = { v34443 }
    df      = { v34444 }
    of      = { 0x0 }
    iopl0   = { v34446 }
    iopl1   = { v34447 }
    nt      = { v34448 }
    ?15     = { v34449 }
    rf      = { v34450 }
    vm      = { v34451 }
    ac      = { v34452 }
    vif     = { v34453 }
    vip     = { v34454 }
    id      = { v34455 }
    ?22     = { v34456 }
    ?23     = { v34457 }
    ?24     = { v34458 }
    ?25     = { v34459 }
    ?26     = { v34460 }
    ?27     = { v34461 }
    ?28     = { v34462 }
    ?29     = { v34463 }
    ?30     = { v34464 }
    ?31     = { v34465 }
    ip      = { 0x8048403 }
memory:
    address = { v34425 }
      value = { v34523 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v3128[32] }
    dx      = { defs={} expr=v3129[32] }
    bx      = { defs={} expr=v3130[32] }
    sp      = { defs={0x08048400,0x08048402} expr=(add[32] v3132[32] 4[32]) }
    bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3232[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3233[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3234[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3235[8]))) }
    si      = { defs={} expr=v3133[32] }
    di      = { defs={} expr=v3134[32] }
    es      = { defs={} expr=v3135[16] }
    cs      = { defs={} expr=v3136[16] }
    ss      = { defs={} expr=v3137[16] }
    ds      = { defs={} expr=v3138[16] }
    fs      = { defs={} expr=v3139[16] }
    gs      = { defs={} expr=v3140[16] }
    cf      = { defs={0x080483e4} expr=0[1] }
    ?1      = { defs={} expr=v3142[1] }
    pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    ?3      = { defs={} expr=v3144[1] }
    af      = { defs={0x080483e4} expr=v3206[1] }
    ?5      = { defs={} expr=v3146[1] }
    zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
    tf      = { defs={} expr=v3149[1] }
    if      = { defs={} expr=v3150[1] }
    df      = { defs={} expr=v3151[1] }
    of      = { defs={0x080483e4} expr=0[1] }
    iopl0   = { defs={} expr=v3153[1] }
    iopl1   = { defs={} expr=v3154[1] }
    nt      = { defs={} expr=v3155[1] }
    ?15     = { defs={} expr=v3156[1] }
    rf      = { defs={} expr=v3157[1] }
    vm      = { defs={} expr=v3158[1] }
    ac      = { defs={} expr=v3159[1] }
    vif     = { defs={} expr=v3160[1] }
    vip     = { defs={} expr=v3161[1] }
    id      = { defs={} expr=v3162[1] }
    ?22     = { defs={} expr=v3163[1] }
    ?23     = { defs={} expr=v3164[1] }
    ?24     = { defs={} expr=v3165[1] }
    ?25     = { defs={} expr=v3166[1] }
    ?26     = { defs={} expr=v3167[1] }
    ?27     = { defs={} expr=v3168[1] }
    ?28     = { defs={} expr=v3169[1] }
    ?29     = { defs={} expr=v3170[1] }
    ?30     = { defs={} expr=v3171[1] }
    ?31     = { defs={} expr=v3172[1] }
    ip      = { defs={0x080483df,0x080483e4,0x080483e6,0x08048400,0x08048402} expr=0x08048403[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v3132[32] 3[32]) }
      value = { defs={} expr=v3235[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3132[32] 2[32]) }
      value = { defs={} expr=v3234[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3132[32] 1[32]) }
      value = { defs={} expr=v3233[8] }
      flags = { rdonly }
    address = { defs={0x08048400} expr=v3132[32] }
      value = { defs={} expr=v3232[8] }
      flags = { rdonly }
null state
null state
0x8048403:ret    
registers:
    ax      = { 0x0 }
    cx      = { v34421 }
    dx      = { v34422 }
    bx      = { v34423 }
    sp      = { v34425+0x8 }
    bp      = { v34523 }
    si      = { v34426 }
    di      = { v34427 }
    es      = { v34428 }
    cs      = { v34429 }
    ss      = { v34430 }
    ds      = { v34431 }
    fs      = { v34432 }
    gs      = { v34433 }
    cf      = { 0x0 }
    ?1      = { v34435 }
    pf      = { 0x1 }
    ?3      = { v34437 }
    af      = { v34499 }
    ?5      = { v34439 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v34442 }
    if      = { v34443 }
    df      = { v34444 }
    of      = { 0x0 }
    iopl0   = { v34446 }
    iopl1   = { v34447 }
    nt      = { v34448 }
    ?15     = { v34449 }
    rf      = { v34450 }
    vm      = { v34451 }
    ac      = { v34452 }
    vif     = { v34453 }
    vip     = { v34454 }
    id      = { v34455 }
    ?22     = { v34456 }
    ?23     = { v34457 }
    ?24     = { v34458 }
    ?25     = { v34459 }
    ?26     = { v34460 }
    ?27     = { v34461 }
    ?28     = { v34462 }
    ?29     = { v34463 }
    ?30     = { v34464 }
    ?31     = { v34465 }
    ip      = { v34535 }
memory:
    address = { v34425 }
      value = { v34523 }
      flags = { size=4; read-only }
    address = { v34425+0x4 }
      value = { v34535 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080483df} expr=0[32] }
    cx      = { defs={} expr=v3128[32] }
    dx      = { defs={} expr=v3129[32] }
    bx      = { defs={} expr=v3130[32] }
    sp      = { defs={0x08048400,0x08048402,0x08048403} expr=(add[32] (add[32] v3132[32] 4[32]) 4[32]) }
    bp      = { defs={0x08048402} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3232[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3233[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3234[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3235[8]))) }
    si      = { defs={} expr=v3133[32] }
    di      = { defs={} expr=v3134[32] }
    es      = { defs={} expr=v3135[16] }
    cs      = { defs={} expr=v3136[16] }
    ss      = { defs={} expr=v3137[16] }
    ds      = { defs={} expr=v3138[16] }
    fs      = { defs={} expr=v3139[16] }
    gs      = { defs={} expr=v3140[16] }
    cf      = { defs={0x080483e4} expr=0[1] }
    ?1      = { defs={} expr=v3142[1] }
    pf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    ?3      = { defs={} expr=v3144[1] }
    af      = { defs={0x080483e4} expr=v3206[1] }
    ?5      = { defs={} expr=v3146[1] }
    zf      = { defs={0x080483df,0x080483e4} expr=1[1] }
    sf      = { defs={0x080483df,0x080483e4} expr=0[1] }
    tf      = { defs={} expr=v3149[1] }
    if      = { defs={} expr=v3150[1] }
    df      = { defs={} expr=v3151[1] }
    of      = { defs={0x080483e4} expr=0[1] }
    iopl0   = { defs={} expr=v3153[1] }
    iopl1   = { defs={} expr=v3154[1] }
    nt      = { defs={} expr=v3155[1] }
    ?15     = { defs={} expr=v3156[1] }
    rf      = { defs={} expr=v3157[1] }
    vm      = { defs={} expr=v3158[1] }
    ac      = { defs={} expr=v3159[1] }
    vif     = { defs={} expr=v3160[1] }
    vip     = { defs={} expr=v3161[1] }
    id      = { defs={} expr=v3162[1] }
    ?22     = { defs={} expr=v3163[1] }
    ?23     = { defs={} expr=v3164[1] }
    ?24     = { defs={} expr=v3165[1] }
    ?25     = { defs={} expr=v3166[1] }
    ?26     = { defs={} expr=v3167[1] }
    ?27     = { defs={} expr=v3168[1] }
    ?28     = { defs={} expr=v3169[1] }
    ?29     = { defs={} expr=v3170[1] }
    ?30     = { defs={} expr=v3171[1] }
    ?31     = { defs={} expr=v3172[1] }
    ip      = { defs={0x08048403} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3253[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3254[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3255[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3256[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v3132[32] 4[32]) 3[32]) }
      value = { defs={} expr=v3256[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v3132[32] 4[32]) 2[32]) }
      value = { defs={} expr=v3255[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v3132[32] 4[32]) 1[32]) }
      value = { defs={} expr=v3254[8] }
      flags = { rdonly }
    address = { defs={0x08048400,0x08048402} expr=(add[32] v3132[32] 4[32]) }
      value = { defs={} expr=v3253[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3132[32] 3[32]) }
      value = { defs={} expr=v3235[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3132[32] 2[32]) }
      value = { defs={} expr=v3234[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3132[32] 1[32]) }
      value = { defs={} expr=v3233[8] }
      flags = { rdonly }
    address = { defs={0x08048400} expr=v3132[32] }
      value = { defs={} expr=v3232[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8<.jcr>
registers:
    ax      = { v34586 }
    cx      = { v34587 }
    dx      = { v34588 }
    bx      = { v34589 }
    sp      = { v34590 }
    bp      = { v34591 }
    si      = { v34592 }
    di      = { v34593 }
    es      = { v34594 }
    cs      = { v34595 }
    ss      = { v34596 }
    ds      = { v34597 }
    fs      = { v34598 }
    gs      = { v34599 }
    cf      = { v34600 }
    ?1      = { v34601 }
    pf      = { v34602 }
    ?3      = { v34603 }
    af      = { v34604 }
    ?5      = { v34605 }
    zf      = { v34606 }
    sf      = { v34607 }
    tf      = { v34608 }
    if      = { v34609 }
    df      = { v34610 }
    of      = { v34611 }
    iopl0   = { v34612 }
    iopl1   = { v34613 }
    nt      = { v34614 }
    ?15     = { v34615 }
    rf      = { v34616 }
    vm      = { v34617 }
    ac      = { v34618 }
    vif     = { v34619 }
    vip     = { v34620 }
    id      = { v34621 }
    ?22     = { v34622 }
    ?23     = { v34623 }
    ?24     = { v34624 }
    ?25     = { v34625 }
    ?26     = { v34626 }
    ?27     = { v34627 }
    ?28     = { v34628 }
    ?29     = { v34629 }
    ?30     = { v34630 }
    ?31     = { v34631 }
    ip      = { 0x80483ef }
memory:
    address = { v34590 }
      value = { 0x80495f8 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3311[32] }
    cx      = { defs={} expr=v3312[32] }
    dx      = { defs={} expr=v3313[32] }
    bx      = { defs={} expr=v3314[32] }
    sp      = { defs={} expr=v3315[32] }
    bp      = { defs={} expr=v3316[32] }
    si      = { defs={} expr=v3317[32] }
    di      = { defs={} expr=v3318[32] }
    es      = { defs={} expr=v3319[16] }
    cs      = { defs={} expr=v3320[16] }
    ss      = { defs={} expr=v3321[16] }
    ds      = { defs={} expr=v3322[16] }
    fs      = { defs={} expr=v3323[16] }
    gs      = { defs={} expr=v3324[16] }
    cf      = { defs={} expr=v3325[1] }
    ?1      = { defs={} expr=v3326[1] }
    pf      = { defs={} expr=v3327[1] }
    ?3      = { defs={} expr=v3328[1] }
    af      = { defs={} expr=v3329[1] }
    ?5      = { defs={} expr=v3330[1] }
    zf      = { defs={} expr=v3331[1] }
    sf      = { defs={} expr=v3332[1] }
    tf      = { defs={} expr=v3333[1] }
    if      = { defs={} expr=v3334[1] }
    df      = { defs={} expr=v3335[1] }
    of      = { defs={} expr=v3336[1] }
    iopl0   = { defs={} expr=v3337[1] }
    iopl1   = { defs={} expr=v3338[1] }
    nt      = { defs={} expr=v3339[1] }
    ?15     = { defs={} expr=v3340[1] }
    rf      = { defs={} expr=v3341[1] }
    vm      = { defs={} expr=v3342[1] }
    ac      = { defs={} expr=v3343[1] }
    vif     = { defs={} expr=v3344[1] }
    vip     = { defs={} expr=v3345[1] }
    id      = { defs={} expr=v3346[1] }
    ?22     = { defs={} expr=v3347[1] }
    ?23     = { defs={} expr=v3348[1] }
    ?24     = { defs={} expr=v3349[1] }
    ?25     = { defs={} expr=v3350[1] }
    ?26     = { defs={} expr=v3351[1] }
    ?27     = { defs={} expr=v3352[1] }
    ?28     = { defs={} expr=v3353[1] }
    ?29     = { defs={} expr=v3354[1] }
    ?30     = { defs={} expr=v3355[1] }
    ?31     = { defs={} expr=v3356[1] }
    ip      = { defs={0x080483e8} expr=0x080483ef[32] }
memory:
    address = { defs={} expr=(add[32] v3315[32] 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] v3315[32] 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] v3315[32] 1[32]) }
      value = { defs={} expr=-107[8] }
      flags = { }
    address = { defs={} expr=v3315[32] }
      value = { defs={} expr=-8[8] }
      flags = { }
init mem:
null state
null state
0x80483ef:call   0x00000000
registers:
    ax      = { v34586 }
    cx      = { v34587 }
    dx      = { v34588 }
    bx      = { v34589 }
    sp      = { v34590-0x4 }
    bp      = { v34591 }
    si      = { v34592 }
    di      = { v34593 }
    es      = { v34594 }
    cs      = { v34595 }
    ss      = { v34596 }
    ds      = { v34597 }
    fs      = { v34598 }
    gs      = { v34599 }
    cf      = { v34600 }
    ?1      = { v34601 }
    pf      = { v34602 }
    ?3      = { v34603 }
    af      = { v34604 }
    ?5      = { v34605 }
    zf      = { v34606 }
    sf      = { v34607 }
    tf      = { v34608 }
    if      = { v34609 }
    df      = { v34610 }
    of      = { v34611 }
    iopl0   = { v34612 }
    iopl1   = { v34613 }
    nt      = { v34614 }
    ?15     = { v34615 }
    rf      = { v34616 }
    vm      = { v34617 }
    ac      = { v34618 }
    vif     = { v34619 }
    vip     = { v34620 }
    id      = { v34621 }
    ?22     = { v34622 }
    ?23     = { v34623 }
    ?24     = { v34624 }
    ?25     = { v34625 }
    ?26     = { v34626 }
    ?27     = { v34627 }
    ?28     = { v34628 }
    ?29     = { v34629 }
    ?30     = { v34630 }
    ?31     = { v34631 }
    ip      = { 0x0 }
memory:
    address = { v34590 }
      value = { 0x80495f8 }
      flags = { size=4 }
    address = { v34590-0x4 }
      value = { 0x80483f4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3311[32] }
    cx      = { defs={} expr=v3312[32] }
    dx      = { defs={} expr=v3313[32] }
    bx      = { defs={} expr=v3314[32] }
    sp      = { defs={0x080483ef} expr=(add[32] v3315[32] -4[32]) }
    bp      = { defs={} expr=v3316[32] }
    si      = { defs={} expr=v3317[32] }
    di      = { defs={} expr=v3318[32] }
    es      = { defs={} expr=v3319[16] }
    cs      = { defs={} expr=v3320[16] }
    ss      = { defs={} expr=v3321[16] }
    ds      = { defs={} expr=v3322[16] }
    fs      = { defs={} expr=v3323[16] }
    gs      = { defs={} expr=v3324[16] }
    cf      = { defs={} expr=v3325[1] }
    ?1      = { defs={} expr=v3326[1] }
    pf      = { defs={} expr=v3327[1] }
    ?3      = { defs={} expr=v3328[1] }
    af      = { defs={} expr=v3329[1] }
    ?5      = { defs={} expr=v3330[1] }
    zf      = { defs={} expr=v3331[1] }
    sf      = { defs={} expr=v3332[1] }
    tf      = { defs={} expr=v3333[1] }
    if      = { defs={} expr=v3334[1] }
    df      = { defs={} expr=v3335[1] }
    of      = { defs={} expr=v3336[1] }
    iopl0   = { defs={} expr=v3337[1] }
    iopl1   = { defs={} expr=v3338[1] }
    nt      = { defs={} expr=v3339[1] }
    ?15     = { defs={} expr=v3340[1] }
    rf      = { defs={} expr=v3341[1] }
    vm      = { defs={} expr=v3342[1] }
    ac      = { defs={} expr=v3343[1] }
    vif     = { defs={} expr=v3344[1] }
    vip     = { defs={} expr=v3345[1] }
    id      = { defs={} expr=v3346[1] }
    ?22     = { defs={} expr=v3347[1] }
    ?23     = { defs={} expr=v3348[1] }
    ?24     = { defs={} expr=v3349[1] }
    ?25     = { defs={} expr=v3350[1] }
    ?26     = { defs={} expr=v3351[1] }
    ?27     = { defs={} expr=v3352[1] }
    ?28     = { defs={} expr=v3353[1] }
    ?29     = { defs={} expr=v3354[1] }
    ?30     = { defs={} expr=v3355[1] }
    ?31     = { defs={} expr=v3356[1] }
    ip      = { defs={0x080483ef} expr=0[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3315[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3315[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3315[32] -4[32]) 1[32]) }
      value = { defs={} expr=-125[8] }
      flags = { }
    address = { defs={0x080483ef} expr=(add[32] v3315[32] -4[32]) }
      value = { defs={} expr=-12[8] }
      flags = { }
    address = { defs={} expr=(add[32] v3315[32] 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] v3315[32] 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] v3315[32] 1[32]) }
      value = { defs={} expr=-107[8] }
      flags = { }
    address = { defs={} expr=v3315[32] }
      value = { defs={} expr=-8[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
registers:
    ax      = { v34698 }
    cx      = { v34699 }
    dx      = { v34700 }
    bx      = { v34701 }
    sp      = { v34702 }
    bp      = { v34703 }
    si      = { v34704 }
    di      = { v34705 }
    es      = { v34706 }
    cs      = { v34707 }
    ss      = { v34708 }
    ds      = { v34709 }
    fs      = { v34710 }
    gs      = { v34711 }
    cf      = { v34712 }
    ?1      = { v34713 }
    pf      = { v34714 }
    ?3      = { v34715 }
    af      = { v34716 }
    ?5      = { v34717 }
    zf      = { v34718 }
    sf      = { v34719 }
    tf      = { v34720 }
    if      = { v34721 }
    df      = { v34722 }
    of      = { v34723 }
    iopl0   = { v34724 }
    iopl1   = { v34725 }
    nt      = { v34726 }
    ?15     = { v34727 }
    rf      = { v34728 }
    vm      = { v34729 }
    ac      = { v34730 }
    vif     = { v34731 }
    vip     = { v34732 }
    id      = { v34733 }
    ?22     = { v34734 }
    ?23     = { v34735 }
    ?24     = { v34736 }
    ?25     = { v34737 }
    ?26     = { v34738 }
    ?27     = { v34739 }
    ?28     = { v34740 }
    ?29     = { v34741 }
    ?30     = { v34742 }
    ?31     = { v34743 }
    ip      = { 0x80483fa }
memory:
registers:
    ax      = { defs={} expr=v3423[32] }
    cx      = { defs={} expr=v3424[32] }
    dx      = { defs={} expr=v3425[32] }
    bx      = { defs={} expr=v3426[32] }
    sp      = { defs={} expr=v3427[32] }
    bp      = { defs={} expr=v3428[32] }
    si      = { defs={0x080483f4} expr=v3429[32] }
    di      = { defs={} expr=v3430[32] }
    es      = { defs={} expr=v3431[16] }
    cs      = { defs={} expr=v3432[16] }
    ss      = { defs={} expr=v3433[16] }
    ds      = { defs={} expr=v3434[16] }
    fs      = { defs={} expr=v3435[16] }
    gs      = { defs={} expr=v3436[16] }
    cf      = { defs={} expr=v3437[1] }
    ?1      = { defs={} expr=v3438[1] }
    pf      = { defs={} expr=v3439[1] }
    ?3      = { defs={} expr=v3440[1] }
    af      = { defs={} expr=v3441[1] }
    ?5      = { defs={} expr=v3442[1] }
    zf      = { defs={} expr=v3443[1] }
    sf      = { defs={} expr=v3444[1] }
    tf      = { defs={} expr=v3445[1] }
    if      = { defs={} expr=v3446[1] }
    df      = { defs={} expr=v3447[1] }
    of      = { defs={} expr=v3448[1] }
    iopl0   = { defs={} expr=v3449[1] }
    iopl1   = { defs={} expr=v3450[1] }
    nt      = { defs={} expr=v3451[1] }
    ?15     = { defs={} expr=v3452[1] }
    rf      = { defs={} expr=v3453[1] }
    vm      = { defs={} expr=v3454[1] }
    ac      = { defs={} expr=v3455[1] }
    vif     = { defs={} expr=v3456[1] }
    vip     = { defs={} expr=v3457[1] }
    id      = { defs={} expr=v3458[1] }
    ?22     = { defs={} expr=v3459[1] }
    ?23     = { defs={} expr=v3460[1] }
    ?24     = { defs={} expr=v3461[1] }
    ?25     = { defs={} expr=v3462[1] }
    ?26     = { defs={} expr=v3463[1] }
    ?27     = { defs={} expr=v3464[1] }
    ?28     = { defs={} expr=v3465[1] }
    ?29     = { defs={} expr=v3466[1] }
    ?30     = { defs={} expr=v3467[1] }
    ?31     = { defs={} expr=v3468[1] }
    ip      = { defs={0x080483f4} expr=0x080483fa[32] }
memory:
init mem:
null state
null state
0x80483fa:lea    edi, [edi + 0x00000000]
registers:
    ax      = { v34698 }
    cx      = { v34699 }
    dx      = { v34700 }
    bx      = { v34701 }
    sp      = { v34702 }
    bp      = { v34703 }
    si      = { v34704 }
    di      = { v34705 }
    es      = { v34706 }
    cs      = { v34707 }
    ss      = { v34708 }
    ds      = { v34709 }
    fs      = { v34710 }
    gs      = { v34711 }
    cf      = { v34712 }
    ?1      = { v34713 }
    pf      = { v34714 }
    ?3      = { v34715 }
    af      = { v34716 }
    ?5      = { v34717 }
    zf      = { v34718 }
    sf      = { v34719 }
    tf      = { v34720 }
    if      = { v34721 }
    df      = { v34722 }
    of      = { v34723 }
    iopl0   = { v34724 }
    iopl1   = { v34725 }
    nt      = { v34726 }
    ?15     = { v34727 }
    rf      = { v34728 }
    vm      = { v34729 }
    ac      = { v34730 }
    vif     = { v34731 }
    vip     = { v34732 }
    id      = { v34733 }
    ?22     = { v34734 }
    ?23     = { v34735 }
    ?24     = { v34736 }
    ?25     = { v34737 }
    ?26     = { v34738 }
    ?27     = { v34739 }
    ?28     = { v34740 }
    ?29     = { v34741 }
    ?30     = { v34742 }
    ?31     = { v34743 }
    ip      = { 0x8048400 }
memory:
registers:
    ax      = { defs={} expr=v3423[32] }
    cx      = { defs={} expr=v3424[32] }
    dx      = { defs={} expr=v3425[32] }
    bx      = { defs={} expr=v3426[32] }
    sp      = { defs={} expr=v3427[32] }
    bp      = { defs={} expr=v3428[32] }
    si      = { defs={0x080483f4} expr=v3429[32] }
    di      = { defs={0x080483fa} expr=v3430[32] }
    es      = { defs={} expr=v3431[16] }
    cs      = { defs={} expr=v3432[16] }
    ss      = { defs={} expr=v3433[16] }
    ds      = { defs={} expr=v3434[16] }
    fs      = { defs={} expr=v3435[16] }
    gs      = { defs={} expr=v3436[16] }
    cf      = { defs={} expr=v3437[1] }
    ?1      = { defs={} expr=v3438[1] }
    pf      = { defs={} expr=v3439[1] }
    ?3      = { defs={} expr=v3440[1] }
    af      = { defs={} expr=v3441[1] }
    ?5      = { defs={} expr=v3442[1] }
    zf      = { defs={} expr=v3443[1] }
    sf      = { defs={} expr=v3444[1] }
    tf      = { defs={} expr=v3445[1] }
    if      = { defs={} expr=v3446[1] }
    df      = { defs={} expr=v3447[1] }
    of      = { defs={} expr=v3448[1] }
    iopl0   = { defs={} expr=v3449[1] }
    iopl1   = { defs={} expr=v3450[1] }
    nt      = { defs={} expr=v3451[1] }
    ?15     = { defs={} expr=v3452[1] }
    rf      = { defs={} expr=v3453[1] }
    vm      = { defs={} expr=v3454[1] }
    ac      = { defs={} expr=v3455[1] }
    vif     = { defs={} expr=v3456[1] }
    vip     = { defs={} expr=v3457[1] }
    id      = { defs={} expr=v3458[1] }
    ?22     = { defs={} expr=v3459[1] }
    ?23     = { defs={} expr=v3460[1] }
    ?24     = { defs={} expr=v3461[1] }
    ?25     = { defs={} expr=v3462[1] }
    ?26     = { defs={} expr=v3463[1] }
    ?27     = { defs={} expr=v3464[1] }
    ?28     = { defs={} expr=v3465[1] }
    ?29     = { defs={} expr=v3466[1] }
    ?30     = { defs={} expr=v3467[1] }
    ?31     = { defs={} expr=v3468[1] }
    ip      = { defs={0x080483f4,0x080483fa} expr=0x08048400[32] }
memory:
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048410:push   ebp
registers:
    ax      = { v34807 }
    cx      = { v34808 }
    dx      = { v34809 }
    bx      = { v34810 }
    sp      = { v34811-0x4 }
    bp      = { v34812 }
    si      = { v34813 }
    di      = { v34814 }
    es      = { v34815 }
    cs      = { v34816 }
    ss      = { v34817 }
    ds      = { v34818 }
    fs      = { v34819 }
    gs      = { v34820 }
    cf      = { v34821 }
    ?1      = { v34822 }
    pf      = { v34823 }
    ?3      = { v34824 }
    af      = { v34825 }
    ?5      = { v34826 }
    zf      = { v34827 }
    sf      = { v34828 }
    tf      = { v34829 }
    if      = { v34830 }
    df      = { v34831 }
    of      = { v34832 }
    iopl0   = { v34833 }
    iopl1   = { v34834 }
    nt      = { v34835 }
    ?15     = { v34836 }
    rf      = { v34837 }
    vm      = { v34838 }
    ac      = { v34839 }
    vif     = { v34840 }
    vip     = { v34841 }
    id      = { v34842 }
    ?22     = { v34843 }
    ?23     = { v34844 }
    ?24     = { v34845 }
    ?25     = { v34846 }
    ?26     = { v34847 }
    ?27     = { v34848 }
    ?28     = { v34849 }
    ?29     = { v34850 }
    ?30     = { v34851 }
    ?31     = { v34852 }
    ip      = { 0x8048411 }
memory:
    address = { v34811-0x4 }
      value = { v34812 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3532[32] }
    cx      = { defs={} expr=v3533[32] }
    dx      = { defs={} expr=v3534[32] }
    bx      = { defs={} expr=v3535[32] }
    sp      = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
    bp      = { defs={} expr=v3537[32] }
    si      = { defs={} expr=v3538[32] }
    di      = { defs={} expr=v3539[32] }
    es      = { defs={} expr=v3540[16] }
    cs      = { defs={} expr=v3541[16] }
    ss      = { defs={} expr=v3542[16] }
    ds      = { defs={} expr=v3543[16] }
    fs      = { defs={} expr=v3544[16] }
    gs      = { defs={} expr=v3545[16] }
    cf      = { defs={} expr=v3546[1] }
    ?1      = { defs={} expr=v3547[1] }
    pf      = { defs={} expr=v3548[1] }
    ?3      = { defs={} expr=v3549[1] }
    af      = { defs={} expr=v3550[1] }
    ?5      = { defs={} expr=v3551[1] }
    zf      = { defs={} expr=v3552[1] }
    sf      = { defs={} expr=v3553[1] }
    tf      = { defs={} expr=v3554[1] }
    if      = { defs={} expr=v3555[1] }
    df      = { defs={} expr=v3556[1] }
    of      = { defs={} expr=v3557[1] }
    iopl0   = { defs={} expr=v3558[1] }
    iopl1   = { defs={} expr=v3559[1] }
    nt      = { defs={} expr=v3560[1] }
    ?15     = { defs={} expr=v3561[1] }
    rf      = { defs={} expr=v3562[1] }
    vm      = { defs={} expr=v3563[1] }
    ac      = { defs={} expr=v3564[1] }
    vif     = { defs={} expr=v3565[1] }
    vip     = { defs={} expr=v3566[1] }
    id      = { defs={} expr=v3567[1] }
    ?22     = { defs={} expr=v3568[1] }
    ?23     = { defs={} expr=v3569[1] }
    ?24     = { defs={} expr=v3570[1] }
    ?25     = { defs={} expr=v3571[1] }
    ?26     = { defs={} expr=v3572[1] }
    ?27     = { defs={} expr=v3573[1] }
    ?28     = { defs={} expr=v3574[1] }
    ?29     = { defs={} expr=v3575[1] }
    ?30     = { defs={} expr=v3576[1] }
    ?31     = { defs={} expr=v3577[1] }
    ip      = { defs={0x08048410} expr=0x08048411[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3537[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3537[32]) }
      flags = { }
init mem:
null state
null state
0x8048411:mov    edx, 0x08048480<handler>
registers:
    ax      = { v34807 }
    cx      = { v34808 }
    dx      = { 0x8048480 }
    bx      = { v34810 }
    sp      = { v34811-0x4 }
    bp      = { v34812 }
    si      = { v34813 }
    di      = { v34814 }
    es      = { v34815 }
    cs      = { v34816 }
    ss      = { v34817 }
    ds      = { v34818 }
    fs      = { v34819 }
    gs      = { v34820 }
    cf      = { v34821 }
    ?1      = { v34822 }
    pf      = { v34823 }
    ?3      = { v34824 }
    af      = { v34825 }
    ?5      = { v34826 }
    zf      = { v34827 }
    sf      = { v34828 }
    tf      = { v34829 }
    if      = { v34830 }
    df      = { v34831 }
    of      = { v34832 }
    iopl0   = { v34833 }
    iopl1   = { v34834 }
    nt      = { v34835 }
    ?15     = { v34836 }
    rf      = { v34837 }
    vm      = { v34838 }
    ac      = { v34839 }
    vif     = { v34840 }
    vip     = { v34841 }
    id      = { v34842 }
    ?22     = { v34843 }
    ?23     = { v34844 }
    ?24     = { v34845 }
    ?25     = { v34846 }
    ?26     = { v34847 }
    ?27     = { v34848 }
    ?28     = { v34849 }
    ?29     = { v34850 }
    ?30     = { v34851 }
    ?31     = { v34852 }
    ip      = { 0x8048416 }
memory:
    address = { v34811-0x4 }
      value = { v34812 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3532[32] }
    cx      = { defs={} expr=v3533[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v3535[32] }
    sp      = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
    bp      = { defs={} expr=v3537[32] }
    si      = { defs={} expr=v3538[32] }
    di      = { defs={} expr=v3539[32] }
    es      = { defs={} expr=v3540[16] }
    cs      = { defs={} expr=v3541[16] }
    ss      = { defs={} expr=v3542[16] }
    ds      = { defs={} expr=v3543[16] }
    fs      = { defs={} expr=v3544[16] }
    gs      = { defs={} expr=v3545[16] }
    cf      = { defs={} expr=v3546[1] }
    ?1      = { defs={} expr=v3547[1] }
    pf      = { defs={} expr=v3548[1] }
    ?3      = { defs={} expr=v3549[1] }
    af      = { defs={} expr=v3550[1] }
    ?5      = { defs={} expr=v3551[1] }
    zf      = { defs={} expr=v3552[1] }
    sf      = { defs={} expr=v3553[1] }
    tf      = { defs={} expr=v3554[1] }
    if      = { defs={} expr=v3555[1] }
    df      = { defs={} expr=v3556[1] }
    of      = { defs={} expr=v3557[1] }
    iopl0   = { defs={} expr=v3558[1] }
    iopl1   = { defs={} expr=v3559[1] }
    nt      = { defs={} expr=v3560[1] }
    ?15     = { defs={} expr=v3561[1] }
    rf      = { defs={} expr=v3562[1] }
    vm      = { defs={} expr=v3563[1] }
    ac      = { defs={} expr=v3564[1] }
    vif     = { defs={} expr=v3565[1] }
    vip     = { defs={} expr=v3566[1] }
    id      = { defs={} expr=v3567[1] }
    ?22     = { defs={} expr=v3568[1] }
    ?23     = { defs={} expr=v3569[1] }
    ?24     = { defs={} expr=v3570[1] }
    ?25     = { defs={} expr=v3571[1] }
    ?26     = { defs={} expr=v3572[1] }
    ?27     = { defs={} expr=v3573[1] }
    ?28     = { defs={} expr=v3574[1] }
    ?29     = { defs={} expr=v3575[1] }
    ?30     = { defs={} expr=v3576[1] }
    ?31     = { defs={} expr=v3577[1] }
    ip      = { defs={0x08048410,0x08048411} expr=0x08048416[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3537[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3537[32]) }
      flags = { }
init mem:
null state
null state
0x8048416:mov    ebp, esp
registers:
    ax      = { v34807 }
    cx      = { v34808 }
    dx      = { 0x8048480 }
    bx      = { v34810 }
    sp      = { v34811-0x4 }
    bp      = { v34811-0x4 }
    si      = { v34813 }
    di      = { v34814 }
    es      = { v34815 }
    cs      = { v34816 }
    ss      = { v34817 }
    ds      = { v34818 }
    fs      = { v34819 }
    gs      = { v34820 }
    cf      = { v34821 }
    ?1      = { v34822 }
    pf      = { v34823 }
    ?3      = { v34824 }
    af      = { v34825 }
    ?5      = { v34826 }
    zf      = { v34827 }
    sf      = { v34828 }
    tf      = { v34829 }
    if      = { v34830 }
    df      = { v34831 }
    of      = { v34832 }
    iopl0   = { v34833 }
    iopl1   = { v34834 }
    nt      = { v34835 }
    ?15     = { v34836 }
    rf      = { v34837 }
    vm      = { v34838 }
    ac      = { v34839 }
    vif     = { v34840 }
    vip     = { v34841 }
    id      = { v34842 }
    ?22     = { v34843 }
    ?23     = { v34844 }
    ?24     = { v34845 }
    ?25     = { v34846 }
    ?26     = { v34847 }
    ?27     = { v34848 }
    ?28     = { v34849 }
    ?29     = { v34850 }
    ?30     = { v34851 }
    ?31     = { v34852 }
    ip      = { 0x8048418 }
memory:
    address = { v34811-0x4 }
      value = { v34812 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3532[32] }
    cx      = { defs={} expr=v3533[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v3535[32] }
    sp      = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3536[32] -4[32]) }
    si      = { defs={} expr=v3538[32] }
    di      = { defs={} expr=v3539[32] }
    es      = { defs={} expr=v3540[16] }
    cs      = { defs={} expr=v3541[16] }
    ss      = { defs={} expr=v3542[16] }
    ds      = { defs={} expr=v3543[16] }
    fs      = { defs={} expr=v3544[16] }
    gs      = { defs={} expr=v3545[16] }
    cf      = { defs={} expr=v3546[1] }
    ?1      = { defs={} expr=v3547[1] }
    pf      = { defs={} expr=v3548[1] }
    ?3      = { defs={} expr=v3549[1] }
    af      = { defs={} expr=v3550[1] }
    ?5      = { defs={} expr=v3551[1] }
    zf      = { defs={} expr=v3552[1] }
    sf      = { defs={} expr=v3553[1] }
    tf      = { defs={} expr=v3554[1] }
    if      = { defs={} expr=v3555[1] }
    df      = { defs={} expr=v3556[1] }
    of      = { defs={} expr=v3557[1] }
    iopl0   = { defs={} expr=v3558[1] }
    iopl1   = { defs={} expr=v3559[1] }
    nt      = { defs={} expr=v3560[1] }
    ?15     = { defs={} expr=v3561[1] }
    rf      = { defs={} expr=v3562[1] }
    vm      = { defs={} expr=v3563[1] }
    ac      = { defs={} expr=v3564[1] }
    vif     = { defs={} expr=v3565[1] }
    vip     = { defs={} expr=v3566[1] }
    id      = { defs={} expr=v3567[1] }
    ?22     = { defs={} expr=v3568[1] }
    ?23     = { defs={} expr=v3569[1] }
    ?24     = { defs={} expr=v3570[1] }
    ?25     = { defs={} expr=v3571[1] }
    ?26     = { defs={} expr=v3572[1] }
    ?27     = { defs={} expr=v3573[1] }
    ?28     = { defs={} expr=v3574[1] }
    ?29     = { defs={} expr=v3575[1] }
    ?30     = { defs={} expr=v3576[1] }
    ?31     = { defs={} expr=v3577[1] }
    ip      = { defs={0x08048410,0x08048411,0x08048416} expr=0x08048418[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3537[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3537[32]) }
      flags = { }
init mem:
null state
null state
0x8048418:sub    esp, 0x08
registers:
    ax      = { v34807 }
    cx      = { v34808 }
    dx      = { 0x8048480 }
    bx      = { v34810 }
    sp      = { v34811-0xc }
    bp      = { v34811-0x4 }
    si      = { v34813 }
    di      = { v34814 }
    es      = { v34815 }
    cs      = { v34816 }
    ss      = { v34817 }
    ds      = { v34818 }
    fs      = { v34819 }
    gs      = { v34820 }
    cf      = { -v34923+0x1 }
    ?1      = { v34822 }
    pf      = { -v34913+0x1 }
    ?3      = { v34824 }
    af      = { -v34920+0x1 }
    ?5      = { v34826 }
    zf      = { v34918 }
    sf      = { v34916 }
    tf      = { v34829 }
    if      = { v34830 }
    df      = { v34831 }
    of      = { v34930 }
    iopl0   = { v34833 }
    iopl1   = { v34834 }
    nt      = { v34835 }
    ?15     = { v34836 }
    rf      = { v34837 }
    vm      = { v34838 }
    ac      = { v34839 }
    vif     = { v34840 }
    vip     = { v34841 }
    id      = { v34842 }
    ?22     = { v34843 }
    ?23     = { v34844 }
    ?24     = { v34845 }
    ?25     = { v34846 }
    ?26     = { v34847 }
    ?27     = { v34848 }
    ?28     = { v34849 }
    ?29     = { v34850 }
    ?30     = { v34851 }
    ?31     = { v34852 }
    ip      = { 0x804841b }
memory:
    address = { v34811-0x4 }
      value = { v34812 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3532[32] }
    cx      = { defs={} expr=v3533[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v3535[32] }
    sp      = { defs={0x08048410,0x08048418} expr=(add[32] (add[32] v3536[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3536[32] -4[32]) }
    si      = { defs={} expr=v3538[32] }
    di      = { defs={} expr=v3539[32] }
    es      = { defs={} expr=v3540[16] }
    cs      = { defs={} expr=v3541[16] }
    ss      = { defs={} expr=v3542[16] }
    ds      = { defs={} expr=v3543[16] }
    fs      = { defs={} expr=v3544[16] }
    gs      = { defs={} expr=v3545[16] }
    cf      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3536[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3536[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v3547[1] }
    pf      = { defs={0x08048410,0x08048418} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3536[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3536[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v3549[1] }
    af      = { defs={0x08048410,0x08048418} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3536[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3536[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v3551[1] }
    zf      = { defs={0x08048410,0x08048418} expr=(zerop[1] (add[32] (add[32] v3536[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048410,0x08048418} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3536[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v3554[1] }
    if      = { defs={} expr=v3555[1] }
    df      = { defs={} expr=v3556[1] }
    of      = { defs={0x08048410,0x08048418} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3536[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3536[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3536[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3536[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v3558[1] }
    iopl1   = { defs={} expr=v3559[1] }
    nt      = { defs={} expr=v3560[1] }
    ?15     = { defs={} expr=v3561[1] }
    rf      = { defs={} expr=v3562[1] }
    vm      = { defs={} expr=v3563[1] }
    ac      = { defs={} expr=v3564[1] }
    vif     = { defs={} expr=v3565[1] }
    vip     = { defs={} expr=v3566[1] }
    id      = { defs={} expr=v3567[1] }
    ?22     = { defs={} expr=v3568[1] }
    ?23     = { defs={} expr=v3569[1] }
    ?24     = { defs={} expr=v3570[1] }
    ?25     = { defs={} expr=v3571[1] }
    ?26     = { defs={} expr=v3572[1] }
    ?27     = { defs={} expr=v3573[1] }
    ?28     = { defs={} expr=v3574[1] }
    ?29     = { defs={} expr=v3575[1] }
    ?30     = { defs={} expr=v3576[1] }
    ?31     = { defs={} expr=v3577[1] }
    ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418} expr=0x0804841b[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3537[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3537[32]) }
      flags = { }
init mem:
null state
null state
0x804841b:and    esp, 0xf0<-0x10>
registers:
    ax      = { v34807 }
    cx      = { v34808 }
    dx      = { 0x8048480 }
    bx      = { v34810 }
    sp      = { v34938 }
    bp      = { v34811-0x4 }
    si      = { v34813 }
    di      = { v34814 }
    es      = { v34815 }
    cs      = { v34816 }
    ss      = { v34817 }
    ds      = { v34818 }
    fs      = { v34819 }
    gs      = { v34820 }
    cf      = { 0x0 }
    ?1      = { v34822 }
    pf      = { -v34968+0x1 }
    ?3      = { v34824 }
    af      = { v34976 }
    ?5      = { v34826 }
    zf      = { v34973 }
    sf      = { v34971 }
    tf      = { v34829 }
    if      = { v34830 }
    df      = { v34831 }
    of      = { 0x0 }
    iopl0   = { v34833 }
    iopl1   = { v34834 }
    nt      = { v34835 }
    ?15     = { v34836 }
    rf      = { v34837 }
    vm      = { v34838 }
    ac      = { v34839 }
    vif     = { v34840 }
    vip     = { v34841 }
    id      = { v34842 }
    ?22     = { v34843 }
    ?23     = { v34844 }
    ?24     = { v34845 }
    ?25     = { v34846 }
    ?26     = { v34847 }
    ?27     = { v34848 }
    ?28     = { v34849 }
    ?29     = { v34850 }
    ?30     = { v34851 }
    ?31     = { v34852 }
    ip      = { 0x804841e }
memory:
    address = { v34811-0x4 }
      value = { v34812 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3532[32] }
    cx      = { defs={} expr=v3533[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v3535[32] }
    sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3536[32] -4[32]) }
    si      = { defs={} expr=v3538[32] }
    di      = { defs={} expr=v3539[32] }
    es      = { defs={} expr=v3540[16] }
    cs      = { defs={} expr=v3541[16] }
    ss      = { defs={} expr=v3542[16] }
    ds      = { defs={} expr=v3543[16] }
    fs      = { defs={} expr=v3544[16] }
    gs      = { defs={} expr=v3545[16] }
    cf      = { defs={0x0804841b} expr=0[1] }
    ?1      = { defs={} expr=v3547[1] }
    pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v3549[1] }
    af      = { defs={0x0804841b} expr=v3662[1] }
    ?5      = { defs={} expr=v3551[1] }
    zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])) }
    sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])) }
    tf      = { defs={} expr=v3554[1] }
    if      = { defs={} expr=v3555[1] }
    df      = { defs={} expr=v3556[1] }
    of      = { defs={0x0804841b} expr=0[1] }
    iopl0   = { defs={} expr=v3558[1] }
    iopl1   = { defs={} expr=v3559[1] }
    nt      = { defs={} expr=v3560[1] }
    ?15     = { defs={} expr=v3561[1] }
    rf      = { defs={} expr=v3562[1] }
    vm      = { defs={} expr=v3563[1] }
    ac      = { defs={} expr=v3564[1] }
    vif     = { defs={} expr=v3565[1] }
    vip     = { defs={} expr=v3566[1] }
    id      = { defs={} expr=v3567[1] }
    ?22     = { defs={} expr=v3568[1] }
    ?23     = { defs={} expr=v3569[1] }
    ?24     = { defs={} expr=v3570[1] }
    ?25     = { defs={} expr=v3571[1] }
    ?26     = { defs={} expr=v3572[1] }
    ?27     = { defs={} expr=v3573[1] }
    ?28     = { defs={} expr=v3574[1] }
    ?29     = { defs={} expr=v3575[1] }
    ?30     = { defs={} expr=v3576[1] }
    ?31     = { defs={} expr=v3577[1] }
    ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b} expr=0x0804841e[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3537[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3537[32]) }
      flags = { }
init mem:
null state
null state
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
registers:
    ax      = { v34807 }
    cx      = { v34808 }
    dx      = { 0x8048480 }
    bx      = { v34810 }
    sp      = { v34938 }
    bp      = { v34811-0x4 }
    si      = { v34813 }
    di      = { v34814 }
    es      = { v34815 }
    cs      = { v34816 }
    ss      = { v34817 }
    ds      = { v34818 }
    fs      = { v34819 }
    gs      = { v34820 }
    cf      = { 0x0 }
    ?1      = { v34822 }
    pf      = { -v34968+0x1 }
    ?3      = { v34824 }
    af      = { v34976 }
    ?5      = { v34826 }
    zf      = { v34973 }
    sf      = { v34971 }
    tf      = { v34829 }
    if      = { v34830 }
    df      = { v34831 }
    of      = { 0x0 }
    iopl0   = { v34833 }
    iopl1   = { v34834 }
    nt      = { v34835 }
    ?15     = { v34836 }
    rf      = { v34837 }
    vm      = { v34838 }
    ac      = { v34839 }
    vif     = { v34840 }
    vip     = { v34841 }
    id      = { v34842 }
    ?22     = { v34843 }
    ?23     = { v34844 }
    ?24     = { v34845 }
    ?25     = { v34846 }
    ?26     = { v34847 }
    ?27     = { v34848 }
    ?28     = { v34849 }
    ?29     = { v34850 }
    ?30     = { v34851 }
    ?31     = { v34852 }
    ip      = { 0x8048422 }
memory:
    address = { v34811-0x4 }
      value = { v34812 }
      flags = { size=4; clobbered }
    address = { v34938+0x4 }
      value = { 0x8048480 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3532[32] }
    cx      = { defs={} expr=v3533[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v3535[32] }
    sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3536[32] -4[32]) }
    si      = { defs={} expr=v3538[32] }
    di      = { defs={} expr=v3539[32] }
    es      = { defs={} expr=v3540[16] }
    cs      = { defs={} expr=v3541[16] }
    ss      = { defs={} expr=v3542[16] }
    ds      = { defs={} expr=v3543[16] }
    fs      = { defs={} expr=v3544[16] }
    gs      = { defs={} expr=v3545[16] }
    cf      = { defs={0x0804841b} expr=0[1] }
    ?1      = { defs={} expr=v3547[1] }
    pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v3549[1] }
    af      = { defs={0x0804841b} expr=v3662[1] }
    ?5      = { defs={} expr=v3551[1] }
    zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])) }
    sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])) }
    tf      = { defs={} expr=v3554[1] }
    if      = { defs={} expr=v3555[1] }
    df      = { defs={} expr=v3556[1] }
    of      = { defs={0x0804841b} expr=0[1] }
    iopl0   = { defs={} expr=v3558[1] }
    iopl1   = { defs={} expr=v3559[1] }
    nt      = { defs={} expr=v3560[1] }
    ?15     = { defs={} expr=v3561[1] }
    rf      = { defs={} expr=v3562[1] }
    vm      = { defs={} expr=v3563[1] }
    ac      = { defs={} expr=v3564[1] }
    vif     = { defs={} expr=v3565[1] }
    vip     = { defs={} expr=v3566[1] }
    id      = { defs={} expr=v3567[1] }
    ?22     = { defs={} expr=v3568[1] }
    ?23     = { defs={} expr=v3569[1] }
    ?24     = { defs={} expr=v3570[1] }
    ?25     = { defs={} expr=v3571[1] }
    ?26     = { defs={} expr=v3572[1] }
    ?27     = { defs={} expr=v3573[1] }
    ?28     = { defs={} expr=v3574[1] }
    ?29     = { defs={} expr=v3575[1] }
    ?30     = { defs={} expr=v3576[1] }
    ?31     = { defs={} expr=v3577[1] }
    ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e} expr=0x08048422[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) }
      value = { defs={} expr=-128[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3537[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3537[32]) }
      flags = { }
init mem:
null state
null state
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
registers:
    ax      = { v34807 }
    cx      = { v34808 }
    dx      = { 0x8048480 }
    bx      = { v34810 }
    sp      = { v34938 }
    bp      = { v34811-0x4 }
    si      = { v34813 }
    di      = { v34814 }
    es      = { v34815 }
    cs      = { v34816 }
    ss      = { v34817 }
    ds      = { v34818 }
    fs      = { v34819 }
    gs      = { v34820 }
    cf      = { 0x0 }
    ?1      = { v34822 }
    pf      = { -v34968+0x1 }
    ?3      = { v34824 }
    af      = { v34976 }
    ?5      = { v34826 }
    zf      = { v34973 }
    sf      = { v34971 }
    tf      = { v34829 }
    if      = { v34830 }
    df      = { v34831 }
    of      = { 0x0 }
    iopl0   = { v34833 }
    iopl1   = { v34834 }
    nt      = { v34835 }
    ?15     = { v34836 }
    rf      = { v34837 }
    vm      = { v34838 }
    ac      = { v34839 }
    vif     = { v34840 }
    vip     = { v34841 }
    id      = { v34842 }
    ?22     = { v34843 }
    ?23     = { v34844 }
    ?24     = { v34845 }
    ?25     = { v34846 }
    ?26     = { v34847 }
    ?27     = { v34848 }
    ?28     = { v34849 }
    ?29     = { v34850 }
    ?30     = { v34851 }
    ?31     = { v34852 }
    ip      = { 0x8048429 }
memory:
    address = { v34811-0x4 }
      value = { v34812 }
      flags = { size=4; clobbered }
    address = { v34938+0x4 }
      value = { 0x8048480 }
      flags = { size=4 }
    address = { v34938 }
      value = { 0xa }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3532[32] }
    cx      = { defs={} expr=v3533[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v3535[32] }
    sp      = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3536[32] -4[32]) }
    si      = { defs={} expr=v3538[32] }
    di      = { defs={} expr=v3539[32] }
    es      = { defs={} expr=v3540[16] }
    cs      = { defs={} expr=v3541[16] }
    ss      = { defs={} expr=v3542[16] }
    ds      = { defs={} expr=v3543[16] }
    fs      = { defs={} expr=v3544[16] }
    gs      = { defs={} expr=v3545[16] }
    cf      = { defs={0x0804841b} expr=0[1] }
    ?1      = { defs={} expr=v3547[1] }
    pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v3549[1] }
    af      = { defs={0x0804841b} expr=v3662[1] }
    ?5      = { defs={} expr=v3551[1] }
    zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])) }
    sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])) }
    tf      = { defs={} expr=v3554[1] }
    if      = { defs={} expr=v3555[1] }
    df      = { defs={} expr=v3556[1] }
    of      = { defs={0x0804841b} expr=0[1] }
    iopl0   = { defs={} expr=v3558[1] }
    iopl1   = { defs={} expr=v3559[1] }
    nt      = { defs={} expr=v3560[1] }
    ?15     = { defs={} expr=v3561[1] }
    rf      = { defs={} expr=v3562[1] }
    vm      = { defs={} expr=v3563[1] }
    ac      = { defs={} expr=v3564[1] }
    vif     = { defs={} expr=v3565[1] }
    vip     = { defs={} expr=v3566[1] }
    id      = { defs={} expr=v3567[1] }
    ?22     = { defs={} expr=v3568[1] }
    ?23     = { defs={} expr=v3569[1] }
    ?24     = { defs={} expr=v3570[1] }
    ?25     = { defs={} expr=v3571[1] }
    ?26     = { defs={} expr=v3572[1] }
    ?27     = { defs={} expr=v3573[1] }
    ?28     = { defs={} expr=v3574[1] }
    ?29     = { defs={} expr=v3575[1] }
    ?30     = { defs={} expr=v3576[1] }
    ?31     = { defs={} expr=v3577[1] }
    ip      = { defs={0x08048410,0x08048411,0x08048416,0x08048418,0x0804841b,0x0804841e,0x08048422} expr=0x08048429[32] }
memory:
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) }
      value = { defs={} expr=10[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) }
      value = { defs={} expr=-128[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3537[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3537[32]) }
      flags = { }
init mem:
null state
null state
0x8048429:call   0x080482f0<signal@plt>
registers:
    ax      = { v34807 }
    cx      = { v34808 }
    dx      = { 0x8048480 }
    bx      = { v34810 }
    sp      = { v34938-0x4 }
    bp      = { v34811-0x4 }
    si      = { v34813 }
    di      = { v34814 }
    es      = { v34815 }
    cs      = { v34816 }
    ss      = { v34817 }
    ds      = { v34818 }
    fs      = { v34819 }
    gs      = { v34820 }
    cf      = { 0x0 }
    ?1      = { v34822 }
    pf      = { -v34968+0x1 }
    ?3      = { v34824 }
    af      = { v34976 }
    ?5      = { v34826 }
    zf      = { v34973 }
    sf      = { v34971 }
    tf      = { v34829 }
    if      = { v34830 }
    df      = { v34831 }
    of      = { 0x0 }
    iopl0   = { v34833 }
    iopl1   = { v34834 }
    nt      = { v34835 }
    ?15     = { v34836 }
    rf      = { v34837 }
    vm      = { v34838 }
    ac      = { v34839 }
    vif     = { v34840 }
    vip     = { v34841 }
    id      = { v34842 }
    ?22     = { v34843 }
    ?23     = { v34844 }
    ?24     = { v34845 }
    ?25     = { v34846 }
    ?26     = { v34847 }
    ?27     = { v34848 }
    ?28     = { v34849 }
    ?29     = { v34850 }
    ?30     = { v34851 }
    ?31     = { v34852 }
    ip      = { 0x80482f0 }
memory:
    address = { v34811-0x4 }
      value = { v34812 }
      flags = { size=4; clobbered }
    address = { v34938+0x4 }
      value = { 0x8048480 }
      flags = { size=4 }
    address = { v34938 }
      value = { 0xa }
      flags = { size=4 }
    address = { v34938-0x4 }
      value = { 0x804842e }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3532[32] }
    cx      = { defs={} expr=v3533[32] }
    dx      = { defs={0x08048411} expr=0x08048480[32] }
    bx      = { defs={} expr=v3535[32] }
    sp      = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) -4[32]) }
    bp      = { defs={0x08048410,0x08048416} expr=(add[32] v3536[32] -4[32]) }
    si      = { defs={} expr=v3538[32] }
    di      = { defs={} expr=v3539[32] }
    es      = { defs={} expr=v3540[16] }
    cs      = { defs={} expr=v3541[16] }
    ss      = { defs={} expr=v3542[16] }
    ds      = { defs={} expr=v3543[16] }
    fs      = { defs={} expr=v3544[16] }
    gs      = { defs={} expr=v3545[16] }
    cf      = { defs={0x0804841b} expr=0[1] }
    ?1      = { defs={} expr=v3547[1] }
    pf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]))))))) }
    ?3      = { defs={} expr=v3549[1] }
    af      = { defs={0x0804841b} expr=v3662[1] }
    ?5      = { defs={} expr=v3551[1] }
    zf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(zerop[1] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])) }
    sf      = { defs={0x08048410,0x08048418,0x0804841b} expr=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32])) }
    tf      = { defs={} expr=v3554[1] }
    if      = { defs={} expr=v3555[1] }
    df      = { defs={} expr=v3556[1] }
    of      = { defs={0x0804841b} expr=0[1] }
    iopl0   = { defs={} expr=v3558[1] }
    iopl1   = { defs={} expr=v3559[1] }
    nt      = { defs={} expr=v3560[1] }
    ?15     = { defs={} expr=v3561[1] }
    rf      = { defs={} expr=v3562[1] }
    vm      = { defs={} expr=v3563[1] }
    ac      = { defs={} expr=v3564[1] }
    vif     = { defs={} expr=v3565[1] }
    vip     = { defs={} expr=v3566[1] }
    id      = { defs={} expr=v3567[1] }
    ?22     = { defs={} expr=v3568[1] }
    ?23     = { defs={} expr=v3569[1] }
    ?24     = { defs={} expr=v3570[1] }
    ?25     = { defs={} expr=v3571[1] }
    ?26     = { defs={} expr=v3572[1] }
    ?27     = { defs={} expr=v3573[1] }
    ?28     = { defs={} expr=v3574[1] }
    ?29     = { defs={} expr=v3575[1] }
    ?30     = { defs={} expr=v3576[1] }
    ?31     = { defs={} expr=v3577[1] }
    ip      = { defs={0x08048429} expr=0x080482f0[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b,0x08048429} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) -4[32]) }
      value = { defs={} expr=46[8] }
      flags = { }
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b} expr=(bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) }
      value = { defs={} expr=10[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048410,0x08048418,0x0804841b,0x0804841e} expr=(add[32] (bv-and[32] (add[32] (add[32] v3536[32] -4[32]) -8[32]) -16[32]) 4[32]) }
      value = { defs={} expr=-128[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3537[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3536[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3537[32]) }
      flags = { }
    address = { defs={0x08048410} expr=(add[32] v3536[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3537[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
registers:
    ax      = { v35053 }
    cx      = { v35054 }
    dx      = { v35055 }
    bx      = { v35056 }
    sp      = { v35058 }
    bp      = { v35058 }
    si      = { v35059 }
    di      = { v35060 }
    es      = { v35061 }
    cs      = { v35062 }
    ss      = { v35063 }
    ds      = { v35064 }
    fs      = { v35065 }
    gs      = { v35066 }
    cf      = { v35067 }
    ?1      = { v35068 }
    pf      = { v35069 }
    ?3      = { v35070 }
    af      = { v35071 }
    ?5      = { v35072 }
    zf      = { v35073 }
    sf      = { v35074 }
    tf      = { v35075 }
    if      = { v35076 }
    df      = { v35077 }
    of      = { v35078 }
    iopl0   = { v35079 }
    iopl1   = { v35080 }
    nt      = { v35081 }
    ?15     = { v35082 }
    rf      = { v35083 }
    vm      = { v35084 }
    ac      = { v35085 }
    vif     = { v35086 }
    vip     = { v35087 }
    id      = { v35088 }
    ?22     = { v35089 }
    ?23     = { v35090 }
    ?24     = { v35091 }
    ?25     = { v35092 }
    ?26     = { v35093 }
    ?27     = { v35094 }
    ?28     = { v35095 }
    ?29     = { v35096 }
    ?30     = { v35097 }
    ?31     = { v35098 }
    ip      = { 0x8048430 }
memory:
registers:
    ax      = { defs={} expr=v3739[32] }
    cx      = { defs={} expr=v3740[32] }
    dx      = { defs={} expr=v3741[32] }
    bx      = { defs={} expr=v3742[32] }
    sp      = { defs={0x0804842e} expr=v3744[32] }
    bp      = { defs={} expr=v3744[32] }
    si      = { defs={} expr=v3745[32] }
    di      = { defs={} expr=v3746[32] }
    es      = { defs={} expr=v3747[16] }
    cs      = { defs={} expr=v3748[16] }
    ss      = { defs={} expr=v3749[16] }
    ds      = { defs={} expr=v3750[16] }
    fs      = { defs={} expr=v3751[16] }
    gs      = { defs={} expr=v3752[16] }
    cf      = { defs={} expr=v3753[1] }
    ?1      = { defs={} expr=v3754[1] }
    pf      = { defs={} expr=v3755[1] }
    ?3      = { defs={} expr=v3756[1] }
    af      = { defs={} expr=v3757[1] }
    ?5      = { defs={} expr=v3758[1] }
    zf      = { defs={} expr=v3759[1] }
    sf      = { defs={} expr=v3760[1] }
    tf      = { defs={} expr=v3761[1] }
    if      = { defs={} expr=v3762[1] }
    df      = { defs={} expr=v3763[1] }
    of      = { defs={} expr=v3764[1] }
    iopl0   = { defs={} expr=v3765[1] }
    iopl1   = { defs={} expr=v3766[1] }
    nt      = { defs={} expr=v3767[1] }
    ?15     = { defs={} expr=v3768[1] }
    rf      = { defs={} expr=v3769[1] }
    vm      = { defs={} expr=v3770[1] }
    ac      = { defs={} expr=v3771[1] }
    vif     = { defs={} expr=v3772[1] }
    vip     = { defs={} expr=v3773[1] }
    id      = { defs={} expr=v3774[1] }
    ?22     = { defs={} expr=v3775[1] }
    ?23     = { defs={} expr=v3776[1] }
    ?24     = { defs={} expr=v3777[1] }
    ?25     = { defs={} expr=v3778[1] }
    ?26     = { defs={} expr=v3779[1] }
    ?27     = { defs={} expr=v3780[1] }
    ?28     = { defs={} expr=v3781[1] }
    ?29     = { defs={} expr=v3782[1] }
    ?30     = { defs={} expr=v3783[1] }
    ?31     = { defs={} expr=v3784[1] }
    ip      = { defs={0x0804842e} expr=0x08048430[32] }
memory:
init mem:
null state
null state
0x8048430:xor    eax, eax
registers:
    ax      = { 0x0 }
    cx      = { v35054 }
    dx      = { v35055 }
    bx      = { v35056 }
    sp      = { v35058 }
    bp      = { v35058 }
    si      = { v35059 }
    di      = { v35060 }
    es      = { v35061 }
    cs      = { v35062 }
    ss      = { v35063 }
    ds      = { v35064 }
    fs      = { v35065 }
    gs      = { v35066 }
    cf      = { 0x0 }
    ?1      = { v35068 }
    pf      = { 0x1 }
    ?3      = { v35070 }
    af      = { v35132 }
    ?5      = { v35072 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v35075 }
    if      = { v35076 }
    df      = { v35077 }
    of      = { 0x0 }
    iopl0   = { v35079 }
    iopl1   = { v35080 }
    nt      = { v35081 }
    ?15     = { v35082 }
    rf      = { v35083 }
    vm      = { v35084 }
    ac      = { v35085 }
    vif     = { v35086 }
    vip     = { v35087 }
    id      = { v35088 }
    ?22     = { v35089 }
    ?23     = { v35090 }
    ?24     = { v35091 }
    ?25     = { v35092 }
    ?26     = { v35093 }
    ?27     = { v35094 }
    ?28     = { v35095 }
    ?29     = { v35096 }
    ?30     = { v35097 }
    ?31     = { v35098 }
    ip      = { 0x8048432 }
memory:
registers:
    ax      = { defs={0x08048430} expr=0[32] }
    cx      = { defs={} expr=v3740[32] }
    dx      = { defs={} expr=v3741[32] }
    bx      = { defs={} expr=v3742[32] }
    sp      = { defs={0x0804842e} expr=v3744[32] }
    bp      = { defs={} expr=v3744[32] }
    si      = { defs={} expr=v3745[32] }
    di      = { defs={} expr=v3746[32] }
    es      = { defs={} expr=v3747[16] }
    cs      = { defs={} expr=v3748[16] }
    ss      = { defs={} expr=v3749[16] }
    ds      = { defs={} expr=v3750[16] }
    fs      = { defs={} expr=v3751[16] }
    gs      = { defs={} expr=v3752[16] }
    cf      = { defs={0x08048430} expr=0[1] }
    ?1      = { defs={} expr=v3754[1] }
    pf      = { defs={0x08048430} expr=1[1] }
    ?3      = { defs={} expr=v3756[1] }
    af      = { defs={0x08048430} expr=v3818[1] }
    ?5      = { defs={} expr=v3758[1] }
    zf      = { defs={0x08048430} expr=1[1] }
    sf      = { defs={0x08048430} expr=0[1] }
    tf      = { defs={} expr=v3761[1] }
    if      = { defs={} expr=v3762[1] }
    df      = { defs={} expr=v3763[1] }
    of      = { defs={0x08048430} expr=0[1] }
    iopl0   = { defs={} expr=v3765[1] }
    iopl1   = { defs={} expr=v3766[1] }
    nt      = { defs={} expr=v3767[1] }
    ?15     = { defs={} expr=v3768[1] }
    rf      = { defs={} expr=v3769[1] }
    vm      = { defs={} expr=v3770[1] }
    ac      = { defs={} expr=v3771[1] }
    vif     = { defs={} expr=v3772[1] }
    vip     = { defs={} expr=v3773[1] }
    id      = { defs={} expr=v3774[1] }
    ?22     = { defs={} expr=v3775[1] }
    ?23     = { defs={} expr=v3776[1] }
    ?24     = { defs={} expr=v3777[1] }
    ?25     = { defs={} expr=v3778[1] }
    ?26     = { defs={} expr=v3779[1] }
    ?27     = { defs={} expr=v3780[1] }
    ?28     = { defs={} expr=v3781[1] }
    ?29     = { defs={} expr=v3782[1] }
    ?30     = { defs={} expr=v3783[1] }
    ?31     = { defs={} expr=v3784[1] }
    ip      = { defs={0x0804842e,0x08048430} expr=0x08048432[32] }
memory:
init mem:
null state
null state
0x8048432:pop    ebp
registers:
    ax      = { 0x0 }
    cx      = { v35054 }
    dx      = { v35055 }
    bx      = { v35056 }
    sp      = { v35058+0x4 }
    bp      = { v35143 }
    si      = { v35059 }
    di      = { v35060 }
    es      = { v35061 }
    cs      = { v35062 }
    ss      = { v35063 }
    ds      = { v35064 }
    fs      = { v35065 }
    gs      = { v35066 }
    cf      = { 0x0 }
    ?1      = { v35068 }
    pf      = { 0x1 }
    ?3      = { v35070 }
    af      = { v35132 }
    ?5      = { v35072 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v35075 }
    if      = { v35076 }
    df      = { v35077 }
    of      = { 0x0 }
    iopl0   = { v35079 }
    iopl1   = { v35080 }
    nt      = { v35081 }
    ?15     = { v35082 }
    rf      = { v35083 }
    vm      = { v35084 }
    ac      = { v35085 }
    vif     = { v35086 }
    vip     = { v35087 }
    id      = { v35088 }
    ?22     = { v35089 }
    ?23     = { v35090 }
    ?24     = { v35091 }
    ?25     = { v35092 }
    ?26     = { v35093 }
    ?27     = { v35094 }
    ?28     = { v35095 }
    ?29     = { v35096 }
    ?30     = { v35097 }
    ?31     = { v35098 }
    ip      = { 0x8048433 }
memory:
    address = { v35058 }
      value = { v35143 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048430} expr=0[32] }
    cx      = { defs={} expr=v3740[32] }
    dx      = { defs={} expr=v3741[32] }
    bx      = { defs={} expr=v3742[32] }
    sp      = { defs={0x0804842e,0x08048432} expr=(add[32] v3744[32] 4[32]) }
    bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3831[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3832[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3833[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3834[8]))) }
    si      = { defs={} expr=v3745[32] }
    di      = { defs={} expr=v3746[32] }
    es      = { defs={} expr=v3747[16] }
    cs      = { defs={} expr=v3748[16] }
    ss      = { defs={} expr=v3749[16] }
    ds      = { defs={} expr=v3750[16] }
    fs      = { defs={} expr=v3751[16] }
    gs      = { defs={} expr=v3752[16] }
    cf      = { defs={0x08048430} expr=0[1] }
    ?1      = { defs={} expr=v3754[1] }
    pf      = { defs={0x08048430} expr=1[1] }
    ?3      = { defs={} expr=v3756[1] }
    af      = { defs={0x08048430} expr=v3818[1] }
    ?5      = { defs={} expr=v3758[1] }
    zf      = { defs={0x08048430} expr=1[1] }
    sf      = { defs={0x08048430} expr=0[1] }
    tf      = { defs={} expr=v3761[1] }
    if      = { defs={} expr=v3762[1] }
    df      = { defs={} expr=v3763[1] }
    of      = { defs={0x08048430} expr=0[1] }
    iopl0   = { defs={} expr=v3765[1] }
    iopl1   = { defs={} expr=v3766[1] }
    nt      = { defs={} expr=v3767[1] }
    ?15     = { defs={} expr=v3768[1] }
    rf      = { defs={} expr=v3769[1] }
    vm      = { defs={} expr=v3770[1] }
    ac      = { defs={} expr=v3771[1] }
    vif     = { defs={} expr=v3772[1] }
    vip     = { defs={} expr=v3773[1] }
    id      = { defs={} expr=v3774[1] }
    ?22     = { defs={} expr=v3775[1] }
    ?23     = { defs={} expr=v3776[1] }
    ?24     = { defs={} expr=v3777[1] }
    ?25     = { defs={} expr=v3778[1] }
    ?26     = { defs={} expr=v3779[1] }
    ?27     = { defs={} expr=v3780[1] }
    ?28     = { defs={} expr=v3781[1] }
    ?29     = { defs={} expr=v3782[1] }
    ?30     = { defs={} expr=v3783[1] }
    ?31     = { defs={} expr=v3784[1] }
    ip      = { defs={0x0804842e,0x08048430,0x08048432} expr=0x08048433[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v3744[32] 3[32]) }
      value = { defs={} expr=v3834[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3744[32] 2[32]) }
      value = { defs={} expr=v3833[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3744[32] 1[32]) }
      value = { defs={} expr=v3832[8] }
      flags = { rdonly }
    address = { defs={0x0804842e} expr=v3744[32] }
      value = { defs={} expr=v3831[8] }
      flags = { rdonly }
null state
null state
0x8048433:ret    
registers:
    ax      = { 0x0 }
    cx      = { v35054 }
    dx      = { v35055 }
    bx      = { v35056 }
    sp      = { v35058+0x8 }
    bp      = { v35143 }
    si      = { v35059 }
    di      = { v35060 }
    es      = { v35061 }
    cs      = { v35062 }
    ss      = { v35063 }
    ds      = { v35064 }
    fs      = { v35065 }
    gs      = { v35066 }
    cf      = { 0x0 }
    ?1      = { v35068 }
    pf      = { 0x1 }
    ?3      = { v35070 }
    af      = { v35132 }
    ?5      = { v35072 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v35075 }
    if      = { v35076 }
    df      = { v35077 }
    of      = { 0x0 }
    iopl0   = { v35079 }
    iopl1   = { v35080 }
    nt      = { v35081 }
    ?15     = { v35082 }
    rf      = { v35083 }
    vm      = { v35084 }
    ac      = { v35085 }
    vif     = { v35086 }
    vip     = { v35087 }
    id      = { v35088 }
    ?22     = { v35089 }
    ?23     = { v35090 }
    ?24     = { v35091 }
    ?25     = { v35092 }
    ?26     = { v35093 }
    ?27     = { v35094 }
    ?28     = { v35095 }
    ?29     = { v35096 }
    ?30     = { v35097 }
    ?31     = { v35098 }
    ip      = { v35155 }
memory:
    address = { v35058 }
      value = { v35143 }
      flags = { size=4; read-only }
    address = { v35058+0x4 }
      value = { v35155 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x08048430} expr=0[32] }
    cx      = { defs={} expr=v3740[32] }
    dx      = { defs={} expr=v3741[32] }
    bx      = { defs={} expr=v3742[32] }
    sp      = { defs={0x0804842e,0x08048432,0x08048433} expr=(add[32] (add[32] v3744[32] 4[32]) 4[32]) }
    bp      = { defs={0x08048432} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3831[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3832[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3833[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3834[8]))) }
    si      = { defs={} expr=v3745[32] }
    di      = { defs={} expr=v3746[32] }
    es      = { defs={} expr=v3747[16] }
    cs      = { defs={} expr=v3748[16] }
    ss      = { defs={} expr=v3749[16] }
    ds      = { defs={} expr=v3750[16] }
    fs      = { defs={} expr=v3751[16] }
    gs      = { defs={} expr=v3752[16] }
    cf      = { defs={0x08048430} expr=0[1] }
    ?1      = { defs={} expr=v3754[1] }
    pf      = { defs={0x08048430} expr=1[1] }
    ?3      = { defs={} expr=v3756[1] }
    af      = { defs={0x08048430} expr=v3818[1] }
    ?5      = { defs={} expr=v3758[1] }
    zf      = { defs={0x08048430} expr=1[1] }
    sf      = { defs={0x08048430} expr=0[1] }
    tf      = { defs={} expr=v3761[1] }
    if      = { defs={} expr=v3762[1] }
    df      = { defs={} expr=v3763[1] }
    of      = { defs={0x08048430} expr=0[1] }
    iopl0   = { defs={} expr=v3765[1] }
    iopl1   = { defs={} expr=v3766[1] }
    nt      = { defs={} expr=v3767[1] }
    ?15     = { defs={} expr=v3768[1] }
    rf      = { defs={} expr=v3769[1] }
    vm      = { defs={} expr=v3770[1] }
    ac      = { defs={} expr=v3771[1] }
    vif     = { defs={} expr=v3772[1] }
    vip     = { defs={} expr=v3773[1] }
    id      = { defs={} expr=v3774[1] }
    ?22     = { defs={} expr=v3775[1] }
    ?23     = { defs={} expr=v3776[1] }
    ?24     = { defs={} expr=v3777[1] }
    ?25     = { defs={} expr=v3778[1] }
    ?26     = { defs={} expr=v3779[1] }
    ?27     = { defs={} expr=v3780[1] }
    ?28     = { defs={} expr=v3781[1] }
    ?29     = { defs={} expr=v3782[1] }
    ?30     = { defs={} expr=v3783[1] }
    ?31     = { defs={} expr=v3784[1] }
    ip      = { defs={0x08048433} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v3852[8]) (shr0[32] 8[32] (uextend[32] 32[32] v3853[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v3854[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v3855[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v3744[32] 4[32]) 3[32]) }
      value = { defs={} expr=v3855[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v3744[32] 4[32]) 2[32]) }
      value = { defs={} expr=v3854[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v3744[32] 4[32]) 1[32]) }
      value = { defs={} expr=v3853[8] }
      flags = { rdonly }
    address = { defs={0x0804842e,0x08048432} expr=(add[32] v3744[32] 4[32]) }
      value = { defs={} expr=v3852[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3744[32] 3[32]) }
      value = { defs={} expr=v3834[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3744[32] 2[32]) }
      value = { defs={} expr=v3833[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v3744[32] 1[32]) }
      value = { defs={} expr=v3832[8] }
      flags = { rdonly }
    address = { defs={0x0804842e} expr=v3744[32] }
      value = { defs={} expr=v3831[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048440:push   ebp
registers:
    ax      = { v35206 }
    cx      = { v35207 }
    dx      = { v35208 }
    bx      = { v35209 }
    sp      = { v35210-0x4 }
    bp      = { v35211 }
    si      = { v35212 }
    di      = { v35213 }
    es      = { v35214 }
    cs      = { v35215 }
    ss      = { v35216 }
    ds      = { v35217 }
    fs      = { v35218 }
    gs      = { v35219 }
    cf      = { v35220 }
    ?1      = { v35221 }
    pf      = { v35222 }
    ?3      = { v35223 }
    af      = { v35224 }
    ?5      = { v35225 }
    zf      = { v35226 }
    sf      = { v35227 }
    tf      = { v35228 }
    if      = { v35229 }
    df      = { v35230 }
    of      = { v35231 }
    iopl0   = { v35232 }
    iopl1   = { v35233 }
    nt      = { v35234 }
    ?15     = { v35235 }
    rf      = { v35236 }
    vm      = { v35237 }
    ac      = { v35238 }
    vif     = { v35239 }
    vip     = { v35240 }
    id      = { v35241 }
    ?22     = { v35242 }
    ?23     = { v35243 }
    ?24     = { v35244 }
    ?25     = { v35245 }
    ?26     = { v35246 }
    ?27     = { v35247 }
    ?28     = { v35248 }
    ?29     = { v35249 }
    ?30     = { v35250 }
    ?31     = { v35251 }
    ip      = { 0x8048441 }
memory:
    address = { v35210-0x4 }
      value = { v35211 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3910[32] }
    cx      = { defs={} expr=v3911[32] }
    dx      = { defs={} expr=v3912[32] }
    bx      = { defs={} expr=v3913[32] }
    sp      = { defs={0x08048440} expr=(add[32] v3914[32] -4[32]) }
    bp      = { defs={} expr=v3915[32] }
    si      = { defs={} expr=v3916[32] }
    di      = { defs={} expr=v3917[32] }
    es      = { defs={} expr=v3918[16] }
    cs      = { defs={} expr=v3919[16] }
    ss      = { defs={} expr=v3920[16] }
    ds      = { defs={} expr=v3921[16] }
    fs      = { defs={} expr=v3922[16] }
    gs      = { defs={} expr=v3923[16] }
    cf      = { defs={} expr=v3924[1] }
    ?1      = { defs={} expr=v3925[1] }
    pf      = { defs={} expr=v3926[1] }
    ?3      = { defs={} expr=v3927[1] }
    af      = { defs={} expr=v3928[1] }
    ?5      = { defs={} expr=v3929[1] }
    zf      = { defs={} expr=v3930[1] }
    sf      = { defs={} expr=v3931[1] }
    tf      = { defs={} expr=v3932[1] }
    if      = { defs={} expr=v3933[1] }
    df      = { defs={} expr=v3934[1] }
    of      = { defs={} expr=v3935[1] }
    iopl0   = { defs={} expr=v3936[1] }
    iopl1   = { defs={} expr=v3937[1] }
    nt      = { defs={} expr=v3938[1] }
    ?15     = { defs={} expr=v3939[1] }
    rf      = { defs={} expr=v3940[1] }
    vm      = { defs={} expr=v3941[1] }
    ac      = { defs={} expr=v3942[1] }
    vif     = { defs={} expr=v3943[1] }
    vip     = { defs={} expr=v3944[1] }
    id      = { defs={} expr=v3945[1] }
    ?22     = { defs={} expr=v3946[1] }
    ?23     = { defs={} expr=v3947[1] }
    ?24     = { defs={} expr=v3948[1] }
    ?25     = { defs={} expr=v3949[1] }
    ?26     = { defs={} expr=v3950[1] }
    ?27     = { defs={} expr=v3951[1] }
    ?28     = { defs={} expr=v3952[1] }
    ?29     = { defs={} expr=v3953[1] }
    ?30     = { defs={} expr=v3954[1] }
    ?31     = { defs={} expr=v3955[1] }
    ip      = { defs={0x08048440} expr=0x08048441[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3915[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3915[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3915[32]) }
      flags = { }
    address = { defs={0x08048440} expr=(add[32] v3914[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3915[32]) }
      flags = { }
init mem:
null state
null state
0x8048441:mov    ebp, esp
registers:
    ax      = { v35206 }
    cx      = { v35207 }
    dx      = { v35208 }
    bx      = { v35209 }
    sp      = { v35210-0x4 }
    bp      = { v35210-0x4 }
    si      = { v35212 }
    di      = { v35213 }
    es      = { v35214 }
    cs      = { v35215 }
    ss      = { v35216 }
    ds      = { v35217 }
    fs      = { v35218 }
    gs      = { v35219 }
    cf      = { v35220 }
    ?1      = { v35221 }
    pf      = { v35222 }
    ?3      = { v35223 }
    af      = { v35224 }
    ?5      = { v35225 }
    zf      = { v35226 }
    sf      = { v35227 }
    tf      = { v35228 }
    if      = { v35229 }
    df      = { v35230 }
    of      = { v35231 }
    iopl0   = { v35232 }
    iopl1   = { v35233 }
    nt      = { v35234 }
    ?15     = { v35235 }
    rf      = { v35236 }
    vm      = { v35237 }
    ac      = { v35238 }
    vif     = { v35239 }
    vip     = { v35240 }
    id      = { v35241 }
    ?22     = { v35242 }
    ?23     = { v35243 }
    ?24     = { v35244 }
    ?25     = { v35245 }
    ?26     = { v35246 }
    ?27     = { v35247 }
    ?28     = { v35248 }
    ?29     = { v35249 }
    ?30     = { v35250 }
    ?31     = { v35251 }
    ip      = { 0x8048443 }
memory:
    address = { v35210-0x4 }
      value = { v35211 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3910[32] }
    cx      = { defs={} expr=v3911[32] }
    dx      = { defs={} expr=v3912[32] }
    bx      = { defs={} expr=v3913[32] }
    sp      = { defs={0x08048440} expr=(add[32] v3914[32] -4[32]) }
    bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3914[32] -4[32]) }
    si      = { defs={} expr=v3916[32] }
    di      = { defs={} expr=v3917[32] }
    es      = { defs={} expr=v3918[16] }
    cs      = { defs={} expr=v3919[16] }
    ss      = { defs={} expr=v3920[16] }
    ds      = { defs={} expr=v3921[16] }
    fs      = { defs={} expr=v3922[16] }
    gs      = { defs={} expr=v3923[16] }
    cf      = { defs={} expr=v3924[1] }
    ?1      = { defs={} expr=v3925[1] }
    pf      = { defs={} expr=v3926[1] }
    ?3      = { defs={} expr=v3927[1] }
    af      = { defs={} expr=v3928[1] }
    ?5      = { defs={} expr=v3929[1] }
    zf      = { defs={} expr=v3930[1] }
    sf      = { defs={} expr=v3931[1] }
    tf      = { defs={} expr=v3932[1] }
    if      = { defs={} expr=v3933[1] }
    df      = { defs={} expr=v3934[1] }
    of      = { defs={} expr=v3935[1] }
    iopl0   = { defs={} expr=v3936[1] }
    iopl1   = { defs={} expr=v3937[1] }
    nt      = { defs={} expr=v3938[1] }
    ?15     = { defs={} expr=v3939[1] }
    rf      = { defs={} expr=v3940[1] }
    vm      = { defs={} expr=v3941[1] }
    ac      = { defs={} expr=v3942[1] }
    vif     = { defs={} expr=v3943[1] }
    vip     = { defs={} expr=v3944[1] }
    id      = { defs={} expr=v3945[1] }
    ?22     = { defs={} expr=v3946[1] }
    ?23     = { defs={} expr=v3947[1] }
    ?24     = { defs={} expr=v3948[1] }
    ?25     = { defs={} expr=v3949[1] }
    ?26     = { defs={} expr=v3950[1] }
    ?27     = { defs={} expr=v3951[1] }
    ?28     = { defs={} expr=v3952[1] }
    ?29     = { defs={} expr=v3953[1] }
    ?30     = { defs={} expr=v3954[1] }
    ?31     = { defs={} expr=v3955[1] }
    ip      = { defs={0x08048440,0x08048441} expr=0x08048443[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3915[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3915[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3915[32]) }
      flags = { }
    address = { defs={0x08048440} expr=(add[32] v3914[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3915[32]) }
      flags = { }
init mem:
null state
null state
0x8048443:sub    esp, 0x08
registers:
    ax      = { v35206 }
    cx      = { v35207 }
    dx      = { v35208 }
    bx      = { v35209 }
    sp      = { v35210-0xc }
    bp      = { v35210-0x4 }
    si      = { v35212 }
    di      = { v35213 }
    es      = { v35214 }
    cs      = { v35215 }
    ss      = { v35216 }
    ds      = { v35217 }
    fs      = { v35218 }
    gs      = { v35219 }
    cf      = { -v35317+0x1 }
    ?1      = { v35221 }
    pf      = { -v35307+0x1 }
    ?3      = { v35223 }
    af      = { -v35314+0x1 }
    ?5      = { v35225 }
    zf      = { v35312 }
    sf      = { v35310 }
    tf      = { v35228 }
    if      = { v35229 }
    df      = { v35230 }
    of      = { v35324 }
    iopl0   = { v35232 }
    iopl1   = { v35233 }
    nt      = { v35234 }
    ?15     = { v35235 }
    rf      = { v35236 }
    vm      = { v35237 }
    ac      = { v35238 }
    vif     = { v35239 }
    vip     = { v35240 }
    id      = { v35241 }
    ?22     = { v35242 }
    ?23     = { v35243 }
    ?24     = { v35244 }
    ?25     = { v35245 }
    ?26     = { v35246 }
    ?27     = { v35247 }
    ?28     = { v35248 }
    ?29     = { v35249 }
    ?30     = { v35250 }
    ?31     = { v35251 }
    ip      = { 0x8048446 }
memory:
    address = { v35210-0x4 }
      value = { v35211 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3910[32] }
    cx      = { defs={} expr=v3911[32] }
    dx      = { defs={} expr=v3912[32] }
    bx      = { defs={} expr=v3913[32] }
    sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v3914[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3914[32] -4[32]) }
    si      = { defs={} expr=v3916[32] }
    di      = { defs={} expr=v3917[32] }
    es      = { defs={} expr=v3918[16] }
    cs      = { defs={} expr=v3919[16] }
    ss      = { defs={} expr=v3920[16] }
    ds      = { defs={} expr=v3921[16] }
    fs      = { defs={} expr=v3922[16] }
    gs      = { defs={} expr=v3923[16] }
    cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v3925[1] }
    pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v3927[1] }
    af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v3929[1] }
    zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v3914[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3914[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v3932[1] }
    if      = { defs={} expr=v3933[1] }
    df      = { defs={} expr=v3934[1] }
    of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v3936[1] }
    iopl1   = { defs={} expr=v3937[1] }
    nt      = { defs={} expr=v3938[1] }
    ?15     = { defs={} expr=v3939[1] }
    rf      = { defs={} expr=v3940[1] }
    vm      = { defs={} expr=v3941[1] }
    ac      = { defs={} expr=v3942[1] }
    vif     = { defs={} expr=v3943[1] }
    vip     = { defs={} expr=v3944[1] }
    id      = { defs={} expr=v3945[1] }
    ?22     = { defs={} expr=v3946[1] }
    ?23     = { defs={} expr=v3947[1] }
    ?24     = { defs={} expr=v3948[1] }
    ?25     = { defs={} expr=v3949[1] }
    ?26     = { defs={} expr=v3950[1] }
    ?27     = { defs={} expr=v3951[1] }
    ?28     = { defs={} expr=v3952[1] }
    ?29     = { defs={} expr=v3953[1] }
    ?30     = { defs={} expr=v3954[1] }
    ?31     = { defs={} expr=v3955[1] }
    ip      = { defs={0x08048440,0x08048441,0x08048443} expr=0x08048446[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3915[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3915[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3915[32]) }
      flags = { }
    address = { defs={0x08048440} expr=(add[32] v3914[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3915[32]) }
      flags = { }
init mem:
null state
null state
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
registers:
    ax      = { v35206 }
    cx      = { v35207 }
    dx      = { v35208 }
    bx      = { v35209 }
    sp      = { v35210-0xc }
    bp      = { v35210-0x4 }
    si      = { v35212 }
    di      = { v35213 }
    es      = { v35214 }
    cs      = { v35215 }
    ss      = { v35216 }
    ds      = { v35217 }
    fs      = { v35218 }
    gs      = { v35219 }
    cf      = { -v35317+0x1 }
    ?1      = { v35221 }
    pf      = { -v35307+0x1 }
    ?3      = { v35223 }
    af      = { -v35314+0x1 }
    ?5      = { v35225 }
    zf      = { v35312 }
    sf      = { v35310 }
    tf      = { v35228 }
    if      = { v35229 }
    df      = { v35230 }
    of      = { v35324 }
    iopl0   = { v35232 }
    iopl1   = { v35233 }
    nt      = { v35234 }
    ?15     = { v35235 }
    rf      = { v35236 }
    vm      = { v35237 }
    ac      = { v35238 }
    vif     = { v35239 }
    vip     = { v35240 }
    id      = { v35241 }
    ?22     = { v35242 }
    ?23     = { v35243 }
    ?24     = { v35244 }
    ?25     = { v35245 }
    ?26     = { v35246 }
    ?27     = { v35247 }
    ?28     = { v35248 }
    ?29     = { v35249 }
    ?30     = { v35250 }
    ?31     = { v35251 }
    ip      = { 0x804844d }
memory:
    address = { v35210-0x4 }
      value = { v35211 }
      flags = { size=4 }
    address = { v35210-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3910[32] }
    cx      = { defs={} expr=v3911[32] }
    dx      = { defs={} expr=v3912[32] }
    bx      = { defs={} expr=v3913[32] }
    sp      = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v3914[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3914[32] -4[32]) }
    si      = { defs={} expr=v3916[32] }
    di      = { defs={} expr=v3917[32] }
    es      = { defs={} expr=v3918[16] }
    cs      = { defs={} expr=v3919[16] }
    ss      = { defs={} expr=v3920[16] }
    ds      = { defs={} expr=v3921[16] }
    fs      = { defs={} expr=v3922[16] }
    gs      = { defs={} expr=v3923[16] }
    cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v3925[1] }
    pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v3927[1] }
    af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v3929[1] }
    zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v3914[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3914[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v3932[1] }
    if      = { defs={} expr=v3933[1] }
    df      = { defs={} expr=v3934[1] }
    of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v3936[1] }
    iopl1   = { defs={} expr=v3937[1] }
    nt      = { defs={} expr=v3938[1] }
    ?15     = { defs={} expr=v3939[1] }
    rf      = { defs={} expr=v3940[1] }
    vm      = { defs={} expr=v3941[1] }
    ac      = { defs={} expr=v3942[1] }
    vif     = { defs={} expr=v3943[1] }
    vip     = { defs={} expr=v3944[1] }
    id      = { defs={} expr=v3945[1] }
    ?22     = { defs={} expr=v3946[1] }
    ?23     = { defs={} expr=v3947[1] }
    ?24     = { defs={} expr=v3948[1] }
    ?25     = { defs={} expr=v3949[1] }
    ?26     = { defs={} expr=v3950[1] }
    ?27     = { defs={} expr=v3951[1] }
    ?28     = { defs={} expr=v3952[1] }
    ?29     = { defs={} expr=v3953[1] }
    ?30     = { defs={} expr=v3954[1] }
    ?31     = { defs={} expr=v3955[1] }
    ip      = { defs={0x08048440,0x08048441,0x08048443,0x08048446} expr=0x0804844d[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v3914[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3915[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3915[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3915[32]) }
      flags = { }
    address = { defs={0x08048440} expr=(add[32] v3914[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3915[32]) }
      flags = { }
init mem:
null state
null state
0x804844d:call   0x08048300<puts@plt>
registers:
    ax      = { v35206 }
    cx      = { v35207 }
    dx      = { v35208 }
    bx      = { v35209 }
    sp      = { v35210-0x10 }
    bp      = { v35210-0x4 }
    si      = { v35212 }
    di      = { v35213 }
    es      = { v35214 }
    cs      = { v35215 }
    ss      = { v35216 }
    ds      = { v35217 }
    fs      = { v35218 }
    gs      = { v35219 }
    cf      = { -v35317+0x1 }
    ?1      = { v35221 }
    pf      = { -v35307+0x1 }
    ?3      = { v35223 }
    af      = { -v35314+0x1 }
    ?5      = { v35225 }
    zf      = { v35312 }
    sf      = { v35310 }
    tf      = { v35228 }
    if      = { v35229 }
    df      = { v35230 }
    of      = { v35324 }
    iopl0   = { v35232 }
    iopl1   = { v35233 }
    nt      = { v35234 }
    ?15     = { v35235 }
    rf      = { v35236 }
    vm      = { v35237 }
    ac      = { v35238 }
    vif     = { v35239 }
    vip     = { v35240 }
    id      = { v35241 }
    ?22     = { v35242 }
    ?23     = { v35243 }
    ?24     = { v35244 }
    ?25     = { v35245 }
    ?26     = { v35246 }
    ?27     = { v35247 }
    ?28     = { v35248 }
    ?29     = { v35249 }
    ?30     = { v35250 }
    ?31     = { v35251 }
    ip      = { 0x8048300 }
memory:
    address = { v35210-0x4 }
      value = { v35211 }
      flags = { size=4 }
    address = { v35210-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
    address = { v35210-0x10 }
      value = { 0x8048452 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v3910[32] }
    cx      = { defs={} expr=v3911[32] }
    dx      = { defs={} expr=v3912[32] }
    bx      = { defs={} expr=v3913[32] }
    sp      = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) -4[32]) }
    bp      = { defs={0x08048440,0x08048441} expr=(add[32] v3914[32] -4[32]) }
    si      = { defs={} expr=v3916[32] }
    di      = { defs={} expr=v3917[32] }
    es      = { defs={} expr=v3918[16] }
    cs      = { defs={} expr=v3919[16] }
    ss      = { defs={} expr=v3920[16] }
    ds      = { defs={} expr=v3921[16] }
    fs      = { defs={} expr=v3922[16] }
    gs      = { defs={} expr=v3923[16] }
    cf      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v3925[1] }
    pf      = { defs={0x08048440,0x08048443} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v3927[1] }
    af      = { defs={0x08048440,0x08048443} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v3929[1] }
    zf      = { defs={0x08048440,0x08048443} expr=(zerop[1] (add[32] (add[32] v3914[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048440,0x08048443} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v3914[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v3932[1] }
    if      = { defs={} expr=v3933[1] }
    df      = { defs={} expr=v3934[1] }
    of      = { defs={0x08048440,0x08048443} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v3914[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v3936[1] }
    iopl1   = { defs={} expr=v3937[1] }
    nt      = { defs={} expr=v3938[1] }
    ?15     = { defs={} expr=v3939[1] }
    rf      = { defs={} expr=v3940[1] }
    vm      = { defs={} expr=v3941[1] }
    ac      = { defs={} expr=v3942[1] }
    vif     = { defs={} expr=v3943[1] }
    vip     = { defs={} expr=v3944[1] }
    id      = { defs={} expr=v3945[1] }
    ?22     = { defs={} expr=v3946[1] }
    ?23     = { defs={} expr=v3947[1] }
    ?24     = { defs={} expr=v3948[1] }
    ?25     = { defs={} expr=v3949[1] }
    ?26     = { defs={} expr=v3950[1] }
    ?27     = { defs={} expr=v3951[1] }
    ?28     = { defs={} expr=v3952[1] }
    ?29     = { defs={} expr=v3953[1] }
    ?30     = { defs={} expr=v3954[1] }
    ?31     = { defs={} expr=v3955[1] }
    ip      = { defs={0x0804844d} expr=0x08048300[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048440,0x08048443,0x0804844d} expr=(add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) -4[32]) }
      value = { defs={} expr=82[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v3914[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048440,0x08048443} expr=(add[32] (add[32] v3914[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v3915[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v3915[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v3914[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v3915[32]) }
      flags = { }
    address = { defs={0x08048440} expr=(add[32] v3914[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v3915[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
registers:
    ax      = { v35391 }
    cx      = { v35392 }
    dx      = { v35393 }
    bx      = { v35394 }
    sp      = { v35396 }
    bp      = { v35396 }
    si      = { v35397 }
    di      = { v35398 }
    es      = { v35399 }
    cs      = { v35400 }
    ss      = { v35401 }
    ds      = { v35402 }
    fs      = { v35403 }
    gs      = { v35404 }
    cf      = { v35405 }
    ?1      = { v35406 }
    pf      = { v35407 }
    ?3      = { v35408 }
    af      = { v35409 }
    ?5      = { v35410 }
    zf      = { v35411 }
    sf      = { v35412 }
    tf      = { v35413 }
    if      = { v35414 }
    df      = { v35415 }
    of      = { v35416 }
    iopl0   = { v35417 }
    iopl1   = { v35418 }
    nt      = { v35419 }
    ?15     = { v35420 }
    rf      = { v35421 }
    vm      = { v35422 }
    ac      = { v35423 }
    vif     = { v35424 }
    vip     = { v35425 }
    id      = { v35426 }
    ?22     = { v35427 }
    ?23     = { v35428 }
    ?24     = { v35429 }
    ?25     = { v35430 }
    ?26     = { v35431 }
    ?27     = { v35432 }
    ?28     = { v35433 }
    ?29     = { v35434 }
    ?30     = { v35435 }
    ?31     = { v35436 }
    ip      = { 0x8048454 }
memory:
registers:
    ax      = { defs={} expr=v4073[32] }
    cx      = { defs={} expr=v4074[32] }
    dx      = { defs={} expr=v4075[32] }
    bx      = { defs={} expr=v4076[32] }
    sp      = { defs={0x08048452} expr=v4078[32] }
    bp      = { defs={} expr=v4078[32] }
    si      = { defs={} expr=v4079[32] }
    di      = { defs={} expr=v4080[32] }
    es      = { defs={} expr=v4081[16] }
    cs      = { defs={} expr=v4082[16] }
    ss      = { defs={} expr=v4083[16] }
    ds      = { defs={} expr=v4084[16] }
    fs      = { defs={} expr=v4085[16] }
    gs      = { defs={} expr=v4086[16] }
    cf      = { defs={} expr=v4087[1] }
    ?1      = { defs={} expr=v4088[1] }
    pf      = { defs={} expr=v4089[1] }
    ?3      = { defs={} expr=v4090[1] }
    af      = { defs={} expr=v4091[1] }
    ?5      = { defs={} expr=v4092[1] }
    zf      = { defs={} expr=v4093[1] }
    sf      = { defs={} expr=v4094[1] }
    tf      = { defs={} expr=v4095[1] }
    if      = { defs={} expr=v4096[1] }
    df      = { defs={} expr=v4097[1] }
    of      = { defs={} expr=v4098[1] }
    iopl0   = { defs={} expr=v4099[1] }
    iopl1   = { defs={} expr=v4100[1] }
    nt      = { defs={} expr=v4101[1] }
    ?15     = { defs={} expr=v4102[1] }
    rf      = { defs={} expr=v4103[1] }
    vm      = { defs={} expr=v4104[1] }
    ac      = { defs={} expr=v4105[1] }
    vif     = { defs={} expr=v4106[1] }
    vip     = { defs={} expr=v4107[1] }
    id      = { defs={} expr=v4108[1] }
    ?22     = { defs={} expr=v4109[1] }
    ?23     = { defs={} expr=v4110[1] }
    ?24     = { defs={} expr=v4111[1] }
    ?25     = { defs={} expr=v4112[1] }
    ?26     = { defs={} expr=v4113[1] }
    ?27     = { defs={} expr=v4114[1] }
    ?28     = { defs={} expr=v4115[1] }
    ?29     = { defs={} expr=v4116[1] }
    ?30     = { defs={} expr=v4117[1] }
    ?31     = { defs={} expr=v4118[1] }
    ip      = { defs={0x08048452} expr=0x08048454[32] }
memory:
init mem:
null state
null state
0x8048454:pop    ebp
registers:
    ax      = { v35391 }
    cx      = { v35392 }
    dx      = { v35393 }
    bx      = { v35394 }
    sp      = { v35396+0x4 }
    bp      = { v35451 }
    si      = { v35397 }
    di      = { v35398 }
    es      = { v35399 }
    cs      = { v35400 }
    ss      = { v35401 }
    ds      = { v35402 }
    fs      = { v35403 }
    gs      = { v35404 }
    cf      = { v35405 }
    ?1      = { v35406 }
    pf      = { v35407 }
    ?3      = { v35408 }
    af      = { v35409 }
    ?5      = { v35410 }
    zf      = { v35411 }
    sf      = { v35412 }
    tf      = { v35413 }
    if      = { v35414 }
    df      = { v35415 }
    of      = { v35416 }
    iopl0   = { v35417 }
    iopl1   = { v35418 }
    nt      = { v35419 }
    ?15     = { v35420 }
    rf      = { v35421 }
    vm      = { v35422 }
    ac      = { v35423 }
    vif     = { v35424 }
    vip     = { v35425 }
    id      = { v35426 }
    ?22     = { v35427 }
    ?23     = { v35428 }
    ?24     = { v35429 }
    ?25     = { v35430 }
    ?26     = { v35431 }
    ?27     = { v35432 }
    ?28     = { v35433 }
    ?29     = { v35434 }
    ?30     = { v35435 }
    ?31     = { v35436 }
    ip      = { 0x8048455 }
memory:
    address = { v35396 }
      value = { v35451 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v4073[32] }
    cx      = { defs={} expr=v4074[32] }
    dx      = { defs={} expr=v4075[32] }
    bx      = { defs={} expr=v4076[32] }
    sp      = { defs={0x08048452,0x08048454} expr=(add[32] v4078[32] 4[32]) }
    bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4135[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4136[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4137[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4138[8]))) }
    si      = { defs={} expr=v4079[32] }
    di      = { defs={} expr=v4080[32] }
    es      = { defs={} expr=v4081[16] }
    cs      = { defs={} expr=v4082[16] }
    ss      = { defs={} expr=v4083[16] }
    ds      = { defs={} expr=v4084[16] }
    fs      = { defs={} expr=v4085[16] }
    gs      = { defs={} expr=v4086[16] }
    cf      = { defs={} expr=v4087[1] }
    ?1      = { defs={} expr=v4088[1] }
    pf      = { defs={} expr=v4089[1] }
    ?3      = { defs={} expr=v4090[1] }
    af      = { defs={} expr=v4091[1] }
    ?5      = { defs={} expr=v4092[1] }
    zf      = { defs={} expr=v4093[1] }
    sf      = { defs={} expr=v4094[1] }
    tf      = { defs={} expr=v4095[1] }
    if      = { defs={} expr=v4096[1] }
    df      = { defs={} expr=v4097[1] }
    of      = { defs={} expr=v4098[1] }
    iopl0   = { defs={} expr=v4099[1] }
    iopl1   = { defs={} expr=v4100[1] }
    nt      = { defs={} expr=v4101[1] }
    ?15     = { defs={} expr=v4102[1] }
    rf      = { defs={} expr=v4103[1] }
    vm      = { defs={} expr=v4104[1] }
    ac      = { defs={} expr=v4105[1] }
    vif     = { defs={} expr=v4106[1] }
    vip     = { defs={} expr=v4107[1] }
    id      = { defs={} expr=v4108[1] }
    ?22     = { defs={} expr=v4109[1] }
    ?23     = { defs={} expr=v4110[1] }
    ?24     = { defs={} expr=v4111[1] }
    ?25     = { defs={} expr=v4112[1] }
    ?26     = { defs={} expr=v4113[1] }
    ?27     = { defs={} expr=v4114[1] }
    ?28     = { defs={} expr=v4115[1] }
    ?29     = { defs={} expr=v4116[1] }
    ?30     = { defs={} expr=v4117[1] }
    ?31     = { defs={} expr=v4118[1] }
    ip      = { defs={0x08048452,0x08048454} expr=0x08048455[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v4078[32] 3[32]) }
      value = { defs={} expr=v4138[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4078[32] 2[32]) }
      value = { defs={} expr=v4137[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4078[32] 1[32]) }
      value = { defs={} expr=v4136[8] }
      flags = { rdonly }
    address = { defs={0x08048452} expr=v4078[32] }
      value = { defs={} expr=v4135[8] }
      flags = { rdonly }
null state
null state
0x8048455:ret    
registers:
    ax      = { v35391 }
    cx      = { v35392 }
    dx      = { v35393 }
    bx      = { v35394 }
    sp      = { v35396+0x8 }
    bp      = { v35451 }
    si      = { v35397 }
    di      = { v35398 }
    es      = { v35399 }
    cs      = { v35400 }
    ss      = { v35401 }
    ds      = { v35402 }
    fs      = { v35403 }
    gs      = { v35404 }
    cf      = { v35405 }
    ?1      = { v35406 }
    pf      = { v35407 }
    ?3      = { v35408 }
    af      = { v35409 }
    ?5      = { v35410 }
    zf      = { v35411 }
    sf      = { v35412 }
    tf      = { v35413 }
    if      = { v35414 }
    df      = { v35415 }
    of      = { v35416 }
    iopl0   = { v35417 }
    iopl1   = { v35418 }
    nt      = { v35419 }
    ?15     = { v35420 }
    rf      = { v35421 }
    vm      = { v35422 }
    ac      = { v35423 }
    vif     = { v35424 }
    vip     = { v35425 }
    id      = { v35426 }
    ?22     = { v35427 }
    ?23     = { v35428 }
    ?24     = { v35429 }
    ?25     = { v35430 }
    ?26     = { v35431 }
    ?27     = { v35432 }
    ?28     = { v35433 }
    ?29     = { v35434 }
    ?30     = { v35435 }
    ?31     = { v35436 }
    ip      = { v35463 }
memory:
    address = { v35396 }
      value = { v35451 }
      flags = { size=4; read-only }
    address = { v35396+0x4 }
      value = { v35463 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v4073[32] }
    cx      = { defs={} expr=v4074[32] }
    dx      = { defs={} expr=v4075[32] }
    bx      = { defs={} expr=v4076[32] }
    sp      = { defs={0x08048452,0x08048454,0x08048455} expr=(add[32] (add[32] v4078[32] 4[32]) 4[32]) }
    bp      = { defs={0x08048454} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4135[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4136[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4137[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4138[8]))) }
    si      = { defs={} expr=v4079[32] }
    di      = { defs={} expr=v4080[32] }
    es      = { defs={} expr=v4081[16] }
    cs      = { defs={} expr=v4082[16] }
    ss      = { defs={} expr=v4083[16] }
    ds      = { defs={} expr=v4084[16] }
    fs      = { defs={} expr=v4085[16] }
    gs      = { defs={} expr=v4086[16] }
    cf      = { defs={} expr=v4087[1] }
    ?1      = { defs={} expr=v4088[1] }
    pf      = { defs={} expr=v4089[1] }
    ?3      = { defs={} expr=v4090[1] }
    af      = { defs={} expr=v4091[1] }
    ?5      = { defs={} expr=v4092[1] }
    zf      = { defs={} expr=v4093[1] }
    sf      = { defs={} expr=v4094[1] }
    tf      = { defs={} expr=v4095[1] }
    if      = { defs={} expr=v4096[1] }
    df      = { defs={} expr=v4097[1] }
    of      = { defs={} expr=v4098[1] }
    iopl0   = { defs={} expr=v4099[1] }
    iopl1   = { defs={} expr=v4100[1] }
    nt      = { defs={} expr=v4101[1] }
    ?15     = { defs={} expr=v4102[1] }
    rf      = { defs={} expr=v4103[1] }
    vm      = { defs={} expr=v4104[1] }
    ac      = { defs={} expr=v4105[1] }
    vif     = { defs={} expr=v4106[1] }
    vip     = { defs={} expr=v4107[1] }
    id      = { defs={} expr=v4108[1] }
    ?22     = { defs={} expr=v4109[1] }
    ?23     = { defs={} expr=v4110[1] }
    ?24     = { defs={} expr=v4111[1] }
    ?25     = { defs={} expr=v4112[1] }
    ?26     = { defs={} expr=v4113[1] }
    ?27     = { defs={} expr=v4114[1] }
    ?28     = { defs={} expr=v4115[1] }
    ?29     = { defs={} expr=v4116[1] }
    ?30     = { defs={} expr=v4117[1] }
    ?31     = { defs={} expr=v4118[1] }
    ip      = { defs={0x08048455} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4156[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4157[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4158[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4159[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v4078[32] 4[32]) 3[32]) }
      value = { defs={} expr=v4159[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v4078[32] 4[32]) 2[32]) }
      value = { defs={} expr=v4158[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v4078[32] 4[32]) 1[32]) }
      value = { defs={} expr=v4157[8] }
      flags = { rdonly }
    address = { defs={0x08048452,0x08048454} expr=(add[32] v4078[32] 4[32]) }
      value = { defs={} expr=v4156[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4078[32] 3[32]) }
      value = { defs={} expr=v4138[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4078[32] 2[32]) }
      value = { defs={} expr=v4137[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4078[32] 1[32]) }
      value = { defs={} expr=v4136[8] }
      flags = { rdonly }
    address = { defs={0x08048452} expr=v4078[32] }
      value = { defs={} expr=v4135[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048460:push   ebp
registers:
    ax      = { v35514 }
    cx      = { v35515 }
    dx      = { v35516 }
    bx      = { v35517 }
    sp      = { v35518-0x4 }
    bp      = { v35519 }
    si      = { v35520 }
    di      = { v35521 }
    es      = { v35522 }
    cs      = { v35523 }
    ss      = { v35524 }
    ds      = { v35525 }
    fs      = { v35526 }
    gs      = { v35527 }
    cf      = { v35528 }
    ?1      = { v35529 }
    pf      = { v35530 }
    ?3      = { v35531 }
    af      = { v35532 }
    ?5      = { v35533 }
    zf      = { v35534 }
    sf      = { v35535 }
    tf      = { v35536 }
    if      = { v35537 }
    df      = { v35538 }
    of      = { v35539 }
    iopl0   = { v35540 }
    iopl1   = { v35541 }
    nt      = { v35542 }
    ?15     = { v35543 }
    rf      = { v35544 }
    vm      = { v35545 }
    ac      = { v35546 }
    vif     = { v35547 }
    vip     = { v35548 }
    id      = { v35549 }
    ?22     = { v35550 }
    ?23     = { v35551 }
    ?24     = { v35552 }
    ?25     = { v35553 }
    ?26     = { v35554 }
    ?27     = { v35555 }
    ?28     = { v35556 }
    ?29     = { v35557 }
    ?30     = { v35558 }
    ?31     = { v35559 }
    ip      = { 0x8048461 }
memory:
    address = { v35518-0x4 }
      value = { v35519 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4214[32] }
    cx      = { defs={} expr=v4215[32] }
    dx      = { defs={} expr=v4216[32] }
    bx      = { defs={} expr=v4217[32] }
    sp      = { defs={0x08048460} expr=(add[32] v4218[32] -4[32]) }
    bp      = { defs={} expr=v4219[32] }
    si      = { defs={} expr=v4220[32] }
    di      = { defs={} expr=v4221[32] }
    es      = { defs={} expr=v4222[16] }
    cs      = { defs={} expr=v4223[16] }
    ss      = { defs={} expr=v4224[16] }
    ds      = { defs={} expr=v4225[16] }
    fs      = { defs={} expr=v4226[16] }
    gs      = { defs={} expr=v4227[16] }
    cf      = { defs={} expr=v4228[1] }
    ?1      = { defs={} expr=v4229[1] }
    pf      = { defs={} expr=v4230[1] }
    ?3      = { defs={} expr=v4231[1] }
    af      = { defs={} expr=v4232[1] }
    ?5      = { defs={} expr=v4233[1] }
    zf      = { defs={} expr=v4234[1] }
    sf      = { defs={} expr=v4235[1] }
    tf      = { defs={} expr=v4236[1] }
    if      = { defs={} expr=v4237[1] }
    df      = { defs={} expr=v4238[1] }
    of      = { defs={} expr=v4239[1] }
    iopl0   = { defs={} expr=v4240[1] }
    iopl1   = { defs={} expr=v4241[1] }
    nt      = { defs={} expr=v4242[1] }
    ?15     = { defs={} expr=v4243[1] }
    rf      = { defs={} expr=v4244[1] }
    vm      = { defs={} expr=v4245[1] }
    ac      = { defs={} expr=v4246[1] }
    vif     = { defs={} expr=v4247[1] }
    vip     = { defs={} expr=v4248[1] }
    id      = { defs={} expr=v4249[1] }
    ?22     = { defs={} expr=v4250[1] }
    ?23     = { defs={} expr=v4251[1] }
    ?24     = { defs={} expr=v4252[1] }
    ?25     = { defs={} expr=v4253[1] }
    ?26     = { defs={} expr=v4254[1] }
    ?27     = { defs={} expr=v4255[1] }
    ?28     = { defs={} expr=v4256[1] }
    ?29     = { defs={} expr=v4257[1] }
    ?30     = { defs={} expr=v4258[1] }
    ?31     = { defs={} expr=v4259[1] }
    ip      = { defs={0x08048460} expr=0x08048461[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4219[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4219[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4219[32]) }
      flags = { }
    address = { defs={0x08048460} expr=(add[32] v4218[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4219[32]) }
      flags = { }
init mem:
null state
null state
0x8048461:mov    ebp, esp
registers:
    ax      = { v35514 }
    cx      = { v35515 }
    dx      = { v35516 }
    bx      = { v35517 }
    sp      = { v35518-0x4 }
    bp      = { v35518-0x4 }
    si      = { v35520 }
    di      = { v35521 }
    es      = { v35522 }
    cs      = { v35523 }
    ss      = { v35524 }
    ds      = { v35525 }
    fs      = { v35526 }
    gs      = { v35527 }
    cf      = { v35528 }
    ?1      = { v35529 }
    pf      = { v35530 }
    ?3      = { v35531 }
    af      = { v35532 }
    ?5      = { v35533 }
    zf      = { v35534 }
    sf      = { v35535 }
    tf      = { v35536 }
    if      = { v35537 }
    df      = { v35538 }
    of      = { v35539 }
    iopl0   = { v35540 }
    iopl1   = { v35541 }
    nt      = { v35542 }
    ?15     = { v35543 }
    rf      = { v35544 }
    vm      = { v35545 }
    ac      = { v35546 }
    vif     = { v35547 }
    vip     = { v35548 }
    id      = { v35549 }
    ?22     = { v35550 }
    ?23     = { v35551 }
    ?24     = { v35552 }
    ?25     = { v35553 }
    ?26     = { v35554 }
    ?27     = { v35555 }
    ?28     = { v35556 }
    ?29     = { v35557 }
    ?30     = { v35558 }
    ?31     = { v35559 }
    ip      = { 0x8048463 }
memory:
    address = { v35518-0x4 }
      value = { v35519 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4214[32] }
    cx      = { defs={} expr=v4215[32] }
    dx      = { defs={} expr=v4216[32] }
    bx      = { defs={} expr=v4217[32] }
    sp      = { defs={0x08048460} expr=(add[32] v4218[32] -4[32]) }
    bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4218[32] -4[32]) }
    si      = { defs={} expr=v4220[32] }
    di      = { defs={} expr=v4221[32] }
    es      = { defs={} expr=v4222[16] }
    cs      = { defs={} expr=v4223[16] }
    ss      = { defs={} expr=v4224[16] }
    ds      = { defs={} expr=v4225[16] }
    fs      = { defs={} expr=v4226[16] }
    gs      = { defs={} expr=v4227[16] }
    cf      = { defs={} expr=v4228[1] }
    ?1      = { defs={} expr=v4229[1] }
    pf      = { defs={} expr=v4230[1] }
    ?3      = { defs={} expr=v4231[1] }
    af      = { defs={} expr=v4232[1] }
    ?5      = { defs={} expr=v4233[1] }
    zf      = { defs={} expr=v4234[1] }
    sf      = { defs={} expr=v4235[1] }
    tf      = { defs={} expr=v4236[1] }
    if      = { defs={} expr=v4237[1] }
    df      = { defs={} expr=v4238[1] }
    of      = { defs={} expr=v4239[1] }
    iopl0   = { defs={} expr=v4240[1] }
    iopl1   = { defs={} expr=v4241[1] }
    nt      = { defs={} expr=v4242[1] }
    ?15     = { defs={} expr=v4243[1] }
    rf      = { defs={} expr=v4244[1] }
    vm      = { defs={} expr=v4245[1] }
    ac      = { defs={} expr=v4246[1] }
    vif     = { defs={} expr=v4247[1] }
    vip     = { defs={} expr=v4248[1] }
    id      = { defs={} expr=v4249[1] }
    ?22     = { defs={} expr=v4250[1] }
    ?23     = { defs={} expr=v4251[1] }
    ?24     = { defs={} expr=v4252[1] }
    ?25     = { defs={} expr=v4253[1] }
    ?26     = { defs={} expr=v4254[1] }
    ?27     = { defs={} expr=v4255[1] }
    ?28     = { defs={} expr=v4256[1] }
    ?29     = { defs={} expr=v4257[1] }
    ?30     = { defs={} expr=v4258[1] }
    ?31     = { defs={} expr=v4259[1] }
    ip      = { defs={0x08048460,0x08048461} expr=0x08048463[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4219[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4219[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4219[32]) }
      flags = { }
    address = { defs={0x08048460} expr=(add[32] v4218[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4219[32]) }
      flags = { }
init mem:
null state
null state
0x8048463:sub    esp, 0x08
registers:
    ax      = { v35514 }
    cx      = { v35515 }
    dx      = { v35516 }
    bx      = { v35517 }
    sp      = { v35518-0xc }
    bp      = { v35518-0x4 }
    si      = { v35520 }
    di      = { v35521 }
    es      = { v35522 }
    cs      = { v35523 }
    ss      = { v35524 }
    ds      = { v35525 }
    fs      = { v35526 }
    gs      = { v35527 }
    cf      = { -v35625+0x1 }
    ?1      = { v35529 }
    pf      = { -v35615+0x1 }
    ?3      = { v35531 }
    af      = { -v35622+0x1 }
    ?5      = { v35533 }
    zf      = { v35620 }
    sf      = { v35618 }
    tf      = { v35536 }
    if      = { v35537 }
    df      = { v35538 }
    of      = { v35632 }
    iopl0   = { v35540 }
    iopl1   = { v35541 }
    nt      = { v35542 }
    ?15     = { v35543 }
    rf      = { v35544 }
    vm      = { v35545 }
    ac      = { v35546 }
    vif     = { v35547 }
    vip     = { v35548 }
    id      = { v35549 }
    ?22     = { v35550 }
    ?23     = { v35551 }
    ?24     = { v35552 }
    ?25     = { v35553 }
    ?26     = { v35554 }
    ?27     = { v35555 }
    ?28     = { v35556 }
    ?29     = { v35557 }
    ?30     = { v35558 }
    ?31     = { v35559 }
    ip      = { 0x8048466 }
memory:
    address = { v35518-0x4 }
      value = { v35519 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4214[32] }
    cx      = { defs={} expr=v4215[32] }
    dx      = { defs={} expr=v4216[32] }
    bx      = { defs={} expr=v4217[32] }
    sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4218[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4218[32] -4[32]) }
    si      = { defs={} expr=v4220[32] }
    di      = { defs={} expr=v4221[32] }
    es      = { defs={} expr=v4222[16] }
    cs      = { defs={} expr=v4223[16] }
    ss      = { defs={} expr=v4224[16] }
    ds      = { defs={} expr=v4225[16] }
    fs      = { defs={} expr=v4226[16] }
    gs      = { defs={} expr=v4227[16] }
    cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v4229[1] }
    pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v4231[1] }
    af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v4233[1] }
    zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4218[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4218[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v4236[1] }
    if      = { defs={} expr=v4237[1] }
    df      = { defs={} expr=v4238[1] }
    of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v4240[1] }
    iopl1   = { defs={} expr=v4241[1] }
    nt      = { defs={} expr=v4242[1] }
    ?15     = { defs={} expr=v4243[1] }
    rf      = { defs={} expr=v4244[1] }
    vm      = { defs={} expr=v4245[1] }
    ac      = { defs={} expr=v4246[1] }
    vif     = { defs={} expr=v4247[1] }
    vip     = { defs={} expr=v4248[1] }
    id      = { defs={} expr=v4249[1] }
    ?22     = { defs={} expr=v4250[1] }
    ?23     = { defs={} expr=v4251[1] }
    ?24     = { defs={} expr=v4252[1] }
    ?25     = { defs={} expr=v4253[1] }
    ?26     = { defs={} expr=v4254[1] }
    ?27     = { defs={} expr=v4255[1] }
    ?28     = { defs={} expr=v4256[1] }
    ?29     = { defs={} expr=v4257[1] }
    ?30     = { defs={} expr=v4258[1] }
    ?31     = { defs={} expr=v4259[1] }
    ip      = { defs={0x08048460,0x08048461,0x08048463} expr=0x08048466[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4219[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4219[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4219[32]) }
      flags = { }
    address = { defs={0x08048460} expr=(add[32] v4218[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4219[32]) }
      flags = { }
init mem:
null state
null state
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
registers:
    ax      = { v35514 }
    cx      = { v35515 }
    dx      = { v35516 }
    bx      = { v35517 }
    sp      = { v35518-0xc }
    bp      = { v35518-0x4 }
    si      = { v35520 }
    di      = { v35521 }
    es      = { v35522 }
    cs      = { v35523 }
    ss      = { v35524 }
    ds      = { v35525 }
    fs      = { v35526 }
    gs      = { v35527 }
    cf      = { -v35625+0x1 }
    ?1      = { v35529 }
    pf      = { -v35615+0x1 }
    ?3      = { v35531 }
    af      = { -v35622+0x1 }
    ?5      = { v35533 }
    zf      = { v35620 }
    sf      = { v35618 }
    tf      = { v35536 }
    if      = { v35537 }
    df      = { v35538 }
    of      = { v35632 }
    iopl0   = { v35540 }
    iopl1   = { v35541 }
    nt      = { v35542 }
    ?15     = { v35543 }
    rf      = { v35544 }
    vm      = { v35545 }
    ac      = { v35546 }
    vif     = { v35547 }
    vip     = { v35548 }
    id      = { v35549 }
    ?22     = { v35550 }
    ?23     = { v35551 }
    ?24     = { v35552 }
    ?25     = { v35553 }
    ?26     = { v35554 }
    ?27     = { v35555 }
    ?28     = { v35556 }
    ?29     = { v35557 }
    ?30     = { v35558 }
    ?31     = { v35559 }
    ip      = { 0x804846d }
memory:
    address = { v35518-0x4 }
      value = { v35519 }
      flags = { size=4 }
    address = { v35518-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4214[32] }
    cx      = { defs={} expr=v4215[32] }
    dx      = { defs={} expr=v4216[32] }
    bx      = { defs={} expr=v4217[32] }
    sp      = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4218[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4218[32] -4[32]) }
    si      = { defs={} expr=v4220[32] }
    di      = { defs={} expr=v4221[32] }
    es      = { defs={} expr=v4222[16] }
    cs      = { defs={} expr=v4223[16] }
    ss      = { defs={} expr=v4224[16] }
    ds      = { defs={} expr=v4225[16] }
    fs      = { defs={} expr=v4226[16] }
    gs      = { defs={} expr=v4227[16] }
    cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v4229[1] }
    pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v4231[1] }
    af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v4233[1] }
    zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4218[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4218[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v4236[1] }
    if      = { defs={} expr=v4237[1] }
    df      = { defs={} expr=v4238[1] }
    of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v4240[1] }
    iopl1   = { defs={} expr=v4241[1] }
    nt      = { defs={} expr=v4242[1] }
    ?15     = { defs={} expr=v4243[1] }
    rf      = { defs={} expr=v4244[1] }
    vm      = { defs={} expr=v4245[1] }
    ac      = { defs={} expr=v4246[1] }
    vif     = { defs={} expr=v4247[1] }
    vip     = { defs={} expr=v4248[1] }
    id      = { defs={} expr=v4249[1] }
    ?22     = { defs={} expr=v4250[1] }
    ?23     = { defs={} expr=v4251[1] }
    ?24     = { defs={} expr=v4252[1] }
    ?25     = { defs={} expr=v4253[1] }
    ?26     = { defs={} expr=v4254[1] }
    ?27     = { defs={} expr=v4255[1] }
    ?28     = { defs={} expr=v4256[1] }
    ?29     = { defs={} expr=v4257[1] }
    ?30     = { defs={} expr=v4258[1] }
    ?31     = { defs={} expr=v4259[1] }
    ip      = { defs={0x08048460,0x08048461,0x08048463,0x08048466} expr=0x0804846d[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4218[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4219[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4219[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4219[32]) }
      flags = { }
    address = { defs={0x08048460} expr=(add[32] v4218[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4219[32]) }
      flags = { }
init mem:
null state
null state
0x804846d:call   0x08048300<puts@plt>
registers:
    ax      = { v35514 }
    cx      = { v35515 }
    dx      = { v35516 }
    bx      = { v35517 }
    sp      = { v35518-0x10 }
    bp      = { v35518-0x4 }
    si      = { v35520 }
    di      = { v35521 }
    es      = { v35522 }
    cs      = { v35523 }
    ss      = { v35524 }
    ds      = { v35525 }
    fs      = { v35526 }
    gs      = { v35527 }
    cf      = { -v35625+0x1 }
    ?1      = { v35529 }
    pf      = { -v35615+0x1 }
    ?3      = { v35531 }
    af      = { -v35622+0x1 }
    ?5      = { v35533 }
    zf      = { v35620 }
    sf      = { v35618 }
    tf      = { v35536 }
    if      = { v35537 }
    df      = { v35538 }
    of      = { v35632 }
    iopl0   = { v35540 }
    iopl1   = { v35541 }
    nt      = { v35542 }
    ?15     = { v35543 }
    rf      = { v35544 }
    vm      = { v35545 }
    ac      = { v35546 }
    vif     = { v35547 }
    vip     = { v35548 }
    id      = { v35549 }
    ?22     = { v35550 }
    ?23     = { v35551 }
    ?24     = { v35552 }
    ?25     = { v35553 }
    ?26     = { v35554 }
    ?27     = { v35555 }
    ?28     = { v35556 }
    ?29     = { v35557 }
    ?30     = { v35558 }
    ?31     = { v35559 }
    ip      = { 0x8048300 }
memory:
    address = { v35518-0x4 }
      value = { v35519 }
      flags = { size=4 }
    address = { v35518-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
    address = { v35518-0x10 }
      value = { 0x8048472 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4214[32] }
    cx      = { defs={} expr=v4215[32] }
    dx      = { defs={} expr=v4216[32] }
    bx      = { defs={} expr=v4217[32] }
    sp      = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) -4[32]) }
    bp      = { defs={0x08048460,0x08048461} expr=(add[32] v4218[32] -4[32]) }
    si      = { defs={} expr=v4220[32] }
    di      = { defs={} expr=v4221[32] }
    es      = { defs={} expr=v4222[16] }
    cs      = { defs={} expr=v4223[16] }
    ss      = { defs={} expr=v4224[16] }
    ds      = { defs={} expr=v4225[16] }
    fs      = { defs={} expr=v4226[16] }
    gs      = { defs={} expr=v4227[16] }
    cf      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v4229[1] }
    pf      = { defs={0x08048460,0x08048463} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v4231[1] }
    af      = { defs={0x08048460,0x08048463} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v4233[1] }
    zf      = { defs={0x08048460,0x08048463} expr=(zerop[1] (add[32] (add[32] v4218[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048460,0x08048463} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4218[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v4236[1] }
    if      = { defs={} expr=v4237[1] }
    df      = { defs={} expr=v4238[1] }
    of      = { defs={0x08048460,0x08048463} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4218[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v4240[1] }
    iopl1   = { defs={} expr=v4241[1] }
    nt      = { defs={} expr=v4242[1] }
    ?15     = { defs={} expr=v4243[1] }
    rf      = { defs={} expr=v4244[1] }
    vm      = { defs={} expr=v4245[1] }
    ac      = { defs={} expr=v4246[1] }
    vif     = { defs={} expr=v4247[1] }
    vip     = { defs={} expr=v4248[1] }
    id      = { defs={} expr=v4249[1] }
    ?22     = { defs={} expr=v4250[1] }
    ?23     = { defs={} expr=v4251[1] }
    ?24     = { defs={} expr=v4252[1] }
    ?25     = { defs={} expr=v4253[1] }
    ?26     = { defs={} expr=v4254[1] }
    ?27     = { defs={} expr=v4255[1] }
    ?28     = { defs={} expr=v4256[1] }
    ?29     = { defs={} expr=v4257[1] }
    ?30     = { defs={} expr=v4258[1] }
    ?31     = { defs={} expr=v4259[1] }
    ip      = { defs={0x0804846d} expr=0x08048300[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048460,0x08048463,0x0804846d} expr=(add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) -4[32]) }
      value = { defs={} expr=114[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4218[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048460,0x08048463} expr=(add[32] (add[32] v4218[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4219[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4219[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4218[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4219[32]) }
      flags = { }
    address = { defs={0x08048460} expr=(add[32] v4218[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4219[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
registers:
    ax      = { v35699 }
    cx      = { v35700 }
    dx      = { v35701 }
    bx      = { v35702 }
    sp      = { v35703 }
    bp      = { v35704 }
    si      = { v35705 }
    di      = { v35706 }
    es      = { v35707 }
    cs      = { v35708 }
    ss      = { v35709 }
    ds      = { v35710 }
    fs      = { v35711 }
    gs      = { v35712 }
    cf      = { v35713 }
    ?1      = { v35714 }
    pf      = { v35715 }
    ?3      = { v35716 }
    af      = { v35717 }
    ?5      = { v35718 }
    zf      = { v35719 }
    sf      = { v35720 }
    tf      = { v35721 }
    if      = { v35722 }
    df      = { v35723 }
    of      = { v35724 }
    iopl0   = { v35725 }
    iopl1   = { v35726 }
    nt      = { v35727 }
    ?15     = { v35728 }
    rf      = { v35729 }
    vm      = { v35730 }
    ac      = { v35731 }
    vif     = { v35732 }
    vip     = { v35733 }
    id      = { v35734 }
    ?22     = { v35735 }
    ?23     = { v35736 }
    ?24     = { v35737 }
    ?25     = { v35738 }
    ?26     = { v35739 }
    ?27     = { v35740 }
    ?28     = { v35741 }
    ?29     = { v35742 }
    ?30     = { v35743 }
    ?31     = { v35744 }
    ip      = { 0x8048479 }
memory:
    address = { v35703 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4377[32] }
    cx      = { defs={} expr=v4378[32] }
    dx      = { defs={} expr=v4379[32] }
    bx      = { defs={} expr=v4380[32] }
    sp      = { defs={} expr=v4381[32] }
    bp      = { defs={} expr=v4382[32] }
    si      = { defs={} expr=v4383[32] }
    di      = { defs={} expr=v4384[32] }
    es      = { defs={} expr=v4385[16] }
    cs      = { defs={} expr=v4386[16] }
    ss      = { defs={} expr=v4387[16] }
    ds      = { defs={} expr=v4388[16] }
    fs      = { defs={} expr=v4389[16] }
    gs      = { defs={} expr=v4390[16] }
    cf      = { defs={} expr=v4391[1] }
    ?1      = { defs={} expr=v4392[1] }
    pf      = { defs={} expr=v4393[1] }
    ?3      = { defs={} expr=v4394[1] }
    af      = { defs={} expr=v4395[1] }
    ?5      = { defs={} expr=v4396[1] }
    zf      = { defs={} expr=v4397[1] }
    sf      = { defs={} expr=v4398[1] }
    tf      = { defs={} expr=v4399[1] }
    if      = { defs={} expr=v4400[1] }
    df      = { defs={} expr=v4401[1] }
    of      = { defs={} expr=v4402[1] }
    iopl0   = { defs={} expr=v4403[1] }
    iopl1   = { defs={} expr=v4404[1] }
    nt      = { defs={} expr=v4405[1] }
    ?15     = { defs={} expr=v4406[1] }
    rf      = { defs={} expr=v4407[1] }
    vm      = { defs={} expr=v4408[1] }
    ac      = { defs={} expr=v4409[1] }
    vif     = { defs={} expr=v4410[1] }
    vip     = { defs={} expr=v4411[1] }
    id      = { defs={} expr=v4412[1] }
    ?22     = { defs={} expr=v4413[1] }
    ?23     = { defs={} expr=v4414[1] }
    ?24     = { defs={} expr=v4415[1] }
    ?25     = { defs={} expr=v4416[1] }
    ?26     = { defs={} expr=v4417[1] }
    ?27     = { defs={} expr=v4418[1] }
    ?28     = { defs={} expr=v4419[1] }
    ?29     = { defs={} expr=v4420[1] }
    ?30     = { defs={} expr=v4421[1] }
    ?31     = { defs={} expr=v4422[1] }
    ip      = { defs={0x08048472} expr=0x08048479[32] }
memory:
    address = { defs={} expr=(add[32] v4381[32] 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4381[32] 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4381[32] 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=v4381[32] }
      value = { defs={} expr=0[8] }
      flags = { }
init mem:
null state
null state
0x8048479:call   0x08048320<_exit@plt>
registers:
    ax      = { v35699 }
    cx      = { v35700 }
    dx      = { v35701 }
    bx      = { v35702 }
    sp      = { v35703-0x4 }
    bp      = { v35704 }
    si      = { v35705 }
    di      = { v35706 }
    es      = { v35707 }
    cs      = { v35708 }
    ss      = { v35709 }
    ds      = { v35710 }
    fs      = { v35711 }
    gs      = { v35712 }
    cf      = { v35713 }
    ?1      = { v35714 }
    pf      = { v35715 }
    ?3      = { v35716 }
    af      = { v35717 }
    ?5      = { v35718 }
    zf      = { v35719 }
    sf      = { v35720 }
    tf      = { v35721 }
    if      = { v35722 }
    df      = { v35723 }
    of      = { v35724 }
    iopl0   = { v35725 }
    iopl1   = { v35726 }
    nt      = { v35727 }
    ?15     = { v35728 }
    rf      = { v35729 }
    vm      = { v35730 }
    ac      = { v35731 }
    vif     = { v35732 }
    vip     = { v35733 }
    id      = { v35734 }
    ?22     = { v35735 }
    ?23     = { v35736 }
    ?24     = { v35737 }
    ?25     = { v35738 }
    ?26     = { v35739 }
    ?27     = { v35740 }
    ?28     = { v35741 }
    ?29     = { v35742 }
    ?30     = { v35743 }
    ?31     = { v35744 }
    ip      = { 0x8048320 }
memory:
    address = { v35703 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v35703-0x4 }
      value = { 0x804847e }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4377[32] }
    cx      = { defs={} expr=v4378[32] }
    dx      = { defs={} expr=v4379[32] }
    bx      = { defs={} expr=v4380[32] }
    sp      = { defs={0x08048479} expr=(add[32] v4381[32] -4[32]) }
    bp      = { defs={} expr=v4382[32] }
    si      = { defs={} expr=v4383[32] }
    di      = { defs={} expr=v4384[32] }
    es      = { defs={} expr=v4385[16] }
    cs      = { defs={} expr=v4386[16] }
    ss      = { defs={} expr=v4387[16] }
    ds      = { defs={} expr=v4388[16] }
    fs      = { defs={} expr=v4389[16] }
    gs      = { defs={} expr=v4390[16] }
    cf      = { defs={} expr=v4391[1] }
    ?1      = { defs={} expr=v4392[1] }
    pf      = { defs={} expr=v4393[1] }
    ?3      = { defs={} expr=v4394[1] }
    af      = { defs={} expr=v4395[1] }
    ?5      = { defs={} expr=v4396[1] }
    zf      = { defs={} expr=v4397[1] }
    sf      = { defs={} expr=v4398[1] }
    tf      = { defs={} expr=v4399[1] }
    if      = { defs={} expr=v4400[1] }
    df      = { defs={} expr=v4401[1] }
    of      = { defs={} expr=v4402[1] }
    iopl0   = { defs={} expr=v4403[1] }
    iopl1   = { defs={} expr=v4404[1] }
    nt      = { defs={} expr=v4405[1] }
    ?15     = { defs={} expr=v4406[1] }
    rf      = { defs={} expr=v4407[1] }
    vm      = { defs={} expr=v4408[1] }
    ac      = { defs={} expr=v4409[1] }
    vif     = { defs={} expr=v4410[1] }
    vip     = { defs={} expr=v4411[1] }
    id      = { defs={} expr=v4412[1] }
    ?22     = { defs={} expr=v4413[1] }
    ?23     = { defs={} expr=v4414[1] }
    ?24     = { defs={} expr=v4415[1] }
    ?25     = { defs={} expr=v4416[1] }
    ?26     = { defs={} expr=v4417[1] }
    ?27     = { defs={} expr=v4418[1] }
    ?28     = { defs={} expr=v4419[1] }
    ?29     = { defs={} expr=v4420[1] }
    ?30     = { defs={} expr=v4421[1] }
    ?31     = { defs={} expr=v4422[1] }
    ip      = { defs={0x08048479} expr=0x08048320[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4381[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4381[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4381[32] -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048479} expr=(add[32] v4381[32] -4[32]) }
      value = { defs={} expr=126[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4381[32] 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4381[32] 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4381[32] 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=v4381[32] }
      value = { defs={} expr=0[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048480:push   ebp
registers:
    ax      = { v35811 }
    cx      = { v35812 }
    dx      = { v35813 }
    bx      = { v35814 }
    sp      = { v35815-0x4 }
    bp      = { v35816 }
    si      = { v35817 }
    di      = { v35818 }
    es      = { v35819 }
    cs      = { v35820 }
    ss      = { v35821 }
    ds      = { v35822 }
    fs      = { v35823 }
    gs      = { v35824 }
    cf      = { v35825 }
    ?1      = { v35826 }
    pf      = { v35827 }
    ?3      = { v35828 }
    af      = { v35829 }
    ?5      = { v35830 }
    zf      = { v35831 }
    sf      = { v35832 }
    tf      = { v35833 }
    if      = { v35834 }
    df      = { v35835 }
    of      = { v35836 }
    iopl0   = { v35837 }
    iopl1   = { v35838 }
    nt      = { v35839 }
    ?15     = { v35840 }
    rf      = { v35841 }
    vm      = { v35842 }
    ac      = { v35843 }
    vif     = { v35844 }
    vip     = { v35845 }
    id      = { v35846 }
    ?22     = { v35847 }
    ?23     = { v35848 }
    ?24     = { v35849 }
    ?25     = { v35850 }
    ?26     = { v35851 }
    ?27     = { v35852 }
    ?28     = { v35853 }
    ?29     = { v35854 }
    ?30     = { v35855 }
    ?31     = { v35856 }
    ip      = { 0x8048481 }
memory:
    address = { v35815-0x4 }
      value = { v35816 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4489[32] }
    cx      = { defs={} expr=v4490[32] }
    dx      = { defs={} expr=v4491[32] }
    bx      = { defs={} expr=v4492[32] }
    sp      = { defs={0x08048480} expr=(add[32] v4493[32] -4[32]) }
    bp      = { defs={} expr=v4494[32] }
    si      = { defs={} expr=v4495[32] }
    di      = { defs={} expr=v4496[32] }
    es      = { defs={} expr=v4497[16] }
    cs      = { defs={} expr=v4498[16] }
    ss      = { defs={} expr=v4499[16] }
    ds      = { defs={} expr=v4500[16] }
    fs      = { defs={} expr=v4501[16] }
    gs      = { defs={} expr=v4502[16] }
    cf      = { defs={} expr=v4503[1] }
    ?1      = { defs={} expr=v4504[1] }
    pf      = { defs={} expr=v4505[1] }
    ?3      = { defs={} expr=v4506[1] }
    af      = { defs={} expr=v4507[1] }
    ?5      = { defs={} expr=v4508[1] }
    zf      = { defs={} expr=v4509[1] }
    sf      = { defs={} expr=v4510[1] }
    tf      = { defs={} expr=v4511[1] }
    if      = { defs={} expr=v4512[1] }
    df      = { defs={} expr=v4513[1] }
    of      = { defs={} expr=v4514[1] }
    iopl0   = { defs={} expr=v4515[1] }
    iopl1   = { defs={} expr=v4516[1] }
    nt      = { defs={} expr=v4517[1] }
    ?15     = { defs={} expr=v4518[1] }
    rf      = { defs={} expr=v4519[1] }
    vm      = { defs={} expr=v4520[1] }
    ac      = { defs={} expr=v4521[1] }
    vif     = { defs={} expr=v4522[1] }
    vip     = { defs={} expr=v4523[1] }
    id      = { defs={} expr=v4524[1] }
    ?22     = { defs={} expr=v4525[1] }
    ?23     = { defs={} expr=v4526[1] }
    ?24     = { defs={} expr=v4527[1] }
    ?25     = { defs={} expr=v4528[1] }
    ?26     = { defs={} expr=v4529[1] }
    ?27     = { defs={} expr=v4530[1] }
    ?28     = { defs={} expr=v4531[1] }
    ?29     = { defs={} expr=v4532[1] }
    ?30     = { defs={} expr=v4533[1] }
    ?31     = { defs={} expr=v4534[1] }
    ip      = { defs={0x08048480} expr=0x08048481[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4494[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v4493[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4494[32]) }
      flags = { }
init mem:
null state
null state
0x8048481:mov    ebp, esp
registers:
    ax      = { v35811 }
    cx      = { v35812 }
    dx      = { v35813 }
    bx      = { v35814 }
    sp      = { v35815-0x4 }
    bp      = { v35815-0x4 }
    si      = { v35817 }
    di      = { v35818 }
    es      = { v35819 }
    cs      = { v35820 }
    ss      = { v35821 }
    ds      = { v35822 }
    fs      = { v35823 }
    gs      = { v35824 }
    cf      = { v35825 }
    ?1      = { v35826 }
    pf      = { v35827 }
    ?3      = { v35828 }
    af      = { v35829 }
    ?5      = { v35830 }
    zf      = { v35831 }
    sf      = { v35832 }
    tf      = { v35833 }
    if      = { v35834 }
    df      = { v35835 }
    of      = { v35836 }
    iopl0   = { v35837 }
    iopl1   = { v35838 }
    nt      = { v35839 }
    ?15     = { v35840 }
    rf      = { v35841 }
    vm      = { v35842 }
    ac      = { v35843 }
    vif     = { v35844 }
    vip     = { v35845 }
    id      = { v35846 }
    ?22     = { v35847 }
    ?23     = { v35848 }
    ?24     = { v35849 }
    ?25     = { v35850 }
    ?26     = { v35851 }
    ?27     = { v35852 }
    ?28     = { v35853 }
    ?29     = { v35854 }
    ?30     = { v35855 }
    ?31     = { v35856 }
    ip      = { 0x8048483 }
memory:
    address = { v35815-0x4 }
      value = { v35816 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4489[32] }
    cx      = { defs={} expr=v4490[32] }
    dx      = { defs={} expr=v4491[32] }
    bx      = { defs={} expr=v4492[32] }
    sp      = { defs={0x08048480} expr=(add[32] v4493[32] -4[32]) }
    bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4493[32] -4[32]) }
    si      = { defs={} expr=v4495[32] }
    di      = { defs={} expr=v4496[32] }
    es      = { defs={} expr=v4497[16] }
    cs      = { defs={} expr=v4498[16] }
    ss      = { defs={} expr=v4499[16] }
    ds      = { defs={} expr=v4500[16] }
    fs      = { defs={} expr=v4501[16] }
    gs      = { defs={} expr=v4502[16] }
    cf      = { defs={} expr=v4503[1] }
    ?1      = { defs={} expr=v4504[1] }
    pf      = { defs={} expr=v4505[1] }
    ?3      = { defs={} expr=v4506[1] }
    af      = { defs={} expr=v4507[1] }
    ?5      = { defs={} expr=v4508[1] }
    zf      = { defs={} expr=v4509[1] }
    sf      = { defs={} expr=v4510[1] }
    tf      = { defs={} expr=v4511[1] }
    if      = { defs={} expr=v4512[1] }
    df      = { defs={} expr=v4513[1] }
    of      = { defs={} expr=v4514[1] }
    iopl0   = { defs={} expr=v4515[1] }
    iopl1   = { defs={} expr=v4516[1] }
    nt      = { defs={} expr=v4517[1] }
    ?15     = { defs={} expr=v4518[1] }
    rf      = { defs={} expr=v4519[1] }
    vm      = { defs={} expr=v4520[1] }
    ac      = { defs={} expr=v4521[1] }
    vif     = { defs={} expr=v4522[1] }
    vip     = { defs={} expr=v4523[1] }
    id      = { defs={} expr=v4524[1] }
    ?22     = { defs={} expr=v4525[1] }
    ?23     = { defs={} expr=v4526[1] }
    ?24     = { defs={} expr=v4527[1] }
    ?25     = { defs={} expr=v4528[1] }
    ?26     = { defs={} expr=v4529[1] }
    ?27     = { defs={} expr=v4530[1] }
    ?28     = { defs={} expr=v4531[1] }
    ?29     = { defs={} expr=v4532[1] }
    ?30     = { defs={} expr=v4533[1] }
    ?31     = { defs={} expr=v4534[1] }
    ip      = { defs={0x08048480,0x08048481} expr=0x08048483[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4494[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v4493[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4494[32]) }
      flags = { }
init mem:
null state
null state
0x8048483:sub    esp, 0x08
registers:
    ax      = { v35811 }
    cx      = { v35812 }
    dx      = { v35813 }
    bx      = { v35814 }
    sp      = { v35815-0xc }
    bp      = { v35815-0x4 }
    si      = { v35817 }
    di      = { v35818 }
    es      = { v35819 }
    cs      = { v35820 }
    ss      = { v35821 }
    ds      = { v35822 }
    fs      = { v35823 }
    gs      = { v35824 }
    cf      = { -v35922+0x1 }
    ?1      = { v35826 }
    pf      = { -v35912+0x1 }
    ?3      = { v35828 }
    af      = { -v35919+0x1 }
    ?5      = { v35830 }
    zf      = { v35917 }
    sf      = { v35915 }
    tf      = { v35833 }
    if      = { v35834 }
    df      = { v35835 }
    of      = { v35929 }
    iopl0   = { v35837 }
    iopl1   = { v35838 }
    nt      = { v35839 }
    ?15     = { v35840 }
    rf      = { v35841 }
    vm      = { v35842 }
    ac      = { v35843 }
    vif     = { v35844 }
    vip     = { v35845 }
    id      = { v35846 }
    ?22     = { v35847 }
    ?23     = { v35848 }
    ?24     = { v35849 }
    ?25     = { v35850 }
    ?26     = { v35851 }
    ?27     = { v35852 }
    ?28     = { v35853 }
    ?29     = { v35854 }
    ?30     = { v35855 }
    ?31     = { v35856 }
    ip      = { 0x8048486 }
memory:
    address = { v35815-0x4 }
      value = { v35816 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4489[32] }
    cx      = { defs={} expr=v4490[32] }
    dx      = { defs={} expr=v4491[32] }
    bx      = { defs={} expr=v4492[32] }
    sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4493[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4493[32] -4[32]) }
    si      = { defs={} expr=v4495[32] }
    di      = { defs={} expr=v4496[32] }
    es      = { defs={} expr=v4497[16] }
    cs      = { defs={} expr=v4498[16] }
    ss      = { defs={} expr=v4499[16] }
    ds      = { defs={} expr=v4500[16] }
    fs      = { defs={} expr=v4501[16] }
    gs      = { defs={} expr=v4502[16] }
    cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v4504[1] }
    pf      = { defs={0x08048480,0x08048483} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4493[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4493[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]))))))) }
    ?3      = { defs={} expr=v4506[1] }
    af      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) 4294967288[33])))))) }
    ?5      = { defs={} expr=v4508[1] }
    zf      = { defs={0x08048480,0x08048483} expr=(zerop[1] (add[32] (add[32] v4493[32] -4[32]) -8[32])) }
    sf      = { defs={0x08048480,0x08048483} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v4493[32] -4[32]) -8[32])) }
    tf      = { defs={} expr=v4511[1] }
    if      = { defs={} expr=v4512[1] }
    df      = { defs={} expr=v4513[1] }
    of      = { defs={0x08048480,0x08048483} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) 4294967288[33])))))) }
    iopl0   = { defs={} expr=v4515[1] }
    iopl1   = { defs={} expr=v4516[1] }
    nt      = { defs={} expr=v4517[1] }
    ?15     = { defs={} expr=v4518[1] }
    rf      = { defs={} expr=v4519[1] }
    vm      = { defs={} expr=v4520[1] }
    ac      = { defs={} expr=v4521[1] }
    vif     = { defs={} expr=v4522[1] }
    vip     = { defs={} expr=v4523[1] }
    id      = { defs={} expr=v4524[1] }
    ?22     = { defs={} expr=v4525[1] }
    ?23     = { defs={} expr=v4526[1] }
    ?24     = { defs={} expr=v4527[1] }
    ?25     = { defs={} expr=v4528[1] }
    ?26     = { defs={} expr=v4529[1] }
    ?27     = { defs={} expr=v4530[1] }
    ?28     = { defs={} expr=v4531[1] }
    ?29     = { defs={} expr=v4532[1] }
    ?30     = { defs={} expr=v4533[1] }
    ?31     = { defs={} expr=v4534[1] }
    ip      = { defs={0x08048480,0x08048481,0x08048483} expr=0x08048486[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4494[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v4493[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4494[32]) }
      flags = { }
init mem:
null state
null state
0x8048486:inc    DWORD PTR ds:[0x080496f8<.bss+4>]
registers:
    ax      = { v35811 }
    cx      = { v35812 }
    dx      = { v35813 }
    bx      = { v35814 }
    sp      = { v35815-0xc }
    bp      = { v35815-0x4 }
    si      = { v35817 }
    di      = { v35818 }
    es      = { v35819 }
    cs      = { v35820 }
    ss      = { v35821 }
    ds      = { v35822 }
    fs      = { v35823 }
    gs      = { v35824 }
    cf      = { -v35922+0x1 }
    ?1      = { v35826 }
    pf      = { -v35972+0x1 }
    ?3      = { v35828 }
    af      = { v35979 }
    ?5      = { v35830 }
    zf      = { v35977 }
    sf      = { v35975 }
    tf      = { v35833 }
    if      = { v35834 }
    df      = { v35835 }
    of      = { v35985 }
    iopl0   = { v35837 }
    iopl1   = { v35838 }
    nt      = { v35839 }
    ?15     = { v35840 }
    rf      = { v35841 }
    vm      = { v35842 }
    ac      = { v35843 }
    vif     = { v35844 }
    vip     = { v35845 }
    id      = { v35846 }
    ?22     = { v35847 }
    ?23     = { v35848 }
    ?24     = { v35849 }
    ?25     = { v35850 }
    ?26     = { v35851 }
    ?27     = { v35852 }
    ?28     = { v35853 }
    ?29     = { v35854 }
    ?30     = { v35855 }
    ?31     = { v35856 }
    ip      = { 0x804848c }
memory:
    address = { v35815-0x4 }
      value = { v35816 }
      flags = { size=4; clobbered }
    address = { 0x80496f8 }
      value = { v35937+0x1 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4489[32] }
    cx      = { defs={} expr=v4490[32] }
    dx      = { defs={} expr=v4491[32] }
    bx      = { defs={} expr=v4492[32] }
    sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4493[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4493[32] -4[32]) }
    si      = { defs={} expr=v4495[32] }
    di      = { defs={} expr=v4496[32] }
    es      = { defs={} expr=v4497[16] }
    cs      = { defs={} expr=v4498[16] }
    ss      = { defs={} expr=v4499[16] }
    ds      = { defs={} expr=v4500[16] }
    fs      = { defs={} expr=v4501[16] }
    gs      = { defs={} expr=v4502[16] }
    cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v4504[1] }
    pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v4506[1] }
    af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) 1[33]))))) }
    ?5      = { defs={} expr=v4508[1] }
    zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
    sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
    tf      = { defs={} expr=v4511[1] }
    if      = { defs={} expr=v4512[1] }
    df      = { defs={} expr=v4513[1] }
    of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v4515[1] }
    iopl1   = { defs={} expr=v4516[1] }
    nt      = { defs={} expr=v4517[1] }
    ?15     = { defs={} expr=v4518[1] }
    rf      = { defs={} expr=v4519[1] }
    vm      = { defs={} expr=v4520[1] }
    ac      = { defs={} expr=v4521[1] }
    vif     = { defs={} expr=v4522[1] }
    vip     = { defs={} expr=v4523[1] }
    id      = { defs={} expr=v4524[1] }
    ?22     = { defs={} expr=v4525[1] }
    ?23     = { defs={} expr=v4526[1] }
    ?24     = { defs={} expr=v4527[1] }
    ?25     = { defs={} expr=v4528[1] }
    ?26     = { defs={} expr=v4529[1] }
    ?27     = { defs={} expr=v4530[1] }
    ?28     = { defs={} expr=v4531[1] }
    ?29     = { defs={} expr=v4532[1] }
    ?30     = { defs={} expr=v4533[1] }
    ?31     = { defs={} expr=v4534[1] }
    ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486} expr=0x0804848c[32] }
memory:
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4494[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v4493[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4494[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=v4598[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=v4597[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=v4596[8] }
      flags = { rdonly }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=v4595[8] }
      flags = { rdonly }
null state
null state
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4<<StaticData@0x080485ca>+0x0a>
registers:
    ax      = { v35811 }
    cx      = { v35812 }
    dx      = { v35813 }
    bx      = { v35814 }
    sp      = { v35815-0xc }
    bp      = { v35815-0x4 }
    si      = { v35817 }
    di      = { v35818 }
    es      = { v35819 }
    cs      = { v35820 }
    ss      = { v35821 }
    ds      = { v35822 }
    fs      = { v35823 }
    gs      = { v35824 }
    cf      = { -v35922+0x1 }
    ?1      = { v35826 }
    pf      = { -v35972+0x1 }
    ?3      = { v35828 }
    af      = { v35979 }
    ?5      = { v35830 }
    zf      = { v35977 }
    sf      = { v35975 }
    tf      = { v35833 }
    if      = { v35834 }
    df      = { v35835 }
    of      = { v35985 }
    iopl0   = { v35837 }
    iopl1   = { v35838 }
    nt      = { v35839 }
    ?15     = { v35840 }
    rf      = { v35841 }
    vm      = { v35842 }
    ac      = { v35843 }
    vif     = { v35844 }
    vip     = { v35845 }
    id      = { v35846 }
    ?22     = { v35847 }
    ?23     = { v35848 }
    ?24     = { v35849 }
    ?25     = { v35850 }
    ?26     = { v35851 }
    ?27     = { v35852 }
    ?28     = { v35853 }
    ?29     = { v35854 }
    ?30     = { v35855 }
    ?31     = { v35856 }
    ip      = { 0x8048493 }
memory:
    address = { v35815-0x4 }
      value = { v35816 }
      flags = { size=4; clobbered }
    address = { 0x80496f8 }
      value = { v35937+0x1 }
      flags = { size=4; clobbered }
    address = { v35815-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4489[32] }
    cx      = { defs={} expr=v4490[32] }
    dx      = { defs={} expr=v4491[32] }
    bx      = { defs={} expr=v4492[32] }
    sp      = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4493[32] -4[32]) -8[32]) }
    bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4493[32] -4[32]) }
    si      = { defs={} expr=v4495[32] }
    di      = { defs={} expr=v4496[32] }
    es      = { defs={} expr=v4497[16] }
    cs      = { defs={} expr=v4498[16] }
    ss      = { defs={} expr=v4499[16] }
    ds      = { defs={} expr=v4500[16] }
    fs      = { defs={} expr=v4501[16] }
    gs      = { defs={} expr=v4502[16] }
    cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v4504[1] }
    pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v4506[1] }
    af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) 1[33]))))) }
    ?5      = { defs={} expr=v4508[1] }
    zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
    sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
    tf      = { defs={} expr=v4511[1] }
    if      = { defs={} expr=v4512[1] }
    df      = { defs={} expr=v4513[1] }
    of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v4515[1] }
    iopl1   = { defs={} expr=v4516[1] }
    nt      = { defs={} expr=v4517[1] }
    ?15     = { defs={} expr=v4518[1] }
    rf      = { defs={} expr=v4519[1] }
    vm      = { defs={} expr=v4520[1] }
    ac      = { defs={} expr=v4521[1] }
    vif     = { defs={} expr=v4522[1] }
    vip     = { defs={} expr=v4523[1] }
    id      = { defs={} expr=v4524[1] }
    ?22     = { defs={} expr=v4525[1] }
    ?23     = { defs={} expr=v4526[1] }
    ?24     = { defs={} expr=v4527[1] }
    ?25     = { defs={} expr=v4528[1] }
    ?26     = { defs={} expr=v4529[1] }
    ?27     = { defs={} expr=v4530[1] }
    ?28     = { defs={} expr=v4531[1] }
    ?29     = { defs={} expr=v4532[1] }
    ?30     = { defs={} expr=v4533[1] }
    ?31     = { defs={} expr=v4534[1] }
    ip      = { defs={0x08048480,0x08048481,0x08048483,0x08048486,0x0804848c} expr=0x08048493[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4493[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4494[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v4493[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4494[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=v4598[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=v4597[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=v4596[8] }
      flags = { rdonly }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=v4595[8] }
      flags = { rdonly }
null state
null state
0x8048493:call   0x08048300<puts@plt>
registers:
    ax      = { v35811 }
    cx      = { v35812 }
    dx      = { v35813 }
    bx      = { v35814 }
    sp      = { v35815-0x10 }
    bp      = { v35815-0x4 }
    si      = { v35817 }
    di      = { v35818 }
    es      = { v35819 }
    cs      = { v35820 }
    ss      = { v35821 }
    ds      = { v35822 }
    fs      = { v35823 }
    gs      = { v35824 }
    cf      = { -v35922+0x1 }
    ?1      = { v35826 }
    pf      = { -v35972+0x1 }
    ?3      = { v35828 }
    af      = { v35979 }
    ?5      = { v35830 }
    zf      = { v35977 }
    sf      = { v35975 }
    tf      = { v35833 }
    if      = { v35834 }
    df      = { v35835 }
    of      = { v35985 }
    iopl0   = { v35837 }
    iopl1   = { v35838 }
    nt      = { v35839 }
    ?15     = { v35840 }
    rf      = { v35841 }
    vm      = { v35842 }
    ac      = { v35843 }
    vif     = { v35844 }
    vip     = { v35845 }
    id      = { v35846 }
    ?22     = { v35847 }
    ?23     = { v35848 }
    ?24     = { v35849 }
    ?25     = { v35850 }
    ?26     = { v35851 }
    ?27     = { v35852 }
    ?28     = { v35853 }
    ?29     = { v35854 }
    ?30     = { v35855 }
    ?31     = { v35856 }
    ip      = { 0x8048300 }
memory:
    address = { v35815-0x4 }
      value = { v35816 }
      flags = { size=4; clobbered }
    address = { 0x80496f8 }
      value = { v35937+0x1 }
      flags = { size=4; clobbered }
    address = { v35815-0xc }
      value = { 0x80485d4 }
      flags = { size=4 }
    address = { v35815-0x10 }
      value = { 0x8048498 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4489[32] }
    cx      = { defs={} expr=v4490[32] }
    dx      = { defs={} expr=v4491[32] }
    bx      = { defs={} expr=v4492[32] }
    sp      = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) -4[32]) }
    bp      = { defs={0x08048480,0x08048481} expr=(add[32] v4493[32] -4[32]) }
    si      = { defs={} expr=v4495[32] }
    di      = { defs={} expr=v4496[32] }
    es      = { defs={} expr=v4497[16] }
    cs      = { defs={} expr=v4498[16] }
    ss      = { defs={} expr=v4499[16] }
    ds      = { defs={} expr=v4500[16] }
    fs      = { defs={} expr=v4501[16] }
    gs      = { defs={} expr=v4502[16] }
    cf      = { defs={0x08048480,0x08048483} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v4493[32] -4[32])) 4294967288[33])))))) }
    ?1      = { defs={} expr=v4504[1] }
    pf      = { defs={0x08048486} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v4506[1] }
    af      = { defs={0x08048486} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) 1[33]))))) }
    ?5      = { defs={} expr=v4508[1] }
    zf      = { defs={0x08048486} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
    sf      = { defs={0x08048486} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
    tf      = { defs={} expr=v4511[1] }
    if      = { defs={} expr=v4512[1] }
    df      = { defs={} expr=v4513[1] }
    of      = { defs={0x08048486} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v4515[1] }
    iopl1   = { defs={} expr=v4516[1] }
    nt      = { defs={} expr=v4517[1] }
    ?15     = { defs={} expr=v4518[1] }
    rf      = { defs={} expr=v4519[1] }
    vm      = { defs={} expr=v4520[1] }
    ac      = { defs={} expr=v4521[1] }
    vif     = { defs={} expr=v4522[1] }
    vip     = { defs={} expr=v4523[1] }
    id      = { defs={} expr=v4524[1] }
    ?22     = { defs={} expr=v4525[1] }
    ?23     = { defs={} expr=v4526[1] }
    ?24     = { defs={} expr=v4527[1] }
    ?25     = { defs={} expr=v4528[1] }
    ?26     = { defs={} expr=v4529[1] }
    ?27     = { defs={} expr=v4530[1] }
    ?28     = { defs={} expr=v4531[1] }
    ?29     = { defs={} expr=v4532[1] }
    ?30     = { defs={} expr=v4533[1] }
    ?31     = { defs={} expr=v4534[1] }
    ip      = { defs={0x08048493} expr=0x08048300[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x08048480,0x08048483,0x08048493} expr=(add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) -4[32]) }
      value = { defs={} expr=-104[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4493[32] -4[32]) -8[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048480,0x08048483} expr=(add[32] (add[32] v4493[32] -4[32]) -8[32]) }
      value = { defs={} expr=-44[8] }
      flags = { }
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v4595[8]) (shr0[32] 8[32] (uextend[32] 32[32] v4596[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v4597[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v4598[8]))) 1[32])) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4494[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4493[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4494[32]) }
      flags = { }
    address = { defs={0x08048480} expr=(add[32] v4493[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4494[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080496fb[32] }
      value = { defs={} expr=v4598[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496fa[32] }
      value = { defs={} expr=v4597[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080496f9[32] }
      value = { defs={} expr=v4596[8] }
      flags = { rdonly }
    address = { defs={0x08048486} expr=0x080496f8[32] }
      value = { defs={} expr=v4595[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
registers:
    ax      = { v36054 }
    cx      = { v36055 }
    dx      = { v36056 }
    bx      = { v36057 }
    sp      = { v36058 }
    bp      = { v36059 }
    si      = { v36060 }
    di      = { v36061 }
    es      = { v36062 }
    cs      = { v36063 }
    ss      = { v36064 }
    ds      = { v36065 }
    fs      = { v36066 }
    gs      = { v36067 }
    cf      = { v36068 }
    ?1      = { v36069 }
    pf      = { v36070 }
    ?3      = { v36071 }
    af      = { v36072 }
    ?5      = { v36073 }
    zf      = { v36074 }
    sf      = { v36075 }
    tf      = { v36076 }
    if      = { v36077 }
    df      = { v36078 }
    of      = { v36079 }
    iopl0   = { v36080 }
    iopl1   = { v36081 }
    nt      = { v36082 }
    ?15     = { v36083 }
    rf      = { v36084 }
    vm      = { v36085 }
    ac      = { v36086 }
    vif     = { v36087 }
    vip     = { v36088 }
    id      = { v36089 }
    ?22     = { v36090 }
    ?23     = { v36091 }
    ?24     = { v36092 }
    ?25     = { v36093 }
    ?26     = { v36094 }
    ?27     = { v36095 }
    ?28     = { v36096 }
    ?29     = { v36097 }
    ?30     = { v36098 }
    ?31     = { v36099 }
    ip      = { 0x804849f }
memory:
    address = { v36058 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4698[32] }
    cx      = { defs={} expr=v4699[32] }
    dx      = { defs={} expr=v4700[32] }
    bx      = { defs={} expr=v4701[32] }
    sp      = { defs={} expr=v4702[32] }
    bp      = { defs={} expr=v4703[32] }
    si      = { defs={} expr=v4704[32] }
    di      = { defs={} expr=v4705[32] }
    es      = { defs={} expr=v4706[16] }
    cs      = { defs={} expr=v4707[16] }
    ss      = { defs={} expr=v4708[16] }
    ds      = { defs={} expr=v4709[16] }
    fs      = { defs={} expr=v4710[16] }
    gs      = { defs={} expr=v4711[16] }
    cf      = { defs={} expr=v4712[1] }
    ?1      = { defs={} expr=v4713[1] }
    pf      = { defs={} expr=v4714[1] }
    ?3      = { defs={} expr=v4715[1] }
    af      = { defs={} expr=v4716[1] }
    ?5      = { defs={} expr=v4717[1] }
    zf      = { defs={} expr=v4718[1] }
    sf      = { defs={} expr=v4719[1] }
    tf      = { defs={} expr=v4720[1] }
    if      = { defs={} expr=v4721[1] }
    df      = { defs={} expr=v4722[1] }
    of      = { defs={} expr=v4723[1] }
    iopl0   = { defs={} expr=v4724[1] }
    iopl1   = { defs={} expr=v4725[1] }
    nt      = { defs={} expr=v4726[1] }
    ?15     = { defs={} expr=v4727[1] }
    rf      = { defs={} expr=v4728[1] }
    vm      = { defs={} expr=v4729[1] }
    ac      = { defs={} expr=v4730[1] }
    vif     = { defs={} expr=v4731[1] }
    vip     = { defs={} expr=v4732[1] }
    id      = { defs={} expr=v4733[1] }
    ?22     = { defs={} expr=v4734[1] }
    ?23     = { defs={} expr=v4735[1] }
    ?24     = { defs={} expr=v4736[1] }
    ?25     = { defs={} expr=v4737[1] }
    ?26     = { defs={} expr=v4738[1] }
    ?27     = { defs={} expr=v4739[1] }
    ?28     = { defs={} expr=v4740[1] }
    ?29     = { defs={} expr=v4741[1] }
    ?30     = { defs={} expr=v4742[1] }
    ?31     = { defs={} expr=v4743[1] }
    ip      = { defs={0x08048498} expr=0x0804849f[32] }
memory:
    address = { defs={} expr=(add[32] v4702[32] 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4702[32] 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4702[32] 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=v4702[32] }
      value = { defs={} expr=0[8] }
      flags = { }
init mem:
null state
null state
0x804849f:call   0x08048320<_exit@plt>
registers:
    ax      = { v36054 }
    cx      = { v36055 }
    dx      = { v36056 }
    bx      = { v36057 }
    sp      = { v36058-0x4 }
    bp      = { v36059 }
    si      = { v36060 }
    di      = { v36061 }
    es      = { v36062 }
    cs      = { v36063 }
    ss      = { v36064 }
    ds      = { v36065 }
    fs      = { v36066 }
    gs      = { v36067 }
    cf      = { v36068 }
    ?1      = { v36069 }
    pf      = { v36070 }
    ?3      = { v36071 }
    af      = { v36072 }
    ?5      = { v36073 }
    zf      = { v36074 }
    sf      = { v36075 }
    tf      = { v36076 }
    if      = { v36077 }
    df      = { v36078 }
    of      = { v36079 }
    iopl0   = { v36080 }
    iopl1   = { v36081 }
    nt      = { v36082 }
    ?15     = { v36083 }
    rf      = { v36084 }
    vm      = { v36085 }
    ac      = { v36086 }
    vif     = { v36087 }
    vip     = { v36088 }
    id      = { v36089 }
    ?22     = { v36090 }
    ?23     = { v36091 }
    ?24     = { v36092 }
    ?25     = { v36093 }
    ?26     = { v36094 }
    ?27     = { v36095 }
    ?28     = { v36096 }
    ?29     = { v36097 }
    ?30     = { v36098 }
    ?31     = { v36099 }
    ip      = { 0x8048320 }
memory:
    address = { v36058 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36058-0x4 }
      value = { 0x80484a4 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4698[32] }
    cx      = { defs={} expr=v4699[32] }
    dx      = { defs={} expr=v4700[32] }
    bx      = { defs={} expr=v4701[32] }
    sp      = { defs={0x0804849f} expr=(add[32] v4702[32] -4[32]) }
    bp      = { defs={} expr=v4703[32] }
    si      = { defs={} expr=v4704[32] }
    di      = { defs={} expr=v4705[32] }
    es      = { defs={} expr=v4706[16] }
    cs      = { defs={} expr=v4707[16] }
    ss      = { defs={} expr=v4708[16] }
    ds      = { defs={} expr=v4709[16] }
    fs      = { defs={} expr=v4710[16] }
    gs      = { defs={} expr=v4711[16] }
    cf      = { defs={} expr=v4712[1] }
    ?1      = { defs={} expr=v4713[1] }
    pf      = { defs={} expr=v4714[1] }
    ?3      = { defs={} expr=v4715[1] }
    af      = { defs={} expr=v4716[1] }
    ?5      = { defs={} expr=v4717[1] }
    zf      = { defs={} expr=v4718[1] }
    sf      = { defs={} expr=v4719[1] }
    tf      = { defs={} expr=v4720[1] }
    if      = { defs={} expr=v4721[1] }
    df      = { defs={} expr=v4722[1] }
    of      = { defs={} expr=v4723[1] }
    iopl0   = { defs={} expr=v4724[1] }
    iopl1   = { defs={} expr=v4725[1] }
    nt      = { defs={} expr=v4726[1] }
    ?15     = { defs={} expr=v4727[1] }
    rf      = { defs={} expr=v4728[1] }
    vm      = { defs={} expr=v4729[1] }
    ac      = { defs={} expr=v4730[1] }
    vif     = { defs={} expr=v4731[1] }
    vip     = { defs={} expr=v4732[1] }
    id      = { defs={} expr=v4733[1] }
    ?22     = { defs={} expr=v4734[1] }
    ?23     = { defs={} expr=v4735[1] }
    ?24     = { defs={} expr=v4736[1] }
    ?25     = { defs={} expr=v4737[1] }
    ?26     = { defs={} expr=v4738[1] }
    ?27     = { defs={} expr=v4739[1] }
    ?28     = { defs={} expr=v4740[1] }
    ?29     = { defs={} expr=v4741[1] }
    ?30     = { defs={} expr=v4742[1] }
    ?31     = { defs={} expr=v4743[1] }
    ip      = { defs={0x0804849f} expr=0x08048320[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4702[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4702[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4702[32] -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x0804849f} expr=(add[32] v4702[32] -4[32]) }
      value = { defs={} expr=-92[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4702[32] 3[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4702[32] 2[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=(add[32] v4702[32] 1[32]) }
      value = { defs={} expr=0[8] }
      flags = { }
    address = { defs={} expr=v4702[32] }
      value = { defs={} expr=0[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484b0:push   ebp
registers:
    ax      = { v36166 }
    cx      = { v36167 }
    dx      = { v36168 }
    bx      = { v36169 }
    sp      = { v36170-0x4 }
    bp      = { v36171 }
    si      = { v36172 }
    di      = { v36173 }
    es      = { v36174 }
    cs      = { v36175 }
    ss      = { v36176 }
    ds      = { v36177 }
    fs      = { v36178 }
    gs      = { v36179 }
    cf      = { v36180 }
    ?1      = { v36181 }
    pf      = { v36182 }
    ?3      = { v36183 }
    af      = { v36184 }
    ?5      = { v36185 }
    zf      = { v36186 }
    sf      = { v36187 }
    tf      = { v36188 }
    if      = { v36189 }
    df      = { v36190 }
    of      = { v36191 }
    iopl0   = { v36192 }
    iopl1   = { v36193 }
    nt      = { v36194 }
    ?15     = { v36195 }
    rf      = { v36196 }
    vm      = { v36197 }
    ac      = { v36198 }
    vif     = { v36199 }
    vip     = { v36200 }
    id      = { v36201 }
    ?22     = { v36202 }
    ?23     = { v36203 }
    ?24     = { v36204 }
    ?25     = { v36205 }
    ?26     = { v36206 }
    ?27     = { v36207 }
    ?28     = { v36208 }
    ?29     = { v36209 }
    ?30     = { v36210 }
    ?31     = { v36211 }
    ip      = { 0x80484b1 }
memory:
    address = { v36170-0x4 }
      value = { v36171 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4810[32] }
    cx      = { defs={} expr=v4811[32] }
    dx      = { defs={} expr=v4812[32] }
    bx      = { defs={} expr=v4813[32] }
    sp      = { defs={0x080484b0} expr=(add[32] v4814[32] -4[32]) }
    bp      = { defs={} expr=v4815[32] }
    si      = { defs={} expr=v4816[32] }
    di      = { defs={} expr=v4817[32] }
    es      = { defs={} expr=v4818[16] }
    cs      = { defs={} expr=v4819[16] }
    ss      = { defs={} expr=v4820[16] }
    ds      = { defs={} expr=v4821[16] }
    fs      = { defs={} expr=v4822[16] }
    gs      = { defs={} expr=v4823[16] }
    cf      = { defs={} expr=v4824[1] }
    ?1      = { defs={} expr=v4825[1] }
    pf      = { defs={} expr=v4826[1] }
    ?3      = { defs={} expr=v4827[1] }
    af      = { defs={} expr=v4828[1] }
    ?5      = { defs={} expr=v4829[1] }
    zf      = { defs={} expr=v4830[1] }
    sf      = { defs={} expr=v4831[1] }
    tf      = { defs={} expr=v4832[1] }
    if      = { defs={} expr=v4833[1] }
    df      = { defs={} expr=v4834[1] }
    of      = { defs={} expr=v4835[1] }
    iopl0   = { defs={} expr=v4836[1] }
    iopl1   = { defs={} expr=v4837[1] }
    nt      = { defs={} expr=v4838[1] }
    ?15     = { defs={} expr=v4839[1] }
    rf      = { defs={} expr=v4840[1] }
    vm      = { defs={} expr=v4841[1] }
    ac      = { defs={} expr=v4842[1] }
    vif     = { defs={} expr=v4843[1] }
    vip     = { defs={} expr=v4844[1] }
    id      = { defs={} expr=v4845[1] }
    ?22     = { defs={} expr=v4846[1] }
    ?23     = { defs={} expr=v4847[1] }
    ?24     = { defs={} expr=v4848[1] }
    ?25     = { defs={} expr=v4849[1] }
    ?26     = { defs={} expr=v4850[1] }
    ?27     = { defs={} expr=v4851[1] }
    ?28     = { defs={} expr=v4852[1] }
    ?29     = { defs={} expr=v4853[1] }
    ?30     = { defs={} expr=v4854[1] }
    ?31     = { defs={} expr=v4855[1] }
    ip      = { defs={0x080484b0} expr=0x080484b1[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4815[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v4814[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4815[32]) }
      flags = { }
init mem:
null state
null state
0x80484b1:mov    ebp, esp
registers:
    ax      = { v36166 }
    cx      = { v36167 }
    dx      = { v36168 }
    bx      = { v36169 }
    sp      = { v36170-0x4 }
    bp      = { v36170-0x4 }
    si      = { v36172 }
    di      = { v36173 }
    es      = { v36174 }
    cs      = { v36175 }
    ss      = { v36176 }
    ds      = { v36177 }
    fs      = { v36178 }
    gs      = { v36179 }
    cf      = { v36180 }
    ?1      = { v36181 }
    pf      = { v36182 }
    ?3      = { v36183 }
    af      = { v36184 }
    ?5      = { v36185 }
    zf      = { v36186 }
    sf      = { v36187 }
    tf      = { v36188 }
    if      = { v36189 }
    df      = { v36190 }
    of      = { v36191 }
    iopl0   = { v36192 }
    iopl1   = { v36193 }
    nt      = { v36194 }
    ?15     = { v36195 }
    rf      = { v36196 }
    vm      = { v36197 }
    ac      = { v36198 }
    vif     = { v36199 }
    vip     = { v36200 }
    id      = { v36201 }
    ?22     = { v36202 }
    ?23     = { v36203 }
    ?24     = { v36204 }
    ?25     = { v36205 }
    ?26     = { v36206 }
    ?27     = { v36207 }
    ?28     = { v36208 }
    ?29     = { v36209 }
    ?30     = { v36210 }
    ?31     = { v36211 }
    ip      = { 0x80484b3 }
memory:
    address = { v36170-0x4 }
      value = { v36171 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4810[32] }
    cx      = { defs={} expr=v4811[32] }
    dx      = { defs={} expr=v4812[32] }
    bx      = { defs={} expr=v4813[32] }
    sp      = { defs={0x080484b0} expr=(add[32] v4814[32] -4[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4814[32] -4[32]) }
    si      = { defs={} expr=v4816[32] }
    di      = { defs={} expr=v4817[32] }
    es      = { defs={} expr=v4818[16] }
    cs      = { defs={} expr=v4819[16] }
    ss      = { defs={} expr=v4820[16] }
    ds      = { defs={} expr=v4821[16] }
    fs      = { defs={} expr=v4822[16] }
    gs      = { defs={} expr=v4823[16] }
    cf      = { defs={} expr=v4824[1] }
    ?1      = { defs={} expr=v4825[1] }
    pf      = { defs={} expr=v4826[1] }
    ?3      = { defs={} expr=v4827[1] }
    af      = { defs={} expr=v4828[1] }
    ?5      = { defs={} expr=v4829[1] }
    zf      = { defs={} expr=v4830[1] }
    sf      = { defs={} expr=v4831[1] }
    tf      = { defs={} expr=v4832[1] }
    if      = { defs={} expr=v4833[1] }
    df      = { defs={} expr=v4834[1] }
    of      = { defs={} expr=v4835[1] }
    iopl0   = { defs={} expr=v4836[1] }
    iopl1   = { defs={} expr=v4837[1] }
    nt      = { defs={} expr=v4838[1] }
    ?15     = { defs={} expr=v4839[1] }
    rf      = { defs={} expr=v4840[1] }
    vm      = { defs={} expr=v4841[1] }
    ac      = { defs={} expr=v4842[1] }
    vif     = { defs={} expr=v4843[1] }
    vip     = { defs={} expr=v4844[1] }
    id      = { defs={} expr=v4845[1] }
    ?22     = { defs={} expr=v4846[1] }
    ?23     = { defs={} expr=v4847[1] }
    ?24     = { defs={} expr=v4848[1] }
    ?25     = { defs={} expr=v4849[1] }
    ?26     = { defs={} expr=v4850[1] }
    ?27     = { defs={} expr=v4851[1] }
    ?28     = { defs={} expr=v4852[1] }
    ?29     = { defs={} expr=v4853[1] }
    ?30     = { defs={} expr=v4854[1] }
    ?31     = { defs={} expr=v4855[1] }
    ip      = { defs={0x080484b0,0x080484b1} expr=0x080484b3[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4815[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v4814[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4815[32]) }
      flags = { }
init mem:
null state
null state
0x80484b3:push   edi
registers:
    ax      = { v36166 }
    cx      = { v36167 }
    dx      = { v36168 }
    bx      = { v36169 }
    sp      = { v36170-0x8 }
    bp      = { v36170-0x4 }
    si      = { v36172 }
    di      = { v36173 }
    es      = { v36174 }
    cs      = { v36175 }
    ss      = { v36176 }
    ds      = { v36177 }
    fs      = { v36178 }
    gs      = { v36179 }
    cf      = { v36180 }
    ?1      = { v36181 }
    pf      = { v36182 }
    ?3      = { v36183 }
    af      = { v36184 }
    ?5      = { v36185 }
    zf      = { v36186 }
    sf      = { v36187 }
    tf      = { v36188 }
    if      = { v36189 }
    df      = { v36190 }
    of      = { v36191 }
    iopl0   = { v36192 }
    iopl1   = { v36193 }
    nt      = { v36194 }
    ?15     = { v36195 }
    rf      = { v36196 }
    vm      = { v36197 }
    ac      = { v36198 }
    vif     = { v36199 }
    vip     = { v36200 }
    id      = { v36201 }
    ?22     = { v36202 }
    ?23     = { v36203 }
    ?24     = { v36204 }
    ?25     = { v36205 }
    ?26     = { v36206 }
    ?27     = { v36207 }
    ?28     = { v36208 }
    ?29     = { v36209 }
    ?30     = { v36210 }
    ?31     = { v36211 }
    ip      = { 0x80484b4 }
memory:
    address = { v36170-0x4 }
      value = { v36171 }
      flags = { size=4 }
    address = { v36170-0x8 }
      value = { v36173 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4810[32] }
    cx      = { defs={} expr=v4811[32] }
    dx      = { defs={} expr=v4812[32] }
    bx      = { defs={} expr=v4813[32] }
    sp      = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4814[32] -4[32]) -4[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4814[32] -4[32]) }
    si      = { defs={} expr=v4816[32] }
    di      = { defs={} expr=v4817[32] }
    es      = { defs={} expr=v4818[16] }
    cs      = { defs={} expr=v4819[16] }
    ss      = { defs={} expr=v4820[16] }
    ds      = { defs={} expr=v4821[16] }
    fs      = { defs={} expr=v4822[16] }
    gs      = { defs={} expr=v4823[16] }
    cf      = { defs={} expr=v4824[1] }
    ?1      = { defs={} expr=v4825[1] }
    pf      = { defs={} expr=v4826[1] }
    ?3      = { defs={} expr=v4827[1] }
    af      = { defs={} expr=v4828[1] }
    ?5      = { defs={} expr=v4829[1] }
    zf      = { defs={} expr=v4830[1] }
    sf      = { defs={} expr=v4831[1] }
    tf      = { defs={} expr=v4832[1] }
    if      = { defs={} expr=v4833[1] }
    df      = { defs={} expr=v4834[1] }
    of      = { defs={} expr=v4835[1] }
    iopl0   = { defs={} expr=v4836[1] }
    iopl1   = { defs={} expr=v4837[1] }
    nt      = { defs={} expr=v4838[1] }
    ?15     = { defs={} expr=v4839[1] }
    rf      = { defs={} expr=v4840[1] }
    vm      = { defs={} expr=v4841[1] }
    ac      = { defs={} expr=v4842[1] }
    vif     = { defs={} expr=v4843[1] }
    vip     = { defs={} expr=v4844[1] }
    id      = { defs={} expr=v4845[1] }
    ?22     = { defs={} expr=v4846[1] }
    ?23     = { defs={} expr=v4847[1] }
    ?24     = { defs={} expr=v4848[1] }
    ?25     = { defs={} expr=v4849[1] }
    ?26     = { defs={} expr=v4850[1] }
    ?27     = { defs={} expr=v4851[1] }
    ?28     = { defs={} expr=v4852[1] }
    ?29     = { defs={} expr=v4853[1] }
    ?30     = { defs={} expr=v4854[1] }
    ?31     = { defs={} expr=v4855[1] }
    ip      = { defs={0x080484b0,0x080484b1,0x080484b3} expr=0x080484b4[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4817[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4814[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4815[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v4814[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4815[32]) }
      flags = { }
init mem:
null state
null state
0x80484b4:push   esi
registers:
    ax      = { v36166 }
    cx      = { v36167 }
    dx      = { v36168 }
    bx      = { v36169 }
    sp      = { v36170-0xc }
    bp      = { v36170-0x4 }
    si      = { v36172 }
    di      = { v36173 }
    es      = { v36174 }
    cs      = { v36175 }
    ss      = { v36176 }
    ds      = { v36177 }
    fs      = { v36178 }
    gs      = { v36179 }
    cf      = { v36180 }
    ?1      = { v36181 }
    pf      = { v36182 }
    ?3      = { v36183 }
    af      = { v36184 }
    ?5      = { v36185 }
    zf      = { v36186 }
    sf      = { v36187 }
    tf      = { v36188 }
    if      = { v36189 }
    df      = { v36190 }
    of      = { v36191 }
    iopl0   = { v36192 }
    iopl1   = { v36193 }
    nt      = { v36194 }
    ?15     = { v36195 }
    rf      = { v36196 }
    vm      = { v36197 }
    ac      = { v36198 }
    vif     = { v36199 }
    vip     = { v36200 }
    id      = { v36201 }
    ?22     = { v36202 }
    ?23     = { v36203 }
    ?24     = { v36204 }
    ?25     = { v36205 }
    ?26     = { v36206 }
    ?27     = { v36207 }
    ?28     = { v36208 }
    ?29     = { v36209 }
    ?30     = { v36210 }
    ?31     = { v36211 }
    ip      = { 0x80484b5 }
memory:
    address = { v36170-0x4 }
      value = { v36171 }
      flags = { size=4 }
    address = { v36170-0x8 }
      value = { v36173 }
      flags = { size=4 }
    address = { v36170-0xc }
      value = { v36172 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4810[32] }
    cx      = { defs={} expr=v4811[32] }
    dx      = { defs={} expr=v4812[32] }
    bx      = { defs={} expr=v4813[32] }
    sp      = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4814[32] -4[32]) }
    si      = { defs={} expr=v4816[32] }
    di      = { defs={} expr=v4817[32] }
    es      = { defs={} expr=v4818[16] }
    cs      = { defs={} expr=v4819[16] }
    ss      = { defs={} expr=v4820[16] }
    ds      = { defs={} expr=v4821[16] }
    fs      = { defs={} expr=v4822[16] }
    gs      = { defs={} expr=v4823[16] }
    cf      = { defs={} expr=v4824[1] }
    ?1      = { defs={} expr=v4825[1] }
    pf      = { defs={} expr=v4826[1] }
    ?3      = { defs={} expr=v4827[1] }
    af      = { defs={} expr=v4828[1] }
    ?5      = { defs={} expr=v4829[1] }
    zf      = { defs={} expr=v4830[1] }
    sf      = { defs={} expr=v4831[1] }
    tf      = { defs={} expr=v4832[1] }
    if      = { defs={} expr=v4833[1] }
    df      = { defs={} expr=v4834[1] }
    of      = { defs={} expr=v4835[1] }
    iopl0   = { defs={} expr=v4836[1] }
    iopl1   = { defs={} expr=v4837[1] }
    nt      = { defs={} expr=v4838[1] }
    ?15     = { defs={} expr=v4839[1] }
    rf      = { defs={} expr=v4840[1] }
    vm      = { defs={} expr=v4841[1] }
    ac      = { defs={} expr=v4842[1] }
    vif     = { defs={} expr=v4843[1] }
    vip     = { defs={} expr=v4844[1] }
    id      = { defs={} expr=v4845[1] }
    ?22     = { defs={} expr=v4846[1] }
    ?23     = { defs={} expr=v4847[1] }
    ?24     = { defs={} expr=v4848[1] }
    ?25     = { defs={} expr=v4849[1] }
    ?26     = { defs={} expr=v4850[1] }
    ?27     = { defs={} expr=v4851[1] }
    ?28     = { defs={} expr=v4852[1] }
    ?29     = { defs={} expr=v4853[1] }
    ?30     = { defs={} expr=v4854[1] }
    ?31     = { defs={} expr=v4855[1] }
    ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4} expr=0x080484b5[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4816[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4817[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4814[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4815[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v4814[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4815[32]) }
      flags = { }
init mem:
null state
null state
0x80484b5:push   ebx
registers:
    ax      = { v36166 }
    cx      = { v36167 }
    dx      = { v36168 }
    bx      = { v36169 }
    sp      = { v36170-0x10 }
    bp      = { v36170-0x4 }
    si      = { v36172 }
    di      = { v36173 }
    es      = { v36174 }
    cs      = { v36175 }
    ss      = { v36176 }
    ds      = { v36177 }
    fs      = { v36178 }
    gs      = { v36179 }
    cf      = { v36180 }
    ?1      = { v36181 }
    pf      = { v36182 }
    ?3      = { v36183 }
    af      = { v36184 }
    ?5      = { v36185 }
    zf      = { v36186 }
    sf      = { v36187 }
    tf      = { v36188 }
    if      = { v36189 }
    df      = { v36190 }
    of      = { v36191 }
    iopl0   = { v36192 }
    iopl1   = { v36193 }
    nt      = { v36194 }
    ?15     = { v36195 }
    rf      = { v36196 }
    vm      = { v36197 }
    ac      = { v36198 }
    vif     = { v36199 }
    vip     = { v36200 }
    id      = { v36201 }
    ?22     = { v36202 }
    ?23     = { v36203 }
    ?24     = { v36204 }
    ?25     = { v36205 }
    ?26     = { v36206 }
    ?27     = { v36207 }
    ?28     = { v36208 }
    ?29     = { v36209 }
    ?30     = { v36210 }
    ?31     = { v36211 }
    ip      = { 0x80484b6 }
memory:
    address = { v36170-0x4 }
      value = { v36171 }
      flags = { size=4 }
    address = { v36170-0x8 }
      value = { v36173 }
      flags = { size=4 }
    address = { v36170-0xc }
      value = { v36172 }
      flags = { size=4 }
    address = { v36170-0x10 }
      value = { v36169 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4810[32] }
    cx      = { defs={} expr=v4811[32] }
    dx      = { defs={} expr=v4812[32] }
    bx      = { defs={} expr=v4813[32] }
    sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4814[32] -4[32]) }
    si      = { defs={} expr=v4816[32] }
    di      = { defs={} expr=v4817[32] }
    es      = { defs={} expr=v4818[16] }
    cs      = { defs={} expr=v4819[16] }
    ss      = { defs={} expr=v4820[16] }
    ds      = { defs={} expr=v4821[16] }
    fs      = { defs={} expr=v4822[16] }
    gs      = { defs={} expr=v4823[16] }
    cf      = { defs={} expr=v4824[1] }
    ?1      = { defs={} expr=v4825[1] }
    pf      = { defs={} expr=v4826[1] }
    ?3      = { defs={} expr=v4827[1] }
    af      = { defs={} expr=v4828[1] }
    ?5      = { defs={} expr=v4829[1] }
    zf      = { defs={} expr=v4830[1] }
    sf      = { defs={} expr=v4831[1] }
    tf      = { defs={} expr=v4832[1] }
    if      = { defs={} expr=v4833[1] }
    df      = { defs={} expr=v4834[1] }
    of      = { defs={} expr=v4835[1] }
    iopl0   = { defs={} expr=v4836[1] }
    iopl1   = { defs={} expr=v4837[1] }
    nt      = { defs={} expr=v4838[1] }
    ?15     = { defs={} expr=v4839[1] }
    rf      = { defs={} expr=v4840[1] }
    vm      = { defs={} expr=v4841[1] }
    ac      = { defs={} expr=v4842[1] }
    vif     = { defs={} expr=v4843[1] }
    vip     = { defs={} expr=v4844[1] }
    id      = { defs={} expr=v4845[1] }
    ?22     = { defs={} expr=v4846[1] }
    ?23     = { defs={} expr=v4847[1] }
    ?24     = { defs={} expr=v4848[1] }
    ?25     = { defs={} expr=v4849[1] }
    ?26     = { defs={} expr=v4850[1] }
    ?27     = { defs={} expr=v4851[1] }
    ?28     = { defs={} expr=v4852[1] }
    ?29     = { defs={} expr=v4853[1] }
    ?30     = { defs={} expr=v4854[1] }
    ?31     = { defs={} expr=v4855[1] }
    ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5} expr=0x080484b6[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4813[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4813[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4813[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4813[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4816[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4817[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4814[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4815[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v4814[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4815[32]) }
      flags = { }
init mem:
null state
null state
0x80484b6:sub    esp, 0x0c
registers:
    ax      = { v36166 }
    cx      = { v36167 }
    dx      = { v36168 }
    bx      = { v36169 }
    sp      = { v36170-0x1c }
    bp      = { v36170-0x4 }
    si      = { v36172 }
    di      = { v36173 }
    es      = { v36174 }
    cs      = { v36175 }
    ss      = { v36176 }
    ds      = { v36177 }
    fs      = { v36178 }
    gs      = { v36179 }
    cf      = { -v36304+0x1 }
    ?1      = { v36181 }
    pf      = { -v36294+0x1 }
    ?3      = { v36183 }
    af      = { -v36301+0x1 }
    ?5      = { v36185 }
    zf      = { v36299 }
    sf      = { v36297 }
    tf      = { v36188 }
    if      = { v36189 }
    df      = { v36190 }
    of      = { v36311 }
    iopl0   = { v36192 }
    iopl1   = { v36193 }
    nt      = { v36194 }
    ?15     = { v36195 }
    rf      = { v36196 }
    vm      = { v36197 }
    ac      = { v36198 }
    vif     = { v36199 }
    vip     = { v36200 }
    id      = { v36201 }
    ?22     = { v36202 }
    ?23     = { v36203 }
    ?24     = { v36204 }
    ?25     = { v36205 }
    ?26     = { v36206 }
    ?27     = { v36207 }
    ?28     = { v36208 }
    ?29     = { v36209 }
    ?30     = { v36210 }
    ?31     = { v36211 }
    ip      = { 0x80484b9 }
memory:
    address = { v36170-0x4 }
      value = { v36171 }
      flags = { size=4 }
    address = { v36170-0x8 }
      value = { v36173 }
      flags = { size=4 }
    address = { v36170-0xc }
      value = { v36172 }
      flags = { size=4 }
    address = { v36170-0x10 }
      value = { v36169 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4810[32] }
    cx      = { defs={} expr=v4811[32] }
    dx      = { defs={} expr=v4812[32] }
    bx      = { defs={} expr=v4813[32] }
    sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4814[32] -4[32]) }
    si      = { defs={} expr=v4816[32] }
    di      = { defs={} expr=v4817[32] }
    es      = { defs={} expr=v4818[16] }
    cs      = { defs={} expr=v4819[16] }
    ss      = { defs={} expr=v4820[16] }
    ds      = { defs={} expr=v4821[16] }
    fs      = { defs={} expr=v4822[16] }
    gs      = { defs={} expr=v4823[16] }
    cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?1      = { defs={} expr=v4825[1] }
    pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
    ?3      = { defs={} expr=v4827[1] }
    af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?5      = { defs={} expr=v4829[1] }
    zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    tf      = { defs={} expr=v4832[1] }
    if      = { defs={} expr=v4833[1] }
    df      = { defs={} expr=v4834[1] }
    of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    iopl0   = { defs={} expr=v4836[1] }
    iopl1   = { defs={} expr=v4837[1] }
    nt      = { defs={} expr=v4838[1] }
    ?15     = { defs={} expr=v4839[1] }
    rf      = { defs={} expr=v4840[1] }
    vm      = { defs={} expr=v4841[1] }
    ac      = { defs={} expr=v4842[1] }
    vif     = { defs={} expr=v4843[1] }
    vip     = { defs={} expr=v4844[1] }
    id      = { defs={} expr=v4845[1] }
    ?22     = { defs={} expr=v4846[1] }
    ?23     = { defs={} expr=v4847[1] }
    ?24     = { defs={} expr=v4848[1] }
    ?25     = { defs={} expr=v4849[1] }
    ?26     = { defs={} expr=v4850[1] }
    ?27     = { defs={} expr=v4851[1] }
    ?28     = { defs={} expr=v4852[1] }
    ?29     = { defs={} expr=v4853[1] }
    ?30     = { defs={} expr=v4854[1] }
    ?31     = { defs={} expr=v4855[1] }
    ip      = { defs={0x080484b0,0x080484b1,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=0x080484b9[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4813[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4813[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4813[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4813[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4816[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4817[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4814[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4815[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v4814[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4815[32]) }
      flags = { }
init mem:
null state
null state
0x80484b9:call   0x080484be<<Insn>>
registers:
    ax      = { v36166 }
    cx      = { v36167 }
    dx      = { v36168 }
    bx      = { v36169 }
    sp      = { v36170-0x20 }
    bp      = { v36170-0x4 }
    si      = { v36172 }
    di      = { v36173 }
    es      = { v36174 }
    cs      = { v36175 }
    ss      = { v36176 }
    ds      = { v36177 }
    fs      = { v36178 }
    gs      = { v36179 }
    cf      = { -v36304+0x1 }
    ?1      = { v36181 }
    pf      = { -v36294+0x1 }
    ?3      = { v36183 }
    af      = { -v36301+0x1 }
    ?5      = { v36185 }
    zf      = { v36299 }
    sf      = { v36297 }
    tf      = { v36188 }
    if      = { v36189 }
    df      = { v36190 }
    of      = { v36311 }
    iopl0   = { v36192 }
    iopl1   = { v36193 }
    nt      = { v36194 }
    ?15     = { v36195 }
    rf      = { v36196 }
    vm      = { v36197 }
    ac      = { v36198 }
    vif     = { v36199 }
    vip     = { v36200 }
    id      = { v36201 }
    ?22     = { v36202 }
    ?23     = { v36203 }
    ?24     = { v36204 }
    ?25     = { v36205 }
    ?26     = { v36206 }
    ?27     = { v36207 }
    ?28     = { v36208 }
    ?29     = { v36209 }
    ?30     = { v36210 }
    ?31     = { v36211 }
    ip      = { 0x80484be }
memory:
    address = { v36170-0x4 }
      value = { v36171 }
      flags = { size=4 }
    address = { v36170-0x8 }
      value = { v36173 }
      flags = { size=4 }
    address = { v36170-0xc }
      value = { v36172 }
      flags = { size=4 }
    address = { v36170-0x10 }
      value = { v36169 }
      flags = { size=4 }
    address = { v36170-0x20 }
      value = { 0x80484be }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4810[32] }
    cx      = { defs={} expr=v4811[32] }
    dx      = { defs={} expr=v4812[32] }
    bx      = { defs={} expr=v4813[32] }
    sp      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
    bp      = { defs={0x080484b0,0x080484b1} expr=(add[32] v4814[32] -4[32]) }
    si      = { defs={} expr=v4816[32] }
    di      = { defs={} expr=v4817[32] }
    es      = { defs={} expr=v4818[16] }
    cs      = { defs={} expr=v4819[16] }
    ss      = { defs={} expr=v4820[16] }
    ds      = { defs={} expr=v4821[16] }
    fs      = { defs={} expr=v4822[16] }
    gs      = { defs={} expr=v4823[16] }
    cf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?1      = { defs={} expr=v4825[1] }
    pf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
    ?3      = { defs={} expr=v4827[1] }
    af      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?5      = { defs={} expr=v4829[1] }
    zf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    sf      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    tf      = { defs={} expr=v4832[1] }
    if      = { defs={} expr=v4833[1] }
    df      = { defs={} expr=v4834[1] }
    of      = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    iopl0   = { defs={} expr=v4836[1] }
    iopl1   = { defs={} expr=v4837[1] }
    nt      = { defs={} expr=v4838[1] }
    ?15     = { defs={} expr=v4839[1] }
    rf      = { defs={} expr=v4840[1] }
    vm      = { defs={} expr=v4841[1] }
    ac      = { defs={} expr=v4842[1] }
    vif     = { defs={} expr=v4843[1] }
    vip     = { defs={} expr=v4844[1] }
    id      = { defs={} expr=v4845[1] }
    ?22     = { defs={} expr=v4846[1] }
    ?23     = { defs={} expr=v4847[1] }
    ?24     = { defs={} expr=v4848[1] }
    ?25     = { defs={} expr=v4849[1] }
    ?26     = { defs={} expr=v4850[1] }
    ?27     = { defs={} expr=v4851[1] }
    ?28     = { defs={} expr=v4852[1] }
    ?29     = { defs={} expr=v4853[1] }
    ?30     = { defs={} expr=v4854[1] }
    ?31     = { defs={} expr=v4855[1] }
    ip      = { defs={0x080484b9} expr=0x080484be[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5,0x080484b6,0x080484b9} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
      value = { defs={} expr=-66[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4813[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4813[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4813[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4,0x080484b5} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4813[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4816[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3,0x080484b4} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4816[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4814[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4817[32]) }
      flags = { }
    address = { defs={0x080484b0,0x080484b3} expr=(add[32] (add[32] v4814[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4817[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v4815[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v4814[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v4815[32]) }
      flags = { }
    address = { defs={0x080484b0} expr=(add[32] v4814[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v4815[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
registers:
    ax      = { v36371 }
    cx      = { v36372 }
    dx      = { v36373 }
    bx      = { v36426 }
    sp      = { v36375+0x4 }
    bp      = { v36376 }
    si      = { v36377 }
    di      = { v36378 }
    es      = { v36379 }
    cs      = { v36380 }
    ss      = { v36381 }
    ds      = { v36382 }
    fs      = { v36383 }
    gs      = { v36384 }
    cf      = { v36385 }
    ?1      = { v36386 }
    pf      = { v36387 }
    ?3      = { v36388 }
    af      = { v36389 }
    ?5      = { v36390 }
    zf      = { v36391 }
    sf      = { v36392 }
    tf      = { v36393 }
    if      = { v36394 }
    df      = { v36395 }
    of      = { v36396 }
    iopl0   = { v36397 }
    iopl1   = { v36398 }
    nt      = { v36399 }
    ?15     = { v36400 }
    rf      = { v36401 }
    vm      = { v36402 }
    ac      = { v36403 }
    vif     = { v36404 }
    vip     = { v36405 }
    id      = { v36406 }
    ?22     = { v36407 }
    ?23     = { v36408 }
    ?24     = { v36409 }
    ?25     = { v36410 }
    ?26     = { v36411 }
    ?27     = { v36412 }
    ?28     = { v36413 }
    ?29     = { v36414 }
    ?30     = { v36415 }
    ?31     = { v36416 }
    ip      = { 0x80484bf }
memory:
    address = { v36375 }
      value = { v36426 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v4993[32] }
    cx      = { defs={} expr=v4994[32] }
    dx      = { defs={} expr=v4995[32] }
    bx      = { defs={0x080484be} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) }
    sp      = { defs={0x080484be} expr=(add[32] v4997[32] 4[32]) }
    bp      = { defs={} expr=v4998[32] }
    si      = { defs={} expr=v4999[32] }
    di      = { defs={} expr=v5000[32] }
    es      = { defs={} expr=v5001[16] }
    cs      = { defs={} expr=v5002[16] }
    ss      = { defs={} expr=v5003[16] }
    ds      = { defs={} expr=v5004[16] }
    fs      = { defs={} expr=v5005[16] }
    gs      = { defs={} expr=v5006[16] }
    cf      = { defs={} expr=v5007[1] }
    ?1      = { defs={} expr=v5008[1] }
    pf      = { defs={} expr=v5009[1] }
    ?3      = { defs={} expr=v5010[1] }
    af      = { defs={} expr=v5011[1] }
    ?5      = { defs={} expr=v5012[1] }
    zf      = { defs={} expr=v5013[1] }
    sf      = { defs={} expr=v5014[1] }
    tf      = { defs={} expr=v5015[1] }
    if      = { defs={} expr=v5016[1] }
    df      = { defs={} expr=v5017[1] }
    of      = { defs={} expr=v5018[1] }
    iopl0   = { defs={} expr=v5019[1] }
    iopl1   = { defs={} expr=v5020[1] }
    nt      = { defs={} expr=v5021[1] }
    ?15     = { defs={} expr=v5022[1] }
    rf      = { defs={} expr=v5023[1] }
    vm      = { defs={} expr=v5024[1] }
    ac      = { defs={} expr=v5025[1] }
    vif     = { defs={} expr=v5026[1] }
    vip     = { defs={} expr=v5027[1] }
    id      = { defs={} expr=v5028[1] }
    ?22     = { defs={} expr=v5029[1] }
    ?23     = { defs={} expr=v5030[1] }
    ?24     = { defs={} expr=v5031[1] }
    ?25     = { defs={} expr=v5032[1] }
    ?26     = { defs={} expr=v5033[1] }
    ?27     = { defs={} expr=v5034[1] }
    ?28     = { defs={} expr=v5035[1] }
    ?29     = { defs={} expr=v5036[1] }
    ?30     = { defs={} expr=v5037[1] }
    ?31     = { defs={} expr=v5038[1] }
    ip      = { defs={0x080484be} expr=0x080484bf[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v4997[32] 3[32]) }
      value = { defs={} expr=v5053[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4997[32] 2[32]) }
      value = { defs={} expr=v5052[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4997[32] 1[32]) }
      value = { defs={} expr=v5051[8] }
      flags = { rdonly }
    address = { defs={} expr=v4997[32] }
      value = { defs={} expr=v5050[8] }
      flags = { rdonly }
null state
null state
0x80484bf:add    ebx, 0x0000120a
registers:
    ax      = { v36371 }
    cx      = { v36372 }
    dx      = { v36373 }
    bx      = { v36426+0x120a }
    sp      = { v36375+0x4 }
    bp      = { v36376 }
    si      = { v36377 }
    di      = { v36378 }
    es      = { v36379 }
    cs      = { v36380 }
    ss      = { v36381 }
    ds      = { v36382 }
    fs      = { v36383 }
    gs      = { v36384 }
    cf      = { v36475 }
    ?1      = { v36386 }
    pf      = { -v36466+0x1 }
    ?3      = { v36388 }
    af      = { v36473 }
    ?5      = { v36390 }
    zf      = { v36471 }
    sf      = { v36469 }
    tf      = { v36393 }
    if      = { v36394 }
    df      = { v36395 }
    of      = { v36481 }
    iopl0   = { v36397 }
    iopl1   = { v36398 }
    nt      = { v36399 }
    ?15     = { v36400 }
    rf      = { v36401 }
    vm      = { v36402 }
    ac      = { v36403 }
    vif     = { v36404 }
    vip     = { v36405 }
    id      = { v36406 }
    ?22     = { v36407 }
    ?23     = { v36408 }
    ?24     = { v36409 }
    ?25     = { v36410 }
    ?26     = { v36411 }
    ?27     = { v36412 }
    ?28     = { v36413 }
    ?29     = { v36414 }
    ?30     = { v36415 }
    ?31     = { v36416 }
    ip      = { 0x80484c5 }
memory:
    address = { v36375 }
      value = { v36426 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v4993[32] }
    cx      = { defs={} expr=v4994[32] }
    dx      = { defs={} expr=v4995[32] }
    bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]) }
    sp      = { defs={0x080484be} expr=(add[32] v4997[32] 4[32]) }
    bp      = { defs={} expr=v4998[32] }
    si      = { defs={} expr=v4999[32] }
    di      = { defs={} expr=v5000[32] }
    es      = { defs={} expr=v5001[16] }
    cs      = { defs={} expr=v5002[16] }
    ss      = { defs={} expr=v5003[16] }
    ds      = { defs={} expr=v5004[16] }
    fs      = { defs={} expr=v5005[16] }
    gs      = { defs={} expr=v5006[16] }
    cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) 4618[33]))))) }
    ?1      = { defs={} expr=v5008[1] }
    pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))))))) }
    ?3      = { defs={} expr=v5010[1] }
    af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) 4618[33]))))) }
    ?5      = { defs={} expr=v5012[1] }
    zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32])) }
    sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32])) }
    tf      = { defs={} expr=v5015[1] }
    if      = { defs={} expr=v5016[1] }
    df      = { defs={} expr=v5017[1] }
    of      = { defs={0x080484be,0x080484bf} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) 4618[33])))))) }
    iopl0   = { defs={} expr=v5019[1] }
    iopl1   = { defs={} expr=v5020[1] }
    nt      = { defs={} expr=v5021[1] }
    ?15     = { defs={} expr=v5022[1] }
    rf      = { defs={} expr=v5023[1] }
    vm      = { defs={} expr=v5024[1] }
    ac      = { defs={} expr=v5025[1] }
    vif     = { defs={} expr=v5026[1] }
    vip     = { defs={} expr=v5027[1] }
    id      = { defs={} expr=v5028[1] }
    ?22     = { defs={} expr=v5029[1] }
    ?23     = { defs={} expr=v5030[1] }
    ?24     = { defs={} expr=v5031[1] }
    ?25     = { defs={} expr=v5032[1] }
    ?26     = { defs={} expr=v5033[1] }
    ?27     = { defs={} expr=v5034[1] }
    ?28     = { defs={} expr=v5035[1] }
    ?29     = { defs={} expr=v5036[1] }
    ?30     = { defs={} expr=v5037[1] }
    ?31     = { defs={} expr=v5038[1] }
    ip      = { defs={0x080484be,0x080484bf} expr=0x080484c5[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v4997[32] 3[32]) }
      value = { defs={} expr=v5053[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4997[32] 2[32]) }
      value = { defs={} expr=v5052[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4997[32] 1[32]) }
      value = { defs={} expr=v5051[8] }
      flags = { rdonly }
    address = { defs={} expr=v4997[32] }
      value = { defs={} expr=v5050[8] }
      flags = { rdonly }
null state
null state
0x80484c5:call   0x080482c8<_init>
registers:
    ax      = { v36371 }
    cx      = { v36372 }
    dx      = { v36373 }
    bx      = { v36426+0x120a }
    sp      = { v36375 }
    bp      = { v36376 }
    si      = { v36377 }
    di      = { v36378 }
    es      = { v36379 }
    cs      = { v36380 }
    ss      = { v36381 }
    ds      = { v36382 }
    fs      = { v36383 }
    gs      = { v36384 }
    cf      = { v36475 }
    ?1      = { v36386 }
    pf      = { -v36466+0x1 }
    ?3      = { v36388 }
    af      = { v36473 }
    ?5      = { v36390 }
    zf      = { v36471 }
    sf      = { v36469 }
    tf      = { v36393 }
    if      = { v36394 }
    df      = { v36395 }
    of      = { v36481 }
    iopl0   = { v36397 }
    iopl1   = { v36398 }
    nt      = { v36399 }
    ?15     = { v36400 }
    rf      = { v36401 }
    vm      = { v36402 }
    ac      = { v36403 }
    vif     = { v36404 }
    vip     = { v36405 }
    id      = { v36406 }
    ?22     = { v36407 }
    ?23     = { v36408 }
    ?24     = { v36409 }
    ?25     = { v36410 }
    ?26     = { v36411 }
    ?27     = { v36412 }
    ?28     = { v36413 }
    ?29     = { v36414 }
    ?30     = { v36415 }
    ?31     = { v36416 }
    ip      = { 0x80482c8 }
memory:
    address = { v36375 }
      value = { 0x80484ca }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v4993[32] }
    cx      = { defs={} expr=v4994[32] }
    dx      = { defs={} expr=v4995[32] }
    bx      = { defs={0x080484be,0x080484bf} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]) }
    sp      = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v4997[32] 4[32]) -4[32]) }
    bp      = { defs={} expr=v4998[32] }
    si      = { defs={} expr=v4999[32] }
    di      = { defs={} expr=v5000[32] }
    es      = { defs={} expr=v5001[16] }
    cs      = { defs={} expr=v5002[16] }
    ss      = { defs={} expr=v5003[16] }
    ds      = { defs={} expr=v5004[16] }
    fs      = { defs={} expr=v5005[16] }
    gs      = { defs={} expr=v5006[16] }
    cf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) 4618[33]))))) }
    ?1      = { defs={} expr=v5008[1] }
    pf      = { defs={0x080484be,0x080484bf} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32]))))))) }
    ?3      = { defs={} expr=v5010[1] }
    af      = { defs={0x080484be,0x080484bf} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) 4618[33]))))) }
    ?5      = { defs={} expr=v5012[1] }
    zf      = { defs={0x080484be,0x080484bf} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32])) }
    sf      = { defs={0x080484be,0x080484bf} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8]))) 4618[32])) }
    tf      = { defs={} expr=v5015[1] }
    if      = { defs={} expr=v5016[1] }
    df      = { defs={} expr=v5017[1] }
    of      = { defs={0x080484be,0x080484bf} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5050[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5051[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5052[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5053[8])))) 4618[33])))))) }
    iopl0   = { defs={} expr=v5019[1] }
    iopl1   = { defs={} expr=v5020[1] }
    nt      = { defs={} expr=v5021[1] }
    ?15     = { defs={} expr=v5022[1] }
    rf      = { defs={} expr=v5023[1] }
    vm      = { defs={} expr=v5024[1] }
    ac      = { defs={} expr=v5025[1] }
    vif     = { defs={} expr=v5026[1] }
    vip     = { defs={} expr=v5027[1] }
    id      = { defs={} expr=v5028[1] }
    ?22     = { defs={} expr=v5029[1] }
    ?23     = { defs={} expr=v5030[1] }
    ?24     = { defs={} expr=v5031[1] }
    ?25     = { defs={} expr=v5032[1] }
    ?26     = { defs={} expr=v5033[1] }
    ?27     = { defs={} expr=v5034[1] }
    ?28     = { defs={} expr=v5035[1] }
    ?29     = { defs={} expr=v5036[1] }
    ?30     = { defs={} expr=v5037[1] }
    ?31     = { defs={} expr=v5038[1] }
    ip      = { defs={0x080484c5} expr=0x080482c8[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v4997[32] 4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4997[32] 4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v4997[32] 4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-124[8] }
      flags = { }
    address = { defs={0x080484be,0x080484c5} expr=(add[32] (add[32] v4997[32] 4[32]) -4[32]) }
      value = { defs={} expr=-54[8] }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v4997[32] 3[32]) }
      value = { defs={} expr=v5053[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4997[32] 2[32]) }
      value = { defs={} expr=v5052[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v4997[32] 1[32]) }
      value = { defs={} expr=v5051[8] }
      flags = { rdonly }
    address = { defs={} expr=v4997[32] }
      value = { defs={} expr=v5050[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { v36544-0xe0 }
    cx      = { v36542 }
    dx      = { v36543 }
    bx      = { v36544 }
    sp      = { v36545 }
    bp      = { v36546 }
    si      = { v36547 }
    di      = { v36548 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { v36555 }
    ?1      = { v36556 }
    pf      = { v36557 }
    ?3      = { v36558 }
    af      = { v36559 }
    ?5      = { v36560 }
    zf      = { v36561 }
    sf      = { v36562 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36566 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484d0 }
memory:
registers:
    ax      = { defs={0x080484ca} expr=(add[32] v5153[32] -224[32]) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={} expr=v5152[32] }
    bx      = { defs={} expr=v5153[32] }
    sp      = { defs={} expr=v5154[32] }
    bp      = { defs={} expr=v5155[32] }
    si      = { defs={} expr=v5156[32] }
    di      = { defs={} expr=v5157[32] }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={} expr=v5164[1] }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={} expr=v5166[1] }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={} expr=v5168[1] }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={} expr=v5170[1] }
    sf      = { defs={} expr=v5171[1] }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={} expr=v5175[1] }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484ca} expr=0x080484d0[32] }
memory:
init mem:
null state
null state
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { v36544-0xe0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36544 }
    sp      = { v36545 }
    bp      = { v36546 }
    si      = { v36547 }
    di      = { v36548 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { v36555 }
    ?1      = { v36556 }
    pf      = { v36557 }
    ?3      = { v36558 }
    af      = { v36559 }
    ?5      = { v36560 }
    zf      = { v36561 }
    sf      = { v36562 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36566 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484d6 }
memory:
registers:
    ax      = { defs={0x080484ca} expr=(add[32] v5153[32] -224[32]) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={} expr=v5153[32] }
    sp      = { defs={} expr=v5154[32] }
    bp      = { defs={} expr=v5155[32] }
    si      = { defs={} expr=v5156[32] }
    di      = { defs={} expr=v5157[32] }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={} expr=v5164[1] }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={} expr=v5166[1] }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={} expr=v5168[1] }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={} expr=v5170[1] }
    sf      = { defs={} expr=v5171[1] }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={} expr=v5175[1] }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484ca,0x080484d0} expr=0x080484d6[32] }
memory:
init mem:
null state
null state
0x80484d6:sub    eax, edx
registers:
    ax      = { 0x0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36544 }
    sp      = { v36545 }
    bp      = { v36546 }
    si      = { v36547 }
    di      = { v36548 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { 0x0 }
    ?1      = { v36556 }
    pf      = { 0x1 }
    ?3      = { v36558 }
    af      = { 0x0 }
    ?5      = { v36560 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { 0x0 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484d8 }
memory:
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={} expr=v5153[32] }
    sp      = { defs={} expr=v5154[32] }
    bp      = { defs={} expr=v5155[32] }
    si      = { defs={} expr=v5156[32] }
    di      = { defs={} expr=v5157[32] }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5153[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5153[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5153[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5153[32] -224[32]))) 1[33]))))))) }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))))))) }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5153[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5153[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5153[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5153[32] -224[32]))) 1[33]))))))) }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(zerop[1] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    sf      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5153[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5153[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5153[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5153[32] -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v5153[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v5153[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v5153[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v5153[32] -224[32]))) 1[33]))))))) }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484ca,0x080484d0,0x080484d6} expr=0x080484d8[32] }
memory:
init mem:
null state
null state
0x80484d8:sar    eax, 0x02
registers:
    ax      = { 0x0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36544 }
    sp      = { v36545 }
    bp      = { v36546 }
    si      = { v36547 }
    di      = { v36548 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { 0x0 }
    ?1      = { v36556 }
    pf      = { 0x1 }
    ?3      = { v36558 }
    af      = { v36649 }
    ?5      = { v36560 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36668 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484db }
memory:
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={} expr=v5153[32] }
    sp      = { defs={} expr=v5154[32] }
    bp      = { defs={} expr=v5155[32] }
    si      = { defs={} expr=v5156[32] }
    di      = { defs={} expr=v5157[32] }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))))))) }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={0x080484d8} expr=v5258[1] }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
    sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={0x080484d8} expr=v5277[1] }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=0x080484db[32] }
memory:
init mem:
null state
null state
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
registers:
    ax      = { 0x0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36544 }
    sp      = { v36545 }
    bp      = { v36546 }
    si      = { v36547 }
    di      = { v36548 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { 0x0 }
    ?1      = { v36556 }
    pf      = { 0x1 }
    ?3      = { v36558 }
    af      = { v36649 }
    ?5      = { v36560 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36668 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484de }
memory:
    address = { v36546-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={} expr=v5153[32] }
    sp      = { defs={} expr=v5154[32] }
    bp      = { defs={} expr=v5155[32] }
    si      = { defs={} expr=v5156[32] }
    di      = { defs={} expr=v5157[32] }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))))))) }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={0x080484d8} expr=v5258[1] }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
    sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={0x080484d8} expr=v5277[1] }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db} expr=0x080484de[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v5155[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
null state
null state
0x80484de:jne    0x080484f0<<StaticData@0x080484e8>+8>
registers:
    ax      = { 0x0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36544 }
    sp      = { v36545 }
    bp      = { v36546 }
    si      = { v36547 }
    di      = { v36548 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { 0x0 }
    ?1      = { v36556 }
    pf      = { 0x1 }
    ?3      = { v36558 }
    af      = { v36649 }
    ?5      = { v36560 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36668 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484e0 }
memory:
    address = { v36546-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={} expr=v5153[32] }
    sp      = { defs={} expr=v5154[32] }
    bp      = { defs={} expr=v5155[32] }
    si      = { defs={} expr=v5156[32] }
    di      = { defs={} expr=v5157[32] }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))))))) }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={0x080484d8} expr=v5258[1] }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
    sf      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={0x080484d8} expr=v5277[1] }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8,0x080484db,0x080484de} expr=(ite[32] (invert[1] (zerop[1] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))))) 0x080484f0[32] 0x080484e0[32]) }
memory:
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v5155[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
null state
null state
0x80484e0:add    esp, 0x0c
registers:
    ax      = { 0x0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36544 }
    sp      = { v36545+0xc }
    bp      = { v36546 }
    si      = { v36547 }
    di      = { v36548 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { v36765 }
    ?1      = { v36556 }
    pf      = { -v36756+0x1 }
    ?3      = { v36558 }
    af      = { v36763 }
    ?5      = { v36560 }
    zf      = { v36761 }
    sf      = { v36759 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36771 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484e3 }
memory:
    address = { v36546-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={} expr=v5153[32] }
    sp      = { defs={0x080484e0} expr=(add[32] v5154[32] 12[32]) }
    bp      = { defs={} expr=v5155[32] }
    si      = { defs={} expr=v5156[32] }
    di      = { defs={} expr=v5157[32] }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))))) }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5154[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5154[32] 12[32])) }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484e0} expr=0x080484e3[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v5155[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
null state
null state
0x80484e3:pop    ebx
registers:
    ax      = { 0x0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36781 }
    sp      = { v36545+0x10 }
    bp      = { v36546 }
    si      = { v36547 }
    di      = { v36548 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { v36765 }
    ?1      = { v36556 }
    pf      = { -v36756+0x1 }
    ?3      = { v36558 }
    af      = { v36763 }
    ?5      = { v36560 }
    zf      = { v36761 }
    sf      = { v36759 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36771 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484e4 }
memory:
    address = { v36546-0x10 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36545+0xc }
      value = { v36781 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5370[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5371[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5372[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5373[8]))) }
    sp      = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v5154[32] 12[32]) 4[32]) }
    bp      = { defs={} expr=v5155[32] }
    si      = { defs={} expr=v5156[32] }
    di      = { defs={} expr=v5157[32] }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))))) }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5154[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5154[32] 12[32])) }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484e0,0x080484e3} expr=0x080484e4[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v5155[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 3[32]) }
      value = { defs={} expr=v5373[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 2[32]) }
      value = { defs={} expr=v5372[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 1[32]) }
      value = { defs={} expr=v5371[8] }
      flags = { rdonly }
    address = { defs={0x080484e0} expr=(add[32] v5154[32] 12[32]) }
      value = { defs={} expr=v5370[8] }
      flags = { rdonly }
null state
null state
0x80484e4:pop    esi
registers:
    ax      = { 0x0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36781 }
    sp      = { v36545+0x14 }
    bp      = { v36546 }
    si      = { v36791 }
    di      = { v36548 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { v36765 }
    ?1      = { v36556 }
    pf      = { -v36756+0x1 }
    ?3      = { v36558 }
    af      = { v36763 }
    ?5      = { v36560 }
    zf      = { v36761 }
    sf      = { v36759 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36771 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484e5 }
memory:
    address = { v36546-0x10 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36545+0xc }
      value = { v36781 }
      flags = { size=4; read-only }
    address = { v36545+0x10 }
      value = { v36791 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5370[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5371[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5372[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5373[8]))) }
    sp      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) }
    bp      = { defs={} expr=v5155[32] }
    si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5392[8]))) }
    di      = { defs={} expr=v5157[32] }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))))) }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5154[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5154[32] 12[32])) }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484e0,0x080484e3,0x080484e4} expr=0x080484e5[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v5155[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v5392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v5391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v5390[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v5154[32] 12[32]) 4[32]) }
      value = { defs={} expr=v5389[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 3[32]) }
      value = { defs={} expr=v5373[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 2[32]) }
      value = { defs={} expr=v5372[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 1[32]) }
      value = { defs={} expr=v5371[8] }
      flags = { rdonly }
    address = { defs={0x080484e0} expr=(add[32] v5154[32] 12[32]) }
      value = { defs={} expr=v5370[8] }
      flags = { rdonly }
null state
null state
0x80484e5:pop    edi
registers:
    ax      = { 0x0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36781 }
    sp      = { v36545+0x18 }
    bp      = { v36546 }
    si      = { v36791 }
    di      = { v36801 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { v36765 }
    ?1      = { v36556 }
    pf      = { -v36756+0x1 }
    ?3      = { v36558 }
    af      = { v36763 }
    ?5      = { v36560 }
    zf      = { v36761 }
    sf      = { v36759 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36771 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484e6 }
memory:
    address = { v36546-0x10 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36545+0xc }
      value = { v36781 }
      flags = { size=4; read-only }
    address = { v36545+0x10 }
      value = { v36791 }
      flags = { size=4; read-only }
    address = { v36545+0x14 }
      value = { v36801 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5370[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5371[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5372[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5373[8]))) }
    sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={} expr=v5155[32] }
    si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5392[8]))) }
    di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5411[8]))) }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))))) }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5154[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5154[32] 12[32])) }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=0x080484e6[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v5155[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v5411[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v5410[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v5409[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v5408[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v5392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v5391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v5390[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v5154[32] 12[32]) 4[32]) }
      value = { defs={} expr=v5389[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 3[32]) }
      value = { defs={} expr=v5373[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 2[32]) }
      value = { defs={} expr=v5372[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 1[32]) }
      value = { defs={} expr=v5371[8] }
      flags = { rdonly }
    address = { defs={0x080484e0} expr=(add[32] v5154[32] 12[32]) }
      value = { defs={} expr=v5370[8] }
      flags = { rdonly }
null state
null state
0x80484e6:pop    ebp
registers:
    ax      = { 0x0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36781 }
    sp      = { v36545+0x1c }
    bp      = { v36811 }
    si      = { v36791 }
    di      = { v36801 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { v36765 }
    ?1      = { v36556 }
    pf      = { -v36756+0x1 }
    ?3      = { v36558 }
    af      = { v36763 }
    ?5      = { v36560 }
    zf      = { v36761 }
    sf      = { v36759 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36771 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { 0x80484e7 }
memory:
    address = { v36546-0x10 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36545+0xc }
      value = { v36781 }
      flags = { size=4; read-only }
    address = { v36545+0x10 }
      value = { v36791 }
      flags = { size=4; read-only }
    address = { v36545+0x14 }
      value = { v36801 }
      flags = { size=4; read-only }
    address = { v36545+0x18 }
      value = { v36811 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5370[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5371[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5372[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5373[8]))) }
    sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5427[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5428[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5429[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5430[8]))) }
    si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5392[8]))) }
    di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5411[8]))) }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))))) }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5154[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5154[32] 12[32])) }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=0x080484e7[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v5155[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v5430[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v5429[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v5428[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v5427[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v5411[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v5410[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v5409[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v5408[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v5392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v5391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v5390[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v5154[32] 12[32]) 4[32]) }
      value = { defs={} expr=v5389[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 3[32]) }
      value = { defs={} expr=v5373[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 2[32]) }
      value = { defs={} expr=v5372[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 1[32]) }
      value = { defs={} expr=v5371[8] }
      flags = { rdonly }
    address = { defs={0x080484e0} expr=(add[32] v5154[32] 12[32]) }
      value = { defs={} expr=v5370[8] }
      flags = { rdonly }
null state
null state
0x80484e7:ret    
registers:
    ax      = { 0x0 }
    cx      = { v36542 }
    dx      = { v36544-0xe0 }
    bx      = { v36781 }
    sp      = { v36545+0x20 }
    bp      = { v36811 }
    si      = { v36791 }
    di      = { v36801 }
    es      = { v36549 }
    cs      = { v36550 }
    ss      = { v36551 }
    ds      = { v36552 }
    fs      = { v36553 }
    gs      = { v36554 }
    cf      = { v36765 }
    ?1      = { v36556 }
    pf      = { -v36756+0x1 }
    ?3      = { v36558 }
    af      = { v36763 }
    ?5      = { v36560 }
    zf      = { v36761 }
    sf      = { v36759 }
    tf      = { v36563 }
    if      = { v36564 }
    df      = { v36565 }
    of      = { v36771 }
    iopl0   = { v36567 }
    iopl1   = { v36568 }
    nt      = { v36569 }
    ?15     = { v36570 }
    rf      = { v36571 }
    vm      = { v36572 }
    ac      = { v36573 }
    vif     = { v36574 }
    vip     = { v36575 }
    id      = { v36576 }
    ?22     = { v36577 }
    ?23     = { v36578 }
    ?24     = { v36579 }
    ?25     = { v36580 }
    ?26     = { v36581 }
    ?27     = { v36582 }
    ?28     = { v36583 }
    ?29     = { v36584 }
    ?30     = { v36585 }
    ?31     = { v36586 }
    ip      = { v36823 }
memory:
    address = { v36546-0x10 }
      value = { 0x0 }
      flags = { size=4 }
    address = { v36545+0xc }
      value = { v36781 }
      flags = { size=4; read-only }
    address = { v36545+0x10 }
      value = { v36791 }
      flags = { size=4; read-only }
    address = { v36545+0x14 }
      value = { v36801 }
      flags = { size=4; read-only }
    address = { v36545+0x18 }
      value = { v36811 }
      flags = { size=4; read-only }
    address = { v36545+0x1c }
      value = { v36823 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080484ca,0x080484d0,0x080484d6,0x080484d8} expr=(asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5151[32] }
    dx      = { defs={0x080484d0} expr=(add[32] v5153[32] -224[32]) }
    bx      = { defs={0x080484e3} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5370[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5371[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5372[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5373[8]))) }
    sp      = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6,0x080484e7} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x080484e6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5427[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5428[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5429[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5430[8]))) }
    si      = { defs={0x080484e4} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5389[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5390[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5391[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5392[8]))) }
    di      = { defs={0x080484e5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5408[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5409[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5410[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5411[8]))) }
    es      = { defs={} expr=v5158[16] }
    cs      = { defs={} expr=v5159[16] }
    ss      = { defs={} expr=v5160[16] }
    ds      = { defs={} expr=v5161[16] }
    fs      = { defs={} expr=v5162[16] }
    gs      = { defs={} expr=v5163[16] }
    cf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?1      = { defs={} expr=v5165[1] }
    pf      = { defs={0x080484e0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v5154[32] 12[32]))))))) }
    ?3      = { defs={} expr=v5167[1] }
    af      = { defs={0x080484e0} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) }
    ?5      = { defs={} expr=v5169[1] }
    zf      = { defs={0x080484e0} expr=(zerop[1] (add[32] v5154[32] 12[32])) }
    sf      = { defs={0x080484e0} expr=(extract[1] 31[32] 32[32] (add[32] v5154[32] 12[32])) }
    tf      = { defs={} expr=v5172[1] }
    if      = { defs={} expr=v5173[1] }
    df      = { defs={} expr=v5174[1] }
    of      = { defs={0x080484e0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v5154[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v5154[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v5176[1] }
    iopl1   = { defs={} expr=v5177[1] }
    nt      = { defs={} expr=v5178[1] }
    ?15     = { defs={} expr=v5179[1] }
    rf      = { defs={} expr=v5180[1] }
    vm      = { defs={} expr=v5181[1] }
    ac      = { defs={} expr=v5182[1] }
    vif     = { defs={} expr=v5183[1] }
    vip     = { defs={} expr=v5184[1] }
    id      = { defs={} expr=v5185[1] }
    ?22     = { defs={} expr=v5186[1] }
    ?23     = { defs={} expr=v5187[1] }
    ?24     = { defs={} expr=v5188[1] }
    ?25     = { defs={} expr=v5189[1] }
    ?26     = { defs={} expr=v5190[1] }
    ?27     = { defs={} expr=v5191[1] }
    ?28     = { defs={} expr=v5192[1] }
    ?29     = { defs={} expr=v5193[1] }
    ?30     = { defs={} expr=v5194[1] }
    ?31     = { defs={} expr=v5195[1] }
    ip      = { defs={0x080484e7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5448[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5449[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5450[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5451[8]))) }
memory:
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5155[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x080484db} expr=(add[32] v5155[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v5153[32] -224[32]) (add[32] (invert[32] (add[32] v5153[32] -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v5451[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v5450[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v5449[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5,0x080484e6} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v5448[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v5430[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v5429[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v5428[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4,0x080484e5} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v5427[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v5411[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v5410[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v5409[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3,0x080484e4} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v5408[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v5392[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v5391[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5154[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v5390[8] }
      flags = { rdonly }
    address = { defs={0x080484e0,0x080484e3} expr=(add[32] (add[32] v5154[32] 12[32]) 4[32]) }
      value = { defs={} expr=v5389[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 3[32]) }
      value = { defs={} expr=v5373[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 2[32]) }
      value = { defs={} expr=v5372[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v5154[32] 12[32]) 1[32]) }
      value = { defs={} expr=v5371[8] }
      flags = { rdonly }
    address = { defs={0x080484e0} expr=(add[32] v5154[32] 12[32]) }
      value = { defs={} expr=v5370[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048520:push   ebp
registers:
    ax      = { v36874 }
    cx      = { v36875 }
    dx      = { v36876 }
    bx      = { v36877 }
    sp      = { v36878-0x4 }
    bp      = { v36879 }
    si      = { v36880 }
    di      = { v36881 }
    es      = { v36882 }
    cs      = { v36883 }
    ss      = { v36884 }
    ds      = { v36885 }
    fs      = { v36886 }
    gs      = { v36887 }
    cf      = { v36888 }
    ?1      = { v36889 }
    pf      = { v36890 }
    ?3      = { v36891 }
    af      = { v36892 }
    ?5      = { v36893 }
    zf      = { v36894 }
    sf      = { v36895 }
    tf      = { v36896 }
    if      = { v36897 }
    df      = { v36898 }
    of      = { v36899 }
    iopl0   = { v36900 }
    iopl1   = { v36901 }
    nt      = { v36902 }
    ?15     = { v36903 }
    rf      = { v36904 }
    vm      = { v36905 }
    ac      = { v36906 }
    vif     = { v36907 }
    vip     = { v36908 }
    id      = { v36909 }
    ?22     = { v36910 }
    ?23     = { v36911 }
    ?24     = { v36912 }
    ?25     = { v36913 }
    ?26     = { v36914 }
    ?27     = { v36915 }
    ?28     = { v36916 }
    ?29     = { v36917 }
    ?30     = { v36918 }
    ?31     = { v36919 }
    ip      = { 0x8048521 }
memory:
    address = { v36878-0x4 }
      value = { v36879 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5506[32] }
    cx      = { defs={} expr=v5507[32] }
    dx      = { defs={} expr=v5508[32] }
    bx      = { defs={} expr=v5509[32] }
    sp      = { defs={0x08048520} expr=(add[32] v5510[32] -4[32]) }
    bp      = { defs={} expr=v5511[32] }
    si      = { defs={} expr=v5512[32] }
    di      = { defs={} expr=v5513[32] }
    es      = { defs={} expr=v5514[16] }
    cs      = { defs={} expr=v5515[16] }
    ss      = { defs={} expr=v5516[16] }
    ds      = { defs={} expr=v5517[16] }
    fs      = { defs={} expr=v5518[16] }
    gs      = { defs={} expr=v5519[16] }
    cf      = { defs={} expr=v5520[1] }
    ?1      = { defs={} expr=v5521[1] }
    pf      = { defs={} expr=v5522[1] }
    ?3      = { defs={} expr=v5523[1] }
    af      = { defs={} expr=v5524[1] }
    ?5      = { defs={} expr=v5525[1] }
    zf      = { defs={} expr=v5526[1] }
    sf      = { defs={} expr=v5527[1] }
    tf      = { defs={} expr=v5528[1] }
    if      = { defs={} expr=v5529[1] }
    df      = { defs={} expr=v5530[1] }
    of      = { defs={} expr=v5531[1] }
    iopl0   = { defs={} expr=v5532[1] }
    iopl1   = { defs={} expr=v5533[1] }
    nt      = { defs={} expr=v5534[1] }
    ?15     = { defs={} expr=v5535[1] }
    rf      = { defs={} expr=v5536[1] }
    vm      = { defs={} expr=v5537[1] }
    ac      = { defs={} expr=v5538[1] }
    vif     = { defs={} expr=v5539[1] }
    vip     = { defs={} expr=v5540[1] }
    id      = { defs={} expr=v5541[1] }
    ?22     = { defs={} expr=v5542[1] }
    ?23     = { defs={} expr=v5543[1] }
    ?24     = { defs={} expr=v5544[1] }
    ?25     = { defs={} expr=v5545[1] }
    ?26     = { defs={} expr=v5546[1] }
    ?27     = { defs={} expr=v5547[1] }
    ?28     = { defs={} expr=v5548[1] }
    ?29     = { defs={} expr=v5549[1] }
    ?30     = { defs={} expr=v5550[1] }
    ?31     = { defs={} expr=v5551[1] }
    ip      = { defs={0x08048520} expr=0x08048521[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5511[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v5510[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5511[32]) }
      flags = { }
init mem:
null state
null state
0x8048521:mov    ebp, esp
registers:
    ax      = { v36874 }
    cx      = { v36875 }
    dx      = { v36876 }
    bx      = { v36877 }
    sp      = { v36878-0x4 }
    bp      = { v36878-0x4 }
    si      = { v36880 }
    di      = { v36881 }
    es      = { v36882 }
    cs      = { v36883 }
    ss      = { v36884 }
    ds      = { v36885 }
    fs      = { v36886 }
    gs      = { v36887 }
    cf      = { v36888 }
    ?1      = { v36889 }
    pf      = { v36890 }
    ?3      = { v36891 }
    af      = { v36892 }
    ?5      = { v36893 }
    zf      = { v36894 }
    sf      = { v36895 }
    tf      = { v36896 }
    if      = { v36897 }
    df      = { v36898 }
    of      = { v36899 }
    iopl0   = { v36900 }
    iopl1   = { v36901 }
    nt      = { v36902 }
    ?15     = { v36903 }
    rf      = { v36904 }
    vm      = { v36905 }
    ac      = { v36906 }
    vif     = { v36907 }
    vip     = { v36908 }
    id      = { v36909 }
    ?22     = { v36910 }
    ?23     = { v36911 }
    ?24     = { v36912 }
    ?25     = { v36913 }
    ?26     = { v36914 }
    ?27     = { v36915 }
    ?28     = { v36916 }
    ?29     = { v36917 }
    ?30     = { v36918 }
    ?31     = { v36919 }
    ip      = { 0x8048523 }
memory:
    address = { v36878-0x4 }
      value = { v36879 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5506[32] }
    cx      = { defs={} expr=v5507[32] }
    dx      = { defs={} expr=v5508[32] }
    bx      = { defs={} expr=v5509[32] }
    sp      = { defs={0x08048520} expr=(add[32] v5510[32] -4[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5510[32] -4[32]) }
    si      = { defs={} expr=v5512[32] }
    di      = { defs={} expr=v5513[32] }
    es      = { defs={} expr=v5514[16] }
    cs      = { defs={} expr=v5515[16] }
    ss      = { defs={} expr=v5516[16] }
    ds      = { defs={} expr=v5517[16] }
    fs      = { defs={} expr=v5518[16] }
    gs      = { defs={} expr=v5519[16] }
    cf      = { defs={} expr=v5520[1] }
    ?1      = { defs={} expr=v5521[1] }
    pf      = { defs={} expr=v5522[1] }
    ?3      = { defs={} expr=v5523[1] }
    af      = { defs={} expr=v5524[1] }
    ?5      = { defs={} expr=v5525[1] }
    zf      = { defs={} expr=v5526[1] }
    sf      = { defs={} expr=v5527[1] }
    tf      = { defs={} expr=v5528[1] }
    if      = { defs={} expr=v5529[1] }
    df      = { defs={} expr=v5530[1] }
    of      = { defs={} expr=v5531[1] }
    iopl0   = { defs={} expr=v5532[1] }
    iopl1   = { defs={} expr=v5533[1] }
    nt      = { defs={} expr=v5534[1] }
    ?15     = { defs={} expr=v5535[1] }
    rf      = { defs={} expr=v5536[1] }
    vm      = { defs={} expr=v5537[1] }
    ac      = { defs={} expr=v5538[1] }
    vif     = { defs={} expr=v5539[1] }
    vip     = { defs={} expr=v5540[1] }
    id      = { defs={} expr=v5541[1] }
    ?22     = { defs={} expr=v5542[1] }
    ?23     = { defs={} expr=v5543[1] }
    ?24     = { defs={} expr=v5544[1] }
    ?25     = { defs={} expr=v5545[1] }
    ?26     = { defs={} expr=v5546[1] }
    ?27     = { defs={} expr=v5547[1] }
    ?28     = { defs={} expr=v5548[1] }
    ?29     = { defs={} expr=v5549[1] }
    ?30     = { defs={} expr=v5550[1] }
    ?31     = { defs={} expr=v5551[1] }
    ip      = { defs={0x08048520,0x08048521} expr=0x08048523[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5511[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v5510[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5511[32]) }
      flags = { }
init mem:
null state
null state
0x8048523:push   edi
registers:
    ax      = { v36874 }
    cx      = { v36875 }
    dx      = { v36876 }
    bx      = { v36877 }
    sp      = { v36878-0x8 }
    bp      = { v36878-0x4 }
    si      = { v36880 }
    di      = { v36881 }
    es      = { v36882 }
    cs      = { v36883 }
    ss      = { v36884 }
    ds      = { v36885 }
    fs      = { v36886 }
    gs      = { v36887 }
    cf      = { v36888 }
    ?1      = { v36889 }
    pf      = { v36890 }
    ?3      = { v36891 }
    af      = { v36892 }
    ?5      = { v36893 }
    zf      = { v36894 }
    sf      = { v36895 }
    tf      = { v36896 }
    if      = { v36897 }
    df      = { v36898 }
    of      = { v36899 }
    iopl0   = { v36900 }
    iopl1   = { v36901 }
    nt      = { v36902 }
    ?15     = { v36903 }
    rf      = { v36904 }
    vm      = { v36905 }
    ac      = { v36906 }
    vif     = { v36907 }
    vip     = { v36908 }
    id      = { v36909 }
    ?22     = { v36910 }
    ?23     = { v36911 }
    ?24     = { v36912 }
    ?25     = { v36913 }
    ?26     = { v36914 }
    ?27     = { v36915 }
    ?28     = { v36916 }
    ?29     = { v36917 }
    ?30     = { v36918 }
    ?31     = { v36919 }
    ip      = { 0x8048524 }
memory:
    address = { v36878-0x4 }
      value = { v36879 }
      flags = { size=4 }
    address = { v36878-0x8 }
      value = { v36881 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5506[32] }
    cx      = { defs={} expr=v5507[32] }
    dx      = { defs={} expr=v5508[32] }
    bx      = { defs={} expr=v5509[32] }
    sp      = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5510[32] -4[32]) -4[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5510[32] -4[32]) }
    si      = { defs={} expr=v5512[32] }
    di      = { defs={} expr=v5513[32] }
    es      = { defs={} expr=v5514[16] }
    cs      = { defs={} expr=v5515[16] }
    ss      = { defs={} expr=v5516[16] }
    ds      = { defs={} expr=v5517[16] }
    fs      = { defs={} expr=v5518[16] }
    gs      = { defs={} expr=v5519[16] }
    cf      = { defs={} expr=v5520[1] }
    ?1      = { defs={} expr=v5521[1] }
    pf      = { defs={} expr=v5522[1] }
    ?3      = { defs={} expr=v5523[1] }
    af      = { defs={} expr=v5524[1] }
    ?5      = { defs={} expr=v5525[1] }
    zf      = { defs={} expr=v5526[1] }
    sf      = { defs={} expr=v5527[1] }
    tf      = { defs={} expr=v5528[1] }
    if      = { defs={} expr=v5529[1] }
    df      = { defs={} expr=v5530[1] }
    of      = { defs={} expr=v5531[1] }
    iopl0   = { defs={} expr=v5532[1] }
    iopl1   = { defs={} expr=v5533[1] }
    nt      = { defs={} expr=v5534[1] }
    ?15     = { defs={} expr=v5535[1] }
    rf      = { defs={} expr=v5536[1] }
    vm      = { defs={} expr=v5537[1] }
    ac      = { defs={} expr=v5538[1] }
    vif     = { defs={} expr=v5539[1] }
    vip     = { defs={} expr=v5540[1] }
    id      = { defs={} expr=v5541[1] }
    ?22     = { defs={} expr=v5542[1] }
    ?23     = { defs={} expr=v5543[1] }
    ?24     = { defs={} expr=v5544[1] }
    ?25     = { defs={} expr=v5545[1] }
    ?26     = { defs={} expr=v5546[1] }
    ?27     = { defs={} expr=v5547[1] }
    ?28     = { defs={} expr=v5548[1] }
    ?29     = { defs={} expr=v5549[1] }
    ?30     = { defs={} expr=v5550[1] }
    ?31     = { defs={} expr=v5551[1] }
    ip      = { defs={0x08048520,0x08048521,0x08048523} expr=0x08048524[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5513[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5510[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5511[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v5510[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5511[32]) }
      flags = { }
init mem:
null state
null state
0x8048524:push   esi
registers:
    ax      = { v36874 }
    cx      = { v36875 }
    dx      = { v36876 }
    bx      = { v36877 }
    sp      = { v36878-0xc }
    bp      = { v36878-0x4 }
    si      = { v36880 }
    di      = { v36881 }
    es      = { v36882 }
    cs      = { v36883 }
    ss      = { v36884 }
    ds      = { v36885 }
    fs      = { v36886 }
    gs      = { v36887 }
    cf      = { v36888 }
    ?1      = { v36889 }
    pf      = { v36890 }
    ?3      = { v36891 }
    af      = { v36892 }
    ?5      = { v36893 }
    zf      = { v36894 }
    sf      = { v36895 }
    tf      = { v36896 }
    if      = { v36897 }
    df      = { v36898 }
    of      = { v36899 }
    iopl0   = { v36900 }
    iopl1   = { v36901 }
    nt      = { v36902 }
    ?15     = { v36903 }
    rf      = { v36904 }
    vm      = { v36905 }
    ac      = { v36906 }
    vif     = { v36907 }
    vip     = { v36908 }
    id      = { v36909 }
    ?22     = { v36910 }
    ?23     = { v36911 }
    ?24     = { v36912 }
    ?25     = { v36913 }
    ?26     = { v36914 }
    ?27     = { v36915 }
    ?28     = { v36916 }
    ?29     = { v36917 }
    ?30     = { v36918 }
    ?31     = { v36919 }
    ip      = { 0x8048525 }
memory:
    address = { v36878-0x4 }
      value = { v36879 }
      flags = { size=4 }
    address = { v36878-0x8 }
      value = { v36881 }
      flags = { size=4 }
    address = { v36878-0xc }
      value = { v36880 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5506[32] }
    cx      = { defs={} expr=v5507[32] }
    dx      = { defs={} expr=v5508[32] }
    bx      = { defs={} expr=v5509[32] }
    sp      = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5510[32] -4[32]) }
    si      = { defs={} expr=v5512[32] }
    di      = { defs={} expr=v5513[32] }
    es      = { defs={} expr=v5514[16] }
    cs      = { defs={} expr=v5515[16] }
    ss      = { defs={} expr=v5516[16] }
    ds      = { defs={} expr=v5517[16] }
    fs      = { defs={} expr=v5518[16] }
    gs      = { defs={} expr=v5519[16] }
    cf      = { defs={} expr=v5520[1] }
    ?1      = { defs={} expr=v5521[1] }
    pf      = { defs={} expr=v5522[1] }
    ?3      = { defs={} expr=v5523[1] }
    af      = { defs={} expr=v5524[1] }
    ?5      = { defs={} expr=v5525[1] }
    zf      = { defs={} expr=v5526[1] }
    sf      = { defs={} expr=v5527[1] }
    tf      = { defs={} expr=v5528[1] }
    if      = { defs={} expr=v5529[1] }
    df      = { defs={} expr=v5530[1] }
    of      = { defs={} expr=v5531[1] }
    iopl0   = { defs={} expr=v5532[1] }
    iopl1   = { defs={} expr=v5533[1] }
    nt      = { defs={} expr=v5534[1] }
    ?15     = { defs={} expr=v5535[1] }
    rf      = { defs={} expr=v5536[1] }
    vm      = { defs={} expr=v5537[1] }
    ac      = { defs={} expr=v5538[1] }
    vif     = { defs={} expr=v5539[1] }
    vip     = { defs={} expr=v5540[1] }
    id      = { defs={} expr=v5541[1] }
    ?22     = { defs={} expr=v5542[1] }
    ?23     = { defs={} expr=v5543[1] }
    ?24     = { defs={} expr=v5544[1] }
    ?25     = { defs={} expr=v5545[1] }
    ?26     = { defs={} expr=v5546[1] }
    ?27     = { defs={} expr=v5547[1] }
    ?28     = { defs={} expr=v5548[1] }
    ?29     = { defs={} expr=v5549[1] }
    ?30     = { defs={} expr=v5550[1] }
    ?31     = { defs={} expr=v5551[1] }
    ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524} expr=0x08048525[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5512[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5513[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5510[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5511[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v5510[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5511[32]) }
      flags = { }
init mem:
null state
null state
0x8048525:push   ebx
registers:
    ax      = { v36874 }
    cx      = { v36875 }
    dx      = { v36876 }
    bx      = { v36877 }
    sp      = { v36878-0x10 }
    bp      = { v36878-0x4 }
    si      = { v36880 }
    di      = { v36881 }
    es      = { v36882 }
    cs      = { v36883 }
    ss      = { v36884 }
    ds      = { v36885 }
    fs      = { v36886 }
    gs      = { v36887 }
    cf      = { v36888 }
    ?1      = { v36889 }
    pf      = { v36890 }
    ?3      = { v36891 }
    af      = { v36892 }
    ?5      = { v36893 }
    zf      = { v36894 }
    sf      = { v36895 }
    tf      = { v36896 }
    if      = { v36897 }
    df      = { v36898 }
    of      = { v36899 }
    iopl0   = { v36900 }
    iopl1   = { v36901 }
    nt      = { v36902 }
    ?15     = { v36903 }
    rf      = { v36904 }
    vm      = { v36905 }
    ac      = { v36906 }
    vif     = { v36907 }
    vip     = { v36908 }
    id      = { v36909 }
    ?22     = { v36910 }
    ?23     = { v36911 }
    ?24     = { v36912 }
    ?25     = { v36913 }
    ?26     = { v36914 }
    ?27     = { v36915 }
    ?28     = { v36916 }
    ?29     = { v36917 }
    ?30     = { v36918 }
    ?31     = { v36919 }
    ip      = { 0x8048526 }
memory:
    address = { v36878-0x4 }
      value = { v36879 }
      flags = { size=4 }
    address = { v36878-0x8 }
      value = { v36881 }
      flags = { size=4 }
    address = { v36878-0xc }
      value = { v36880 }
      flags = { size=4 }
    address = { v36878-0x10 }
      value = { v36877 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5506[32] }
    cx      = { defs={} expr=v5507[32] }
    dx      = { defs={} expr=v5508[32] }
    bx      = { defs={} expr=v5509[32] }
    sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5510[32] -4[32]) }
    si      = { defs={} expr=v5512[32] }
    di      = { defs={} expr=v5513[32] }
    es      = { defs={} expr=v5514[16] }
    cs      = { defs={} expr=v5515[16] }
    ss      = { defs={} expr=v5516[16] }
    ds      = { defs={} expr=v5517[16] }
    fs      = { defs={} expr=v5518[16] }
    gs      = { defs={} expr=v5519[16] }
    cf      = { defs={} expr=v5520[1] }
    ?1      = { defs={} expr=v5521[1] }
    pf      = { defs={} expr=v5522[1] }
    ?3      = { defs={} expr=v5523[1] }
    af      = { defs={} expr=v5524[1] }
    ?5      = { defs={} expr=v5525[1] }
    zf      = { defs={} expr=v5526[1] }
    sf      = { defs={} expr=v5527[1] }
    tf      = { defs={} expr=v5528[1] }
    if      = { defs={} expr=v5529[1] }
    df      = { defs={} expr=v5530[1] }
    of      = { defs={} expr=v5531[1] }
    iopl0   = { defs={} expr=v5532[1] }
    iopl1   = { defs={} expr=v5533[1] }
    nt      = { defs={} expr=v5534[1] }
    ?15     = { defs={} expr=v5535[1] }
    rf      = { defs={} expr=v5536[1] }
    vm      = { defs={} expr=v5537[1] }
    ac      = { defs={} expr=v5538[1] }
    vif     = { defs={} expr=v5539[1] }
    vip     = { defs={} expr=v5540[1] }
    id      = { defs={} expr=v5541[1] }
    ?22     = { defs={} expr=v5542[1] }
    ?23     = { defs={} expr=v5543[1] }
    ?24     = { defs={} expr=v5544[1] }
    ?25     = { defs={} expr=v5545[1] }
    ?26     = { defs={} expr=v5546[1] }
    ?27     = { defs={} expr=v5547[1] }
    ?28     = { defs={} expr=v5548[1] }
    ?29     = { defs={} expr=v5549[1] }
    ?30     = { defs={} expr=v5550[1] }
    ?31     = { defs={} expr=v5551[1] }
    ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525} expr=0x08048526[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5509[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5509[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5509[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5509[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5512[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5513[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5510[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5511[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v5510[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5511[32]) }
      flags = { }
init mem:
null state
null state
0x8048526:sub    esp, 0x0c
registers:
    ax      = { v36874 }
    cx      = { v36875 }
    dx      = { v36876 }
    bx      = { v36877 }
    sp      = { v36878-0x1c }
    bp      = { v36878-0x4 }
    si      = { v36880 }
    di      = { v36881 }
    es      = { v36882 }
    cs      = { v36883 }
    ss      = { v36884 }
    ds      = { v36885 }
    fs      = { v36886 }
    gs      = { v36887 }
    cf      = { -v37012+0x1 }
    ?1      = { v36889 }
    pf      = { -v37002+0x1 }
    ?3      = { v36891 }
    af      = { -v37009+0x1 }
    ?5      = { v36893 }
    zf      = { v37007 }
    sf      = { v37005 }
    tf      = { v36896 }
    if      = { v36897 }
    df      = { v36898 }
    of      = { v37019 }
    iopl0   = { v36900 }
    iopl1   = { v36901 }
    nt      = { v36902 }
    ?15     = { v36903 }
    rf      = { v36904 }
    vm      = { v36905 }
    ac      = { v36906 }
    vif     = { v36907 }
    vip     = { v36908 }
    id      = { v36909 }
    ?22     = { v36910 }
    ?23     = { v36911 }
    ?24     = { v36912 }
    ?25     = { v36913 }
    ?26     = { v36914 }
    ?27     = { v36915 }
    ?28     = { v36916 }
    ?29     = { v36917 }
    ?30     = { v36918 }
    ?31     = { v36919 }
    ip      = { 0x8048529 }
memory:
    address = { v36878-0x4 }
      value = { v36879 }
      flags = { size=4 }
    address = { v36878-0x8 }
      value = { v36881 }
      flags = { size=4 }
    address = { v36878-0xc }
      value = { v36880 }
      flags = { size=4 }
    address = { v36878-0x10 }
      value = { v36877 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5506[32] }
    cx      = { defs={} expr=v5507[32] }
    dx      = { defs={} expr=v5508[32] }
    bx      = { defs={} expr=v5509[32] }
    sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5510[32] -4[32]) }
    si      = { defs={} expr=v5512[32] }
    di      = { defs={} expr=v5513[32] }
    es      = { defs={} expr=v5514[16] }
    cs      = { defs={} expr=v5515[16] }
    ss      = { defs={} expr=v5516[16] }
    ds      = { defs={} expr=v5517[16] }
    fs      = { defs={} expr=v5518[16] }
    gs      = { defs={} expr=v5519[16] }
    cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?1      = { defs={} expr=v5521[1] }
    pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
    ?3      = { defs={} expr=v5523[1] }
    af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?5      = { defs={} expr=v5525[1] }
    zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    tf      = { defs={} expr=v5528[1] }
    if      = { defs={} expr=v5529[1] }
    df      = { defs={} expr=v5530[1] }
    of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    iopl0   = { defs={} expr=v5532[1] }
    iopl1   = { defs={} expr=v5533[1] }
    nt      = { defs={} expr=v5534[1] }
    ?15     = { defs={} expr=v5535[1] }
    rf      = { defs={} expr=v5536[1] }
    vm      = { defs={} expr=v5537[1] }
    ac      = { defs={} expr=v5538[1] }
    vif     = { defs={} expr=v5539[1] }
    vip     = { defs={} expr=v5540[1] }
    id      = { defs={} expr=v5541[1] }
    ?22     = { defs={} expr=v5542[1] }
    ?23     = { defs={} expr=v5543[1] }
    ?24     = { defs={} expr=v5544[1] }
    ?25     = { defs={} expr=v5545[1] }
    ?26     = { defs={} expr=v5546[1] }
    ?27     = { defs={} expr=v5547[1] }
    ?28     = { defs={} expr=v5548[1] }
    ?29     = { defs={} expr=v5549[1] }
    ?30     = { defs={} expr=v5550[1] }
    ?31     = { defs={} expr=v5551[1] }
    ip      = { defs={0x08048520,0x08048521,0x08048523,0x08048524,0x08048525,0x08048526} expr=0x08048529[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5509[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5509[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5509[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5509[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5512[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5513[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5510[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5511[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v5510[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5511[32]) }
      flags = { }
init mem:
null state
null state
0x8048529:call   0x0804852e<<Insn>>
registers:
    ax      = { v36874 }
    cx      = { v36875 }
    dx      = { v36876 }
    bx      = { v36877 }
    sp      = { v36878-0x20 }
    bp      = { v36878-0x4 }
    si      = { v36880 }
    di      = { v36881 }
    es      = { v36882 }
    cs      = { v36883 }
    ss      = { v36884 }
    ds      = { v36885 }
    fs      = { v36886 }
    gs      = { v36887 }
    cf      = { -v37012+0x1 }
    ?1      = { v36889 }
    pf      = { -v37002+0x1 }
    ?3      = { v36891 }
    af      = { -v37009+0x1 }
    ?5      = { v36893 }
    zf      = { v37007 }
    sf      = { v37005 }
    tf      = { v36896 }
    if      = { v36897 }
    df      = { v36898 }
    of      = { v37019 }
    iopl0   = { v36900 }
    iopl1   = { v36901 }
    nt      = { v36902 }
    ?15     = { v36903 }
    rf      = { v36904 }
    vm      = { v36905 }
    ac      = { v36906 }
    vif     = { v36907 }
    vip     = { v36908 }
    id      = { v36909 }
    ?22     = { v36910 }
    ?23     = { v36911 }
    ?24     = { v36912 }
    ?25     = { v36913 }
    ?26     = { v36914 }
    ?27     = { v36915 }
    ?28     = { v36916 }
    ?29     = { v36917 }
    ?30     = { v36918 }
    ?31     = { v36919 }
    ip      = { 0x804852e }
memory:
    address = { v36878-0x4 }
      value = { v36879 }
      flags = { size=4 }
    address = { v36878-0x8 }
      value = { v36881 }
      flags = { size=4 }
    address = { v36878-0xc }
      value = { v36880 }
      flags = { size=4 }
    address = { v36878-0x10 }
      value = { v36877 }
      flags = { size=4 }
    address = { v36878-0x20 }
      value = { 0x804852e }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v5506[32] }
    cx      = { defs={} expr=v5507[32] }
    dx      = { defs={} expr=v5508[32] }
    bx      = { defs={} expr=v5509[32] }
    sp      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
    bp      = { defs={0x08048520,0x08048521} expr=(add[32] v5510[32] -4[32]) }
    si      = { defs={} expr=v5512[32] }
    di      = { defs={} expr=v5513[32] }
    es      = { defs={} expr=v5514[16] }
    cs      = { defs={} expr=v5515[16] }
    ss      = { defs={} expr=v5516[16] }
    ds      = { defs={} expr=v5517[16] }
    fs      = { defs={} expr=v5518[16] }
    gs      = { defs={} expr=v5519[16] }
    cf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?1      = { defs={} expr=v5521[1] }
    pf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))))) }
    ?3      = { defs={} expr=v5523[1] }
    af      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    ?5      = { defs={} expr=v5525[1] }
    zf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    sf      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])) }
    tf      = { defs={} expr=v5528[1] }
    if      = { defs={} expr=v5529[1] }
    df      = { defs={} expr=v5530[1] }
    of      = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33])))))) }
    iopl0   = { defs={} expr=v5532[1] }
    iopl1   = { defs={} expr=v5533[1] }
    nt      = { defs={} expr=v5534[1] }
    ?15     = { defs={} expr=v5535[1] }
    rf      = { defs={} expr=v5536[1] }
    vm      = { defs={} expr=v5537[1] }
    ac      = { defs={} expr=v5538[1] }
    vif     = { defs={} expr=v5539[1] }
    vip     = { defs={} expr=v5540[1] }
    id      = { defs={} expr=v5541[1] }
    ?22     = { defs={} expr=v5542[1] }
    ?23     = { defs={} expr=v5543[1] }
    ?24     = { defs={} expr=v5544[1] }
    ?25     = { defs={} expr=v5545[1] }
    ?26     = { defs={} expr=v5546[1] }
    ?27     = { defs={} expr=v5547[1] }
    ?28     = { defs={} expr=v5548[1] }
    ?29     = { defs={} expr=v5549[1] }
    ?30     = { defs={} expr=v5550[1] }
    ?31     = { defs={} expr=v5551[1] }
    ip      = { defs={0x08048529} expr=0x0804852e[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524,0x08048525,0x08048526,0x08048529} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]) }
      value = { defs={} expr=46[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5509[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5509[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5509[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524,0x08048525} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5509[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5512[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523,0x08048524} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5512[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5510[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5513[32]) }
      flags = { }
    address = { defs={0x08048520,0x08048523} expr=(add[32] (add[32] v5510[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5513[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v5511[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5510[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v5511[32]) }
      flags = { }
    address = { defs={0x08048520} expr=(add[32] v5510[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v5511[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
registers:
    ax      = { v37079 }
    cx      = { v37080 }
    dx      = { v37081 }
    bx      = { v37134 }
    sp      = { v37083+0x4 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { v37093 }
    ?1      = { v37094 }
    pf      = { v37095 }
    ?3      = { v37096 }
    af      = { v37097 }
    ?5      = { v37098 }
    zf      = { v37099 }
    sf      = { v37100 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { v37104 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x804852f }
memory:
    address = { v37083 }
      value = { v37134 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v5689[32] }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={} expr=v5691[32] }
    bx      = { defs={0x0804852e} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) }
    sp      = { defs={0x0804852e} expr=(add[32] v5693[32] 4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={} expr=v5703[1] }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={} expr=v5705[1] }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={} expr=v5707[1] }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={} expr=v5709[1] }
    sf      = { defs={} expr=v5710[1] }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={} expr=v5714[1] }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804852e} expr=0x0804852f[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
0x804852f:add    ebx, 0x0000119a
registers:
    ax      = { v37079 }
    cx      = { v37080 }
    dx      = { v37081 }
    bx      = { v37134+0x119a }
    sp      = { v37083+0x4 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { v37183 }
    ?1      = { v37094 }
    pf      = { -v37174+0x1 }
    ?3      = { v37096 }
    af      = { v37181 }
    ?5      = { v37098 }
    zf      = { v37179 }
    sf      = { v37177 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { v37189 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x8048535 }
memory:
    address = { v37083 }
      value = { v37134 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v5689[32] }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={} expr=v5691[32] }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v5693[32] 4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33]))))) }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))))))) }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33]))))) }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])) }
    sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])) }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33])))))) }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804852e,0x0804852f} expr=0x08048535[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { v37134+0x10ba }
    cx      = { v37080 }
    dx      = { v37081 }
    bx      = { v37134+0x119a }
    sp      = { v37083+0x4 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { v37183 }
    ?1      = { v37094 }
    pf      = { -v37174+0x1 }
    ?3      = { v37096 }
    af      = { v37181 }
    ?5      = { v37098 }
    zf      = { v37179 }
    sf      = { v37177 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { v37189 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x804853b }
memory:
    address = { v37083 }
      value = { v37134 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={} expr=v5691[32] }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v5693[32] 4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33]))))) }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))))))) }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33]))))) }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])) }
    sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])) }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33])))))) }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535} expr=0x0804853b[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
registers:
    ax      = { v37134+0x10ba }
    cx      = { v37080 }
    dx      = { v37134+0x10ba }
    bx      = { v37134+0x119a }
    sp      = { v37083+0x4 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { v37183 }
    ?1      = { v37094 }
    pf      = { -v37174+0x1 }
    ?3      = { v37096 }
    af      = { v37181 }
    ?5      = { v37098 }
    zf      = { v37179 }
    sf      = { v37177 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { v37189 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x8048541 }
memory:
    address = { v37083 }
      value = { v37134 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v5693[32] 4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33]))))) }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={0x0804852e,0x0804852f} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]))))))) }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33]))))) }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={0x0804852e,0x0804852f} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])) }
    sf      = { defs={0x0804852e,0x0804852f} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32])) }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={0x0804852e,0x0804852f} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8])))) 4506[33])))))) }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b} expr=0x08048541[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
0x8048541:sub    eax, edx
registers:
    ax      = { 0x0 }
    cx      = { v37080 }
    dx      = { v37134+0x10ba }
    bx      = { v37134+0x119a }
    sp      = { v37083+0x4 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { 0x0 }
    ?1      = { v37094 }
    pf      = { 0x1 }
    ?3      = { v37096 }
    af      = { 0x0 }
    ?5      = { v37098 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { 0x0 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x8048543 }
memory:
    address = { v37083 }
      value = { v37134 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])) }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v5693[32] 4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))))))) }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(zerop[1] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]))) 1[33]))))))) }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541} expr=0x08048543[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
0x8048543:sar    eax, 0x02
registers:
    ax      = { 0x0 }
    cx      = { v37080 }
    dx      = { v37134+0x10ba }
    bx      = { v37134+0x119a }
    sp      = { v37083+0x4 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { 0x0 }
    ?1      = { v37094 }
    pf      = { 0x1 }
    ?3      = { v37096 }
    af      = { v37252 }
    ?5      = { v37098 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { v37271 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x8048546 }
memory:
    address = { v37083 }
      value = { v37134 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v5693[32] 4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))))))) }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={0x08048543} expr=v5849[1] }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={0x08048543} expr=v5868[1] }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=0x08048546[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
registers:
    ax      = { 0x0 }
    cx      = { v37080 }
    dx      = { v37134+0x10ba }
    bx      = { v37134+0x119a }
    sp      = { v37083+0x4 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { 0x0 }
    ?1      = { v37094 }
    pf      = { 0x1 }
    ?3      = { v37096 }
    af      = { v37252 }
    ?5      = { v37098 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { v37271 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x8048549 }
memory:
    address = { v37083 }
      value = { v37134 }
      flags = { size=4; read-only; clobbered }
    address = { v37084-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v5693[32] 4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))))))))) }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={0x08048543} expr=v5849[1] }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={0x08048543} expr=v5868[1] }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546} expr=0x08048549[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x08048546} expr=(add[32] v5694[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
0x8048549:dec    eax
registers:
    ax      = { 0xffffffff (-0x1) }
    cx      = { v37080 }
    dx      = { v37134+0x10ba }
    bx      = { v37134+0x119a }
    sp      = { v37083+0x4 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { 0x0 }
    ?1      = { v37094 }
    pf      = { 0x1 }
    ?3      = { v37096 }
    af      = { 0x1 }
    ?5      = { v37098 }
    zf      = { 0x0 }
    sf      = { 0x1 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { 0x0 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x804854a }
memory:
    address = { v37083 }
      value = { v37134 }
      flags = { size=4; read-only; clobbered }
    address = { v37084-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v5693[32] 4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543} expr=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]))))))) }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33])))))) }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) 4294967295[33])))))) }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549} expr=0x0804854a[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x08048546} expr=(add[32] v5694[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
0x804854a:cmp    eax, 0xff<-0x01>
registers:
    ax      = { 0xffffffff (-0x1) }
    cx      = { v37080 }
    dx      = { v37134+0x10ba }
    bx      = { v37134+0x119a }
    sp      = { v37083+0x4 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { 0x0 }
    ?1      = { v37094 }
    pf      = { 0x1 }
    ?3      = { v37096 }
    af      = { 0x0 }
    ?5      = { v37098 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { 0x0 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x804854d }
memory:
    address = { v37083 }
      value = { v37134 }
      flags = { size=4; read-only; clobbered }
    address = { v37084-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v5693[32] 4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a} expr=0x0804854d[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x08048546} expr=(add[32] v5694[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
0x804854d:je     0x0804856b<<Insn>>
registers:
    ax      = { 0xffffffff (-0x1) }
    cx      = { v37080 }
    dx      = { v37134+0x10ba }
    bx      = { v37134+0x119a }
    sp      = { v37083+0x4 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { 0x0 }
    ?1      = { v37094 }
    pf      = { 0x1 }
    ?3      = { v37096 }
    af      = { 0x0 }
    ?5      = { v37098 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { 0x0 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x804856b }
memory:
    address = { v37083 }
      value = { v37134 }
      flags = { size=4; read-only; clobbered }
    address = { v37084-0x10 }
      value = { 0x0 }
      flags = { size=4 }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) }
    sp      = { defs={0x0804852e} expr=(add[32] v5693[32] 4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048546,0x08048549,0x0804854a,0x0804854d} expr=(ite[32] (zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) 0x0804856b[32] 0x0804854f[32]) }
memory:
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x08048546} expr=(add[32] v5694[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
0x804856b:call   0x080485b0<_fini>
registers:
    ax      = { 0xffffffff (-0x1) }
    cx      = { v37080 }
    dx      = { v37134+0x10ba }
    bx      = { v37134+0x119a }
    sp      = { v37083 }
    bp      = { v37084 }
    si      = { v37085 }
    di      = { v37086 }
    es      = { v37087 }
    cs      = { v37088 }
    ss      = { v37089 }
    ds      = { v37090 }
    fs      = { v37091 }
    gs      = { v37092 }
    cf      = { 0x0 }
    ?1      = { v37094 }
    pf      = { 0x1 }
    ?3      = { v37096 }
    af      = { 0x0 }
    ?5      = { v37098 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37101 }
    if      = { v37102 }
    df      = { v37103 }
    of      = { 0x0 }
    iopl0   = { v37105 }
    iopl1   = { v37106 }
    nt      = { v37107 }
    ?15     = { v37108 }
    rf      = { v37109 }
    vm      = { v37110 }
    ac      = { v37111 }
    vif     = { v37112 }
    vip     = { v37113 }
    id      = { v37114 }
    ?22     = { v37115 }
    ?23     = { v37116 }
    ?24     = { v37117 }
    ?25     = { v37118 }
    ?26     = { v37119 }
    ?27     = { v37120 }
    ?28     = { v37121 }
    ?29     = { v37122 }
    ?30     = { v37123 }
    ?31     = { v37124 }
    ip      = { 0x80485b0 }
memory:
    address = { v37083 }
      value = { 0x8048570 }
      flags = { size=4 }
    address = { v37084-0x10 }
      value = { 0x0 }
      flags = { size=4; clobbered }
registers:
    ax      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549} expr=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) }
    cx      = { defs={} expr=v5690[32] }
    dx      = { defs={0x0804852e,0x0804852f,0x0804853b} expr=(add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) }
    bx      = { defs={0x0804852e,0x0804852f} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) }
    sp      = { defs={0x0804852e,0x0804856b} expr=(add[32] (add[32] v5693[32] 4[32]) -4[32]) }
    bp      = { defs={} expr=v5694[32] }
    si      = { defs={} expr=v5695[32] }
    di      = { defs={} expr=v5696[32] }
    es      = { defs={} expr=v5697[16] }
    cs      = { defs={} expr=v5698[16] }
    ss      = { defs={} expr=v5699[16] }
    ds      = { defs={} expr=v5700[16] }
    fs      = { defs={} expr=v5701[16] }
    gs      = { defs={} expr=v5702[16] }
    cf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?1      = { defs={} expr=v5704[1] }
    pf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))))) }
    ?3      = { defs={} expr=v5706[1] }
    af      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    ?5      = { defs={} expr=v5708[1] }
    zf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    sf      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])) }
    tf      = { defs={} expr=v5711[1] }
    if      = { defs={} expr=v5712[1] }
    df      = { defs={} expr=v5713[1] }
    of      = { defs={0x0804852e,0x0804852f,0x08048535,0x0804853b,0x08048541,0x08048543,0x08048549,0x0804854a} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33])))))) }
    iopl0   = { defs={} expr=v5715[1] }
    iopl1   = { defs={} expr=v5716[1] }
    nt      = { defs={} expr=v5717[1] }
    ?15     = { defs={} expr=v5718[1] }
    rf      = { defs={} expr=v5719[1] }
    vm      = { defs={} expr=v5720[1] }
    ac      = { defs={} expr=v5721[1] }
    vif     = { defs={} expr=v5722[1] }
    vip     = { defs={} expr=v5723[1] }
    id      = { defs={} expr=v5724[1] }
    ?22     = { defs={} expr=v5725[1] }
    ?23     = { defs={} expr=v5726[1] }
    ?24     = { defs={} expr=v5727[1] }
    ?25     = { defs={} expr=v5728[1] }
    ?26     = { defs={} expr=v5729[1] }
    ?27     = { defs={} expr=v5730[1] }
    ?28     = { defs={} expr=v5731[1] }
    ?29     = { defs={} expr=v5732[1] }
    ?30     = { defs={} expr=v5733[1] }
    ?31     = { defs={} expr=v5734[1] }
    ip      = { defs={0x0804856b} expr=0x080485b0[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v5693[32] 4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5693[32] 4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v5693[32] 4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x0804852e,0x0804856b} expr=(add[32] (add[32] v5693[32] 4[32]) -4[32]) }
      value = { defs={} expr=112[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v5694[32] -16[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
    address = { defs={0x08048546} expr=(add[32] v5694[32] -16[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v5746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v5747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v5748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v5749[8]))) 4506[32]) -224[32])) 1[32])))) }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v5693[32] 3[32]) }
      value = { defs={} expr=v5749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 2[32]) }
      value = { defs={} expr=v5748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v5693[32] 1[32]) }
      value = { defs={} expr=v5747[8] }
      flags = { rdonly }
    address = { defs={} expr=v5693[32] }
      value = { defs={} expr=v5746[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
registers:
    ax      = { v37448 }
    cx      = { v37449 }
    dx      = { v37450 }
    bx      = { v37451 }
    sp      = { v37452 }
    bp      = { v37453 }
    si      = { v37505 }
    di      = { v37455 }
    es      = { v37456 }
    cs      = { v37457 }
    ss      = { v37458 }
    ds      = { v37459 }
    fs      = { v37460 }
    gs      = { v37461 }
    cf      = { v37462 }
    ?1      = { v37463 }
    pf      = { v37464 }
    ?3      = { v37465 }
    af      = { v37466 }
    ?5      = { v37467 }
    zf      = { v37468 }
    sf      = { v37469 }
    tf      = { v37470 }
    if      = { v37471 }
    df      = { v37472 }
    of      = { v37473 }
    iopl0   = { v37474 }
    iopl1   = { v37475 }
    nt      = { v37476 }
    ?15     = { v37477 }
    rf      = { v37478 }
    vm      = { v37479 }
    ac      = { v37480 }
    vif     = { v37481 }
    vip     = { v37482 }
    id      = { v37483 }
    ?22     = { v37484 }
    ?23     = { v37485 }
    ?24     = { v37486 }
    ?25     = { v37487 }
    ?26     = { v37488 }
    ?27     = { v37489 }
    ?28     = { v37490 }
    ?29     = { v37491 }
    ?30     = { v37492 }
    ?31     = { v37493 }
    ip      = { 0x8048552 }
memory:
registers:
    ax      = { defs={} expr=v6045[32] }
    cx      = { defs={} expr=v6046[32] }
    dx      = { defs={} expr=v6047[32] }
    bx      = { defs={} expr=v6048[32] }
    sp      = { defs={} expr=v6049[32] }
    bp      = { defs={} expr=v6050[32] }
    si      = { defs={0x0804854f} expr=(add[32] v6047[32] (extract[32] 0[32] 32[32] (umul[40] v6045[32] 4[8]))) }
    di      = { defs={} expr=v6052[32] }
    es      = { defs={} expr=v6053[16] }
    cs      = { defs={} expr=v6054[16] }
    ss      = { defs={} expr=v6055[16] }
    ds      = { defs={} expr=v6056[16] }
    fs      = { defs={} expr=v6057[16] }
    gs      = { defs={} expr=v6058[16] }
    cf      = { defs={} expr=v6059[1] }
    ?1      = { defs={} expr=v6060[1] }
    pf      = { defs={} expr=v6061[1] }
    ?3      = { defs={} expr=v6062[1] }
    af      = { defs={} expr=v6063[1] }
    ?5      = { defs={} expr=v6064[1] }
    zf      = { defs={} expr=v6065[1] }
    sf      = { defs={} expr=v6066[1] }
    tf      = { defs={} expr=v6067[1] }
    if      = { defs={} expr=v6068[1] }
    df      = { defs={} expr=v6069[1] }
    of      = { defs={} expr=v6070[1] }
    iopl0   = { defs={} expr=v6071[1] }
    iopl1   = { defs={} expr=v6072[1] }
    nt      = { defs={} expr=v6073[1] }
    ?15     = { defs={} expr=v6074[1] }
    rf      = { defs={} expr=v6075[1] }
    vm      = { defs={} expr=v6076[1] }
    ac      = { defs={} expr=v6077[1] }
    vif     = { defs={} expr=v6078[1] }
    vip     = { defs={} expr=v6079[1] }
    id      = { defs={} expr=v6080[1] }
    ?22     = { defs={} expr=v6081[1] }
    ?23     = { defs={} expr=v6082[1] }
    ?24     = { defs={} expr=v6083[1] }
    ?25     = { defs={} expr=v6084[1] }
    ?26     = { defs={} expr=v6085[1] }
    ?27     = { defs={} expr=v6086[1] }
    ?28     = { defs={} expr=v6087[1] }
    ?29     = { defs={} expr=v6088[1] }
    ?30     = { defs={} expr=v6089[1] }
    ?31     = { defs={} expr=v6090[1] }
    ip      = { defs={0x0804854f} expr=0x08048552[32] }
memory:
init mem:
null state
null state
0x8048552:xor    edi, edi
registers:
    ax      = { v37448 }
    cx      = { v37449 }
    dx      = { v37450 }
    bx      = { v37451 }
    sp      = { v37452 }
    bp      = { v37453 }
    si      = { v37505 }
    di      = { 0x0 }
    es      = { v37456 }
    cs      = { v37457 }
    ss      = { v37458 }
    ds      = { v37459 }
    fs      = { v37460 }
    gs      = { v37461 }
    cf      = { 0x0 }
    ?1      = { v37463 }
    pf      = { 0x1 }
    ?3      = { v37465 }
    af      = { v37534 }
    ?5      = { v37467 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37470 }
    if      = { v37471 }
    df      = { v37472 }
    of      = { 0x0 }
    iopl0   = { v37474 }
    iopl1   = { v37475 }
    nt      = { v37476 }
    ?15     = { v37477 }
    rf      = { v37478 }
    vm      = { v37479 }
    ac      = { v37480 }
    vif     = { v37481 }
    vip     = { v37482 }
    id      = { v37483 }
    ?22     = { v37484 }
    ?23     = { v37485 }
    ?24     = { v37486 }
    ?25     = { v37487 }
    ?26     = { v37488 }
    ?27     = { v37489 }
    ?28     = { v37490 }
    ?29     = { v37491 }
    ?30     = { v37492 }
    ?31     = { v37493 }
    ip      = { 0x8048554 }
memory:
registers:
    ax      = { defs={} expr=v6045[32] }
    cx      = { defs={} expr=v6046[32] }
    dx      = { defs={} expr=v6047[32] }
    bx      = { defs={} expr=v6048[32] }
    sp      = { defs={} expr=v6049[32] }
    bp      = { defs={} expr=v6050[32] }
    si      = { defs={0x0804854f} expr=(add[32] v6047[32] (extract[32] 0[32] 32[32] (umul[40] v6045[32] 4[8]))) }
    di      = { defs={0x08048552} expr=0[32] }
    es      = { defs={} expr=v6053[16] }
    cs      = { defs={} expr=v6054[16] }
    ss      = { defs={} expr=v6055[16] }
    ds      = { defs={} expr=v6056[16] }
    fs      = { defs={} expr=v6057[16] }
    gs      = { defs={} expr=v6058[16] }
    cf      = { defs={0x08048552} expr=0[1] }
    ?1      = { defs={} expr=v6060[1] }
    pf      = { defs={0x08048552} expr=1[1] }
    ?3      = { defs={} expr=v6062[1] }
    af      = { defs={0x08048552} expr=v6129[1] }
    ?5      = { defs={} expr=v6064[1] }
    zf      = { defs={0x08048552} expr=1[1] }
    sf      = { defs={0x08048552} expr=0[1] }
    tf      = { defs={} expr=v6067[1] }
    if      = { defs={} expr=v6068[1] }
    df      = { defs={} expr=v6069[1] }
    of      = { defs={0x08048552} expr=0[1] }
    iopl0   = { defs={} expr=v6071[1] }
    iopl1   = { defs={} expr=v6072[1] }
    nt      = { defs={} expr=v6073[1] }
    ?15     = { defs={} expr=v6074[1] }
    rf      = { defs={} expr=v6075[1] }
    vm      = { defs={} expr=v6076[1] }
    ac      = { defs={} expr=v6077[1] }
    vif     = { defs={} expr=v6078[1] }
    vip     = { defs={} expr=v6079[1] }
    id      = { defs={} expr=v6080[1] }
    ?22     = { defs={} expr=v6081[1] }
    ?23     = { defs={} expr=v6082[1] }
    ?24     = { defs={} expr=v6083[1] }
    ?25     = { defs={} expr=v6084[1] }
    ?26     = { defs={} expr=v6085[1] }
    ?27     = { defs={} expr=v6086[1] }
    ?28     = { defs={} expr=v6087[1] }
    ?29     = { defs={} expr=v6088[1] }
    ?30     = { defs={} expr=v6089[1] }
    ?31     = { defs={} expr=v6090[1] }
    ip      = { defs={0x0804854f,0x08048552} expr=0x08048554[32] }
memory:
init mem:
null state
null state
0x8048554:lea    esi, [esi + 0x00000000]
registers:
    ax      = { v37448 }
    cx      = { v37449 }
    dx      = { v37450 }
    bx      = { v37451 }
    sp      = { v37452 }
    bp      = { v37453 }
    si      = { v37505 }
    di      = { 0x0 }
    es      = { v37456 }
    cs      = { v37457 }
    ss      = { v37458 }
    ds      = { v37459 }
    fs      = { v37460 }
    gs      = { v37461 }
    cf      = { 0x0 }
    ?1      = { v37463 }
    pf      = { 0x1 }
    ?3      = { v37465 }
    af      = { v37534 }
    ?5      = { v37467 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37470 }
    if      = { v37471 }
    df      = { v37472 }
    of      = { 0x0 }
    iopl0   = { v37474 }
    iopl1   = { v37475 }
    nt      = { v37476 }
    ?15     = { v37477 }
    rf      = { v37478 }
    vm      = { v37479 }
    ac      = { v37480 }
    vif     = { v37481 }
    vip     = { v37482 }
    id      = { v37483 }
    ?22     = { v37484 }
    ?23     = { v37485 }
    ?24     = { v37486 }
    ?25     = { v37487 }
    ?26     = { v37488 }
    ?27     = { v37489 }
    ?28     = { v37490 }
    ?29     = { v37491 }
    ?30     = { v37492 }
    ?31     = { v37493 }
    ip      = { 0x804855a }
memory:
registers:
    ax      = { defs={} expr=v6045[32] }
    cx      = { defs={} expr=v6046[32] }
    dx      = { defs={} expr=v6047[32] }
    bx      = { defs={} expr=v6048[32] }
    sp      = { defs={} expr=v6049[32] }
    bp      = { defs={} expr=v6050[32] }
    si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6047[32] (extract[32] 0[32] 32[32] (umul[40] v6045[32] 4[8]))) }
    di      = { defs={0x08048552} expr=0[32] }
    es      = { defs={} expr=v6053[16] }
    cs      = { defs={} expr=v6054[16] }
    ss      = { defs={} expr=v6055[16] }
    ds      = { defs={} expr=v6056[16] }
    fs      = { defs={} expr=v6057[16] }
    gs      = { defs={} expr=v6058[16] }
    cf      = { defs={0x08048552} expr=0[1] }
    ?1      = { defs={} expr=v6060[1] }
    pf      = { defs={0x08048552} expr=1[1] }
    ?3      = { defs={} expr=v6062[1] }
    af      = { defs={0x08048552} expr=v6129[1] }
    ?5      = { defs={} expr=v6064[1] }
    zf      = { defs={0x08048552} expr=1[1] }
    sf      = { defs={0x08048552} expr=0[1] }
    tf      = { defs={} expr=v6067[1] }
    if      = { defs={} expr=v6068[1] }
    df      = { defs={} expr=v6069[1] }
    of      = { defs={0x08048552} expr=0[1] }
    iopl0   = { defs={} expr=v6071[1] }
    iopl1   = { defs={} expr=v6072[1] }
    nt      = { defs={} expr=v6073[1] }
    ?15     = { defs={} expr=v6074[1] }
    rf      = { defs={} expr=v6075[1] }
    vm      = { defs={} expr=v6076[1] }
    ac      = { defs={} expr=v6077[1] }
    vif     = { defs={} expr=v6078[1] }
    vip     = { defs={} expr=v6079[1] }
    id      = { defs={} expr=v6080[1] }
    ?22     = { defs={} expr=v6081[1] }
    ?23     = { defs={} expr=v6082[1] }
    ?24     = { defs={} expr=v6083[1] }
    ?25     = { defs={} expr=v6084[1] }
    ?26     = { defs={} expr=v6085[1] }
    ?27     = { defs={} expr=v6086[1] }
    ?28     = { defs={} expr=v6087[1] }
    ?29     = { defs={} expr=v6088[1] }
    ?30     = { defs={} expr=v6089[1] }
    ?31     = { defs={} expr=v6090[1] }
    ip      = { defs={0x0804854f,0x08048552,0x08048554} expr=0x0804855a[32] }
memory:
init mem:
null state
null state
0x804855a:lea    edi, [edi + 0x00000000]
registers:
    ax      = { v37448 }
    cx      = { v37449 }
    dx      = { v37450 }
    bx      = { v37451 }
    sp      = { v37452 }
    bp      = { v37453 }
    si      = { v37505 }
    di      = { 0x0 }
    es      = { v37456 }
    cs      = { v37457 }
    ss      = { v37458 }
    ds      = { v37459 }
    fs      = { v37460 }
    gs      = { v37461 }
    cf      = { 0x0 }
    ?1      = { v37463 }
    pf      = { 0x1 }
    ?3      = { v37465 }
    af      = { v37534 }
    ?5      = { v37467 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37470 }
    if      = { v37471 }
    df      = { v37472 }
    of      = { 0x0 }
    iopl0   = { v37474 }
    iopl1   = { v37475 }
    nt      = { v37476 }
    ?15     = { v37477 }
    rf      = { v37478 }
    vm      = { v37479 }
    ac      = { v37480 }
    vif     = { v37481 }
    vip     = { v37482 }
    id      = { v37483 }
    ?22     = { v37484 }
    ?23     = { v37485 }
    ?24     = { v37486 }
    ?25     = { v37487 }
    ?26     = { v37488 }
    ?27     = { v37489 }
    ?28     = { v37490 }
    ?29     = { v37491 }
    ?30     = { v37492 }
    ?31     = { v37493 }
    ip      = { 0x8048560 }
memory:
registers:
    ax      = { defs={} expr=v6045[32] }
    cx      = { defs={} expr=v6046[32] }
    dx      = { defs={} expr=v6047[32] }
    bx      = { defs={} expr=v6048[32] }
    sp      = { defs={} expr=v6049[32] }
    bp      = { defs={} expr=v6050[32] }
    si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6047[32] (extract[32] 0[32] 32[32] (umul[40] v6045[32] 4[8]))) }
    di      = { defs={0x08048552,0x0804855a} expr=0[32] }
    es      = { defs={} expr=v6053[16] }
    cs      = { defs={} expr=v6054[16] }
    ss      = { defs={} expr=v6055[16] }
    ds      = { defs={} expr=v6056[16] }
    fs      = { defs={} expr=v6057[16] }
    gs      = { defs={} expr=v6058[16] }
    cf      = { defs={0x08048552} expr=0[1] }
    ?1      = { defs={} expr=v6060[1] }
    pf      = { defs={0x08048552} expr=1[1] }
    ?3      = { defs={} expr=v6062[1] }
    af      = { defs={0x08048552} expr=v6129[1] }
    ?5      = { defs={} expr=v6064[1] }
    zf      = { defs={0x08048552} expr=1[1] }
    sf      = { defs={0x08048552} expr=0[1] }
    tf      = { defs={} expr=v6067[1] }
    if      = { defs={} expr=v6068[1] }
    df      = { defs={} expr=v6069[1] }
    of      = { defs={0x08048552} expr=0[1] }
    iopl0   = { defs={} expr=v6071[1] }
    iopl1   = { defs={} expr=v6072[1] }
    nt      = { defs={} expr=v6073[1] }
    ?15     = { defs={} expr=v6074[1] }
    rf      = { defs={} expr=v6075[1] }
    vm      = { defs={} expr=v6076[1] }
    ac      = { defs={} expr=v6077[1] }
    vif     = { defs={} expr=v6078[1] }
    vip     = { defs={} expr=v6079[1] }
    id      = { defs={} expr=v6080[1] }
    ?22     = { defs={} expr=v6081[1] }
    ?23     = { defs={} expr=v6082[1] }
    ?24     = { defs={} expr=v6083[1] }
    ?25     = { defs={} expr=v6084[1] }
    ?26     = { defs={} expr=v6085[1] }
    ?27     = { defs={} expr=v6086[1] }
    ?28     = { defs={} expr=v6087[1] }
    ?29     = { defs={} expr=v6088[1] }
    ?30     = { defs={} expr=v6089[1] }
    ?31     = { defs={} expr=v6090[1] }
    ip      = { defs={0x0804854f,0x08048552,0x08048554,0x0804855a} expr=0x08048560[32] }
memory:
init mem:
null state
null state
0x8048560:call   DWORD PTR ds:[esi]
registers:
    ax      = { v37448 }
    cx      = { v37449 }
    dx      = { v37450 }
    bx      = { v37451 }
    sp      = { v37452-0x4 }
    bp      = { v37453 }
    si      = { v37505 }
    di      = { 0x0 }
    es      = { v37456 }
    cs      = { v37457 }
    ss      = { v37458 }
    ds      = { v37459 }
    fs      = { v37460 }
    gs      = { v37461 }
    cf      = { 0x0 }
    ?1      = { v37463 }
    pf      = { 0x1 }
    ?3      = { v37465 }
    af      = { v37534 }
    ?5      = { v37467 }
    zf      = { 0x1 }
    sf      = { 0x0 }
    tf      = { v37470 }
    if      = { v37471 }
    df      = { v37472 }
    of      = { 0x0 }
    iopl0   = { v37474 }
    iopl1   = { v37475 }
    nt      = { v37476 }
    ?15     = { v37477 }
    rf      = { v37478 }
    vm      = { v37479 }
    ac      = { v37480 }
    vif     = { v37481 }
    vip     = { v37482 }
    id      = { v37483 }
    ?22     = { v37484 }
    ?23     = { v37485 }
    ?24     = { v37486 }
    ?25     = { v37487 }
    ?26     = { v37488 }
    ?27     = { v37489 }
    ?28     = { v37490 }
    ?29     = { v37491 }
    ?30     = { v37492 }
    ?31     = { v37493 }
    ip      = { v37562 }
memory:
    address = { v37452-0x4 }
      value = { 0x8048562 }
      flags = { size=4 }
    address = { v37505 }
      value = { v37562 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v6045[32] }
    cx      = { defs={} expr=v6046[32] }
    dx      = { defs={} expr=v6047[32] }
    bx      = { defs={} expr=v6048[32] }
    sp      = { defs={0x08048560} expr=(add[32] v6049[32] -4[32]) }
    bp      = { defs={} expr=v6050[32] }
    si      = { defs={0x0804854f,0x08048554} expr=(add[32] v6047[32] (extract[32] 0[32] 32[32] (umul[40] v6045[32] 4[8]))) }
    di      = { defs={0x08048552,0x0804855a} expr=0[32] }
    es      = { defs={} expr=v6053[16] }
    cs      = { defs={} expr=v6054[16] }
    ss      = { defs={} expr=v6055[16] }
    ds      = { defs={} expr=v6056[16] }
    fs      = { defs={} expr=v6057[16] }
    gs      = { defs={} expr=v6058[16] }
    cf      = { defs={0x08048552} expr=0[1] }
    ?1      = { defs={} expr=v6060[1] }
    pf      = { defs={0x08048552} expr=1[1] }
    ?3      = { defs={} expr=v6062[1] }
    af      = { defs={0x08048552} expr=v6129[1] }
    ?5      = { defs={} expr=v6064[1] }
    zf      = { defs={0x08048552} expr=1[1] }
    sf      = { defs={0x08048552} expr=0[1] }
    tf      = { defs={} expr=v6067[1] }
    if      = { defs={} expr=v6068[1] }
    df      = { defs={} expr=v6069[1] }
    of      = { defs={0x08048552} expr=0[1] }
    iopl0   = { defs={} expr=v6071[1] }
    iopl1   = { defs={} expr=v6072[1] }
    nt      = { defs={} expr=v6073[1] }
    ?15     = { defs={} expr=v6074[1] }
    rf      = { defs={} expr=v6075[1] }
    vm      = { defs={} expr=v6076[1] }
    ac      = { defs={} expr=v6077[1] }
    vif     = { defs={} expr=v6078[1] }
    vip     = { defs={} expr=v6079[1] }
    id      = { defs={} expr=v6080[1] }
    ?22     = { defs={} expr=v6081[1] }
    ?23     = { defs={} expr=v6082[1] }
    ?24     = { defs={} expr=v6083[1] }
    ?25     = { defs={} expr=v6084[1] }
    ?26     = { defs={} expr=v6085[1] }
    ?27     = { defs={} expr=v6086[1] }
    ?28     = { defs={} expr=v6087[1] }
    ?29     = { defs={} expr=v6088[1] }
    ?30     = { defs={} expr=v6089[1] }
    ?31     = { defs={} expr=v6090[1] }
    ip      = { defs={0x08048560} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6159[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6160[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6161[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6162[8]))) }
memory:
    address = { defs={} expr=(add[32] (add[32] v6049[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6049[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6049[32] -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x08048560} expr=(add[32] v6049[32] -4[32]) }
      value = { defs={} expr=98[8] }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] (add[32] v6047[32] (extract[32] 0[32] 32[32] (umul[40] v6045[32] 4[8]))) 3[32]) }
      value = { defs={} expr=v6162[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6047[32] (extract[32] 0[32] 32[32] (umul[40] v6045[32] 4[8]))) 2[32]) }
      value = { defs={} expr=v6161[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6047[32] (extract[32] 0[32] 32[32] (umul[40] v6045[32] 4[8]))) 1[32]) }
      value = { defs={} expr=v6160[8] }
      flags = { rdonly }
    address = { defs={0x0804854f,0x08048554} expr=(add[32] v6047[32] (extract[32] 0[32] 32[32] (umul[40] v6045[32] 4[8]))) }
      value = { defs={} expr=v6159[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
registers:
    ax      = { v37612 }
    cx      = { v37613 }
    dx      = { v37614 }
    bx      = { v37615 }
    sp      = { v37616 }
    bp      = { v37617 }
    si      = { v37618 }
    di      = { v37619+0x1 }
    es      = { v37620 }
    cs      = { v37621 }
    ss      = { v37622 }
    ds      = { v37623 }
    fs      = { v37624 }
    gs      = { v37625 }
    cf      = { v37626 }
    ?1      = { v37627 }
    pf      = { -v37697+0x1 }
    ?3      = { v37629 }
    af      = { v37704 }
    ?5      = { v37631 }
    zf      = { v37702 }
    sf      = { v37700 }
    tf      = { v37634 }
    if      = { v37635 }
    df      = { v37636 }
    of      = { v37710 }
    iopl0   = { v37638 }
    iopl1   = { v37639 }
    nt      = { v37640 }
    ?15     = { v37641 }
    rf      = { v37642 }
    vm      = { v37643 }
    ac      = { v37644 }
    vif     = { v37645 }
    vip     = { v37646 }
    id      = { v37647 }
    ?22     = { v37648 }
    ?23     = { v37649 }
    ?24     = { v37650 }
    ?25     = { v37651 }
    ?26     = { v37652 }
    ?27     = { v37653 }
    ?28     = { v37654 }
    ?29     = { v37655 }
    ?30     = { v37656 }
    ?31     = { v37657 }
    ip      = { 0x8048563 }
memory:
registers:
    ax      = { defs={} expr=v6216[32] }
    cx      = { defs={} expr=v6217[32] }
    dx      = { defs={} expr=v6218[32] }
    bx      = { defs={} expr=v6219[32] }
    sp      = { defs={} expr=v6220[32] }
    bp      = { defs={} expr=v6221[32] }
    si      = { defs={} expr=v6222[32] }
    di      = { defs={0x08048562} expr=(add[32] v6223[32] 1[32]) }
    es      = { defs={} expr=v6224[16] }
    cs      = { defs={} expr=v6225[16] }
    ss      = { defs={} expr=v6226[16] }
    ds      = { defs={} expr=v6227[16] }
    fs      = { defs={} expr=v6228[16] }
    gs      = { defs={} expr=v6229[16] }
    cf      = { defs={} expr=v6230[1] }
    ?1      = { defs={} expr=v6231[1] }
    pf      = { defs={0x08048562} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6223[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6223[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6223[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6223[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6223[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6223[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6223[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6223[32] 1[32]))))))) }
    ?3      = { defs={} expr=v6233[1] }
    af      = { defs={0x08048562} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6223[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6223[32]) 1[33]))))) }
    ?5      = { defs={} expr=v6235[1] }
    zf      = { defs={0x08048562} expr=(zerop[1] (add[32] v6223[32] 1[32])) }
    sf      = { defs={0x08048562} expr=(extract[1] 31[32] 32[32] (add[32] v6223[32] 1[32])) }
    tf      = { defs={} expr=v6238[1] }
    if      = { defs={} expr=v6239[1] }
    df      = { defs={} expr=v6240[1] }
    of      = { defs={0x08048562} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6223[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6223[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6223[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v6223[32]) 1[33])))))) }
    iopl0   = { defs={} expr=v6242[1] }
    iopl1   = { defs={} expr=v6243[1] }
    nt      = { defs={} expr=v6244[1] }
    ?15     = { defs={} expr=v6245[1] }
    rf      = { defs={} expr=v6246[1] }
    vm      = { defs={} expr=v6247[1] }
    ac      = { defs={} expr=v6248[1] }
    vif     = { defs={} expr=v6249[1] }
    vip     = { defs={} expr=v6250[1] }
    id      = { defs={} expr=v6251[1] }
    ?22     = { defs={} expr=v6252[1] }
    ?23     = { defs={} expr=v6253[1] }
    ?24     = { defs={} expr=v6254[1] }
    ?25     = { defs={} expr=v6255[1] }
    ?26     = { defs={} expr=v6256[1] }
    ?27     = { defs={} expr=v6257[1] }
    ?28     = { defs={} expr=v6258[1] }
    ?29     = { defs={} expr=v6259[1] }
    ?30     = { defs={} expr=v6260[1] }
    ?31     = { defs={} expr=v6261[1] }
    ip      = { defs={0x08048562} expr=0x08048563[32] }
memory:
init mem:
null state
null state
0x8048563:sub    esi, 0x04
registers:
    ax      = { v37612 }
    cx      = { v37613 }
    dx      = { v37614 }
    bx      = { v37615 }
    sp      = { v37616 }
    bp      = { v37617 }
    si      = { v37618-0x4 }
    di      = { v37619+0x1 }
    es      = { v37620 }
    cs      = { v37621 }
    ss      = { v37622 }
    ds      = { v37623 }
    fs      = { v37624 }
    gs      = { v37625 }
    cf      = { -v37762+0x1 }
    ?1      = { v37627 }
    pf      = { -v37752+0x1 }
    ?3      = { v37629 }
    af      = { -v37759+0x1 }
    ?5      = { v37631 }
    zf      = { v37757 }
    sf      = { v37755 }
    tf      = { v37634 }
    if      = { v37635 }
    df      = { v37636 }
    of      = { v37769 }
    iopl0   = { v37638 }
    iopl1   = { v37639 }
    nt      = { v37640 }
    ?15     = { v37641 }
    rf      = { v37642 }
    vm      = { v37643 }
    ac      = { v37644 }
    vif     = { v37645 }
    vip     = { v37646 }
    id      = { v37647 }
    ?22     = { v37648 }
    ?23     = { v37649 }
    ?24     = { v37650 }
    ?25     = { v37651 }
    ?26     = { v37652 }
    ?27     = { v37653 }
    ?28     = { v37654 }
    ?29     = { v37655 }
    ?30     = { v37656 }
    ?31     = { v37657 }
    ip      = { 0x8048566 }
memory:
registers:
    ax      = { defs={} expr=v6216[32] }
    cx      = { defs={} expr=v6217[32] }
    dx      = { defs={} expr=v6218[32] }
    bx      = { defs={} expr=v6219[32] }
    sp      = { defs={} expr=v6220[32] }
    bp      = { defs={} expr=v6221[32] }
    si      = { defs={0x08048563} expr=(add[32] v6222[32] -4[32]) }
    di      = { defs={0x08048562} expr=(add[32] v6223[32] 1[32]) }
    es      = { defs={} expr=v6224[16] }
    cs      = { defs={} expr=v6225[16] }
    ss      = { defs={} expr=v6226[16] }
    ds      = { defs={} expr=v6227[16] }
    fs      = { defs={} expr=v6228[16] }
    gs      = { defs={} expr=v6229[16] }
    cf      = { defs={0x08048563} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6222[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6222[32]) 4294967292[33])))))) }
    ?1      = { defs={} expr=v6231[1] }
    pf      = { defs={0x08048563} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6222[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6222[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6222[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6222[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6222[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6222[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6222[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6222[32] -4[32]))))))) }
    ?3      = { defs={} expr=v6233[1] }
    af      = { defs={0x08048563} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6222[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6222[32]) 4294967292[33])))))) }
    ?5      = { defs={} expr=v6235[1] }
    zf      = { defs={0x08048563} expr=(zerop[1] (add[32] v6222[32] -4[32])) }
    sf      = { defs={0x08048563} expr=(extract[1] 31[32] 32[32] (add[32] v6222[32] -4[32])) }
    tf      = { defs={} expr=v6238[1] }
    if      = { defs={} expr=v6239[1] }
    df      = { defs={} expr=v6240[1] }
    of      = { defs={0x08048563} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6222[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6222[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6222[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6222[32]) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v6242[1] }
    iopl1   = { defs={} expr=v6243[1] }
    nt      = { defs={} expr=v6244[1] }
    ?15     = { defs={} expr=v6245[1] }
    rf      = { defs={} expr=v6246[1] }
    vm      = { defs={} expr=v6247[1] }
    ac      = { defs={} expr=v6248[1] }
    vif     = { defs={} expr=v6249[1] }
    vip     = { defs={} expr=v6250[1] }
    id      = { defs={} expr=v6251[1] }
    ?22     = { defs={} expr=v6252[1] }
    ?23     = { defs={} expr=v6253[1] }
    ?24     = { defs={} expr=v6254[1] }
    ?25     = { defs={} expr=v6255[1] }
    ?26     = { defs={} expr=v6256[1] }
    ?27     = { defs={} expr=v6257[1] }
    ?28     = { defs={} expr=v6258[1] }
    ?29     = { defs={} expr=v6259[1] }
    ?30     = { defs={} expr=v6260[1] }
    ?31     = { defs={} expr=v6261[1] }
    ip      = { defs={0x08048562,0x08048563} expr=0x08048566[32] }
memory:
init mem:
null state
null state
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
registers:
    ax      = { v37612 }
    cx      = { v37613 }
    dx      = { v37614 }
    bx      = { v37615 }
    sp      = { v37616 }
    bp      = { v37617 }
    si      = { v37618-0x4 }
    di      = { v37619+0x1 }
    es      = { v37620 }
    cs      = { v37621 }
    ss      = { v37622 }
    ds      = { v37623 }
    fs      = { v37624 }
    gs      = { v37625 }
    cf      = { -v37827+0x1 }
    ?1      = { v37627 }
    pf      = { -v37817+0x1 }
    ?3      = { v37629 }
    af      = { -v37824+0x1 }
    ?5      = { v37631 }
    zf      = { v37822 }
    sf      = { v37820 }
    tf      = { v37634 }
    if      = { v37635 }
    df      = { v37636 }
    of      = { v37834 }
    iopl0   = { v37638 }
    iopl1   = { v37639 }
    nt      = { v37640 }
    ?15     = { v37641 }
    rf      = { v37642 }
    vm      = { v37643 }
    ac      = { v37644 }
    vif     = { v37645 }
    vip     = { v37646 }
    id      = { v37647 }
    ?22     = { v37648 }
    ?23     = { v37649 }
    ?24     = { v37650 }
    ?25     = { v37651 }
    ?26     = { v37652 }
    ?27     = { v37653 }
    ?28     = { v37654 }
    ?29     = { v37655 }
    ?30     = { v37656 }
    ?31     = { v37657 }
    ip      = { 0x8048569 }
memory:
    address = { v37617-0x10 }
      value = { v37782 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v6216[32] }
    cx      = { defs={} expr=v6217[32] }
    dx      = { defs={} expr=v6218[32] }
    bx      = { defs={} expr=v6219[32] }
    sp      = { defs={} expr=v6220[32] }
    bp      = { defs={} expr=v6221[32] }
    si      = { defs={0x08048563} expr=(add[32] v6222[32] -4[32]) }
    di      = { defs={0x08048562} expr=(add[32] v6223[32] 1[32]) }
    es      = { defs={} expr=v6224[16] }
    cs      = { defs={} expr=v6225[16] }
    ss      = { defs={} expr=v6226[16] }
    ds      = { defs={} expr=v6227[16] }
    fs      = { defs={} expr=v6228[16] }
    gs      = { defs={} expr=v6229[16] }
    cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) 1[33]))))))) }
    ?1      = { defs={} expr=v6231[1] }
    pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))))))) }
    ?3      = { defs={} expr=v6233[1] }
    af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) 1[33]))))))) }
    ?5      = { defs={} expr=v6235[1] }
    zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32]))) }
    sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32]))) }
    tf      = { defs={} expr=v6238[1] }
    if      = { defs={} expr=v6239[1] }
    df      = { defs={} expr=v6240[1] }
    of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) 1[33]))))))) }
    iopl0   = { defs={} expr=v6242[1] }
    iopl1   = { defs={} expr=v6243[1] }
    nt      = { defs={} expr=v6244[1] }
    ?15     = { defs={} expr=v6245[1] }
    rf      = { defs={} expr=v6246[1] }
    vm      = { defs={} expr=v6247[1] }
    ac      = { defs={} expr=v6248[1] }
    vif     = { defs={} expr=v6249[1] }
    vip     = { defs={} expr=v6250[1] }
    id      = { defs={} expr=v6251[1] }
    ?22     = { defs={} expr=v6252[1] }
    ?23     = { defs={} expr=v6253[1] }
    ?24     = { defs={} expr=v6254[1] }
    ?25     = { defs={} expr=v6255[1] }
    ?26     = { defs={} expr=v6256[1] }
    ?27     = { defs={} expr=v6257[1] }
    ?28     = { defs={} expr=v6258[1] }
    ?29     = { defs={} expr=v6259[1] }
    ?30     = { defs={} expr=v6260[1] }
    ?31     = { defs={} expr=v6261[1] }
    ip      = { defs={0x08048562,0x08048563,0x08048566} expr=0x08048569[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v6221[32] -16[32]) 3[32]) }
      value = { defs={} expr=v6348[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6221[32] -16[32]) 2[32]) }
      value = { defs={} expr=v6347[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6221[32] -16[32]) 1[32]) }
      value = { defs={} expr=v6346[8] }
      flags = { rdonly }
    address = { defs={0x08048566} expr=(add[32] v6221[32] -16[32]) }
      value = { defs={} expr=v6345[8] }
      flags = { rdonly }
null state
null state
0x8048569:jne    0x08048560<<Insn>>
registers:
    ax      = { v37612 }
    cx      = { v37613 }
    dx      = { v37614 }
    bx      = { v37615 }
    sp      = { v37616 }
    bp      = { v37617 }
    si      = { v37618-0x4 }
    di      = { v37619+0x1 }
    es      = { v37620 }
    cs      = { v37621 }
    ss      = { v37622 }
    ds      = { v37623 }
    fs      = { v37624 }
    gs      = { v37625 }
    cf      = { -v37827+0x1 }
    ?1      = { v37627 }
    pf      = { -v37817+0x1 }
    ?3      = { v37629 }
    af      = { -v37824+0x1 }
    ?5      = { v37631 }
    zf      = { v37822 }
    sf      = { v37820 }
    tf      = { v37634 }
    if      = { v37635 }
    df      = { v37636 }
    of      = { v37834 }
    iopl0   = { v37638 }
    iopl1   = { v37639 }
    nt      = { v37640 }
    ?15     = { v37641 }
    rf      = { v37642 }
    vm      = { v37643 }
    ac      = { v37644 }
    vif     = { v37645 }
    vip     = { v37646 }
    id      = { v37647 }
    ?22     = { v37648 }
    ?23     = { v37649 }
    ?24     = { v37650 }
    ?25     = { v37651 }
    ?26     = { v37652 }
    ?27     = { v37653 }
    ?28     = { v37654 }
    ?29     = { v37655 }
    ?30     = { v37656 }
    ?31     = { v37657 }
    ip      = { v37844 }
memory:
    address = { v37617-0x10 }
      value = { v37782 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v6216[32] }
    cx      = { defs={} expr=v6217[32] }
    dx      = { defs={} expr=v6218[32] }
    bx      = { defs={} expr=v6219[32] }
    sp      = { defs={} expr=v6220[32] }
    bp      = { defs={} expr=v6221[32] }
    si      = { defs={0x08048563} expr=(add[32] v6222[32] -4[32]) }
    di      = { defs={0x08048562} expr=(add[32] v6223[32] 1[32]) }
    es      = { defs={} expr=v6224[16] }
    cs      = { defs={} expr=v6225[16] }
    ss      = { defs={} expr=v6226[16] }
    ds      = { defs={} expr=v6227[16] }
    fs      = { defs={} expr=v6228[16] }
    gs      = { defs={} expr=v6229[16] }
    cf      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) 1[33]))))))) }
    ?1      = { defs={} expr=v6231[1] }
    pf      = { defs={0x08048562,0x08048566} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))))))) }
    ?3      = { defs={} expr=v6233[1] }
    af      = { defs={0x08048562,0x08048566} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) 1[33]))))))) }
    ?5      = { defs={} expr=v6235[1] }
    zf      = { defs={0x08048562,0x08048566} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32]))) }
    sf      = { defs={0x08048562,0x08048566} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32]))) }
    tf      = { defs={} expr=v6238[1] }
    if      = { defs={} expr=v6239[1] }
    df      = { defs={} expr=v6240[1] }
    of      = { defs={0x08048562,0x08048566} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8])))) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v6223[32] 1[32]))) 1[33]))))))) }
    iopl0   = { defs={} expr=v6242[1] }
    iopl1   = { defs={} expr=v6243[1] }
    nt      = { defs={} expr=v6244[1] }
    ?15     = { defs={} expr=v6245[1] }
    rf      = { defs={} expr=v6246[1] }
    vm      = { defs={} expr=v6247[1] }
    ac      = { defs={} expr=v6248[1] }
    vif     = { defs={} expr=v6249[1] }
    vip     = { defs={} expr=v6250[1] }
    id      = { defs={} expr=v6251[1] }
    ?22     = { defs={} expr=v6252[1] }
    ?23     = { defs={} expr=v6253[1] }
    ?24     = { defs={} expr=v6254[1] }
    ?25     = { defs={} expr=v6255[1] }
    ?26     = { defs={} expr=v6256[1] }
    ?27     = { defs={} expr=v6257[1] }
    ?28     = { defs={} expr=v6258[1] }
    ?29     = { defs={} expr=v6259[1] }
    ?30     = { defs={} expr=v6260[1] }
    ?31     = { defs={} expr=v6261[1] }
    ip      = { defs={0x08048562,0x08048563,0x08048566,0x08048569} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6345[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6346[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6347[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6348[8]))) (add[32] (invert[32] (add[32] v6223[32] 1[32])) 1[32])))) 0x08048560[32] 0x0804856b[32]) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v6221[32] -16[32]) 3[32]) }
      value = { defs={} expr=v6348[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6221[32] -16[32]) 2[32]) }
      value = { defs={} expr=v6347[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6221[32] -16[32]) 1[32]) }
      value = { defs={} expr=v6346[8] }
      flags = { rdonly }
    address = { defs={0x08048566} expr=(add[32] v6221[32] -16[32]) }
      value = { defs={} expr=v6345[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
registers:
    ax      = { v37894 }
    cx      = { v37895 }
    dx      = { v37896 }
    bx      = { v37897 }
    sp      = { v37898+0xc }
    bp      = { v37899 }
    si      = { v37900 }
    di      = { v37901 }
    es      = { v37902 }
    cs      = { v37903 }
    ss      = { v37904 }
    ds      = { v37905 }
    fs      = { v37906 }
    gs      = { v37907 }
    cf      = { v37988 }
    ?1      = { v37909 }
    pf      = { -v37979+0x1 }
    ?3      = { v37911 }
    af      = { v37986 }
    ?5      = { v37913 }
    zf      = { v37984 }
    sf      = { v37982 }
    tf      = { v37916 }
    if      = { v37917 }
    df      = { v37918 }
    of      = { v37994 }
    iopl0   = { v37920 }
    iopl1   = { v37921 }
    nt      = { v37922 }
    ?15     = { v37923 }
    rf      = { v37924 }
    vm      = { v37925 }
    ac      = { v37926 }
    vif     = { v37927 }
    vip     = { v37928 }
    id      = { v37929 }
    ?22     = { v37930 }
    ?23     = { v37931 }
    ?24     = { v37932 }
    ?25     = { v37933 }
    ?26     = { v37934 }
    ?27     = { v37935 }
    ?28     = { v37936 }
    ?29     = { v37937 }
    ?30     = { v37938 }
    ?31     = { v37939 }
    ip      = { 0x8048573 }
memory:
registers:
    ax      = { defs={} expr=v6440[32] }
    cx      = { defs={} expr=v6441[32] }
    dx      = { defs={} expr=v6442[32] }
    bx      = { defs={} expr=v6443[32] }
    sp      = { defs={0x08048570} expr=(add[32] v6444[32] 12[32]) }
    bp      = { defs={} expr=v6445[32] }
    si      = { defs={} expr=v6446[32] }
    di      = { defs={} expr=v6447[32] }
    es      = { defs={} expr=v6448[16] }
    cs      = { defs={} expr=v6449[16] }
    ss      = { defs={} expr=v6450[16] }
    ds      = { defs={} expr=v6451[16] }
    fs      = { defs={} expr=v6452[16] }
    gs      = { defs={} expr=v6453[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6455[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6457[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6459[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6444[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6444[32] 12[32])) }
    tf      = { defs={} expr=v6462[1] }
    if      = { defs={} expr=v6463[1] }
    df      = { defs={} expr=v6464[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6466[1] }
    iopl1   = { defs={} expr=v6467[1] }
    nt      = { defs={} expr=v6468[1] }
    ?15     = { defs={} expr=v6469[1] }
    rf      = { defs={} expr=v6470[1] }
    vm      = { defs={} expr=v6471[1] }
    ac      = { defs={} expr=v6472[1] }
    vif     = { defs={} expr=v6473[1] }
    vip     = { defs={} expr=v6474[1] }
    id      = { defs={} expr=v6475[1] }
    ?22     = { defs={} expr=v6476[1] }
    ?23     = { defs={} expr=v6477[1] }
    ?24     = { defs={} expr=v6478[1] }
    ?25     = { defs={} expr=v6479[1] }
    ?26     = { defs={} expr=v6480[1] }
    ?27     = { defs={} expr=v6481[1] }
    ?28     = { defs={} expr=v6482[1] }
    ?29     = { defs={} expr=v6483[1] }
    ?30     = { defs={} expr=v6484[1] }
    ?31     = { defs={} expr=v6485[1] }
    ip      = { defs={0x08048570} expr=0x08048573[32] }
memory:
init mem:
null state
null state
0x8048573:pop    ebx
registers:
    ax      = { v37894 }
    cx      = { v37895 }
    dx      = { v37896 }
    bx      = { v38004 }
    sp      = { v37898+0x10 }
    bp      = { v37899 }
    si      = { v37900 }
    di      = { v37901 }
    es      = { v37902 }
    cs      = { v37903 }
    ss      = { v37904 }
    ds      = { v37905 }
    fs      = { v37906 }
    gs      = { v37907 }
    cf      = { v37988 }
    ?1      = { v37909 }
    pf      = { -v37979+0x1 }
    ?3      = { v37911 }
    af      = { v37986 }
    ?5      = { v37913 }
    zf      = { v37984 }
    sf      = { v37982 }
    tf      = { v37916 }
    if      = { v37917 }
    df      = { v37918 }
    of      = { v37994 }
    iopl0   = { v37920 }
    iopl1   = { v37921 }
    nt      = { v37922 }
    ?15     = { v37923 }
    rf      = { v37924 }
    vm      = { v37925 }
    ac      = { v37926 }
    vif     = { v37927 }
    vip     = { v37928 }
    id      = { v37929 }
    ?22     = { v37930 }
    ?23     = { v37931 }
    ?24     = { v37932 }
    ?25     = { v37933 }
    ?26     = { v37934 }
    ?27     = { v37935 }
    ?28     = { v37936 }
    ?29     = { v37937 }
    ?30     = { v37938 }
    ?31     = { v37939 }
    ip      = { 0x8048574 }
memory:
    address = { v37898+0xc }
      value = { v38004 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v6440[32] }
    cx      = { defs={} expr=v6441[32] }
    dx      = { defs={} expr=v6442[32] }
    bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6530[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6531[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6532[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6533[8]))) }
    sp      = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v6444[32] 12[32]) 4[32]) }
    bp      = { defs={} expr=v6445[32] }
    si      = { defs={} expr=v6446[32] }
    di      = { defs={} expr=v6447[32] }
    es      = { defs={} expr=v6448[16] }
    cs      = { defs={} expr=v6449[16] }
    ss      = { defs={} expr=v6450[16] }
    ds      = { defs={} expr=v6451[16] }
    fs      = { defs={} expr=v6452[16] }
    gs      = { defs={} expr=v6453[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6455[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6457[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6459[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6444[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6444[32] 12[32])) }
    tf      = { defs={} expr=v6462[1] }
    if      = { defs={} expr=v6463[1] }
    df      = { defs={} expr=v6464[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6466[1] }
    iopl1   = { defs={} expr=v6467[1] }
    nt      = { defs={} expr=v6468[1] }
    ?15     = { defs={} expr=v6469[1] }
    rf      = { defs={} expr=v6470[1] }
    vm      = { defs={} expr=v6471[1] }
    ac      = { defs={} expr=v6472[1] }
    vif     = { defs={} expr=v6473[1] }
    vip     = { defs={} expr=v6474[1] }
    id      = { defs={} expr=v6475[1] }
    ?22     = { defs={} expr=v6476[1] }
    ?23     = { defs={} expr=v6477[1] }
    ?24     = { defs={} expr=v6478[1] }
    ?25     = { defs={} expr=v6479[1] }
    ?26     = { defs={} expr=v6480[1] }
    ?27     = { defs={} expr=v6481[1] }
    ?28     = { defs={} expr=v6482[1] }
    ?29     = { defs={} expr=v6483[1] }
    ?30     = { defs={} expr=v6484[1] }
    ?31     = { defs={} expr=v6485[1] }
    ip      = { defs={0x08048570,0x08048573} expr=0x08048574[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 3[32]) }
      value = { defs={} expr=v6533[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 2[32]) }
      value = { defs={} expr=v6532[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 1[32]) }
      value = { defs={} expr=v6531[8] }
      flags = { rdonly }
    address = { defs={0x08048570} expr=(add[32] v6444[32] 12[32]) }
      value = { defs={} expr=v6530[8] }
      flags = { rdonly }
null state
null state
0x8048574:pop    esi
registers:
    ax      = { v37894 }
    cx      = { v37895 }
    dx      = { v37896 }
    bx      = { v38004 }
    sp      = { v37898+0x14 }
    bp      = { v37899 }
    si      = { v38014 }
    di      = { v37901 }
    es      = { v37902 }
    cs      = { v37903 }
    ss      = { v37904 }
    ds      = { v37905 }
    fs      = { v37906 }
    gs      = { v37907 }
    cf      = { v37988 }
    ?1      = { v37909 }
    pf      = { -v37979+0x1 }
    ?3      = { v37911 }
    af      = { v37986 }
    ?5      = { v37913 }
    zf      = { v37984 }
    sf      = { v37982 }
    tf      = { v37916 }
    if      = { v37917 }
    df      = { v37918 }
    of      = { v37994 }
    iopl0   = { v37920 }
    iopl1   = { v37921 }
    nt      = { v37922 }
    ?15     = { v37923 }
    rf      = { v37924 }
    vm      = { v37925 }
    ac      = { v37926 }
    vif     = { v37927 }
    vip     = { v37928 }
    id      = { v37929 }
    ?22     = { v37930 }
    ?23     = { v37931 }
    ?24     = { v37932 }
    ?25     = { v37933 }
    ?26     = { v37934 }
    ?27     = { v37935 }
    ?28     = { v37936 }
    ?29     = { v37937 }
    ?30     = { v37938 }
    ?31     = { v37939 }
    ip      = { 0x8048575 }
memory:
    address = { v37898+0xc }
      value = { v38004 }
      flags = { size=4; read-only }
    address = { v37898+0x10 }
      value = { v38014 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v6440[32] }
    cx      = { defs={} expr=v6441[32] }
    dx      = { defs={} expr=v6442[32] }
    bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6530[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6531[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6532[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6533[8]))) }
    sp      = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) }
    bp      = { defs={} expr=v6445[32] }
    si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6549[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6550[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6551[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6552[8]))) }
    di      = { defs={} expr=v6447[32] }
    es      = { defs={} expr=v6448[16] }
    cs      = { defs={} expr=v6449[16] }
    ss      = { defs={} expr=v6450[16] }
    ds      = { defs={} expr=v6451[16] }
    fs      = { defs={} expr=v6452[16] }
    gs      = { defs={} expr=v6453[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6455[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6457[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6459[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6444[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6444[32] 12[32])) }
    tf      = { defs={} expr=v6462[1] }
    if      = { defs={} expr=v6463[1] }
    df      = { defs={} expr=v6464[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6466[1] }
    iopl1   = { defs={} expr=v6467[1] }
    nt      = { defs={} expr=v6468[1] }
    ?15     = { defs={} expr=v6469[1] }
    rf      = { defs={} expr=v6470[1] }
    vm      = { defs={} expr=v6471[1] }
    ac      = { defs={} expr=v6472[1] }
    vif     = { defs={} expr=v6473[1] }
    vip     = { defs={} expr=v6474[1] }
    id      = { defs={} expr=v6475[1] }
    ?22     = { defs={} expr=v6476[1] }
    ?23     = { defs={} expr=v6477[1] }
    ?24     = { defs={} expr=v6478[1] }
    ?25     = { defs={} expr=v6479[1] }
    ?26     = { defs={} expr=v6480[1] }
    ?27     = { defs={} expr=v6481[1] }
    ?28     = { defs={} expr=v6482[1] }
    ?29     = { defs={} expr=v6483[1] }
    ?30     = { defs={} expr=v6484[1] }
    ?31     = { defs={} expr=v6485[1] }
    ip      = { defs={0x08048570,0x08048573,0x08048574} expr=0x08048575[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v6552[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v6551[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v6550[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v6444[32] 12[32]) 4[32]) }
      value = { defs={} expr=v6549[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 3[32]) }
      value = { defs={} expr=v6533[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 2[32]) }
      value = { defs={} expr=v6532[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 1[32]) }
      value = { defs={} expr=v6531[8] }
      flags = { rdonly }
    address = { defs={0x08048570} expr=(add[32] v6444[32] 12[32]) }
      value = { defs={} expr=v6530[8] }
      flags = { rdonly }
null state
null state
0x8048575:pop    edi
registers:
    ax      = { v37894 }
    cx      = { v37895 }
    dx      = { v37896 }
    bx      = { v38004 }
    sp      = { v37898+0x18 }
    bp      = { v37899 }
    si      = { v38014 }
    di      = { v38024 }
    es      = { v37902 }
    cs      = { v37903 }
    ss      = { v37904 }
    ds      = { v37905 }
    fs      = { v37906 }
    gs      = { v37907 }
    cf      = { v37988 }
    ?1      = { v37909 }
    pf      = { -v37979+0x1 }
    ?3      = { v37911 }
    af      = { v37986 }
    ?5      = { v37913 }
    zf      = { v37984 }
    sf      = { v37982 }
    tf      = { v37916 }
    if      = { v37917 }
    df      = { v37918 }
    of      = { v37994 }
    iopl0   = { v37920 }
    iopl1   = { v37921 }
    nt      = { v37922 }
    ?15     = { v37923 }
    rf      = { v37924 }
    vm      = { v37925 }
    ac      = { v37926 }
    vif     = { v37927 }
    vip     = { v37928 }
    id      = { v37929 }
    ?22     = { v37930 }
    ?23     = { v37931 }
    ?24     = { v37932 }
    ?25     = { v37933 }
    ?26     = { v37934 }
    ?27     = { v37935 }
    ?28     = { v37936 }
    ?29     = { v37937 }
    ?30     = { v37938 }
    ?31     = { v37939 }
    ip      = { 0x8048576 }
memory:
    address = { v37898+0xc }
      value = { v38004 }
      flags = { size=4; read-only }
    address = { v37898+0x10 }
      value = { v38014 }
      flags = { size=4; read-only }
    address = { v37898+0x14 }
      value = { v38024 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v6440[32] }
    cx      = { defs={} expr=v6441[32] }
    dx      = { defs={} expr=v6442[32] }
    bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6530[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6531[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6532[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6533[8]))) }
    sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={} expr=v6445[32] }
    si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6549[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6550[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6551[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6552[8]))) }
    di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6568[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6569[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6570[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6571[8]))) }
    es      = { defs={} expr=v6448[16] }
    cs      = { defs={} expr=v6449[16] }
    ss      = { defs={} expr=v6450[16] }
    ds      = { defs={} expr=v6451[16] }
    fs      = { defs={} expr=v6452[16] }
    gs      = { defs={} expr=v6453[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6455[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6457[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6459[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6444[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6444[32] 12[32])) }
    tf      = { defs={} expr=v6462[1] }
    if      = { defs={} expr=v6463[1] }
    df      = { defs={} expr=v6464[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6466[1] }
    iopl1   = { defs={} expr=v6467[1] }
    nt      = { defs={} expr=v6468[1] }
    ?15     = { defs={} expr=v6469[1] }
    rf      = { defs={} expr=v6470[1] }
    vm      = { defs={} expr=v6471[1] }
    ac      = { defs={} expr=v6472[1] }
    vif     = { defs={} expr=v6473[1] }
    vip     = { defs={} expr=v6474[1] }
    id      = { defs={} expr=v6475[1] }
    ?22     = { defs={} expr=v6476[1] }
    ?23     = { defs={} expr=v6477[1] }
    ?24     = { defs={} expr=v6478[1] }
    ?25     = { defs={} expr=v6479[1] }
    ?26     = { defs={} expr=v6480[1] }
    ?27     = { defs={} expr=v6481[1] }
    ?28     = { defs={} expr=v6482[1] }
    ?29     = { defs={} expr=v6483[1] }
    ?30     = { defs={} expr=v6484[1] }
    ?31     = { defs={} expr=v6485[1] }
    ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=0x08048576[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v6571[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v6570[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v6569[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v6568[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v6552[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v6551[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v6550[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v6444[32] 12[32]) 4[32]) }
      value = { defs={} expr=v6549[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 3[32]) }
      value = { defs={} expr=v6533[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 2[32]) }
      value = { defs={} expr=v6532[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 1[32]) }
      value = { defs={} expr=v6531[8] }
      flags = { rdonly }
    address = { defs={0x08048570} expr=(add[32] v6444[32] 12[32]) }
      value = { defs={} expr=v6530[8] }
      flags = { rdonly }
null state
null state
0x8048576:pop    ebp
registers:
    ax      = { v37894 }
    cx      = { v37895 }
    dx      = { v37896 }
    bx      = { v38004 }
    sp      = { v37898+0x1c }
    bp      = { v38034 }
    si      = { v38014 }
    di      = { v38024 }
    es      = { v37902 }
    cs      = { v37903 }
    ss      = { v37904 }
    ds      = { v37905 }
    fs      = { v37906 }
    gs      = { v37907 }
    cf      = { v37988 }
    ?1      = { v37909 }
    pf      = { -v37979+0x1 }
    ?3      = { v37911 }
    af      = { v37986 }
    ?5      = { v37913 }
    zf      = { v37984 }
    sf      = { v37982 }
    tf      = { v37916 }
    if      = { v37917 }
    df      = { v37918 }
    of      = { v37994 }
    iopl0   = { v37920 }
    iopl1   = { v37921 }
    nt      = { v37922 }
    ?15     = { v37923 }
    rf      = { v37924 }
    vm      = { v37925 }
    ac      = { v37926 }
    vif     = { v37927 }
    vip     = { v37928 }
    id      = { v37929 }
    ?22     = { v37930 }
    ?23     = { v37931 }
    ?24     = { v37932 }
    ?25     = { v37933 }
    ?26     = { v37934 }
    ?27     = { v37935 }
    ?28     = { v37936 }
    ?29     = { v37937 }
    ?30     = { v37938 }
    ?31     = { v37939 }
    ip      = { 0x8048577 }
memory:
    address = { v37898+0xc }
      value = { v38004 }
      flags = { size=4; read-only }
    address = { v37898+0x10 }
      value = { v38014 }
      flags = { size=4; read-only }
    address = { v37898+0x14 }
      value = { v38024 }
      flags = { size=4; read-only }
    address = { v37898+0x18 }
      value = { v38034 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v6440[32] }
    cx      = { defs={} expr=v6441[32] }
    dx      = { defs={} expr=v6442[32] }
    bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6530[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6531[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6532[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6533[8]))) }
    sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6587[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6588[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6589[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6590[8]))) }
    si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6549[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6550[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6551[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6552[8]))) }
    di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6568[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6569[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6570[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6571[8]))) }
    es      = { defs={} expr=v6448[16] }
    cs      = { defs={} expr=v6449[16] }
    ss      = { defs={} expr=v6450[16] }
    ds      = { defs={} expr=v6451[16] }
    fs      = { defs={} expr=v6452[16] }
    gs      = { defs={} expr=v6453[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6455[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6457[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6459[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6444[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6444[32] 12[32])) }
    tf      = { defs={} expr=v6462[1] }
    if      = { defs={} expr=v6463[1] }
    df      = { defs={} expr=v6464[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6466[1] }
    iopl1   = { defs={} expr=v6467[1] }
    nt      = { defs={} expr=v6468[1] }
    ?15     = { defs={} expr=v6469[1] }
    rf      = { defs={} expr=v6470[1] }
    vm      = { defs={} expr=v6471[1] }
    ac      = { defs={} expr=v6472[1] }
    vif     = { defs={} expr=v6473[1] }
    vip     = { defs={} expr=v6474[1] }
    id      = { defs={} expr=v6475[1] }
    ?22     = { defs={} expr=v6476[1] }
    ?23     = { defs={} expr=v6477[1] }
    ?24     = { defs={} expr=v6478[1] }
    ?25     = { defs={} expr=v6479[1] }
    ?26     = { defs={} expr=v6480[1] }
    ?27     = { defs={} expr=v6481[1] }
    ?28     = { defs={} expr=v6482[1] }
    ?29     = { defs={} expr=v6483[1] }
    ?30     = { defs={} expr=v6484[1] }
    ?31     = { defs={} expr=v6485[1] }
    ip      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=0x08048577[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v6590[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v6589[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v6588[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v6587[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v6571[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v6570[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v6569[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v6568[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v6552[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v6551[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v6550[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v6444[32] 12[32]) 4[32]) }
      value = { defs={} expr=v6549[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 3[32]) }
      value = { defs={} expr=v6533[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 2[32]) }
      value = { defs={} expr=v6532[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 1[32]) }
      value = { defs={} expr=v6531[8] }
      flags = { rdonly }
    address = { defs={0x08048570} expr=(add[32] v6444[32] 12[32]) }
      value = { defs={} expr=v6530[8] }
      flags = { rdonly }
null state
null state
0x8048577:ret    
registers:
    ax      = { v37894 }
    cx      = { v37895 }
    dx      = { v37896 }
    bx      = { v38004 }
    sp      = { v37898+0x20 }
    bp      = { v38034 }
    si      = { v38014 }
    di      = { v38024 }
    es      = { v37902 }
    cs      = { v37903 }
    ss      = { v37904 }
    ds      = { v37905 }
    fs      = { v37906 }
    gs      = { v37907 }
    cf      = { v37988 }
    ?1      = { v37909 }
    pf      = { -v37979+0x1 }
    ?3      = { v37911 }
    af      = { v37986 }
    ?5      = { v37913 }
    zf      = { v37984 }
    sf      = { v37982 }
    tf      = { v37916 }
    if      = { v37917 }
    df      = { v37918 }
    of      = { v37994 }
    iopl0   = { v37920 }
    iopl1   = { v37921 }
    nt      = { v37922 }
    ?15     = { v37923 }
    rf      = { v37924 }
    vm      = { v37925 }
    ac      = { v37926 }
    vif     = { v37927 }
    vip     = { v37928 }
    id      = { v37929 }
    ?22     = { v37930 }
    ?23     = { v37931 }
    ?24     = { v37932 }
    ?25     = { v37933 }
    ?26     = { v37934 }
    ?27     = { v37935 }
    ?28     = { v37936 }
    ?29     = { v37937 }
    ?30     = { v37938 }
    ?31     = { v37939 }
    ip      = { v38046 }
memory:
    address = { v37898+0xc }
      value = { v38004 }
      flags = { size=4; read-only }
    address = { v37898+0x10 }
      value = { v38014 }
      flags = { size=4; read-only }
    address = { v37898+0x14 }
      value = { v38024 }
      flags = { size=4; read-only }
    address = { v37898+0x18 }
      value = { v38034 }
      flags = { size=4; read-only }
    address = { v37898+0x1c }
      value = { v38046 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v6440[32] }
    cx      = { defs={} expr=v6441[32] }
    dx      = { defs={} expr=v6442[32] }
    bx      = { defs={0x08048573} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6530[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6531[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6532[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6533[8]))) }
    sp      = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576,0x08048577} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x08048576} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6587[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6588[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6589[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6590[8]))) }
    si      = { defs={0x08048574} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6549[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6550[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6551[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6552[8]))) }
    di      = { defs={0x08048575} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6568[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6569[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6570[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6571[8]))) }
    es      = { defs={} expr=v6448[16] }
    cs      = { defs={} expr=v6449[16] }
    ss      = { defs={} expr=v6450[16] }
    ds      = { defs={} expr=v6451[16] }
    fs      = { defs={} expr=v6452[16] }
    gs      = { defs={} expr=v6453[16] }
    cf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?1      = { defs={} expr=v6455[1] }
    pf      = { defs={0x08048570} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6444[32] 12[32]))))))) }
    ?3      = { defs={} expr=v6457[1] }
    af      = { defs={0x08048570} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) }
    ?5      = { defs={} expr=v6459[1] }
    zf      = { defs={0x08048570} expr=(zerop[1] (add[32] v6444[32] 12[32])) }
    sf      = { defs={0x08048570} expr=(extract[1] 31[32] 32[32] (add[32] v6444[32] 12[32])) }
    tf      = { defs={} expr=v6462[1] }
    if      = { defs={} expr=v6463[1] }
    df      = { defs={} expr=v6464[1] }
    of      = { defs={0x08048570} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6444[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v6444[32]) 12[33])))))) }
    iopl0   = { defs={} expr=v6466[1] }
    iopl1   = { defs={} expr=v6467[1] }
    nt      = { defs={} expr=v6468[1] }
    ?15     = { defs={} expr=v6469[1] }
    rf      = { defs={} expr=v6470[1] }
    vm      = { defs={} expr=v6471[1] }
    ac      = { defs={} expr=v6472[1] }
    vif     = { defs={} expr=v6473[1] }
    vip     = { defs={} expr=v6474[1] }
    id      = { defs={} expr=v6475[1] }
    ?22     = { defs={} expr=v6476[1] }
    ?23     = { defs={} expr=v6477[1] }
    ?24     = { defs={} expr=v6478[1] }
    ?25     = { defs={} expr=v6479[1] }
    ?26     = { defs={} expr=v6480[1] }
    ?27     = { defs={} expr=v6481[1] }
    ?28     = { defs={} expr=v6482[1] }
    ?29     = { defs={} expr=v6483[1] }
    ?30     = { defs={} expr=v6484[1] }
    ?31     = { defs={} expr=v6485[1] }
    ip      = { defs={0x08048577} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6608[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6609[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6610[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6611[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v6611[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v6610[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v6609[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574,0x08048575,0x08048576} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v6608[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v6590[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v6589[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v6588[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574,0x08048575} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v6587[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v6571[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v6570[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v6569[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573,0x08048574} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v6568[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v6552[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v6551[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6444[32] 12[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v6550[8] }
      flags = { rdonly }
    address = { defs={0x08048570,0x08048573} expr=(add[32] (add[32] v6444[32] 12[32]) 4[32]) }
      value = { defs={} expr=v6549[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 3[32]) }
      value = { defs={} expr=v6533[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 2[32]) }
      value = { defs={} expr=v6532[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v6444[32] 12[32]) 1[32]) }
      value = { defs={} expr=v6531[8] }
      flags = { rdonly }
    address = { defs={0x08048570} expr=(add[32] v6444[32] 12[32]) }
      value = { defs={} expr=v6530[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048580:push   ebp
registers:
    ax      = { v38097 }
    cx      = { v38098 }
    dx      = { v38099 }
    bx      = { v38100 }
    sp      = { v38101-0x4 }
    bp      = { v38102 }
    si      = { v38103 }
    di      = { v38104 }
    es      = { v38105 }
    cs      = { v38106 }
    ss      = { v38107 }
    ds      = { v38108 }
    fs      = { v38109 }
    gs      = { v38110 }
    cf      = { v38111 }
    ?1      = { v38112 }
    pf      = { v38113 }
    ?3      = { v38114 }
    af      = { v38115 }
    ?5      = { v38116 }
    zf      = { v38117 }
    sf      = { v38118 }
    tf      = { v38119 }
    if      = { v38120 }
    df      = { v38121 }
    of      = { v38122 }
    iopl0   = { v38123 }
    iopl1   = { v38124 }
    nt      = { v38125 }
    ?15     = { v38126 }
    rf      = { v38127 }
    vm      = { v38128 }
    ac      = { v38129 }
    vif     = { v38130 }
    vip     = { v38131 }
    id      = { v38132 }
    ?22     = { v38133 }
    ?23     = { v38134 }
    ?24     = { v38135 }
    ?25     = { v38136 }
    ?26     = { v38137 }
    ?27     = { v38138 }
    ?28     = { v38139 }
    ?29     = { v38140 }
    ?30     = { v38141 }
    ?31     = { v38142 }
    ip      = { 0x8048581 }
memory:
    address = { v38101-0x4 }
      value = { v38102 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6666[32] }
    cx      = { defs={} expr=v6667[32] }
    dx      = { defs={} expr=v6668[32] }
    bx      = { defs={} expr=v6669[32] }
    sp      = { defs={0x08048580} expr=(add[32] v6670[32] -4[32]) }
    bp      = { defs={} expr=v6671[32] }
    si      = { defs={} expr=v6672[32] }
    di      = { defs={} expr=v6673[32] }
    es      = { defs={} expr=v6674[16] }
    cs      = { defs={} expr=v6675[16] }
    ss      = { defs={} expr=v6676[16] }
    ds      = { defs={} expr=v6677[16] }
    fs      = { defs={} expr=v6678[16] }
    gs      = { defs={} expr=v6679[16] }
    cf      = { defs={} expr=v6680[1] }
    ?1      = { defs={} expr=v6681[1] }
    pf      = { defs={} expr=v6682[1] }
    ?3      = { defs={} expr=v6683[1] }
    af      = { defs={} expr=v6684[1] }
    ?5      = { defs={} expr=v6685[1] }
    zf      = { defs={} expr=v6686[1] }
    sf      = { defs={} expr=v6687[1] }
    tf      = { defs={} expr=v6688[1] }
    if      = { defs={} expr=v6689[1] }
    df      = { defs={} expr=v6690[1] }
    of      = { defs={} expr=v6691[1] }
    iopl0   = { defs={} expr=v6692[1] }
    iopl1   = { defs={} expr=v6693[1] }
    nt      = { defs={} expr=v6694[1] }
    ?15     = { defs={} expr=v6695[1] }
    rf      = { defs={} expr=v6696[1] }
    vm      = { defs={} expr=v6697[1] }
    ac      = { defs={} expr=v6698[1] }
    vif     = { defs={} expr=v6699[1] }
    vip     = { defs={} expr=v6700[1] }
    id      = { defs={} expr=v6701[1] }
    ?22     = { defs={} expr=v6702[1] }
    ?23     = { defs={} expr=v6703[1] }
    ?24     = { defs={} expr=v6704[1] }
    ?25     = { defs={} expr=v6705[1] }
    ?26     = { defs={} expr=v6706[1] }
    ?27     = { defs={} expr=v6707[1] }
    ?28     = { defs={} expr=v6708[1] }
    ?29     = { defs={} expr=v6709[1] }
    ?30     = { defs={} expr=v6710[1] }
    ?31     = { defs={} expr=v6711[1] }
    ip      = { defs={0x08048580} expr=0x08048581[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6671[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v6670[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6671[32]) }
      flags = { }
init mem:
null state
null state
0x8048581:mov    ebp, esp
registers:
    ax      = { v38097 }
    cx      = { v38098 }
    dx      = { v38099 }
    bx      = { v38100 }
    sp      = { v38101-0x4 }
    bp      = { v38101-0x4 }
    si      = { v38103 }
    di      = { v38104 }
    es      = { v38105 }
    cs      = { v38106 }
    ss      = { v38107 }
    ds      = { v38108 }
    fs      = { v38109 }
    gs      = { v38110 }
    cf      = { v38111 }
    ?1      = { v38112 }
    pf      = { v38113 }
    ?3      = { v38114 }
    af      = { v38115 }
    ?5      = { v38116 }
    zf      = { v38117 }
    sf      = { v38118 }
    tf      = { v38119 }
    if      = { v38120 }
    df      = { v38121 }
    of      = { v38122 }
    iopl0   = { v38123 }
    iopl1   = { v38124 }
    nt      = { v38125 }
    ?15     = { v38126 }
    rf      = { v38127 }
    vm      = { v38128 }
    ac      = { v38129 }
    vif     = { v38130 }
    vip     = { v38131 }
    id      = { v38132 }
    ?22     = { v38133 }
    ?23     = { v38134 }
    ?24     = { v38135 }
    ?25     = { v38136 }
    ?26     = { v38137 }
    ?27     = { v38138 }
    ?28     = { v38139 }
    ?29     = { v38140 }
    ?30     = { v38141 }
    ?31     = { v38142 }
    ip      = { 0x8048583 }
memory:
    address = { v38101-0x4 }
      value = { v38102 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6666[32] }
    cx      = { defs={} expr=v6667[32] }
    dx      = { defs={} expr=v6668[32] }
    bx      = { defs={} expr=v6669[32] }
    sp      = { defs={0x08048580} expr=(add[32] v6670[32] -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6670[32] -4[32]) }
    si      = { defs={} expr=v6672[32] }
    di      = { defs={} expr=v6673[32] }
    es      = { defs={} expr=v6674[16] }
    cs      = { defs={} expr=v6675[16] }
    ss      = { defs={} expr=v6676[16] }
    ds      = { defs={} expr=v6677[16] }
    fs      = { defs={} expr=v6678[16] }
    gs      = { defs={} expr=v6679[16] }
    cf      = { defs={} expr=v6680[1] }
    ?1      = { defs={} expr=v6681[1] }
    pf      = { defs={} expr=v6682[1] }
    ?3      = { defs={} expr=v6683[1] }
    af      = { defs={} expr=v6684[1] }
    ?5      = { defs={} expr=v6685[1] }
    zf      = { defs={} expr=v6686[1] }
    sf      = { defs={} expr=v6687[1] }
    tf      = { defs={} expr=v6688[1] }
    if      = { defs={} expr=v6689[1] }
    df      = { defs={} expr=v6690[1] }
    of      = { defs={} expr=v6691[1] }
    iopl0   = { defs={} expr=v6692[1] }
    iopl1   = { defs={} expr=v6693[1] }
    nt      = { defs={} expr=v6694[1] }
    ?15     = { defs={} expr=v6695[1] }
    rf      = { defs={} expr=v6696[1] }
    vm      = { defs={} expr=v6697[1] }
    ac      = { defs={} expr=v6698[1] }
    vif     = { defs={} expr=v6699[1] }
    vip     = { defs={} expr=v6700[1] }
    id      = { defs={} expr=v6701[1] }
    ?22     = { defs={} expr=v6702[1] }
    ?23     = { defs={} expr=v6703[1] }
    ?24     = { defs={} expr=v6704[1] }
    ?25     = { defs={} expr=v6705[1] }
    ?26     = { defs={} expr=v6706[1] }
    ?27     = { defs={} expr=v6707[1] }
    ?28     = { defs={} expr=v6708[1] }
    ?29     = { defs={} expr=v6709[1] }
    ?30     = { defs={} expr=v6710[1] }
    ?31     = { defs={} expr=v6711[1] }
    ip      = { defs={0x08048580,0x08048581} expr=0x08048583[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6671[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v6670[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6671[32]) }
      flags = { }
init mem:
null state
null state
0x8048583:push   ebx
registers:
    ax      = { v38097 }
    cx      = { v38098 }
    dx      = { v38099 }
    bx      = { v38100 }
    sp      = { v38101-0x8 }
    bp      = { v38101-0x4 }
    si      = { v38103 }
    di      = { v38104 }
    es      = { v38105 }
    cs      = { v38106 }
    ss      = { v38107 }
    ds      = { v38108 }
    fs      = { v38109 }
    gs      = { v38110 }
    cf      = { v38111 }
    ?1      = { v38112 }
    pf      = { v38113 }
    ?3      = { v38114 }
    af      = { v38115 }
    ?5      = { v38116 }
    zf      = { v38117 }
    sf      = { v38118 }
    tf      = { v38119 }
    if      = { v38120 }
    df      = { v38121 }
    of      = { v38122 }
    iopl0   = { v38123 }
    iopl1   = { v38124 }
    nt      = { v38125 }
    ?15     = { v38126 }
    rf      = { v38127 }
    vm      = { v38128 }
    ac      = { v38129 }
    vif     = { v38130 }
    vip     = { v38131 }
    id      = { v38132 }
    ?22     = { v38133 }
    ?23     = { v38134 }
    ?24     = { v38135 }
    ?25     = { v38136 }
    ?26     = { v38137 }
    ?27     = { v38138 }
    ?28     = { v38139 }
    ?29     = { v38140 }
    ?30     = { v38141 }
    ?31     = { v38142 }
    ip      = { 0x8048584 }
memory:
    address = { v38101-0x4 }
      value = { v38102 }
      flags = { size=4 }
    address = { v38101-0x8 }
      value = { v38100 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6666[32] }
    cx      = { defs={} expr=v6667[32] }
    dx      = { defs={} expr=v6668[32] }
    bx      = { defs={} expr=v6669[32] }
    sp      = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6670[32] -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6670[32] -4[32]) }
    si      = { defs={} expr=v6672[32] }
    di      = { defs={} expr=v6673[32] }
    es      = { defs={} expr=v6674[16] }
    cs      = { defs={} expr=v6675[16] }
    ss      = { defs={} expr=v6676[16] }
    ds      = { defs={} expr=v6677[16] }
    fs      = { defs={} expr=v6678[16] }
    gs      = { defs={} expr=v6679[16] }
    cf      = { defs={} expr=v6680[1] }
    ?1      = { defs={} expr=v6681[1] }
    pf      = { defs={} expr=v6682[1] }
    ?3      = { defs={} expr=v6683[1] }
    af      = { defs={} expr=v6684[1] }
    ?5      = { defs={} expr=v6685[1] }
    zf      = { defs={} expr=v6686[1] }
    sf      = { defs={} expr=v6687[1] }
    tf      = { defs={} expr=v6688[1] }
    if      = { defs={} expr=v6689[1] }
    df      = { defs={} expr=v6690[1] }
    of      = { defs={} expr=v6691[1] }
    iopl0   = { defs={} expr=v6692[1] }
    iopl1   = { defs={} expr=v6693[1] }
    nt      = { defs={} expr=v6694[1] }
    ?15     = { defs={} expr=v6695[1] }
    rf      = { defs={} expr=v6696[1] }
    vm      = { defs={} expr=v6697[1] }
    ac      = { defs={} expr=v6698[1] }
    vif     = { defs={} expr=v6699[1] }
    vip     = { defs={} expr=v6700[1] }
    id      = { defs={} expr=v6701[1] }
    ?22     = { defs={} expr=v6702[1] }
    ?23     = { defs={} expr=v6703[1] }
    ?24     = { defs={} expr=v6704[1] }
    ?25     = { defs={} expr=v6705[1] }
    ?26     = { defs={} expr=v6706[1] }
    ?27     = { defs={} expr=v6707[1] }
    ?28     = { defs={} expr=v6708[1] }
    ?29     = { defs={} expr=v6709[1] }
    ?30     = { defs={} expr=v6710[1] }
    ?31     = { defs={} expr=v6711[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583} expr=0x08048584[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6669[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6670[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6671[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v6670[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6671[32]) }
      flags = { }
init mem:
null state
null state
0x8048584:sub    esp, 0x04
registers:
    ax      = { v38097 }
    cx      = { v38098 }
    dx      = { v38099 }
    bx      = { v38100 }
    sp      = { v38101-0xc }
    bp      = { v38101-0x4 }
    si      = { v38103 }
    di      = { v38104 }
    es      = { v38105 }
    cs      = { v38106 }
    ss      = { v38107 }
    ds      = { v38108 }
    fs      = { v38109 }
    gs      = { v38110 }
    cf      = { -v38217+0x1 }
    ?1      = { v38112 }
    pf      = { -v38207+0x1 }
    ?3      = { v38114 }
    af      = { -v38214+0x1 }
    ?5      = { v38116 }
    zf      = { v38212 }
    sf      = { v38210 }
    tf      = { v38119 }
    if      = { v38120 }
    df      = { v38121 }
    of      = { v38224 }
    iopl0   = { v38123 }
    iopl1   = { v38124 }
    nt      = { v38125 }
    ?15     = { v38126 }
    rf      = { v38127 }
    vm      = { v38128 }
    ac      = { v38129 }
    vif     = { v38130 }
    vip     = { v38131 }
    id      = { v38132 }
    ?22     = { v38133 }
    ?23     = { v38134 }
    ?24     = { v38135 }
    ?25     = { v38136 }
    ?26     = { v38137 }
    ?27     = { v38138 }
    ?28     = { v38139 }
    ?29     = { v38140 }
    ?30     = { v38141 }
    ?31     = { v38142 }
    ip      = { 0x8048587 }
memory:
    address = { v38101-0x4 }
      value = { v38102 }
      flags = { size=4 }
    address = { v38101-0x8 }
      value = { v38100 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6666[32] }
    cx      = { defs={} expr=v6667[32] }
    dx      = { defs={} expr=v6668[32] }
    bx      = { defs={} expr=v6669[32] }
    sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6670[32] -4[32]) }
    si      = { defs={} expr=v6672[32] }
    di      = { defs={} expr=v6673[32] }
    es      = { defs={} expr=v6674[16] }
    cs      = { defs={} expr=v6675[16] }
    ss      = { defs={} expr=v6676[16] }
    ds      = { defs={} expr=v6677[16] }
    fs      = { defs={} expr=v6678[16] }
    gs      = { defs={} expr=v6679[16] }
    cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?1      = { defs={} expr=v6681[1] }
    pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))))))) }
    ?3      = { defs={} expr=v6683[1] }
    af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?5      = { defs={} expr=v6685[1] }
    zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])) }
    sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])) }
    tf      = { defs={} expr=v6688[1] }
    if      = { defs={} expr=v6689[1] }
    df      = { defs={} expr=v6690[1] }
    of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v6692[1] }
    iopl1   = { defs={} expr=v6693[1] }
    nt      = { defs={} expr=v6694[1] }
    ?15     = { defs={} expr=v6695[1] }
    rf      = { defs={} expr=v6696[1] }
    vm      = { defs={} expr=v6697[1] }
    ac      = { defs={} expr=v6698[1] }
    vif     = { defs={} expr=v6699[1] }
    vip     = { defs={} expr=v6700[1] }
    id      = { defs={} expr=v6701[1] }
    ?22     = { defs={} expr=v6702[1] }
    ?23     = { defs={} expr=v6703[1] }
    ?24     = { defs={} expr=v6704[1] }
    ?25     = { defs={} expr=v6705[1] }
    ?26     = { defs={} expr=v6706[1] }
    ?27     = { defs={} expr=v6707[1] }
    ?28     = { defs={} expr=v6708[1] }
    ?29     = { defs={} expr=v6709[1] }
    ?30     = { defs={} expr=v6710[1] }
    ?31     = { defs={} expr=v6711[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584} expr=0x08048587[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6669[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6670[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6671[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v6670[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6671[32]) }
      flags = { }
init mem:
null state
null state
0x8048587:mov    ebx, 0x080495e8<.ctors>
registers:
    ax      = { v38097 }
    cx      = { v38098 }
    dx      = { v38099 }
    bx      = { 0x80495e8 }
    sp      = { v38101-0xc }
    bp      = { v38101-0x4 }
    si      = { v38103 }
    di      = { v38104 }
    es      = { v38105 }
    cs      = { v38106 }
    ss      = { v38107 }
    ds      = { v38108 }
    fs      = { v38109 }
    gs      = { v38110 }
    cf      = { -v38217+0x1 }
    ?1      = { v38112 }
    pf      = { -v38207+0x1 }
    ?3      = { v38114 }
    af      = { -v38214+0x1 }
    ?5      = { v38116 }
    zf      = { v38212 }
    sf      = { v38210 }
    tf      = { v38119 }
    if      = { v38120 }
    df      = { v38121 }
    of      = { v38224 }
    iopl0   = { v38123 }
    iopl1   = { v38124 }
    nt      = { v38125 }
    ?15     = { v38126 }
    rf      = { v38127 }
    vm      = { v38128 }
    ac      = { v38129 }
    vif     = { v38130 }
    vip     = { v38131 }
    id      = { v38132 }
    ?22     = { v38133 }
    ?23     = { v38134 }
    ?24     = { v38135 }
    ?25     = { v38136 }
    ?26     = { v38137 }
    ?27     = { v38138 }
    ?28     = { v38139 }
    ?29     = { v38140 }
    ?30     = { v38141 }
    ?31     = { v38142 }
    ip      = { 0x804858c }
memory:
    address = { v38101-0x4 }
      value = { v38102 }
      flags = { size=4 }
    address = { v38101-0x8 }
      value = { v38100 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6666[32] }
    cx      = { defs={} expr=v6667[32] }
    dx      = { defs={} expr=v6668[32] }
    bx      = { defs={0x08048587} expr=0x080495e8[32] }
    sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6670[32] -4[32]) }
    si      = { defs={} expr=v6672[32] }
    di      = { defs={} expr=v6673[32] }
    es      = { defs={} expr=v6674[16] }
    cs      = { defs={} expr=v6675[16] }
    ss      = { defs={} expr=v6676[16] }
    ds      = { defs={} expr=v6677[16] }
    fs      = { defs={} expr=v6678[16] }
    gs      = { defs={} expr=v6679[16] }
    cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?1      = { defs={} expr=v6681[1] }
    pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))))))) }
    ?3      = { defs={} expr=v6683[1] }
    af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?5      = { defs={} expr=v6685[1] }
    zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])) }
    sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])) }
    tf      = { defs={} expr=v6688[1] }
    if      = { defs={} expr=v6689[1] }
    df      = { defs={} expr=v6690[1] }
    of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v6692[1] }
    iopl1   = { defs={} expr=v6693[1] }
    nt      = { defs={} expr=v6694[1] }
    ?15     = { defs={} expr=v6695[1] }
    rf      = { defs={} expr=v6696[1] }
    vm      = { defs={} expr=v6697[1] }
    ac      = { defs={} expr=v6698[1] }
    vif     = { defs={} expr=v6699[1] }
    vip     = { defs={} expr=v6700[1] }
    id      = { defs={} expr=v6701[1] }
    ?22     = { defs={} expr=v6702[1] }
    ?23     = { defs={} expr=v6703[1] }
    ?24     = { defs={} expr=v6704[1] }
    ?25     = { defs={} expr=v6705[1] }
    ?26     = { defs={} expr=v6706[1] }
    ?27     = { defs={} expr=v6707[1] }
    ?28     = { defs={} expr=v6708[1] }
    ?29     = { defs={} expr=v6709[1] }
    ?30     = { defs={} expr=v6710[1] }
    ?31     = { defs={} expr=v6711[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587} expr=0x0804858c[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6669[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6670[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6671[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v6670[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6671[32]) }
      flags = { }
init mem:
null state
null state
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8<.ctors>]
registers:
    ax      = { v38237 }
    cx      = { v38098 }
    dx      = { v38099 }
    bx      = { 0x80495e8 }
    sp      = { v38101-0xc }
    bp      = { v38101-0x4 }
    si      = { v38103 }
    di      = { v38104 }
    es      = { v38105 }
    cs      = { v38106 }
    ss      = { v38107 }
    ds      = { v38108 }
    fs      = { v38109 }
    gs      = { v38110 }
    cf      = { -v38217+0x1 }
    ?1      = { v38112 }
    pf      = { -v38207+0x1 }
    ?3      = { v38114 }
    af      = { -v38214+0x1 }
    ?5      = { v38116 }
    zf      = { v38212 }
    sf      = { v38210 }
    tf      = { v38119 }
    if      = { v38120 }
    df      = { v38121 }
    of      = { v38224 }
    iopl0   = { v38123 }
    iopl1   = { v38124 }
    nt      = { v38125 }
    ?15     = { v38126 }
    rf      = { v38127 }
    vm      = { v38128 }
    ac      = { v38129 }
    vif     = { v38130 }
    vip     = { v38131 }
    id      = { v38132 }
    ?22     = { v38133 }
    ?23     = { v38134 }
    ?24     = { v38135 }
    ?25     = { v38136 }
    ?26     = { v38137 }
    ?27     = { v38138 }
    ?28     = { v38139 }
    ?29     = { v38140 }
    ?30     = { v38141 }
    ?31     = { v38142 }
    ip      = { 0x8048591 }
memory:
    address = { v38101-0x4 }
      value = { v38102 }
      flags = { size=4 }
    address = { v38101-0x8 }
      value = { v38100 }
      flags = { size=4 }
    address = { 0x80495e8 }
      value = { v38237 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) }
    cx      = { defs={} expr=v6667[32] }
    dx      = { defs={} expr=v6668[32] }
    bx      = { defs={0x08048587} expr=0x080495e8[32] }
    sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6670[32] -4[32]) }
    si      = { defs={} expr=v6672[32] }
    di      = { defs={} expr=v6673[32] }
    es      = { defs={} expr=v6674[16] }
    cs      = { defs={} expr=v6675[16] }
    ss      = { defs={} expr=v6676[16] }
    ds      = { defs={} expr=v6677[16] }
    fs      = { defs={} expr=v6678[16] }
    gs      = { defs={} expr=v6679[16] }
    cf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?1      = { defs={} expr=v6681[1] }
    pf      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]))))))) }
    ?3      = { defs={} expr=v6683[1] }
    af      = { defs={0x08048580,0x08048583,0x08048584} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33])))))) }
    ?5      = { defs={} expr=v6685[1] }
    zf      = { defs={0x08048580,0x08048583,0x08048584} expr=(zerop[1] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])) }
    sf      = { defs={0x08048580,0x08048583,0x08048584} expr=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32])) }
    tf      = { defs={} expr=v6688[1] }
    if      = { defs={} expr=v6689[1] }
    df      = { defs={} expr=v6690[1] }
    of      = { defs={0x08048580,0x08048583,0x08048584} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v6670[32] -4[32]) -4[32])) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v6692[1] }
    iopl1   = { defs={} expr=v6693[1] }
    nt      = { defs={} expr=v6694[1] }
    ?15     = { defs={} expr=v6695[1] }
    rf      = { defs={} expr=v6696[1] }
    vm      = { defs={} expr=v6697[1] }
    ac      = { defs={} expr=v6698[1] }
    vif     = { defs={} expr=v6699[1] }
    vip     = { defs={} expr=v6700[1] }
    id      = { defs={} expr=v6701[1] }
    ?22     = { defs={} expr=v6702[1] }
    ?23     = { defs={} expr=v6703[1] }
    ?24     = { defs={} expr=v6704[1] }
    ?25     = { defs={} expr=v6705[1] }
    ?26     = { defs={} expr=v6706[1] }
    ?27     = { defs={} expr=v6707[1] }
    ?28     = { defs={} expr=v6708[1] }
    ?29     = { defs={} expr=v6709[1] }
    ?30     = { defs={} expr=v6710[1] }
    ?31     = { defs={} expr=v6711[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c} expr=0x08048591[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6669[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6670[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6671[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v6670[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6671[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495eb[32] }
      value = { defs={} expr=v6789[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495ea[32] }
      value = { defs={} expr=v6788[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495e9[32] }
      value = { defs={} expr=v6787[8] }
      flags = { rdonly }
    address = { defs={0x0804858c} expr=0x080495e8[32] }
      value = { defs={} expr=v6786[8] }
      flags = { rdonly }
null state
null state
0x8048591:cmp    eax, 0xff<-0x01>
registers:
    ax      = { v38237 }
    cx      = { v38098 }
    dx      = { v38099 }
    bx      = { 0x80495e8 }
    sp      = { v38101-0xc }
    bp      = { v38101-0x4 }
    si      = { v38103 }
    di      = { v38104 }
    es      = { v38105 }
    cs      = { v38106 }
    ss      = { v38107 }
    ds      = { v38108 }
    fs      = { v38109 }
    gs      = { v38110 }
    cf      = { -v38289+0x1 }
    ?1      = { v38112 }
    pf      = { -v38279+0x1 }
    ?3      = { v38114 }
    af      = { -v38286+0x1 }
    ?5      = { v38116 }
    zf      = { v38284 }
    sf      = { v38282 }
    tf      = { v38119 }
    if      = { v38120 }
    df      = { v38121 }
    of      = { v38296 }
    iopl0   = { v38123 }
    iopl1   = { v38124 }
    nt      = { v38125 }
    ?15     = { v38126 }
    rf      = { v38127 }
    vm      = { v38128 }
    ac      = { v38129 }
    vif     = { v38130 }
    vip     = { v38131 }
    id      = { v38132 }
    ?22     = { v38133 }
    ?23     = { v38134 }
    ?24     = { v38135 }
    ?25     = { v38136 }
    ?26     = { v38137 }
    ?27     = { v38138 }
    ?28     = { v38139 }
    ?29     = { v38140 }
    ?30     = { v38141 }
    ?31     = { v38142 }
    ip      = { 0x8048594 }
memory:
    address = { v38101-0x4 }
      value = { v38102 }
      flags = { size=4 }
    address = { v38101-0x8 }
      value = { v38100 }
      flags = { size=4 }
    address = { 0x80495e8 }
      value = { v38237 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) }
    cx      = { defs={} expr=v6667[32] }
    dx      = { defs={} expr=v6668[32] }
    bx      = { defs={0x08048587} expr=0x080495e8[32] }
    sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6670[32] -4[32]) }
    si      = { defs={} expr=v6672[32] }
    di      = { defs={} expr=v6673[32] }
    es      = { defs={} expr=v6674[16] }
    cs      = { defs={} expr=v6675[16] }
    ss      = { defs={} expr=v6676[16] }
    ds      = { defs={} expr=v6677[16] }
    fs      = { defs={} expr=v6678[16] }
    gs      = { defs={} expr=v6679[16] }
    cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) 1[33])))))) }
    ?1      = { defs={} expr=v6681[1] }
    pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v6683[1] }
    af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) 1[33])))))) }
    ?5      = { defs={} expr=v6685[1] }
    zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32])) }
    sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32])) }
    tf      = { defs={} expr=v6688[1] }
    if      = { defs={} expr=v6689[1] }
    df      = { defs={} expr=v6690[1] }
    of      = { defs={0x0804858c,0x08048591} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v6692[1] }
    iopl1   = { defs={} expr=v6693[1] }
    nt      = { defs={} expr=v6694[1] }
    ?15     = { defs={} expr=v6695[1] }
    rf      = { defs={} expr=v6696[1] }
    vm      = { defs={} expr=v6697[1] }
    ac      = { defs={} expr=v6698[1] }
    vif     = { defs={} expr=v6699[1] }
    vip     = { defs={} expr=v6700[1] }
    id      = { defs={} expr=v6701[1] }
    ?22     = { defs={} expr=v6702[1] }
    ?23     = { defs={} expr=v6703[1] }
    ?24     = { defs={} expr=v6704[1] }
    ?25     = { defs={} expr=v6705[1] }
    ?26     = { defs={} expr=v6706[1] }
    ?27     = { defs={} expr=v6707[1] }
    ?28     = { defs={} expr=v6708[1] }
    ?29     = { defs={} expr=v6709[1] }
    ?30     = { defs={} expr=v6710[1] }
    ?31     = { defs={} expr=v6711[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591} expr=0x08048594[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6669[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6670[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6671[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v6670[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6671[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495eb[32] }
      value = { defs={} expr=v6789[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495ea[32] }
      value = { defs={} expr=v6788[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495e9[32] }
      value = { defs={} expr=v6787[8] }
      flags = { rdonly }
    address = { defs={0x0804858c} expr=0x080495e8[32] }
      value = { defs={} expr=v6786[8] }
      flags = { rdonly }
null state
null state
0x8048594:je     0x080485ac<<Insn>>
registers:
    ax      = { v38237 }
    cx      = { v38098 }
    dx      = { v38099 }
    bx      = { 0x80495e8 }
    sp      = { v38101-0xc }
    bp      = { v38101-0x4 }
    si      = { v38103 }
    di      = { v38104 }
    es      = { v38105 }
    cs      = { v38106 }
    ss      = { v38107 }
    ds      = { v38108 }
    fs      = { v38109 }
    gs      = { v38110 }
    cf      = { -v38289+0x1 }
    ?1      = { v38112 }
    pf      = { -v38279+0x1 }
    ?3      = { v38114 }
    af      = { -v38286+0x1 }
    ?5      = { v38116 }
    zf      = { v38284 }
    sf      = { v38282 }
    tf      = { v38119 }
    if      = { v38120 }
    df      = { v38121 }
    of      = { v38296 }
    iopl0   = { v38123 }
    iopl1   = { v38124 }
    nt      = { v38125 }
    ?15     = { v38126 }
    rf      = { v38127 }
    vm      = { v38128 }
    ac      = { v38129 }
    vif     = { v38130 }
    vip     = { v38131 }
    id      = { v38132 }
    ?22     = { v38133 }
    ?23     = { v38134 }
    ?24     = { v38135 }
    ?25     = { v38136 }
    ?26     = { v38137 }
    ?27     = { v38138 }
    ?28     = { v38139 }
    ?29     = { v38140 }
    ?30     = { v38141 }
    ?31     = { v38142 }
    ip      = { v38305 }
memory:
    address = { v38101-0x4 }
      value = { v38102 }
      flags = { size=4 }
    address = { v38101-0x8 }
      value = { v38100 }
      flags = { size=4 }
    address = { 0x80495e8 }
      value = { v38237 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x0804858c} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) }
    cx      = { defs={} expr=v6667[32] }
    dx      = { defs={} expr=v6668[32] }
    bx      = { defs={0x08048587} expr=0x080495e8[32] }
    sp      = { defs={0x08048580,0x08048583,0x08048584} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x08048580,0x08048581} expr=(add[32] v6670[32] -4[32]) }
    si      = { defs={} expr=v6672[32] }
    di      = { defs={} expr=v6673[32] }
    es      = { defs={} expr=v6674[16] }
    cs      = { defs={} expr=v6675[16] }
    ss      = { defs={} expr=v6676[16] }
    ds      = { defs={} expr=v6677[16] }
    fs      = { defs={} expr=v6678[16] }
    gs      = { defs={} expr=v6679[16] }
    cf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) 1[33])))))) }
    ?1      = { defs={} expr=v6681[1] }
    pf      = { defs={0x0804858c,0x08048591} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v6683[1] }
    af      = { defs={0x0804858c,0x08048591} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) 1[33])))))) }
    ?5      = { defs={} expr=v6685[1] }
    zf      = { defs={0x0804858c,0x08048591} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32])) }
    sf      = { defs={0x0804858c,0x08048591} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32])) }
    tf      = { defs={} expr=v6688[1] }
    if      = { defs={} expr=v6689[1] }
    df      = { defs={} expr=v6690[1] }
    of      = { defs={0x0804858c,0x08048591} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v6692[1] }
    iopl1   = { defs={} expr=v6693[1] }
    nt      = { defs={} expr=v6694[1] }
    ?15     = { defs={} expr=v6695[1] }
    rf      = { defs={} expr=v6696[1] }
    vm      = { defs={} expr=v6697[1] }
    ac      = { defs={} expr=v6698[1] }
    vif     = { defs={} expr=v6699[1] }
    vip     = { defs={} expr=v6700[1] }
    id      = { defs={} expr=v6701[1] }
    ?22     = { defs={} expr=v6702[1] }
    ?23     = { defs={} expr=v6703[1] }
    ?24     = { defs={} expr=v6704[1] }
    ?25     = { defs={} expr=v6705[1] }
    ?26     = { defs={} expr=v6706[1] }
    ?27     = { defs={} expr=v6707[1] }
    ?28     = { defs={} expr=v6708[1] }
    ?29     = { defs={} expr=v6709[1] }
    ?30     = { defs={} expr=v6710[1] }
    ?31     = { defs={} expr=v6711[1] }
    ip      = { defs={0x08048580,0x08048581,0x08048583,0x08048584,0x08048587,0x0804858c,0x08048591,0x08048594} expr=(ite[32] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v6786[8]) (shr0[32] 8[32] (uextend[32] 32[32] v6787[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v6788[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v6789[8]))) 1[32])) 0x080485ac[32] 0x08048596[32]) }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v6670[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6669[32]) }
      flags = { }
    address = { defs={0x08048580,0x08048583} expr=(add[32] (add[32] v6670[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6669[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v6671[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6670[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v6671[32]) }
      flags = { }
    address = { defs={0x08048580} expr=(add[32] v6670[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v6671[32]) }
      flags = { }
init mem:
    address = { defs={} expr=0x080495eb[32] }
      value = { defs={} expr=v6789[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495ea[32] }
      value = { defs={} expr=v6788[8] }
      flags = { rdonly }
    address = { defs={} expr=0x080495e9[32] }
      value = { defs={} expr=v6787[8] }
      flags = { rdonly }
    address = { defs={0x0804858c} expr=0x080495e8[32] }
      value = { defs={} expr=v6786[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048596:lea    esi, [esi + 0x00]
registers:
    ax      = { v38355 }
    cx      = { v38356 }
    dx      = { v38357 }
    bx      = { v38358 }
    sp      = { v38359 }
    bp      = { v38360 }
    si      = { v38361 }
    di      = { v38362 }
    es      = { v38363 }
    cs      = { v38364 }
    ss      = { v38365 }
    ds      = { v38366 }
    fs      = { v38367 }
    gs      = { v38368 }
    cf      = { v38369 }
    ?1      = { v38370 }
    pf      = { v38371 }
    ?3      = { v38372 }
    af      = { v38373 }
    ?5      = { v38374 }
    zf      = { v38375 }
    sf      = { v38376 }
    tf      = { v38377 }
    if      = { v38378 }
    df      = { v38379 }
    of      = { v38380 }
    iopl0   = { v38381 }
    iopl1   = { v38382 }
    nt      = { v38383 }
    ?15     = { v38384 }
    rf      = { v38385 }
    vm      = { v38386 }
    ac      = { v38387 }
    vif     = { v38388 }
    vip     = { v38389 }
    id      = { v38390 }
    ?22     = { v38391 }
    ?23     = { v38392 }
    ?24     = { v38393 }
    ?25     = { v38394 }
    ?26     = { v38395 }
    ?27     = { v38396 }
    ?28     = { v38397 }
    ?29     = { v38398 }
    ?30     = { v38399 }
    ?31     = { v38400 }
    ip      = { 0x8048599 }
memory:
registers:
    ax      = { defs={} expr=v6888[32] }
    cx      = { defs={} expr=v6889[32] }
    dx      = { defs={} expr=v6890[32] }
    bx      = { defs={} expr=v6891[32] }
    sp      = { defs={} expr=v6892[32] }
    bp      = { defs={} expr=v6893[32] }
    si      = { defs={0x08048596} expr=v6894[32] }
    di      = { defs={} expr=v6895[32] }
    es      = { defs={} expr=v6896[16] }
    cs      = { defs={} expr=v6897[16] }
    ss      = { defs={} expr=v6898[16] }
    ds      = { defs={} expr=v6899[16] }
    fs      = { defs={} expr=v6900[16] }
    gs      = { defs={} expr=v6901[16] }
    cf      = { defs={} expr=v6902[1] }
    ?1      = { defs={} expr=v6903[1] }
    pf      = { defs={} expr=v6904[1] }
    ?3      = { defs={} expr=v6905[1] }
    af      = { defs={} expr=v6906[1] }
    ?5      = { defs={} expr=v6907[1] }
    zf      = { defs={} expr=v6908[1] }
    sf      = { defs={} expr=v6909[1] }
    tf      = { defs={} expr=v6910[1] }
    if      = { defs={} expr=v6911[1] }
    df      = { defs={} expr=v6912[1] }
    of      = { defs={} expr=v6913[1] }
    iopl0   = { defs={} expr=v6914[1] }
    iopl1   = { defs={} expr=v6915[1] }
    nt      = { defs={} expr=v6916[1] }
    ?15     = { defs={} expr=v6917[1] }
    rf      = { defs={} expr=v6918[1] }
    vm      = { defs={} expr=v6919[1] }
    ac      = { defs={} expr=v6920[1] }
    vif     = { defs={} expr=v6921[1] }
    vip     = { defs={} expr=v6922[1] }
    id      = { defs={} expr=v6923[1] }
    ?22     = { defs={} expr=v6924[1] }
    ?23     = { defs={} expr=v6925[1] }
    ?24     = { defs={} expr=v6926[1] }
    ?25     = { defs={} expr=v6927[1] }
    ?26     = { defs={} expr=v6928[1] }
    ?27     = { defs={} expr=v6929[1] }
    ?28     = { defs={} expr=v6930[1] }
    ?29     = { defs={} expr=v6931[1] }
    ?30     = { defs={} expr=v6932[1] }
    ?31     = { defs={} expr=v6933[1] }
    ip      = { defs={0x08048596} expr=0x08048599[32] }
memory:
init mem:
null state
null state
0x8048599:lea    edi, [edi + 0x00000000]
registers:
    ax      = { v38355 }
    cx      = { v38356 }
    dx      = { v38357 }
    bx      = { v38358 }
    sp      = { v38359 }
    bp      = { v38360 }
    si      = { v38361 }
    di      = { v38362 }
    es      = { v38363 }
    cs      = { v38364 }
    ss      = { v38365 }
    ds      = { v38366 }
    fs      = { v38367 }
    gs      = { v38368 }
    cf      = { v38369 }
    ?1      = { v38370 }
    pf      = { v38371 }
    ?3      = { v38372 }
    af      = { v38373 }
    ?5      = { v38374 }
    zf      = { v38375 }
    sf      = { v38376 }
    tf      = { v38377 }
    if      = { v38378 }
    df      = { v38379 }
    of      = { v38380 }
    iopl0   = { v38381 }
    iopl1   = { v38382 }
    nt      = { v38383 }
    ?15     = { v38384 }
    rf      = { v38385 }
    vm      = { v38386 }
    ac      = { v38387 }
    vif     = { v38388 }
    vip     = { v38389 }
    id      = { v38390 }
    ?22     = { v38391 }
    ?23     = { v38392 }
    ?24     = { v38393 }
    ?25     = { v38394 }
    ?26     = { v38395 }
    ?27     = { v38396 }
    ?28     = { v38397 }
    ?29     = { v38398 }
    ?30     = { v38399 }
    ?31     = { v38400 }
    ip      = { 0x80485a0 }
memory:
registers:
    ax      = { defs={} expr=v6888[32] }
    cx      = { defs={} expr=v6889[32] }
    dx      = { defs={} expr=v6890[32] }
    bx      = { defs={} expr=v6891[32] }
    sp      = { defs={} expr=v6892[32] }
    bp      = { defs={} expr=v6893[32] }
    si      = { defs={0x08048596} expr=v6894[32] }
    di      = { defs={0x08048599} expr=v6895[32] }
    es      = { defs={} expr=v6896[16] }
    cs      = { defs={} expr=v6897[16] }
    ss      = { defs={} expr=v6898[16] }
    ds      = { defs={} expr=v6899[16] }
    fs      = { defs={} expr=v6900[16] }
    gs      = { defs={} expr=v6901[16] }
    cf      = { defs={} expr=v6902[1] }
    ?1      = { defs={} expr=v6903[1] }
    pf      = { defs={} expr=v6904[1] }
    ?3      = { defs={} expr=v6905[1] }
    af      = { defs={} expr=v6906[1] }
    ?5      = { defs={} expr=v6907[1] }
    zf      = { defs={} expr=v6908[1] }
    sf      = { defs={} expr=v6909[1] }
    tf      = { defs={} expr=v6910[1] }
    if      = { defs={} expr=v6911[1] }
    df      = { defs={} expr=v6912[1] }
    of      = { defs={} expr=v6913[1] }
    iopl0   = { defs={} expr=v6914[1] }
    iopl1   = { defs={} expr=v6915[1] }
    nt      = { defs={} expr=v6916[1] }
    ?15     = { defs={} expr=v6917[1] }
    rf      = { defs={} expr=v6918[1] }
    vm      = { defs={} expr=v6919[1] }
    ac      = { defs={} expr=v6920[1] }
    vif     = { defs={} expr=v6921[1] }
    vip     = { defs={} expr=v6922[1] }
    id      = { defs={} expr=v6923[1] }
    ?22     = { defs={} expr=v6924[1] }
    ?23     = { defs={} expr=v6925[1] }
    ?24     = { defs={} expr=v6926[1] }
    ?25     = { defs={} expr=v6927[1] }
    ?26     = { defs={} expr=v6928[1] }
    ?27     = { defs={} expr=v6929[1] }
    ?28     = { defs={} expr=v6930[1] }
    ?29     = { defs={} expr=v6931[1] }
    ?30     = { defs={} expr=v6932[1] }
    ?31     = { defs={} expr=v6933[1] }
    ip      = { defs={0x08048596,0x08048599} expr=0x080485a0[32] }
memory:
init mem:
null state
null state
0x80485a0:sub    ebx, 0x04
registers:
    ax      = { v38355 }
    cx      = { v38356 }
    dx      = { v38357 }
    bx      = { v38358-0x4 }
    sp      = { v38359 }
    bp      = { v38360 }
    si      = { v38361 }
    di      = { v38362 }
    es      = { v38363 }
    cs      = { v38364 }
    ss      = { v38365 }
    ds      = { v38366 }
    fs      = { v38367 }
    gs      = { v38368 }
    cf      = { -v38466+0x1 }
    ?1      = { v38370 }
    pf      = { -v38456+0x1 }
    ?3      = { v38372 }
    af      = { -v38463+0x1 }
    ?5      = { v38374 }
    zf      = { v38461 }
    sf      = { v38459 }
    tf      = { v38377 }
    if      = { v38378 }
    df      = { v38379 }
    of      = { v38473 }
    iopl0   = { v38381 }
    iopl1   = { v38382 }
    nt      = { v38383 }
    ?15     = { v38384 }
    rf      = { v38385 }
    vm      = { v38386 }
    ac      = { v38387 }
    vif     = { v38388 }
    vip     = { v38389 }
    id      = { v38390 }
    ?22     = { v38391 }
    ?23     = { v38392 }
    ?24     = { v38393 }
    ?25     = { v38394 }
    ?26     = { v38395 }
    ?27     = { v38396 }
    ?28     = { v38397 }
    ?29     = { v38398 }
    ?30     = { v38399 }
    ?31     = { v38400 }
    ip      = { 0x80485a3 }
memory:
registers:
    ax      = { defs={} expr=v6888[32] }
    cx      = { defs={} expr=v6889[32] }
    dx      = { defs={} expr=v6890[32] }
    bx      = { defs={0x080485a0} expr=(add[32] v6891[32] -4[32]) }
    sp      = { defs={} expr=v6892[32] }
    bp      = { defs={} expr=v6893[32] }
    si      = { defs={0x08048596} expr=v6894[32] }
    di      = { defs={0x08048599} expr=v6895[32] }
    es      = { defs={} expr=v6896[16] }
    cs      = { defs={} expr=v6897[16] }
    ss      = { defs={} expr=v6898[16] }
    ds      = { defs={} expr=v6899[16] }
    fs      = { defs={} expr=v6900[16] }
    gs      = { defs={} expr=v6901[16] }
    cf      = { defs={0x080485a0} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6891[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6891[32]) 4294967292[33])))))) }
    ?1      = { defs={} expr=v6903[1] }
    pf      = { defs={0x080485a0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))))))) }
    ?3      = { defs={} expr=v6905[1] }
    af      = { defs={0x080485a0} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6891[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6891[32]) 4294967292[33])))))) }
    ?5      = { defs={} expr=v6907[1] }
    zf      = { defs={0x080485a0} expr=(zerop[1] (add[32] v6891[32] -4[32])) }
    sf      = { defs={0x080485a0} expr=(extract[1] 31[32] 32[32] (add[32] v6891[32] -4[32])) }
    tf      = { defs={} expr=v6910[1] }
    if      = { defs={} expr=v6911[1] }
    df      = { defs={} expr=v6912[1] }
    of      = { defs={0x080485a0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6891[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6891[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6891[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6891[32]) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v6914[1] }
    iopl1   = { defs={} expr=v6915[1] }
    nt      = { defs={} expr=v6916[1] }
    ?15     = { defs={} expr=v6917[1] }
    rf      = { defs={} expr=v6918[1] }
    vm      = { defs={} expr=v6919[1] }
    ac      = { defs={} expr=v6920[1] }
    vif     = { defs={} expr=v6921[1] }
    vip     = { defs={} expr=v6922[1] }
    id      = { defs={} expr=v6923[1] }
    ?22     = { defs={} expr=v6924[1] }
    ?23     = { defs={} expr=v6925[1] }
    ?24     = { defs={} expr=v6926[1] }
    ?25     = { defs={} expr=v6927[1] }
    ?26     = { defs={} expr=v6928[1] }
    ?27     = { defs={} expr=v6929[1] }
    ?28     = { defs={} expr=v6930[1] }
    ?29     = { defs={} expr=v6931[1] }
    ?30     = { defs={} expr=v6932[1] }
    ?31     = { defs={} expr=v6933[1] }
    ip      = { defs={0x08048596,0x08048599,0x080485a0} expr=0x080485a3[32] }
memory:
init mem:
null state
null state
0x80485a3:call   eax
registers:
    ax      = { v38355 }
    cx      = { v38356 }
    dx      = { v38357 }
    bx      = { v38358-0x4 }
    sp      = { v38359-0x4 }
    bp      = { v38360 }
    si      = { v38361 }
    di      = { v38362 }
    es      = { v38363 }
    cs      = { v38364 }
    ss      = { v38365 }
    ds      = { v38366 }
    fs      = { v38367 }
    gs      = { v38368 }
    cf      = { -v38466+0x1 }
    ?1      = { v38370 }
    pf      = { -v38456+0x1 }
    ?3      = { v38372 }
    af      = { -v38463+0x1 }
    ?5      = { v38374 }
    zf      = { v38461 }
    sf      = { v38459 }
    tf      = { v38377 }
    if      = { v38378 }
    df      = { v38379 }
    of      = { v38473 }
    iopl0   = { v38381 }
    iopl1   = { v38382 }
    nt      = { v38383 }
    ?15     = { v38384 }
    rf      = { v38385 }
    vm      = { v38386 }
    ac      = { v38387 }
    vif     = { v38388 }
    vip     = { v38389 }
    id      = { v38390 }
    ?22     = { v38391 }
    ?23     = { v38392 }
    ?24     = { v38393 }
    ?25     = { v38394 }
    ?26     = { v38395 }
    ?27     = { v38396 }
    ?28     = { v38397 }
    ?29     = { v38398 }
    ?30     = { v38399 }
    ?31     = { v38400 }
    ip      = { v38355 }
memory:
    address = { v38359-0x4 }
      value = { 0x80485a5 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v6888[32] }
    cx      = { defs={} expr=v6889[32] }
    dx      = { defs={} expr=v6890[32] }
    bx      = { defs={0x080485a0} expr=(add[32] v6891[32] -4[32]) }
    sp      = { defs={0x080485a3} expr=(add[32] v6892[32] -4[32]) }
    bp      = { defs={} expr=v6893[32] }
    si      = { defs={0x08048596} expr=v6894[32] }
    di      = { defs={0x08048599} expr=v6895[32] }
    es      = { defs={} expr=v6896[16] }
    cs      = { defs={} expr=v6897[16] }
    ss      = { defs={} expr=v6898[16] }
    ds      = { defs={} expr=v6899[16] }
    fs      = { defs={} expr=v6900[16] }
    gs      = { defs={} expr=v6901[16] }
    cf      = { defs={0x080485a0} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6891[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6891[32]) 4294967292[33])))))) }
    ?1      = { defs={} expr=v6903[1] }
    pf      = { defs={0x080485a0} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v6891[32] -4[32]))))))) }
    ?3      = { defs={} expr=v6905[1] }
    af      = { defs={0x080485a0} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6891[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6891[32]) 4294967292[33])))))) }
    ?5      = { defs={} expr=v6907[1] }
    zf      = { defs={0x080485a0} expr=(zerop[1] (add[32] v6891[32] -4[32])) }
    sf      = { defs={0x080485a0} expr=(extract[1] 31[32] 32[32] (add[32] v6891[32] -4[32])) }
    tf      = { defs={} expr=v6910[1] }
    if      = { defs={} expr=v6911[1] }
    df      = { defs={} expr=v6912[1] }
    of      = { defs={0x080485a0} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6891[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6891[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v6891[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v6891[32]) 4294967292[33])))))) }
    iopl0   = { defs={} expr=v6914[1] }
    iopl1   = { defs={} expr=v6915[1] }
    nt      = { defs={} expr=v6916[1] }
    ?15     = { defs={} expr=v6917[1] }
    rf      = { defs={} expr=v6918[1] }
    vm      = { defs={} expr=v6919[1] }
    ac      = { defs={} expr=v6920[1] }
    vif     = { defs={} expr=v6921[1] }
    vip     = { defs={} expr=v6922[1] }
    id      = { defs={} expr=v6923[1] }
    ?22     = { defs={} expr=v6924[1] }
    ?23     = { defs={} expr=v6925[1] }
    ?24     = { defs={} expr=v6926[1] }
    ?25     = { defs={} expr=v6927[1] }
    ?26     = { defs={} expr=v6928[1] }
    ?27     = { defs={} expr=v6929[1] }
    ?28     = { defs={} expr=v6930[1] }
    ?29     = { defs={} expr=v6931[1] }
    ?30     = { defs={} expr=v6932[1] }
    ?31     = { defs={} expr=v6933[1] }
    ip      = { defs={0x080485a3} expr=v6888[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v6892[32] -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6892[32] -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v6892[32] -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x080485a3} expr=(add[32] v6892[32] -4[32]) }
      value = { defs={} expr=-91[8] }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
registers:
    ax      = { v38586 }
    cx      = { v38534 }
    dx      = { v38535 }
    bx      = { v38536 }
    sp      = { v38537 }
    bp      = { v38538 }
    si      = { v38539 }
    di      = { v38540 }
    es      = { v38541 }
    cs      = { v38542 }
    ss      = { v38543 }
    ds      = { v38544 }
    fs      = { v38545 }
    gs      = { v38546 }
    cf      = { v38547 }
    ?1      = { v38548 }
    pf      = { v38549 }
    ?3      = { v38550 }
    af      = { v38551 }
    ?5      = { v38552 }
    zf      = { v38553 }
    sf      = { v38554 }
    tf      = { v38555 }
    if      = { v38556 }
    df      = { v38557 }
    of      = { v38558 }
    iopl0   = { v38559 }
    iopl1   = { v38560 }
    nt      = { v38561 }
    ?15     = { v38562 }
    rf      = { v38563 }
    vm      = { v38564 }
    ac      = { v38565 }
    vif     = { v38566 }
    vip     = { v38567 }
    id      = { v38568 }
    ?22     = { v38569 }
    ?23     = { v38570 }
    ?24     = { v38571 }
    ?25     = { v38572 }
    ?26     = { v38573 }
    ?27     = { v38574 }
    ?28     = { v38575 }
    ?29     = { v38576 }
    ?30     = { v38577 }
    ?31     = { v38578 }
    ip      = { 0x80485a7 }
memory:
    address = { v38536 }
      value = { v38586 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) }
    cx      = { defs={} expr=v7045[32] }
    dx      = { defs={} expr=v7046[32] }
    bx      = { defs={} expr=v7047[32] }
    sp      = { defs={} expr=v7048[32] }
    bp      = { defs={} expr=v7049[32] }
    si      = { defs={} expr=v7050[32] }
    di      = { defs={} expr=v7051[32] }
    es      = { defs={} expr=v7052[16] }
    cs      = { defs={} expr=v7053[16] }
    ss      = { defs={} expr=v7054[16] }
    ds      = { defs={} expr=v7055[16] }
    fs      = { defs={} expr=v7056[16] }
    gs      = { defs={} expr=v7057[16] }
    cf      = { defs={} expr=v7058[1] }
    ?1      = { defs={} expr=v7059[1] }
    pf      = { defs={} expr=v7060[1] }
    ?3      = { defs={} expr=v7061[1] }
    af      = { defs={} expr=v7062[1] }
    ?5      = { defs={} expr=v7063[1] }
    zf      = { defs={} expr=v7064[1] }
    sf      = { defs={} expr=v7065[1] }
    tf      = { defs={} expr=v7066[1] }
    if      = { defs={} expr=v7067[1] }
    df      = { defs={} expr=v7068[1] }
    of      = { defs={} expr=v7069[1] }
    iopl0   = { defs={} expr=v7070[1] }
    iopl1   = { defs={} expr=v7071[1] }
    nt      = { defs={} expr=v7072[1] }
    ?15     = { defs={} expr=v7073[1] }
    rf      = { defs={} expr=v7074[1] }
    vm      = { defs={} expr=v7075[1] }
    ac      = { defs={} expr=v7076[1] }
    vif     = { defs={} expr=v7077[1] }
    vip     = { defs={} expr=v7078[1] }
    id      = { defs={} expr=v7079[1] }
    ?22     = { defs={} expr=v7080[1] }
    ?23     = { defs={} expr=v7081[1] }
    ?24     = { defs={} expr=v7082[1] }
    ?25     = { defs={} expr=v7083[1] }
    ?26     = { defs={} expr=v7084[1] }
    ?27     = { defs={} expr=v7085[1] }
    ?28     = { defs={} expr=v7086[1] }
    ?29     = { defs={} expr=v7087[1] }
    ?30     = { defs={} expr=v7088[1] }
    ?31     = { defs={} expr=v7089[1] }
    ip      = { defs={0x080485a5} expr=0x080485a7[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7047[32] 3[32]) }
      value = { defs={} expr=v7102[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7047[32] 2[32]) }
      value = { defs={} expr=v7101[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7047[32] 1[32]) }
      value = { defs={} expr=v7100[8] }
      flags = { rdonly }
    address = { defs={} expr=v7047[32] }
      value = { defs={} expr=v7099[8] }
      flags = { rdonly }
null state
null state
0x80485a7:cmp    eax, 0xff<-0x01>
registers:
    ax      = { v38586 }
    cx      = { v38534 }
    dx      = { v38535 }
    bx      = { v38536 }
    sp      = { v38537 }
    bp      = { v38538 }
    si      = { v38539 }
    di      = { v38540 }
    es      = { v38541 }
    cs      = { v38542 }
    ss      = { v38543 }
    ds      = { v38544 }
    fs      = { v38545 }
    gs      = { v38546 }
    cf      = { -v38638+0x1 }
    ?1      = { v38548 }
    pf      = { -v38628+0x1 }
    ?3      = { v38550 }
    af      = { -v38635+0x1 }
    ?5      = { v38552 }
    zf      = { v38633 }
    sf      = { v38631 }
    tf      = { v38555 }
    if      = { v38556 }
    df      = { v38557 }
    of      = { v38645 }
    iopl0   = { v38559 }
    iopl1   = { v38560 }
    nt      = { v38561 }
    ?15     = { v38562 }
    rf      = { v38563 }
    vm      = { v38564 }
    ac      = { v38565 }
    vif     = { v38566 }
    vip     = { v38567 }
    id      = { v38568 }
    ?22     = { v38569 }
    ?23     = { v38570 }
    ?24     = { v38571 }
    ?25     = { v38572 }
    ?26     = { v38573 }
    ?27     = { v38574 }
    ?28     = { v38575 }
    ?29     = { v38576 }
    ?30     = { v38577 }
    ?31     = { v38578 }
    ip      = { 0x80485aa }
memory:
    address = { v38536 }
      value = { v38586 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) }
    cx      = { defs={} expr=v7045[32] }
    dx      = { defs={} expr=v7046[32] }
    bx      = { defs={} expr=v7047[32] }
    sp      = { defs={} expr=v7048[32] }
    bp      = { defs={} expr=v7049[32] }
    si      = { defs={} expr=v7050[32] }
    di      = { defs={} expr=v7051[32] }
    es      = { defs={} expr=v7052[16] }
    cs      = { defs={} expr=v7053[16] }
    ss      = { defs={} expr=v7054[16] }
    ds      = { defs={} expr=v7055[16] }
    fs      = { defs={} expr=v7056[16] }
    gs      = { defs={} expr=v7057[16] }
    cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) 1[33])))))) }
    ?1      = { defs={} expr=v7059[1] }
    pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v7061[1] }
    af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) 1[33])))))) }
    ?5      = { defs={} expr=v7063[1] }
    zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32])) }
    sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32])) }
    tf      = { defs={} expr=v7066[1] }
    if      = { defs={} expr=v7067[1] }
    df      = { defs={} expr=v7068[1] }
    of      = { defs={0x080485a5,0x080485a7} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v7070[1] }
    iopl1   = { defs={} expr=v7071[1] }
    nt      = { defs={} expr=v7072[1] }
    ?15     = { defs={} expr=v7073[1] }
    rf      = { defs={} expr=v7074[1] }
    vm      = { defs={} expr=v7075[1] }
    ac      = { defs={} expr=v7076[1] }
    vif     = { defs={} expr=v7077[1] }
    vip     = { defs={} expr=v7078[1] }
    id      = { defs={} expr=v7079[1] }
    ?22     = { defs={} expr=v7080[1] }
    ?23     = { defs={} expr=v7081[1] }
    ?24     = { defs={} expr=v7082[1] }
    ?25     = { defs={} expr=v7083[1] }
    ?26     = { defs={} expr=v7084[1] }
    ?27     = { defs={} expr=v7085[1] }
    ?28     = { defs={} expr=v7086[1] }
    ?29     = { defs={} expr=v7087[1] }
    ?30     = { defs={} expr=v7088[1] }
    ?31     = { defs={} expr=v7089[1] }
    ip      = { defs={0x080485a5,0x080485a7} expr=0x080485aa[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7047[32] 3[32]) }
      value = { defs={} expr=v7102[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7047[32] 2[32]) }
      value = { defs={} expr=v7101[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7047[32] 1[32]) }
      value = { defs={} expr=v7100[8] }
      flags = { rdonly }
    address = { defs={} expr=v7047[32] }
      value = { defs={} expr=v7099[8] }
      flags = { rdonly }
null state
null state
0x80485aa:jne    0x080485a0<<Insn>>
registers:
    ax      = { v38586 }
    cx      = { v38534 }
    dx      = { v38535 }
    bx      = { v38536 }
    sp      = { v38537 }
    bp      = { v38538 }
    si      = { v38539 }
    di      = { v38540 }
    es      = { v38541 }
    cs      = { v38542 }
    ss      = { v38543 }
    ds      = { v38544 }
    fs      = { v38545 }
    gs      = { v38546 }
    cf      = { -v38638+0x1 }
    ?1      = { v38548 }
    pf      = { -v38628+0x1 }
    ?3      = { v38550 }
    af      = { -v38635+0x1 }
    ?5      = { v38552 }
    zf      = { v38633 }
    sf      = { v38631 }
    tf      = { v38555 }
    if      = { v38556 }
    df      = { v38557 }
    of      = { v38645 }
    iopl0   = { v38559 }
    iopl1   = { v38560 }
    nt      = { v38561 }
    ?15     = { v38562 }
    rf      = { v38563 }
    vm      = { v38564 }
    ac      = { v38565 }
    vif     = { v38566 }
    vip     = { v38567 }
    id      = { v38568 }
    ?22     = { v38569 }
    ?23     = { v38570 }
    ?24     = { v38571 }
    ?25     = { v38572 }
    ?26     = { v38573 }
    ?27     = { v38574 }
    ?28     = { v38575 }
    ?29     = { v38576 }
    ?30     = { v38577 }
    ?31     = { v38578 }
    ip      = { v38655 }
memory:
    address = { v38536 }
      value = { v38586 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485a5} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) }
    cx      = { defs={} expr=v7045[32] }
    dx      = { defs={} expr=v7046[32] }
    bx      = { defs={} expr=v7047[32] }
    sp      = { defs={} expr=v7048[32] }
    bp      = { defs={} expr=v7049[32] }
    si      = { defs={} expr=v7050[32] }
    di      = { defs={} expr=v7051[32] }
    es      = { defs={} expr=v7052[16] }
    cs      = { defs={} expr=v7053[16] }
    ss      = { defs={} expr=v7054[16] }
    ds      = { defs={} expr=v7055[16] }
    fs      = { defs={} expr=v7056[16] }
    gs      = { defs={} expr=v7057[16] }
    cf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) 1[33])))))) }
    ?1      = { defs={} expr=v7059[1] }
    pf      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))))))) }
    ?3      = { defs={} expr=v7061[1] }
    af      = { defs={0x080485a5,0x080485a7} expr=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) 1[33])))))) }
    ?5      = { defs={} expr=v7063[1] }
    zf      = { defs={0x080485a5,0x080485a7} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32])) }
    sf      = { defs={0x080485a5,0x080485a7} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32])) }
    tf      = { defs={} expr=v7066[1] }
    if      = { defs={} expr=v7067[1] }
    df      = { defs={} expr=v7068[1] }
    of      = { defs={0x080485a5,0x080485a7} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8])))) 1[33])))))) }
    iopl0   = { defs={} expr=v7070[1] }
    iopl1   = { defs={} expr=v7071[1] }
    nt      = { defs={} expr=v7072[1] }
    ?15     = { defs={} expr=v7073[1] }
    rf      = { defs={} expr=v7074[1] }
    vm      = { defs={} expr=v7075[1] }
    ac      = { defs={} expr=v7076[1] }
    vif     = { defs={} expr=v7077[1] }
    vip     = { defs={} expr=v7078[1] }
    id      = { defs={} expr=v7079[1] }
    ?22     = { defs={} expr=v7080[1] }
    ?23     = { defs={} expr=v7081[1] }
    ?24     = { defs={} expr=v7082[1] }
    ?25     = { defs={} expr=v7083[1] }
    ?26     = { defs={} expr=v7084[1] }
    ?27     = { defs={} expr=v7085[1] }
    ?28     = { defs={} expr=v7086[1] }
    ?29     = { defs={} expr=v7087[1] }
    ?30     = { defs={} expr=v7088[1] }
    ?31     = { defs={} expr=v7089[1] }
    ip      = { defs={0x080485a5,0x080485a7,0x080485aa} expr=(ite[32] (invert[1] (zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7099[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7100[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7101[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7102[8]))) 1[32]))) 0x080485a0[32] 0x080485ac[32]) }
memory:
init mem:
    address = { defs={} expr=(add[32] v7047[32] 3[32]) }
      value = { defs={} expr=v7102[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7047[32] 2[32]) }
      value = { defs={} expr=v7101[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7047[32] 1[32]) }
      value = { defs={} expr=v7100[8] }
      flags = { rdonly }
    address = { defs={} expr=v7047[32] }
      value = { defs={} expr=v7099[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
registers:
    ax      = { v38760 }
    cx      = { v38706 }
    dx      = { v38707 }
    bx      = { v38708 }
    sp      = { v38709+0x4 }
    bp      = { v38710 }
    si      = { v38711 }
    di      = { v38712 }
    es      = { v38713 }
    cs      = { v38714 }
    ss      = { v38715 }
    ds      = { v38716 }
    fs      = { v38717 }
    gs      = { v38718 }
    cf      = { v38719 }
    ?1      = { v38720 }
    pf      = { v38721 }
    ?3      = { v38722 }
    af      = { v38723 }
    ?5      = { v38724 }
    zf      = { v38725 }
    sf      = { v38726 }
    tf      = { v38727 }
    if      = { v38728 }
    df      = { v38729 }
    of      = { v38730 }
    iopl0   = { v38731 }
    iopl1   = { v38732 }
    nt      = { v38733 }
    ?15     = { v38734 }
    rf      = { v38735 }
    vm      = { v38736 }
    ac      = { v38737 }
    vif     = { v38738 }
    vip     = { v38739 }
    id      = { v38740 }
    ?22     = { v38741 }
    ?23     = { v38742 }
    ?24     = { v38743 }
    ?25     = { v38744 }
    ?26     = { v38745 }
    ?27     = { v38746 }
    ?28     = { v38747 }
    ?29     = { v38748 }
    ?30     = { v38749 }
    ?31     = { v38750 }
    ip      = { 0x80485ad }
memory:
    address = { v38709 }
      value = { v38760 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7259[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7260[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7261[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7262[8]))) }
    cx      = { defs={} expr=v7203[32] }
    dx      = { defs={} expr=v7204[32] }
    bx      = { defs={} expr=v7205[32] }
    sp      = { defs={0x080485ac} expr=(add[32] v7206[32] 4[32]) }
    bp      = { defs={} expr=v7207[32] }
    si      = { defs={} expr=v7208[32] }
    di      = { defs={} expr=v7209[32] }
    es      = { defs={} expr=v7210[16] }
    cs      = { defs={} expr=v7211[16] }
    ss      = { defs={} expr=v7212[16] }
    ds      = { defs={} expr=v7213[16] }
    fs      = { defs={} expr=v7214[16] }
    gs      = { defs={} expr=v7215[16] }
    cf      = { defs={} expr=v7216[1] }
    ?1      = { defs={} expr=v7217[1] }
    pf      = { defs={} expr=v7218[1] }
    ?3      = { defs={} expr=v7219[1] }
    af      = { defs={} expr=v7220[1] }
    ?5      = { defs={} expr=v7221[1] }
    zf      = { defs={} expr=v7222[1] }
    sf      = { defs={} expr=v7223[1] }
    tf      = { defs={} expr=v7224[1] }
    if      = { defs={} expr=v7225[1] }
    df      = { defs={} expr=v7226[1] }
    of      = { defs={} expr=v7227[1] }
    iopl0   = { defs={} expr=v7228[1] }
    iopl1   = { defs={} expr=v7229[1] }
    nt      = { defs={} expr=v7230[1] }
    ?15     = { defs={} expr=v7231[1] }
    rf      = { defs={} expr=v7232[1] }
    vm      = { defs={} expr=v7233[1] }
    ac      = { defs={} expr=v7234[1] }
    vif     = { defs={} expr=v7235[1] }
    vip     = { defs={} expr=v7236[1] }
    id      = { defs={} expr=v7237[1] }
    ?22     = { defs={} expr=v7238[1] }
    ?23     = { defs={} expr=v7239[1] }
    ?24     = { defs={} expr=v7240[1] }
    ?25     = { defs={} expr=v7241[1] }
    ?26     = { defs={} expr=v7242[1] }
    ?27     = { defs={} expr=v7243[1] }
    ?28     = { defs={} expr=v7244[1] }
    ?29     = { defs={} expr=v7245[1] }
    ?30     = { defs={} expr=v7246[1] }
    ?31     = { defs={} expr=v7247[1] }
    ip      = { defs={0x080485ac} expr=0x080485ad[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7206[32] 3[32]) }
      value = { defs={} expr=v7262[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 2[32]) }
      value = { defs={} expr=v7261[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 1[32]) }
      value = { defs={} expr=v7260[8] }
      flags = { rdonly }
    address = { defs={} expr=v7206[32] }
      value = { defs={} expr=v7259[8] }
      flags = { rdonly }
null state
null state
0x80485ad:pop    ebx
registers:
    ax      = { v38760 }
    cx      = { v38706 }
    dx      = { v38707 }
    bx      = { v38770 }
    sp      = { v38709+0x8 }
    bp      = { v38710 }
    si      = { v38711 }
    di      = { v38712 }
    es      = { v38713 }
    cs      = { v38714 }
    ss      = { v38715 }
    ds      = { v38716 }
    fs      = { v38717 }
    gs      = { v38718 }
    cf      = { v38719 }
    ?1      = { v38720 }
    pf      = { v38721 }
    ?3      = { v38722 }
    af      = { v38723 }
    ?5      = { v38724 }
    zf      = { v38725 }
    sf      = { v38726 }
    tf      = { v38727 }
    if      = { v38728 }
    df      = { v38729 }
    of      = { v38730 }
    iopl0   = { v38731 }
    iopl1   = { v38732 }
    nt      = { v38733 }
    ?15     = { v38734 }
    rf      = { v38735 }
    vm      = { v38736 }
    ac      = { v38737 }
    vif     = { v38738 }
    vip     = { v38739 }
    id      = { v38740 }
    ?22     = { v38741 }
    ?23     = { v38742 }
    ?24     = { v38743 }
    ?25     = { v38744 }
    ?26     = { v38745 }
    ?27     = { v38746 }
    ?28     = { v38747 }
    ?29     = { v38748 }
    ?30     = { v38749 }
    ?31     = { v38750 }
    ip      = { 0x80485ae }
memory:
    address = { v38709 }
      value = { v38760 }
      flags = { size=4; read-only }
    address = { v38709+0x4 }
      value = { v38770 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7259[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7260[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7261[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7262[8]))) }
    cx      = { defs={} expr=v7203[32] }
    dx      = { defs={} expr=v7204[32] }
    bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7281[8]))) }
    sp      = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v7206[32] 4[32]) 4[32]) }
    bp      = { defs={} expr=v7207[32] }
    si      = { defs={} expr=v7208[32] }
    di      = { defs={} expr=v7209[32] }
    es      = { defs={} expr=v7210[16] }
    cs      = { defs={} expr=v7211[16] }
    ss      = { defs={} expr=v7212[16] }
    ds      = { defs={} expr=v7213[16] }
    fs      = { defs={} expr=v7214[16] }
    gs      = { defs={} expr=v7215[16] }
    cf      = { defs={} expr=v7216[1] }
    ?1      = { defs={} expr=v7217[1] }
    pf      = { defs={} expr=v7218[1] }
    ?3      = { defs={} expr=v7219[1] }
    af      = { defs={} expr=v7220[1] }
    ?5      = { defs={} expr=v7221[1] }
    zf      = { defs={} expr=v7222[1] }
    sf      = { defs={} expr=v7223[1] }
    tf      = { defs={} expr=v7224[1] }
    if      = { defs={} expr=v7225[1] }
    df      = { defs={} expr=v7226[1] }
    of      = { defs={} expr=v7227[1] }
    iopl0   = { defs={} expr=v7228[1] }
    iopl1   = { defs={} expr=v7229[1] }
    nt      = { defs={} expr=v7230[1] }
    ?15     = { defs={} expr=v7231[1] }
    rf      = { defs={} expr=v7232[1] }
    vm      = { defs={} expr=v7233[1] }
    ac      = { defs={} expr=v7234[1] }
    vif     = { defs={} expr=v7235[1] }
    vip     = { defs={} expr=v7236[1] }
    id      = { defs={} expr=v7237[1] }
    ?22     = { defs={} expr=v7238[1] }
    ?23     = { defs={} expr=v7239[1] }
    ?24     = { defs={} expr=v7240[1] }
    ?25     = { defs={} expr=v7241[1] }
    ?26     = { defs={} expr=v7242[1] }
    ?27     = { defs={} expr=v7243[1] }
    ?28     = { defs={} expr=v7244[1] }
    ?29     = { defs={} expr=v7245[1] }
    ?30     = { defs={} expr=v7246[1] }
    ?31     = { defs={} expr=v7247[1] }
    ip      = { defs={0x080485ac,0x080485ad} expr=0x080485ae[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v7206[32] 4[32]) 3[32]) }
      value = { defs={} expr=v7281[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7206[32] 4[32]) 2[32]) }
      value = { defs={} expr=v7280[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7206[32] 4[32]) 1[32]) }
      value = { defs={} expr=v7279[8] }
      flags = { rdonly }
    address = { defs={0x080485ac} expr=(add[32] v7206[32] 4[32]) }
      value = { defs={} expr=v7278[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 3[32]) }
      value = { defs={} expr=v7262[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 2[32]) }
      value = { defs={} expr=v7261[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 1[32]) }
      value = { defs={} expr=v7260[8] }
      flags = { rdonly }
    address = { defs={} expr=v7206[32] }
      value = { defs={} expr=v7259[8] }
      flags = { rdonly }
null state
null state
0x80485ae:pop    ebp
registers:
    ax      = { v38760 }
    cx      = { v38706 }
    dx      = { v38707 }
    bx      = { v38770 }
    sp      = { v38709+0xc }
    bp      = { v38780 }
    si      = { v38711 }
    di      = { v38712 }
    es      = { v38713 }
    cs      = { v38714 }
    ss      = { v38715 }
    ds      = { v38716 }
    fs      = { v38717 }
    gs      = { v38718 }
    cf      = { v38719 }
    ?1      = { v38720 }
    pf      = { v38721 }
    ?3      = { v38722 }
    af      = { v38723 }
    ?5      = { v38724 }
    zf      = { v38725 }
    sf      = { v38726 }
    tf      = { v38727 }
    if      = { v38728 }
    df      = { v38729 }
    of      = { v38730 }
    iopl0   = { v38731 }
    iopl1   = { v38732 }
    nt      = { v38733 }
    ?15     = { v38734 }
    rf      = { v38735 }
    vm      = { v38736 }
    ac      = { v38737 }
    vif     = { v38738 }
    vip     = { v38739 }
    id      = { v38740 }
    ?22     = { v38741 }
    ?23     = { v38742 }
    ?24     = { v38743 }
    ?25     = { v38744 }
    ?26     = { v38745 }
    ?27     = { v38746 }
    ?28     = { v38747 }
    ?29     = { v38748 }
    ?30     = { v38749 }
    ?31     = { v38750 }
    ip      = { 0x80485af }
memory:
    address = { v38709 }
      value = { v38760 }
      flags = { size=4; read-only }
    address = { v38709+0x4 }
      value = { v38770 }
      flags = { size=4; read-only }
    address = { v38709+0x8 }
      value = { v38780 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7259[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7260[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7261[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7262[8]))) }
    cx      = { defs={} expr=v7203[32] }
    dx      = { defs={} expr=v7204[32] }
    bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7281[8]))) }
    sp      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7297[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7298[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7299[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7300[8]))) }
    si      = { defs={} expr=v7208[32] }
    di      = { defs={} expr=v7209[32] }
    es      = { defs={} expr=v7210[16] }
    cs      = { defs={} expr=v7211[16] }
    ss      = { defs={} expr=v7212[16] }
    ds      = { defs={} expr=v7213[16] }
    fs      = { defs={} expr=v7214[16] }
    gs      = { defs={} expr=v7215[16] }
    cf      = { defs={} expr=v7216[1] }
    ?1      = { defs={} expr=v7217[1] }
    pf      = { defs={} expr=v7218[1] }
    ?3      = { defs={} expr=v7219[1] }
    af      = { defs={} expr=v7220[1] }
    ?5      = { defs={} expr=v7221[1] }
    zf      = { defs={} expr=v7222[1] }
    sf      = { defs={} expr=v7223[1] }
    tf      = { defs={} expr=v7224[1] }
    if      = { defs={} expr=v7225[1] }
    df      = { defs={} expr=v7226[1] }
    of      = { defs={} expr=v7227[1] }
    iopl0   = { defs={} expr=v7228[1] }
    iopl1   = { defs={} expr=v7229[1] }
    nt      = { defs={} expr=v7230[1] }
    ?15     = { defs={} expr=v7231[1] }
    rf      = { defs={} expr=v7232[1] }
    vm      = { defs={} expr=v7233[1] }
    ac      = { defs={} expr=v7234[1] }
    vif     = { defs={} expr=v7235[1] }
    vip     = { defs={} expr=v7236[1] }
    id      = { defs={} expr=v7237[1] }
    ?22     = { defs={} expr=v7238[1] }
    ?23     = { defs={} expr=v7239[1] }
    ?24     = { defs={} expr=v7240[1] }
    ?25     = { defs={} expr=v7241[1] }
    ?26     = { defs={} expr=v7242[1] }
    ?27     = { defs={} expr=v7243[1] }
    ?28     = { defs={} expr=v7244[1] }
    ?29     = { defs={} expr=v7245[1] }
    ?30     = { defs={} expr=v7246[1] }
    ?31     = { defs={} expr=v7247[1] }
    ip      = { defs={0x080485ac,0x080485ad,0x080485ae} expr=0x080485af[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7300[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7299[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7298[8] }
      flags = { rdonly }
    address = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v7206[32] 4[32]) 4[32]) }
      value = { defs={} expr=v7297[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7206[32] 4[32]) 3[32]) }
      value = { defs={} expr=v7281[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7206[32] 4[32]) 2[32]) }
      value = { defs={} expr=v7280[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7206[32] 4[32]) 1[32]) }
      value = { defs={} expr=v7279[8] }
      flags = { rdonly }
    address = { defs={0x080485ac} expr=(add[32] v7206[32] 4[32]) }
      value = { defs={} expr=v7278[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 3[32]) }
      value = { defs={} expr=v7262[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 2[32]) }
      value = { defs={} expr=v7261[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 1[32]) }
      value = { defs={} expr=v7260[8] }
      flags = { rdonly }
    address = { defs={} expr=v7206[32] }
      value = { defs={} expr=v7259[8] }
      flags = { rdonly }
null state
null state
0x80485af:ret    
registers:
    ax      = { v38760 }
    cx      = { v38706 }
    dx      = { v38707 }
    bx      = { v38770 }
    sp      = { v38709+0x10 }
    bp      = { v38780 }
    si      = { v38711 }
    di      = { v38712 }
    es      = { v38713 }
    cs      = { v38714 }
    ss      = { v38715 }
    ds      = { v38716 }
    fs      = { v38717 }
    gs      = { v38718 }
    cf      = { v38719 }
    ?1      = { v38720 }
    pf      = { v38721 }
    ?3      = { v38722 }
    af      = { v38723 }
    ?5      = { v38724 }
    zf      = { v38725 }
    sf      = { v38726 }
    tf      = { v38727 }
    if      = { v38728 }
    df      = { v38729 }
    of      = { v38730 }
    iopl0   = { v38731 }
    iopl1   = { v38732 }
    nt      = { v38733 }
    ?15     = { v38734 }
    rf      = { v38735 }
    vm      = { v38736 }
    ac      = { v38737 }
    vif     = { v38738 }
    vip     = { v38739 }
    id      = { v38740 }
    ?22     = { v38741 }
    ?23     = { v38742 }
    ?24     = { v38743 }
    ?25     = { v38744 }
    ?26     = { v38745 }
    ?27     = { v38746 }
    ?28     = { v38747 }
    ?29     = { v38748 }
    ?30     = { v38749 }
    ?31     = { v38750 }
    ip      = { v38792 }
memory:
    address = { v38709 }
      value = { v38760 }
      flags = { size=4; read-only }
    address = { v38709+0x4 }
      value = { v38770 }
      flags = { size=4; read-only }
    address = { v38709+0x8 }
      value = { v38780 }
      flags = { size=4; read-only }
    address = { v38709+0xc }
      value = { v38792 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485ac} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7259[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7260[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7261[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7262[8]))) }
    cx      = { defs={} expr=v7203[32] }
    dx      = { defs={} expr=v7204[32] }
    bx      = { defs={0x080485ad} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7278[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7279[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7280[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7281[8]))) }
    sp      = { defs={0x080485ac,0x080485ad,0x080485ae,0x080485af} expr=(add[32] (add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 4[32]) 4[32]) }
    bp      = { defs={0x080485ae} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7297[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7298[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7299[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7300[8]))) }
    si      = { defs={} expr=v7208[32] }
    di      = { defs={} expr=v7209[32] }
    es      = { defs={} expr=v7210[16] }
    cs      = { defs={} expr=v7211[16] }
    ss      = { defs={} expr=v7212[16] }
    ds      = { defs={} expr=v7213[16] }
    fs      = { defs={} expr=v7214[16] }
    gs      = { defs={} expr=v7215[16] }
    cf      = { defs={} expr=v7216[1] }
    ?1      = { defs={} expr=v7217[1] }
    pf      = { defs={} expr=v7218[1] }
    ?3      = { defs={} expr=v7219[1] }
    af      = { defs={} expr=v7220[1] }
    ?5      = { defs={} expr=v7221[1] }
    zf      = { defs={} expr=v7222[1] }
    sf      = { defs={} expr=v7223[1] }
    tf      = { defs={} expr=v7224[1] }
    if      = { defs={} expr=v7225[1] }
    df      = { defs={} expr=v7226[1] }
    of      = { defs={} expr=v7227[1] }
    iopl0   = { defs={} expr=v7228[1] }
    iopl1   = { defs={} expr=v7229[1] }
    nt      = { defs={} expr=v7230[1] }
    ?15     = { defs={} expr=v7231[1] }
    rf      = { defs={} expr=v7232[1] }
    vm      = { defs={} expr=v7233[1] }
    ac      = { defs={} expr=v7234[1] }
    vif     = { defs={} expr=v7235[1] }
    vip     = { defs={} expr=v7236[1] }
    id      = { defs={} expr=v7237[1] }
    ?22     = { defs={} expr=v7238[1] }
    ?23     = { defs={} expr=v7239[1] }
    ?24     = { defs={} expr=v7240[1] }
    ?25     = { defs={} expr=v7241[1] }
    ?26     = { defs={} expr=v7242[1] }
    ?27     = { defs={} expr=v7243[1] }
    ?28     = { defs={} expr=v7244[1] }
    ?29     = { defs={} expr=v7245[1] }
    ?30     = { defs={} expr=v7246[1] }
    ?31     = { defs={} expr=v7247[1] }
    ip      = { defs={0x080485af} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7318[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7319[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7320[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7321[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7321[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7320[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7319[8] }
      flags = { rdonly }
    address = { defs={0x080485ac,0x080485ad,0x080485ae} expr=(add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 4[32]) }
      value = { defs={} expr=v7318[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 3[32]) }
      value = { defs={} expr=v7300[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 2[32]) }
      value = { defs={} expr=v7299[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7206[32] 4[32]) 4[32]) 1[32]) }
      value = { defs={} expr=v7298[8] }
      flags = { rdonly }
    address = { defs={0x080485ac,0x080485ad} expr=(add[32] (add[32] v7206[32] 4[32]) 4[32]) }
      value = { defs={} expr=v7297[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7206[32] 4[32]) 3[32]) }
      value = { defs={} expr=v7281[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7206[32] 4[32]) 2[32]) }
      value = { defs={} expr=v7280[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7206[32] 4[32]) 1[32]) }
      value = { defs={} expr=v7279[8] }
      flags = { rdonly }
    address = { defs={0x080485ac} expr=(add[32] v7206[32] 4[32]) }
      value = { defs={} expr=v7278[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 3[32]) }
      value = { defs={} expr=v7262[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 2[32]) }
      value = { defs={} expr=v7261[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7206[32] 1[32]) }
      value = { defs={} expr=v7260[8] }
      flags = { rdonly }
    address = { defs={} expr=v7206[32] }
      value = { defs={} expr=v7259[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
registers:
    ax      = { v38843 }
    cx      = { v38844 }
    dx      = { v38845 }
    bx      = { v38846 }
    sp      = { v38847-0x4 }
    bp      = { v38848 }
    si      = { v38849 }
    di      = { v38850 }
    es      = { v38851 }
    cs      = { v38852 }
    ss      = { v38853 }
    ds      = { v38854 }
    fs      = { v38855 }
    gs      = { v38856 }
    cf      = { v38857 }
    ?1      = { v38858 }
    pf      = { v38859 }
    ?3      = { v38860 }
    af      = { v38861 }
    ?5      = { v38862 }
    zf      = { v38863 }
    sf      = { v38864 }
    tf      = { v38865 }
    if      = { v38866 }
    df      = { v38867 }
    of      = { v38868 }
    iopl0   = { v38869 }
    iopl1   = { v38870 }
    nt      = { v38871 }
    ?15     = { v38872 }
    rf      = { v38873 }
    vm      = { v38874 }
    ac      = { v38875 }
    vif     = { v38876 }
    vip     = { v38877 }
    id      = { v38878 }
    ?22     = { v38879 }
    ?23     = { v38880 }
    ?24     = { v38881 }
    ?25     = { v38882 }
    ?26     = { v38883 }
    ?27     = { v38884 }
    ?28     = { v38885 }
    ?29     = { v38886 }
    ?30     = { v38887 }
    ?31     = { v38888 }
    ip      = { 0x80485b1 }
memory:
    address = { v38847-0x4 }
      value = { v38848 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7376[32] }
    cx      = { defs={} expr=v7377[32] }
    dx      = { defs={} expr=v7378[32] }
    bx      = { defs={} expr=v7379[32] }
    sp      = { defs={0x080485b0} expr=(add[32] v7380[32] -4[32]) }
    bp      = { defs={} expr=v7381[32] }
    si      = { defs={} expr=v7382[32] }
    di      = { defs={} expr=v7383[32] }
    es      = { defs={} expr=v7384[16] }
    cs      = { defs={} expr=v7385[16] }
    ss      = { defs={} expr=v7386[16] }
    ds      = { defs={} expr=v7387[16] }
    fs      = { defs={} expr=v7388[16] }
    gs      = { defs={} expr=v7389[16] }
    cf      = { defs={} expr=v7390[1] }
    ?1      = { defs={} expr=v7391[1] }
    pf      = { defs={} expr=v7392[1] }
    ?3      = { defs={} expr=v7393[1] }
    af      = { defs={} expr=v7394[1] }
    ?5      = { defs={} expr=v7395[1] }
    zf      = { defs={} expr=v7396[1] }
    sf      = { defs={} expr=v7397[1] }
    tf      = { defs={} expr=v7398[1] }
    if      = { defs={} expr=v7399[1] }
    df      = { defs={} expr=v7400[1] }
    of      = { defs={} expr=v7401[1] }
    iopl0   = { defs={} expr=v7402[1] }
    iopl1   = { defs={} expr=v7403[1] }
    nt      = { defs={} expr=v7404[1] }
    ?15     = { defs={} expr=v7405[1] }
    rf      = { defs={} expr=v7406[1] }
    vm      = { defs={} expr=v7407[1] }
    ac      = { defs={} expr=v7408[1] }
    vif     = { defs={} expr=v7409[1] }
    vip     = { defs={} expr=v7410[1] }
    id      = { defs={} expr=v7411[1] }
    ?22     = { defs={} expr=v7412[1] }
    ?23     = { defs={} expr=v7413[1] }
    ?24     = { defs={} expr=v7414[1] }
    ?25     = { defs={} expr=v7415[1] }
    ?26     = { defs={} expr=v7416[1] }
    ?27     = { defs={} expr=v7417[1] }
    ?28     = { defs={} expr=v7418[1] }
    ?29     = { defs={} expr=v7419[1] }
    ?30     = { defs={} expr=v7420[1] }
    ?31     = { defs={} expr=v7421[1] }
    ip      = { defs={0x080485b0} expr=0x080485b1[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7381[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7381[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7381[32]) }
      flags = { }
    address = { defs={0x080485b0} expr=(add[32] v7380[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7381[32]) }
      flags = { }
init mem:
null state
null state
0x80485b1:mov    ebp, esp
registers:
    ax      = { v38843 }
    cx      = { v38844 }
    dx      = { v38845 }
    bx      = { v38846 }
    sp      = { v38847-0x4 }
    bp      = { v38847-0x4 }
    si      = { v38849 }
    di      = { v38850 }
    es      = { v38851 }
    cs      = { v38852 }
    ss      = { v38853 }
    ds      = { v38854 }
    fs      = { v38855 }
    gs      = { v38856 }
    cf      = { v38857 }
    ?1      = { v38858 }
    pf      = { v38859 }
    ?3      = { v38860 }
    af      = { v38861 }
    ?5      = { v38862 }
    zf      = { v38863 }
    sf      = { v38864 }
    tf      = { v38865 }
    if      = { v38866 }
    df      = { v38867 }
    of      = { v38868 }
    iopl0   = { v38869 }
    iopl1   = { v38870 }
    nt      = { v38871 }
    ?15     = { v38872 }
    rf      = { v38873 }
    vm      = { v38874 }
    ac      = { v38875 }
    vif     = { v38876 }
    vip     = { v38877 }
    id      = { v38878 }
    ?22     = { v38879 }
    ?23     = { v38880 }
    ?24     = { v38881 }
    ?25     = { v38882 }
    ?26     = { v38883 }
    ?27     = { v38884 }
    ?28     = { v38885 }
    ?29     = { v38886 }
    ?30     = { v38887 }
    ?31     = { v38888 }
    ip      = { 0x80485b3 }
memory:
    address = { v38847-0x4 }
      value = { v38848 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7376[32] }
    cx      = { defs={} expr=v7377[32] }
    dx      = { defs={} expr=v7378[32] }
    bx      = { defs={} expr=v7379[32] }
    sp      = { defs={0x080485b0} expr=(add[32] v7380[32] -4[32]) }
    bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7380[32] -4[32]) }
    si      = { defs={} expr=v7382[32] }
    di      = { defs={} expr=v7383[32] }
    es      = { defs={} expr=v7384[16] }
    cs      = { defs={} expr=v7385[16] }
    ss      = { defs={} expr=v7386[16] }
    ds      = { defs={} expr=v7387[16] }
    fs      = { defs={} expr=v7388[16] }
    gs      = { defs={} expr=v7389[16] }
    cf      = { defs={} expr=v7390[1] }
    ?1      = { defs={} expr=v7391[1] }
    pf      = { defs={} expr=v7392[1] }
    ?3      = { defs={} expr=v7393[1] }
    af      = { defs={} expr=v7394[1] }
    ?5      = { defs={} expr=v7395[1] }
    zf      = { defs={} expr=v7396[1] }
    sf      = { defs={} expr=v7397[1] }
    tf      = { defs={} expr=v7398[1] }
    if      = { defs={} expr=v7399[1] }
    df      = { defs={} expr=v7400[1] }
    of      = { defs={} expr=v7401[1] }
    iopl0   = { defs={} expr=v7402[1] }
    iopl1   = { defs={} expr=v7403[1] }
    nt      = { defs={} expr=v7404[1] }
    ?15     = { defs={} expr=v7405[1] }
    rf      = { defs={} expr=v7406[1] }
    vm      = { defs={} expr=v7407[1] }
    ac      = { defs={} expr=v7408[1] }
    vif     = { defs={} expr=v7409[1] }
    vip     = { defs={} expr=v7410[1] }
    id      = { defs={} expr=v7411[1] }
    ?22     = { defs={} expr=v7412[1] }
    ?23     = { defs={} expr=v7413[1] }
    ?24     = { defs={} expr=v7414[1] }
    ?25     = { defs={} expr=v7415[1] }
    ?26     = { defs={} expr=v7416[1] }
    ?27     = { defs={} expr=v7417[1] }
    ?28     = { defs={} expr=v7418[1] }
    ?29     = { defs={} expr=v7419[1] }
    ?30     = { defs={} expr=v7420[1] }
    ?31     = { defs={} expr=v7421[1] }
    ip      = { defs={0x080485b0,0x080485b1} expr=0x080485b3[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7381[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7381[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7381[32]) }
      flags = { }
    address = { defs={0x080485b0} expr=(add[32] v7380[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7381[32]) }
      flags = { }
init mem:
null state
null state
0x80485b3:push   ebx
registers:
    ax      = { v38843 }
    cx      = { v38844 }
    dx      = { v38845 }
    bx      = { v38846 }
    sp      = { v38847-0x8 }
    bp      = { v38847-0x4 }
    si      = { v38849 }
    di      = { v38850 }
    es      = { v38851 }
    cs      = { v38852 }
    ss      = { v38853 }
    ds      = { v38854 }
    fs      = { v38855 }
    gs      = { v38856 }
    cf      = { v38857 }
    ?1      = { v38858 }
    pf      = { v38859 }
    ?3      = { v38860 }
    af      = { v38861 }
    ?5      = { v38862 }
    zf      = { v38863 }
    sf      = { v38864 }
    tf      = { v38865 }
    if      = { v38866 }
    df      = { v38867 }
    of      = { v38868 }
    iopl0   = { v38869 }
    iopl1   = { v38870 }
    nt      = { v38871 }
    ?15     = { v38872 }
    rf      = { v38873 }
    vm      = { v38874 }
    ac      = { v38875 }
    vif     = { v38876 }
    vip     = { v38877 }
    id      = { v38878 }
    ?22     = { v38879 }
    ?23     = { v38880 }
    ?24     = { v38881 }
    ?25     = { v38882 }
    ?26     = { v38883 }
    ?27     = { v38884 }
    ?28     = { v38885 }
    ?29     = { v38886 }
    ?30     = { v38887 }
    ?31     = { v38888 }
    ip      = { 0x80485b4 }
memory:
    address = { v38847-0x4 }
      value = { v38848 }
      flags = { size=4 }
    address = { v38847-0x8 }
      value = { v38846 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7376[32] }
    cx      = { defs={} expr=v7377[32] }
    dx      = { defs={} expr=v7378[32] }
    bx      = { defs={} expr=v7379[32] }
    sp      = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7380[32] -4[32]) -4[32]) }
    bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7380[32] -4[32]) }
    si      = { defs={} expr=v7382[32] }
    di      = { defs={} expr=v7383[32] }
    es      = { defs={} expr=v7384[16] }
    cs      = { defs={} expr=v7385[16] }
    ss      = { defs={} expr=v7386[16] }
    ds      = { defs={} expr=v7387[16] }
    fs      = { defs={} expr=v7388[16] }
    gs      = { defs={} expr=v7389[16] }
    cf      = { defs={} expr=v7390[1] }
    ?1      = { defs={} expr=v7391[1] }
    pf      = { defs={} expr=v7392[1] }
    ?3      = { defs={} expr=v7393[1] }
    af      = { defs={} expr=v7394[1] }
    ?5      = { defs={} expr=v7395[1] }
    zf      = { defs={} expr=v7396[1] }
    sf      = { defs={} expr=v7397[1] }
    tf      = { defs={} expr=v7398[1] }
    if      = { defs={} expr=v7399[1] }
    df      = { defs={} expr=v7400[1] }
    of      = { defs={} expr=v7401[1] }
    iopl0   = { defs={} expr=v7402[1] }
    iopl1   = { defs={} expr=v7403[1] }
    nt      = { defs={} expr=v7404[1] }
    ?15     = { defs={} expr=v7405[1] }
    rf      = { defs={} expr=v7406[1] }
    vm      = { defs={} expr=v7407[1] }
    ac      = { defs={} expr=v7408[1] }
    vif     = { defs={} expr=v7409[1] }
    vip     = { defs={} expr=v7410[1] }
    id      = { defs={} expr=v7411[1] }
    ?22     = { defs={} expr=v7412[1] }
    ?23     = { defs={} expr=v7413[1] }
    ?24     = { defs={} expr=v7414[1] }
    ?25     = { defs={} expr=v7415[1] }
    ?26     = { defs={} expr=v7416[1] }
    ?27     = { defs={} expr=v7417[1] }
    ?28     = { defs={} expr=v7418[1] }
    ?29     = { defs={} expr=v7419[1] }
    ?30     = { defs={} expr=v7420[1] }
    ?31     = { defs={} expr=v7421[1] }
    ip      = { defs={0x080485b0,0x080485b1,0x080485b3} expr=0x080485b4[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7379[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7379[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7379[32]) }
      flags = { }
    address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7380[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7379[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7381[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7381[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7381[32]) }
      flags = { }
    address = { defs={0x080485b0} expr=(add[32] v7380[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7381[32]) }
      flags = { }
init mem:
null state
null state
0x80485b4:push   eax
registers:
    ax      = { v38843 }
    cx      = { v38844 }
    dx      = { v38845 }
    bx      = { v38846 }
    sp      = { v38847-0xc }
    bp      = { v38847-0x4 }
    si      = { v38849 }
    di      = { v38850 }
    es      = { v38851 }
    cs      = { v38852 }
    ss      = { v38853 }
    ds      = { v38854 }
    fs      = { v38855 }
    gs      = { v38856 }
    cf      = { v38857 }
    ?1      = { v38858 }
    pf      = { v38859 }
    ?3      = { v38860 }
    af      = { v38861 }
    ?5      = { v38862 }
    zf      = { v38863 }
    sf      = { v38864 }
    tf      = { v38865 }
    if      = { v38866 }
    df      = { v38867 }
    of      = { v38868 }
    iopl0   = { v38869 }
    iopl1   = { v38870 }
    nt      = { v38871 }
    ?15     = { v38872 }
    rf      = { v38873 }
    vm      = { v38874 }
    ac      = { v38875 }
    vif     = { v38876 }
    vip     = { v38877 }
    id      = { v38878 }
    ?22     = { v38879 }
    ?23     = { v38880 }
    ?24     = { v38881 }
    ?25     = { v38882 }
    ?26     = { v38883 }
    ?27     = { v38884 }
    ?28     = { v38885 }
    ?29     = { v38886 }
    ?30     = { v38887 }
    ?31     = { v38888 }
    ip      = { 0x80485b5 }
memory:
    address = { v38847-0x4 }
      value = { v38848 }
      flags = { size=4 }
    address = { v38847-0x8 }
      value = { v38846 }
      flags = { size=4 }
    address = { v38847-0xc }
      value = { v38843 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7376[32] }
    cx      = { defs={} expr=v7377[32] }
    dx      = { defs={} expr=v7378[32] }
    bx      = { defs={} expr=v7379[32] }
    sp      = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7380[32] -4[32]) }
    si      = { defs={} expr=v7382[32] }
    di      = { defs={} expr=v7383[32] }
    es      = { defs={} expr=v7384[16] }
    cs      = { defs={} expr=v7385[16] }
    ss      = { defs={} expr=v7386[16] }
    ds      = { defs={} expr=v7387[16] }
    fs      = { defs={} expr=v7388[16] }
    gs      = { defs={} expr=v7389[16] }
    cf      = { defs={} expr=v7390[1] }
    ?1      = { defs={} expr=v7391[1] }
    pf      = { defs={} expr=v7392[1] }
    ?3      = { defs={} expr=v7393[1] }
    af      = { defs={} expr=v7394[1] }
    ?5      = { defs={} expr=v7395[1] }
    zf      = { defs={} expr=v7396[1] }
    sf      = { defs={} expr=v7397[1] }
    tf      = { defs={} expr=v7398[1] }
    if      = { defs={} expr=v7399[1] }
    df      = { defs={} expr=v7400[1] }
    of      = { defs={} expr=v7401[1] }
    iopl0   = { defs={} expr=v7402[1] }
    iopl1   = { defs={} expr=v7403[1] }
    nt      = { defs={} expr=v7404[1] }
    ?15     = { defs={} expr=v7405[1] }
    rf      = { defs={} expr=v7406[1] }
    vm      = { defs={} expr=v7407[1] }
    ac      = { defs={} expr=v7408[1] }
    vif     = { defs={} expr=v7409[1] }
    vip     = { defs={} expr=v7410[1] }
    id      = { defs={} expr=v7411[1] }
    ?22     = { defs={} expr=v7412[1] }
    ?23     = { defs={} expr=v7413[1] }
    ?24     = { defs={} expr=v7414[1] }
    ?25     = { defs={} expr=v7415[1] }
    ?26     = { defs={} expr=v7416[1] }
    ?27     = { defs={} expr=v7417[1] }
    ?28     = { defs={} expr=v7418[1] }
    ?29     = { defs={} expr=v7419[1] }
    ?30     = { defs={} expr=v7420[1] }
    ?31     = { defs={} expr=v7421[1] }
    ip      = { defs={0x080485b0,0x080485b1,0x080485b3,0x080485b4} expr=0x080485b5[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7376[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7376[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7376[32]) }
      flags = { }
    address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7376[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7379[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7379[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7379[32]) }
      flags = { }
    address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7380[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7379[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7381[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7381[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7381[32]) }
      flags = { }
    address = { defs={0x080485b0} expr=(add[32] v7380[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7381[32]) }
      flags = { }
init mem:
null state
null state
0x80485b5:call   0x080485ba<<Insn>>
registers:
    ax      = { v38843 }
    cx      = { v38844 }
    dx      = { v38845 }
    bx      = { v38846 }
    sp      = { v38847-0x10 }
    bp      = { v38847-0x4 }
    si      = { v38849 }
    di      = { v38850 }
    es      = { v38851 }
    cs      = { v38852 }
    ss      = { v38853 }
    ds      = { v38854 }
    fs      = { v38855 }
    gs      = { v38856 }
    cf      = { v38857 }
    ?1      = { v38858 }
    pf      = { v38859 }
    ?3      = { v38860 }
    af      = { v38861 }
    ?5      = { v38862 }
    zf      = { v38863 }
    sf      = { v38864 }
    tf      = { v38865 }
    if      = { v38866 }
    df      = { v38867 }
    of      = { v38868 }
    iopl0   = { v38869 }
    iopl1   = { v38870 }
    nt      = { v38871 }
    ?15     = { v38872 }
    rf      = { v38873 }
    vm      = { v38874 }
    ac      = { v38875 }
    vif     = { v38876 }
    vip     = { v38877 }
    id      = { v38878 }
    ?22     = { v38879 }
    ?23     = { v38880 }
    ?24     = { v38881 }
    ?25     = { v38882 }
    ?26     = { v38883 }
    ?27     = { v38884 }
    ?28     = { v38885 }
    ?29     = { v38886 }
    ?30     = { v38887 }
    ?31     = { v38888 }
    ip      = { 0x80485ba }
memory:
    address = { v38847-0x4 }
      value = { v38848 }
      flags = { size=4 }
    address = { v38847-0x8 }
      value = { v38846 }
      flags = { size=4 }
    address = { v38847-0xc }
      value = { v38843 }
      flags = { size=4 }
    address = { v38847-0x10 }
      value = { 0x80485ba }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7376[32] }
    cx      = { defs={} expr=v7377[32] }
    dx      = { defs={} expr=v7378[32] }
    bx      = { defs={} expr=v7379[32] }
    sp      = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) -4[32]) }
    bp      = { defs={0x080485b0,0x080485b1} expr=(add[32] v7380[32] -4[32]) }
    si      = { defs={} expr=v7382[32] }
    di      = { defs={} expr=v7383[32] }
    es      = { defs={} expr=v7384[16] }
    cs      = { defs={} expr=v7385[16] }
    ss      = { defs={} expr=v7386[16] }
    ds      = { defs={} expr=v7387[16] }
    fs      = { defs={} expr=v7388[16] }
    gs      = { defs={} expr=v7389[16] }
    cf      = { defs={} expr=v7390[1] }
    ?1      = { defs={} expr=v7391[1] }
    pf      = { defs={} expr=v7392[1] }
    ?3      = { defs={} expr=v7393[1] }
    af      = { defs={} expr=v7394[1] }
    ?5      = { defs={} expr=v7395[1] }
    zf      = { defs={} expr=v7396[1] }
    sf      = { defs={} expr=v7397[1] }
    tf      = { defs={} expr=v7398[1] }
    if      = { defs={} expr=v7399[1] }
    df      = { defs={} expr=v7400[1] }
    of      = { defs={} expr=v7401[1] }
    iopl0   = { defs={} expr=v7402[1] }
    iopl1   = { defs={} expr=v7403[1] }
    nt      = { defs={} expr=v7404[1] }
    ?15     = { defs={} expr=v7405[1] }
    rf      = { defs={} expr=v7406[1] }
    vm      = { defs={} expr=v7407[1] }
    ac      = { defs={} expr=v7408[1] }
    vif     = { defs={} expr=v7409[1] }
    vip     = { defs={} expr=v7410[1] }
    id      = { defs={} expr=v7411[1] }
    ?22     = { defs={} expr=v7412[1] }
    ?23     = { defs={} expr=v7413[1] }
    ?24     = { defs={} expr=v7414[1] }
    ?25     = { defs={} expr=v7415[1] }
    ?26     = { defs={} expr=v7416[1] }
    ?27     = { defs={} expr=v7417[1] }
    ?28     = { defs={} expr=v7418[1] }
    ?29     = { defs={} expr=v7419[1] }
    ?30     = { defs={} expr=v7420[1] }
    ?31     = { defs={} expr=v7421[1] }
    ip      = { defs={0x080485b5} expr=0x080485ba[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x080485b0,0x080485b3,0x080485b4,0x080485b5} expr=(add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=-70[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7376[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7376[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7376[32]) }
      flags = { }
    address = { defs={0x080485b0,0x080485b3,0x080485b4} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7376[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7379[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7379[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7380[32] -4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7379[32]) }
      flags = { }
    address = { defs={0x080485b0,0x080485b3} expr=(add[32] (add[32] v7380[32] -4[32]) -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7379[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 3[32]) }
      value = { defs={} expr=(extract[8] 24[32] 32[32] v7381[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 2[32]) }
      value = { defs={} expr=(extract[8] 16[32] 24[32] v7381[32]) }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] v7380[32] -4[32]) 1[32]) }
      value = { defs={} expr=(extract[8] 8[32] 16[32] v7381[32]) }
      flags = { }
    address = { defs={0x080485b0} expr=(add[32] v7380[32] -4[32]) }
      value = { defs={} expr=(extract[8] 0[32] 8[32] v7381[32]) }
      flags = { }
init mem:
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
registers:
    ax      = { v38980 }
    cx      = { v38981 }
    dx      = { v38982 }
    bx      = { v39035 }
    sp      = { v38984+0x4 }
    bp      = { v38985 }
    si      = { v38986 }
    di      = { v38987 }
    es      = { v38988 }
    cs      = { v38989 }
    ss      = { v38990 }
    ds      = { v38991 }
    fs      = { v38992 }
    gs      = { v38993 }
    cf      = { v38994 }
    ?1      = { v38995 }
    pf      = { v38996 }
    ?3      = { v38997 }
    af      = { v38998 }
    ?5      = { v38999 }
    zf      = { v39000 }
    sf      = { v39001 }
    tf      = { v39002 }
    if      = { v39003 }
    df      = { v39004 }
    of      = { v39005 }
    iopl0   = { v39006 }
    iopl1   = { v39007 }
    nt      = { v39008 }
    ?15     = { v39009 }
    rf      = { v39010 }
    vm      = { v39011 }
    ac      = { v39012 }
    vif     = { v39013 }
    vip     = { v39014 }
    id      = { v39015 }
    ?22     = { v39016 }
    ?23     = { v39017 }
    ?24     = { v39018 }
    ?25     = { v39019 }
    ?26     = { v39020 }
    ?27     = { v39021 }
    ?28     = { v39022 }
    ?29     = { v39023 }
    ?30     = { v39024 }
    ?31     = { v39025 }
    ip      = { 0x80485bb }
memory:
    address = { v38984 }
      value = { v39035 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v7513[32] }
    cx      = { defs={} expr=v7514[32] }
    dx      = { defs={} expr=v7515[32] }
    bx      = { defs={0x080485ba} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) }
    sp      = { defs={0x080485ba} expr=(add[32] v7517[32] 4[32]) }
    bp      = { defs={} expr=v7518[32] }
    si      = { defs={} expr=v7519[32] }
    di      = { defs={} expr=v7520[32] }
    es      = { defs={} expr=v7521[16] }
    cs      = { defs={} expr=v7522[16] }
    ss      = { defs={} expr=v7523[16] }
    ds      = { defs={} expr=v7524[16] }
    fs      = { defs={} expr=v7525[16] }
    gs      = { defs={} expr=v7526[16] }
    cf      = { defs={} expr=v7527[1] }
    ?1      = { defs={} expr=v7528[1] }
    pf      = { defs={} expr=v7529[1] }
    ?3      = { defs={} expr=v7530[1] }
    af      = { defs={} expr=v7531[1] }
    ?5      = { defs={} expr=v7532[1] }
    zf      = { defs={} expr=v7533[1] }
    sf      = { defs={} expr=v7534[1] }
    tf      = { defs={} expr=v7535[1] }
    if      = { defs={} expr=v7536[1] }
    df      = { defs={} expr=v7537[1] }
    of      = { defs={} expr=v7538[1] }
    iopl0   = { defs={} expr=v7539[1] }
    iopl1   = { defs={} expr=v7540[1] }
    nt      = { defs={} expr=v7541[1] }
    ?15     = { defs={} expr=v7542[1] }
    rf      = { defs={} expr=v7543[1] }
    vm      = { defs={} expr=v7544[1] }
    ac      = { defs={} expr=v7545[1] }
    vif     = { defs={} expr=v7546[1] }
    vip     = { defs={} expr=v7547[1] }
    id      = { defs={} expr=v7548[1] }
    ?22     = { defs={} expr=v7549[1] }
    ?23     = { defs={} expr=v7550[1] }
    ?24     = { defs={} expr=v7551[1] }
    ?25     = { defs={} expr=v7552[1] }
    ?26     = { defs={} expr=v7553[1] }
    ?27     = { defs={} expr=v7554[1] }
    ?28     = { defs={} expr=v7555[1] }
    ?29     = { defs={} expr=v7556[1] }
    ?30     = { defs={} expr=v7557[1] }
    ?31     = { defs={} expr=v7558[1] }
    ip      = { defs={0x080485ba} expr=0x080485bb[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7517[32] 3[32]) }
      value = { defs={} expr=v7573[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7517[32] 2[32]) }
      value = { defs={} expr=v7572[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7517[32] 1[32]) }
      value = { defs={} expr=v7571[8] }
      flags = { rdonly }
    address = { defs={} expr=v7517[32] }
      value = { defs={} expr=v7570[8] }
      flags = { rdonly }
null state
null state
0x80485bb:add    ebx, 0x0000110e
registers:
    ax      = { v38980 }
    cx      = { v38981 }
    dx      = { v38982 }
    bx      = { v39035+0x110e }
    sp      = { v38984+0x4 }
    bp      = { v38985 }
    si      = { v38986 }
    di      = { v38987 }
    es      = { v38988 }
    cs      = { v38989 }
    ss      = { v38990 }
    ds      = { v38991 }
    fs      = { v38992 }
    gs      = { v38993 }
    cf      = { v39084 }
    ?1      = { v38995 }
    pf      = { -v39075+0x1 }
    ?3      = { v38997 }
    af      = { v39082 }
    ?5      = { v38999 }
    zf      = { v39080 }
    sf      = { v39078 }
    tf      = { v39002 }
    if      = { v39003 }
    df      = { v39004 }
    of      = { v39090 }
    iopl0   = { v39006 }
    iopl1   = { v39007 }
    nt      = { v39008 }
    ?15     = { v39009 }
    rf      = { v39010 }
    vm      = { v39011 }
    ac      = { v39012 }
    vif     = { v39013 }
    vip     = { v39014 }
    id      = { v39015 }
    ?22     = { v39016 }
    ?23     = { v39017 }
    ?24     = { v39018 }
    ?25     = { v39019 }
    ?26     = { v39020 }
    ?27     = { v39021 }
    ?28     = { v39022 }
    ?29     = { v39023 }
    ?30     = { v39024 }
    ?31     = { v39025 }
    ip      = { 0x80485c1 }
memory:
    address = { v38984 }
      value = { v39035 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={} expr=v7513[32] }
    cx      = { defs={} expr=v7514[32] }
    dx      = { defs={} expr=v7515[32] }
    bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]) }
    sp      = { defs={0x080485ba} expr=(add[32] v7517[32] 4[32]) }
    bp      = { defs={} expr=v7518[32] }
    si      = { defs={} expr=v7519[32] }
    di      = { defs={} expr=v7520[32] }
    es      = { defs={} expr=v7521[16] }
    cs      = { defs={} expr=v7522[16] }
    ss      = { defs={} expr=v7523[16] }
    ds      = { defs={} expr=v7524[16] }
    fs      = { defs={} expr=v7525[16] }
    gs      = { defs={} expr=v7526[16] }
    cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) 4366[33]))))) }
    ?1      = { defs={} expr=v7528[1] }
    pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))))))) }
    ?3      = { defs={} expr=v7530[1] }
    af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) 4366[33]))))) }
    ?5      = { defs={} expr=v7532[1] }
    zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32])) }
    sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32])) }
    tf      = { defs={} expr=v7535[1] }
    if      = { defs={} expr=v7536[1] }
    df      = { defs={} expr=v7537[1] }
    of      = { defs={0x080485ba,0x080485bb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) 4366[33])))))) }
    iopl0   = { defs={} expr=v7539[1] }
    iopl1   = { defs={} expr=v7540[1] }
    nt      = { defs={} expr=v7541[1] }
    ?15     = { defs={} expr=v7542[1] }
    rf      = { defs={} expr=v7543[1] }
    vm      = { defs={} expr=v7544[1] }
    ac      = { defs={} expr=v7545[1] }
    vif     = { defs={} expr=v7546[1] }
    vip     = { defs={} expr=v7547[1] }
    id      = { defs={} expr=v7548[1] }
    ?22     = { defs={} expr=v7549[1] }
    ?23     = { defs={} expr=v7550[1] }
    ?24     = { defs={} expr=v7551[1] }
    ?25     = { defs={} expr=v7552[1] }
    ?26     = { defs={} expr=v7553[1] }
    ?27     = { defs={} expr=v7554[1] }
    ?28     = { defs={} expr=v7555[1] }
    ?29     = { defs={} expr=v7556[1] }
    ?30     = { defs={} expr=v7557[1] }
    ?31     = { defs={} expr=v7558[1] }
    ip      = { defs={0x080485ba,0x080485bb} expr=0x080485c1[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7517[32] 3[32]) }
      value = { defs={} expr=v7573[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7517[32] 2[32]) }
      value = { defs={} expr=v7572[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7517[32] 1[32]) }
      value = { defs={} expr=v7571[8] }
      flags = { rdonly }
    address = { defs={} expr=v7517[32] }
      value = { defs={} expr=v7570[8] }
      flags = { rdonly }
null state
null state
0x80485c1:call   0x08048390<__do_global_dtors_aux>
registers:
    ax      = { v38980 }
    cx      = { v38981 }
    dx      = { v38982 }
    bx      = { v39035+0x110e }
    sp      = { v38984 }
    bp      = { v38985 }
    si      = { v38986 }
    di      = { v38987 }
    es      = { v38988 }
    cs      = { v38989 }
    ss      = { v38990 }
    ds      = { v38991 }
    fs      = { v38992 }
    gs      = { v38993 }
    cf      = { v39084 }
    ?1      = { v38995 }
    pf      = { -v39075+0x1 }
    ?3      = { v38997 }
    af      = { v39082 }
    ?5      = { v38999 }
    zf      = { v39080 }
    sf      = { v39078 }
    tf      = { v39002 }
    if      = { v39003 }
    df      = { v39004 }
    of      = { v39090 }
    iopl0   = { v39006 }
    iopl1   = { v39007 }
    nt      = { v39008 }
    ?15     = { v39009 }
    rf      = { v39010 }
    vm      = { v39011 }
    ac      = { v39012 }
    vif     = { v39013 }
    vip     = { v39014 }
    id      = { v39015 }
    ?22     = { v39016 }
    ?23     = { v39017 }
    ?24     = { v39018 }
    ?25     = { v39019 }
    ?26     = { v39020 }
    ?27     = { v39021 }
    ?28     = { v39022 }
    ?29     = { v39023 }
    ?30     = { v39024 }
    ?31     = { v39025 }
    ip      = { 0x8048390 }
memory:
    address = { v38984 }
      value = { 0x80485c6 }
      flags = { size=4 }
registers:
    ax      = { defs={} expr=v7513[32] }
    cx      = { defs={} expr=v7514[32] }
    dx      = { defs={} expr=v7515[32] }
    bx      = { defs={0x080485ba,0x080485bb} expr=(add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]) }
    sp      = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v7517[32] 4[32]) -4[32]) }
    bp      = { defs={} expr=v7518[32] }
    si      = { defs={} expr=v7519[32] }
    di      = { defs={} expr=v7520[32] }
    es      = { defs={} expr=v7521[16] }
    cs      = { defs={} expr=v7522[16] }
    ss      = { defs={} expr=v7523[16] }
    ds      = { defs={} expr=v7524[16] }
    fs      = { defs={} expr=v7525[16] }
    gs      = { defs={} expr=v7526[16] }
    cf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) 4366[33]))))) }
    ?1      = { defs={} expr=v7528[1] }
    pf      = { defs={0x080485ba,0x080485bb} expr=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32]))))))) }
    ?3      = { defs={} expr=v7530[1] }
    af      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) 4366[33]))))) }
    ?5      = { defs={} expr=v7532[1] }
    zf      = { defs={0x080485ba,0x080485bb} expr=(zerop[1] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32])) }
    sf      = { defs={0x080485ba,0x080485bb} expr=(extract[1] 31[32] 32[32] (add[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8]))) 4366[32])) }
    tf      = { defs={} expr=v7535[1] }
    if      = { defs={} expr=v7536[1] }
    df      = { defs={} expr=v7537[1] }
    of      = { defs={0x080485ba,0x080485bb} expr=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] (bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7570[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7571[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7572[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7573[8])))) 4366[33])))))) }
    iopl0   = { defs={} expr=v7539[1] }
    iopl1   = { defs={} expr=v7540[1] }
    nt      = { defs={} expr=v7541[1] }
    ?15     = { defs={} expr=v7542[1] }
    rf      = { defs={} expr=v7543[1] }
    vm      = { defs={} expr=v7544[1] }
    ac      = { defs={} expr=v7545[1] }
    vif     = { defs={} expr=v7546[1] }
    vip     = { defs={} expr=v7547[1] }
    id      = { defs={} expr=v7548[1] }
    ?22     = { defs={} expr=v7549[1] }
    ?23     = { defs={} expr=v7550[1] }
    ?24     = { defs={} expr=v7551[1] }
    ?25     = { defs={} expr=v7552[1] }
    ?26     = { defs={} expr=v7553[1] }
    ?27     = { defs={} expr=v7554[1] }
    ?28     = { defs={} expr=v7555[1] }
    ?29     = { defs={} expr=v7556[1] }
    ?30     = { defs={} expr=v7557[1] }
    ?31     = { defs={} expr=v7558[1] }
    ip      = { defs={0x080485c1} expr=0x08048390[32] }
memory:
    address = { defs={} expr=(add[32] (add[32] (add[32] v7517[32] 4[32]) -4[32]) 3[32]) }
      value = { defs={} expr=8[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7517[32] 4[32]) -4[32]) 2[32]) }
      value = { defs={} expr=4[8] }
      flags = { }
    address = { defs={} expr=(add[32] (add[32] (add[32] v7517[32] 4[32]) -4[32]) 1[32]) }
      value = { defs={} expr=-123[8] }
      flags = { }
    address = { defs={0x080485ba,0x080485c1} expr=(add[32] (add[32] v7517[32] 4[32]) -4[32]) }
      value = { defs={} expr=-58[8] }
      flags = { }
init mem:
    address = { defs={} expr=(add[32] v7517[32] 3[32]) }
      value = { defs={} expr=v7573[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7517[32] 2[32]) }
      value = { defs={} expr=v7572[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7517[32] 1[32]) }
      value = { defs={} expr=v7571[8] }
      flags = { rdonly }
    address = { defs={} expr=v7517[32] }
      value = { defs={} expr=v7570[8] }
      flags = { rdonly }
null state
null state
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
registers:
    ax      = { v39205 }
    cx      = { v39151 }
    dx      = { v39152 }
    bx      = { v39153 }
    sp      = { v39154+0x4 }
    bp      = { v39155 }
    si      = { v39156 }
    di      = { v39157 }
    es      = { v39158 }
    cs      = { v39159 }
    ss      = { v39160 }
    ds      = { v39161 }
    fs      = { v39162 }
    gs      = { v39163 }
    cf      = { v39164 }
    ?1      = { v39165 }
    pf      = { v39166 }
    ?3      = { v39167 }
    af      = { v39168 }
    ?5      = { v39169 }
    zf      = { v39170 }
    sf      = { v39171 }
    tf      = { v39172 }
    if      = { v39173 }
    df      = { v39174 }
    of      = { v39175 }
    iopl0   = { v39176 }
    iopl1   = { v39177 }
    nt      = { v39178 }
    ?15     = { v39179 }
    rf      = { v39180 }
    vm      = { v39181 }
    ac      = { v39182 }
    vif     = { v39183 }
    vip     = { v39184 }
    id      = { v39185 }
    ?22     = { v39186 }
    ?23     = { v39187 }
    ?24     = { v39188 }
    ?25     = { v39189 }
    ?26     = { v39190 }
    ?27     = { v39191 }
    ?28     = { v39192 }
    ?29     = { v39193 }
    ?30     = { v39194 }
    ?31     = { v39195 }
    ip      = { 0x80485c7 }
memory:
    address = { v39154 }
      value = { v39205 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7727[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7728[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7729[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7730[8]))) }
    cx      = { defs={} expr=v7671[32] }
    dx      = { defs={} expr=v7672[32] }
    bx      = { defs={} expr=v7673[32] }
    sp      = { defs={0x080485c6} expr=(add[32] v7674[32] 4[32]) }
    bp      = { defs={} expr=v7675[32] }
    si      = { defs={} expr=v7676[32] }
    di      = { defs={} expr=v7677[32] }
    es      = { defs={} expr=v7678[16] }
    cs      = { defs={} expr=v7679[16] }
    ss      = { defs={} expr=v7680[16] }
    ds      = { defs={} expr=v7681[16] }
    fs      = { defs={} expr=v7682[16] }
    gs      = { defs={} expr=v7683[16] }
    cf      = { defs={} expr=v7684[1] }
    ?1      = { defs={} expr=v7685[1] }
    pf      = { defs={} expr=v7686[1] }
    ?3      = { defs={} expr=v7687[1] }
    af      = { defs={} expr=v7688[1] }
    ?5      = { defs={} expr=v7689[1] }
    zf      = { defs={} expr=v7690[1] }
    sf      = { defs={} expr=v7691[1] }
    tf      = { defs={} expr=v7692[1] }
    if      = { defs={} expr=v7693[1] }
    df      = { defs={} expr=v7694[1] }
    of      = { defs={} expr=v7695[1] }
    iopl0   = { defs={} expr=v7696[1] }
    iopl1   = { defs={} expr=v7697[1] }
    nt      = { defs={} expr=v7698[1] }
    ?15     = { defs={} expr=v7699[1] }
    rf      = { defs={} expr=v7700[1] }
    vm      = { defs={} expr=v7701[1] }
    ac      = { defs={} expr=v7702[1] }
    vif     = { defs={} expr=v7703[1] }
    vip     = { defs={} expr=v7704[1] }
    id      = { defs={} expr=v7705[1] }
    ?22     = { defs={} expr=v7706[1] }
    ?23     = { defs={} expr=v7707[1] }
    ?24     = { defs={} expr=v7708[1] }
    ?25     = { defs={} expr=v7709[1] }
    ?26     = { defs={} expr=v7710[1] }
    ?27     = { defs={} expr=v7711[1] }
    ?28     = { defs={} expr=v7712[1] }
    ?29     = { defs={} expr=v7713[1] }
    ?30     = { defs={} expr=v7714[1] }
    ?31     = { defs={} expr=v7715[1] }
    ip      = { defs={0x080485c6} expr=0x080485c7[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7674[32] 3[32]) }
      value = { defs={} expr=v7730[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 2[32]) }
      value = { defs={} expr=v7729[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 1[32]) }
      value = { defs={} expr=v7728[8] }
      flags = { rdonly }
    address = { defs={} expr=v7674[32] }
      value = { defs={} expr=v7727[8] }
      flags = { rdonly }
null state
null state
0x80485c7:pop    ebx
registers:
    ax      = { v39205 }
    cx      = { v39151 }
    dx      = { v39152 }
    bx      = { v39215 }
    sp      = { v39154+0x8 }
    bp      = { v39155 }
    si      = { v39156 }
    di      = { v39157 }
    es      = { v39158 }
    cs      = { v39159 }
    ss      = { v39160 }
    ds      = { v39161 }
    fs      = { v39162 }
    gs      = { v39163 }
    cf      = { v39164 }
    ?1      = { v39165 }
    pf      = { v39166 }
    ?3      = { v39167 }
    af      = { v39168 }
    ?5      = { v39169 }
    zf      = { v39170 }
    sf      = { v39171 }
    tf      = { v39172 }
    if      = { v39173 }
    df      = { v39174 }
    of      = { v39175 }
    iopl0   = { v39176 }
    iopl1   = { v39177 }
    nt      = { v39178 }
    ?15     = { v39179 }
    rf      = { v39180 }
    vm      = { v39181 }
    ac      = { v39182 }
    vif     = { v39183 }
    vip     = { v39184 }
    id      = { v39185 }
    ?22     = { v39186 }
    ?23     = { v39187 }
    ?24     = { v39188 }
    ?25     = { v39189 }
    ?26     = { v39190 }
    ?27     = { v39191 }
    ?28     = { v39192 }
    ?29     = { v39193 }
    ?30     = { v39194 }
    ?31     = { v39195 }
    ip      = { 0x80485c8 }
memory:
    address = { v39154 }
      value = { v39205 }
      flags = { size=4; read-only }
    address = { v39154+0x4 }
      value = { v39215 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7727[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7728[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7729[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7730[8]))) }
    cx      = { defs={} expr=v7671[32] }
    dx      = { defs={} expr=v7672[32] }
    bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7749[8]))) }
    sp      = { defs={0x080485c6,0x080485c7} expr=(add[32] (add[32] v7674[32] 4[32]) 4[32]) }
    bp      = { defs={} expr=v7675[32] }
    si      = { defs={} expr=v7676[32] }
    di      = { defs={} expr=v7677[32] }
    es      = { defs={} expr=v7678[16] }
    cs      = { defs={} expr=v7679[16] }
    ss      = { defs={} expr=v7680[16] }
    ds      = { defs={} expr=v7681[16] }
    fs      = { defs={} expr=v7682[16] }
    gs      = { defs={} expr=v7683[16] }
    cf      = { defs={} expr=v7684[1] }
    ?1      = { defs={} expr=v7685[1] }
    pf      = { defs={} expr=v7686[1] }
    ?3      = { defs={} expr=v7687[1] }
    af      = { defs={} expr=v7688[1] }
    ?5      = { defs={} expr=v7689[1] }
    zf      = { defs={} expr=v7690[1] }
    sf      = { defs={} expr=v7691[1] }
    tf      = { defs={} expr=v7692[1] }
    if      = { defs={} expr=v7693[1] }
    df      = { defs={} expr=v7694[1] }
    of      = { defs={} expr=v7695[1] }
    iopl0   = { defs={} expr=v7696[1] }
    iopl1   = { defs={} expr=v7697[1] }
    nt      = { defs={} expr=v7698[1] }
    ?15     = { defs={} expr=v7699[1] }
    rf      = { defs={} expr=v7700[1] }
    vm      = { defs={} expr=v7701[1] }
    ac      = { defs={} expr=v7702[1] }
    vif     = { defs={} expr=v7703[1] }
    vip     = { defs={} expr=v7704[1] }
    id      = { defs={} expr=v7705[1] }
    ?22     = { defs={} expr=v7706[1] }
    ?23     = { defs={} expr=v7707[1] }
    ?24     = { defs={} expr=v7708[1] }
    ?25     = { defs={} expr=v7709[1] }
    ?26     = { defs={} expr=v7710[1] }
    ?27     = { defs={} expr=v7711[1] }
    ?28     = { defs={} expr=v7712[1] }
    ?29     = { defs={} expr=v7713[1] }
    ?30     = { defs={} expr=v7714[1] }
    ?31     = { defs={} expr=v7715[1] }
    ip      = { defs={0x080485c6,0x080485c7} expr=0x080485c8[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v7674[32] 4[32]) 3[32]) }
      value = { defs={} expr=v7749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7674[32] 4[32]) 2[32]) }
      value = { defs={} expr=v7748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7674[32] 4[32]) 1[32]) }
      value = { defs={} expr=v7747[8] }
      flags = { rdonly }
    address = { defs={0x080485c6} expr=(add[32] v7674[32] 4[32]) }
      value = { defs={} expr=v7746[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 3[32]) }
      value = { defs={} expr=v7730[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 2[32]) }
      value = { defs={} expr=v7729[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 1[32]) }
      value = { defs={} expr=v7728[8] }
      flags = { rdonly }
    address = { defs={} expr=v7674[32] }
      value = { defs={} expr=v7727[8] }
      flags = { rdonly }
null state
null state
0x80485c8:leave  
registers:
    ax      = { v39205 }
    cx      = { v39151 }
    dx      = { v39152 }
    bx      = { v39215 }
    sp      = { v39155+0x4 }
    bp      = { v39226 }
    si      = { v39156 }
    di      = { v39157 }
    es      = { v39158 }
    cs      = { v39159 }
    ss      = { v39160 }
    ds      = { v39161 }
    fs      = { v39162 }
    gs      = { v39163 }
    cf      = { v39164 }
    ?1      = { v39165 }
    pf      = { v39166 }
    ?3      = { v39167 }
    af      = { v39168 }
    ?5      = { v39169 }
    zf      = { v39170 }
    sf      = { v39171 }
    tf      = { v39172 }
    if      = { v39173 }
    df      = { v39174 }
    of      = { v39175 }
    iopl0   = { v39176 }
    iopl1   = { v39177 }
    nt      = { v39178 }
    ?15     = { v39179 }
    rf      = { v39180 }
    vm      = { v39181 }
    ac      = { v39182 }
    vif     = { v39183 }
    vip     = { v39184 }
    id      = { v39185 }
    ?22     = { v39186 }
    ?23     = { v39187 }
    ?24     = { v39188 }
    ?25     = { v39189 }
    ?26     = { v39190 }
    ?27     = { v39191 }
    ?28     = { v39192 }
    ?29     = { v39193 }
    ?30     = { v39194 }
    ?31     = { v39195 }
    ip      = { 0x80485c9 }
memory:
    address = { v39154 }
      value = { v39205 }
      flags = { size=4; read-only }
    address = { v39154+0x4 }
      value = { v39215 }
      flags = { size=4; read-only }
    address = { v39155 }
      value = { v39226 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7727[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7728[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7729[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7730[8]))) }
    cx      = { defs={} expr=v7671[32] }
    dx      = { defs={} expr=v7672[32] }
    bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7749[8]))) }
    sp      = { defs={0x080485c8} expr=(add[32] v7675[32] 4[32]) }
    bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7766[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7767[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7768[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7769[8]))) }
    si      = { defs={} expr=v7676[32] }
    di      = { defs={} expr=v7677[32] }
    es      = { defs={} expr=v7678[16] }
    cs      = { defs={} expr=v7679[16] }
    ss      = { defs={} expr=v7680[16] }
    ds      = { defs={} expr=v7681[16] }
    fs      = { defs={} expr=v7682[16] }
    gs      = { defs={} expr=v7683[16] }
    cf      = { defs={} expr=v7684[1] }
    ?1      = { defs={} expr=v7685[1] }
    pf      = { defs={} expr=v7686[1] }
    ?3      = { defs={} expr=v7687[1] }
    af      = { defs={} expr=v7688[1] }
    ?5      = { defs={} expr=v7689[1] }
    zf      = { defs={} expr=v7690[1] }
    sf      = { defs={} expr=v7691[1] }
    tf      = { defs={} expr=v7692[1] }
    if      = { defs={} expr=v7693[1] }
    df      = { defs={} expr=v7694[1] }
    of      = { defs={} expr=v7695[1] }
    iopl0   = { defs={} expr=v7696[1] }
    iopl1   = { defs={} expr=v7697[1] }
    nt      = { defs={} expr=v7698[1] }
    ?15     = { defs={} expr=v7699[1] }
    rf      = { defs={} expr=v7700[1] }
    vm      = { defs={} expr=v7701[1] }
    ac      = { defs={} expr=v7702[1] }
    vif     = { defs={} expr=v7703[1] }
    vip     = { defs={} expr=v7704[1] }
    id      = { defs={} expr=v7705[1] }
    ?22     = { defs={} expr=v7706[1] }
    ?23     = { defs={} expr=v7707[1] }
    ?24     = { defs={} expr=v7708[1] }
    ?25     = { defs={} expr=v7709[1] }
    ?26     = { defs={} expr=v7710[1] }
    ?27     = { defs={} expr=v7711[1] }
    ?28     = { defs={} expr=v7712[1] }
    ?29     = { defs={} expr=v7713[1] }
    ?30     = { defs={} expr=v7714[1] }
    ?31     = { defs={} expr=v7715[1] }
    ip      = { defs={0x080485c6,0x080485c7,0x080485c8} expr=0x080485c9[32] }
memory:
init mem:
    address = { defs={} expr=(add[32] v7675[32] 3[32]) }
      value = { defs={} expr=v7769[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7675[32] 2[32]) }
      value = { defs={} expr=v7768[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7675[32] 1[32]) }
      value = { defs={} expr=v7767[8] }
      flags = { rdonly }
    address = { defs={0x080485c8} expr=v7675[32] }
      value = { defs={} expr=v7766[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7674[32] 4[32]) 3[32]) }
      value = { defs={} expr=v7749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7674[32] 4[32]) 2[32]) }
      value = { defs={} expr=v7748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7674[32] 4[32]) 1[32]) }
      value = { defs={} expr=v7747[8] }
      flags = { rdonly }
    address = { defs={0x080485c6} expr=(add[32] v7674[32] 4[32]) }
      value = { defs={} expr=v7746[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 3[32]) }
      value = { defs={} expr=v7730[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 2[32]) }
      value = { defs={} expr=v7729[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 1[32]) }
      value = { defs={} expr=v7728[8] }
      flags = { rdonly }
    address = { defs={} expr=v7674[32] }
      value = { defs={} expr=v7727[8] }
      flags = { rdonly }
null state
null state
0x80485c9:ret    
registers:
    ax      = { v39205 }
    cx      = { v39151 }
    dx      = { v39152 }
    bx      = { v39215 }
    sp      = { v39155+0x8 }
    bp      = { v39226 }
    si      = { v39156 }
    di      = { v39157 }
    es      = { v39158 }
    cs      = { v39159 }
    ss      = { v39160 }
    ds      = { v39161 }
    fs      = { v39162 }
    gs      = { v39163 }
    cf      = { v39164 }
    ?1      = { v39165 }
    pf      = { v39166 }
    ?3      = { v39167 }
    af      = { v39168 }
    ?5      = { v39169 }
    zf      = { v39170 }
    sf      = { v39171 }
    tf      = { v39172 }
    if      = { v39173 }
    df      = { v39174 }
    of      = { v39175 }
    iopl0   = { v39176 }
    iopl1   = { v39177 }
    nt      = { v39178 }
    ?15     = { v39179 }
    rf      = { v39180 }
    vm      = { v39181 }
    ac      = { v39182 }
    vif     = { v39183 }
    vip     = { v39184 }
    id      = { v39185 }
    ?22     = { v39186 }
    ?23     = { v39187 }
    ?24     = { v39188 }
    ?25     = { v39189 }
    ?26     = { v39190 }
    ?27     = { v39191 }
    ?28     = { v39192 }
    ?29     = { v39193 }
    ?30     = { v39194 }
    ?31     = { v39195 }
    ip      = { v39238 }
memory:
    address = { v39154 }
      value = { v39205 }
      flags = { size=4; read-only }
    address = { v39154+0x4 }
      value = { v39215 }
      flags = { size=4; read-only }
    address = { v39155 }
      value = { v39226 }
      flags = { size=4; read-only }
    address = { v39155+0x4 }
      value = { v39238 }
      flags = { size=4; read-only }
registers:
    ax      = { defs={0x080485c6} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7727[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7728[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7729[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7730[8]))) }
    cx      = { defs={} expr=v7671[32] }
    dx      = { defs={} expr=v7672[32] }
    bx      = { defs={0x080485c7} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7746[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7747[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7748[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7749[8]))) }
    sp      = { defs={0x080485c8,0x080485c9} expr=(add[32] (add[32] v7675[32] 4[32]) 4[32]) }
    bp      = { defs={0x080485c8} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7766[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7767[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7768[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7769[8]))) }
    si      = { defs={} expr=v7676[32] }
    di      = { defs={} expr=v7677[32] }
    es      = { defs={} expr=v7678[16] }
    cs      = { defs={} expr=v7679[16] }
    ss      = { defs={} expr=v7680[16] }
    ds      = { defs={} expr=v7681[16] }
    fs      = { defs={} expr=v7682[16] }
    gs      = { defs={} expr=v7683[16] }
    cf      = { defs={} expr=v7684[1] }
    ?1      = { defs={} expr=v7685[1] }
    pf      = { defs={} expr=v7686[1] }
    ?3      = { defs={} expr=v7687[1] }
    af      = { defs={} expr=v7688[1] }
    ?5      = { defs={} expr=v7689[1] }
    zf      = { defs={} expr=v7690[1] }
    sf      = { defs={} expr=v7691[1] }
    tf      = { defs={} expr=v7692[1] }
    if      = { defs={} expr=v7693[1] }
    df      = { defs={} expr=v7694[1] }
    of      = { defs={} expr=v7695[1] }
    iopl0   = { defs={} expr=v7696[1] }
    iopl1   = { defs={} expr=v7697[1] }
    nt      = { defs={} expr=v7698[1] }
    ?15     = { defs={} expr=v7699[1] }
    rf      = { defs={} expr=v7700[1] }
    vm      = { defs={} expr=v7701[1] }
    ac      = { defs={} expr=v7702[1] }
    vif     = { defs={} expr=v7703[1] }
    vip     = { defs={} expr=v7704[1] }
    id      = { defs={} expr=v7705[1] }
    ?22     = { defs={} expr=v7706[1] }
    ?23     = { defs={} expr=v7707[1] }
    ?24     = { defs={} expr=v7708[1] }
    ?25     = { defs={} expr=v7709[1] }
    ?26     = { defs={} expr=v7710[1] }
    ?27     = { defs={} expr=v7711[1] }
    ?28     = { defs={} expr=v7712[1] }
    ?29     = { defs={} expr=v7713[1] }
    ?30     = { defs={} expr=v7714[1] }
    ?31     = { defs={} expr=v7715[1] }
    ip      = { defs={0x080485c9} expr=(bv-or[32] (bv-or[32] (bv-or[32] (uextend[32] 32[32] v7787[8]) (shr0[32] 8[32] (uextend[32] 32[32] v7788[8]))) (shr0[32] 16[32] (uextend[32] 32[32] v7789[8]))) (shr0[32] 24[32] (uextend[32] 32[32] v7790[8]))) }
memory:
init mem:
    address = { defs={} expr=(add[32] (add[32] v7675[32] 4[32]) 3[32]) }
      value = { defs={} expr=v7790[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7675[32] 4[32]) 2[32]) }
      value = { defs={} expr=v7789[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7675[32] 4[32]) 1[32]) }
      value = { defs={} expr=v7788[8] }
      flags = { rdonly }
    address = { defs={0x080485c8} expr=(add[32] v7675[32] 4[32]) }
      value = { defs={} expr=v7787[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7675[32] 3[32]) }
      value = { defs={} expr=v7769[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7675[32] 2[32]) }
      value = { defs={} expr=v7768[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7675[32] 1[32]) }
      value = { defs={} expr=v7767[8] }
      flags = { rdonly }
    address = { defs={0x080485c8} expr=v7675[32] }
      value = { defs={} expr=v7766[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7674[32] 4[32]) 3[32]) }
      value = { defs={} expr=v7749[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7674[32] 4[32]) 2[32]) }
      value = { defs={} expr=v7748[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] (add[32] v7674[32] 4[32]) 1[32]) }
      value = { defs={} expr=v7747[8] }
      flags = { rdonly }
    address = { defs={0x080485c6} expr=(add[32] v7674[32] 4[32]) }
      value = { defs={} expr=v7746[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 3[32]) }
      value = { defs={} expr=v7730[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 2[32]) }
      value = { defs={} expr=v7729[8] }
      flags = { rdonly }
    address = { defs={} expr=(add[32] v7674[32] 1[32]) }
      value = { defs={} expr=v7728[8] }
      flags = { rdonly }
    address = { defs={} expr=v7674[32] }
      value = { defs={} expr=v7727[8] }
      flags = { rdonly }
null state
null state
analyzed headers: 1
