
This is an experimental project to use a graph coloring algorithm to optimize scratch pad memory usage.

The basic idea is to reproduce and improve on the work described by:
* LI, L., GAO, L., AND XUE, J. 2005. Memory coloring: A compiler approach for scratch-pad memory management. In Proceedings of the 14th International Conference on Parallel Architectures and Compilation Techniques (PACT’05). IEEE, Los Alamitos, CA, 329–338. 

This paper in turn uses other algorithms mentioned by:
* Lal George and Andrew W. Appel. 1996. Iterated register coalescing. ACM Trans. Program. Lang. Syst. 18, 3 (May 1996), 300-324., 
* PARK, J. AND MOON, S.-M. 2004. Optimistic register coalescing. ACM Trans. Program. Lang. Syst. 26, 4, 735–765.
* M. D. Smith, N. Ramsey, and G. Holloway. A generalized algorithm for graph-coloring register allocation. In Proceedings of the ACMSIGPLAN 2004 conference on Programming language design and implementation, pages 277–288. ACM Press, 2004. 

The entire work is rather sophisticated so this project is structured to go through several incremental phases:
* Phase 1: implement the baseline iterated register allocation algorithm proposed by George'96.
* Phase 2: implement the generalized register allocation algorithm described by Smith'04.
* Phase 3: implement the graph coloring-based scratch-pad memory management described in Li'05. 
* Phase 4 (optional): implement the optimistic register coalescing described by Park'04.


==Baseline iterated register allocation==
  LivenessAnalysis()
  BuildInterferenceGraph()

by Chunhua (Leo) Liao, May 14, 2012
