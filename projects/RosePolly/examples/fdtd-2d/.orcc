#include <omp.h>

	#define S1(zT0,zT1,zT2,t,j)	ey[0][j]=t;
	#define S2(zT0,zT1,zT2,t,i,j)	ey[i][j]=ey[i][j]-0.5*(hz[i][j]-hz[i-1][j]);
	#define S3(zT0,zT1,zT2,t,i,j)	ex[i][j]=ex[i][j]-0.5*(hz[i][j]-hz[i][j-1]);
	#define S4(zT0,zT1,zT2,t,i,j)	hz[i][j]=hz[i][j]-0.7*(ex[i][j+1]-ex[i][j]+ey[i+1][j]-ey[i][j]);

		int t0, t1, t2, t3, t4, t4t, newlb_t4, newub_t4, t5, t5t, newlb_t5, newub_t5;

	register int lb, ub, lb1, ub1, lb2, ub2;
	register int lbv, ubv;

/* Generated from PLUTO-produced CLooG file by CLooG v0.14.1 64 bits in 0.54s. */
for (t0=-1;t0<=floord(2*tmax+ny-2,32);t0++) {
	lb1=max(max(ceild(32*t0-31,64),ceild(32*t0-tmax+1,32)),0);
	ub1=min(min(floord(32*t0+31,32),floord(32*t0+ny+31,64)),floord(tmax+ny-1,32));
#pragma omp parallel for shared(t0,lb1,ub1) private(t1,t2,t3,t4,t5)
	for (t1=lb1; t1<=ub1; t1++) {
    for (t2=max(max(ceild(32*t1-ny-30,32),0),ceild(32*t0-32*t1-31,32));t2<=min(min(floord(32*t0-32*t1+nx+31,32),floord(32*t1+nx+30,32)),floord(tmax+nx-1,32));t2++) {
      if ((t0 <= floord(32*t1+32*t2-nx,32)) && (t1 <= floord(32*t2+ny-nx,32)) && (t2 >= ceild(nx,32))) {
        for (t4=max(32*t2-nx+1,32*t1);t4<=min(32*t1+31,32*t2+ny-nx);t4++) {
          S4(t0-t1,t1,t2,32*t2-nx,nx-1,-32*t2+t4+nx-1) ;
        }
      }
      if ((t0 <= floord(64*t1-ny,32)) && (t1 >= max(ceild(32*t2+ny-nx+1,32),ceild(ny,32)))) {
        for (t5=max(32*t1-ny+1,32*t2);t5<=min(32*t1-ny+nx,32*t2+31);t5++) {
          S4(t0-t1,t1,t2,32*t1-ny,-32*t1+t5+ny-1,ny-1) ;
        }
      }
      for (t3=max(max(max(32*t0-32*t1,32*t2-nx+1),32*t1-ny+1),0);t3<=min(min(min(32*t2-nx+31,tmax-1),32*t0-32*t1+31),32*t1-ny+31);t3++) {
        for (t4=32*t1;t4<=t3+ny-1;t4++) {
          for (t5=32*t2;t5<=t3+nx-1;t5++) {
            S2(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S3(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S4(t0-t1,t1,t2,t3,-t3+t5-1,-t3+t4-1) ;
          }
          S4(t0-t1,t1,t2,t3,nx-1,-t3+t4-1) ;
        }
        for (t5=32*t2;t5<=t3+nx;t5++) {
          S4(t0-t1,t1,t2,t3,-t3+t5-1,ny-1) ;
        }
      }
      for (t3=max(max(max(0,32*t2-nx+1),32*t0-32*t1),32*t1-ny+32);t3<=min(min(min(32*t0-32*t1+31,tmax-1),32*t1-1),32*t2-nx+31);t3++) {
        for (t4=32*t1;t4<=32*t1+31;t4++) {
          for (t5=32*t2;t5<=t3+nx-1;t5++) {
            S2(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S3(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S4(t0-t1,t1,t2,t3,-t3+t5-1,-t3+t4-1) ;
          }
          S4(t0-t1,t1,t2,t3,nx-1,-t3+t4-1) ;
        }
      }
      for (t3=max(max(max(32*t2-nx+32,32*t0-32*t1),32*t1-ny+1),0);t3<=min(min(min(tmax-1,32*t0-32*t1+31),32*t1-ny+31),32*t2-1);t3++) {
        for (t4=32*t1;t4<=t3+ny-1;t4++) {
          for (t5=32*t2;t5<=32*t2+31;t5++) {
            S2(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S3(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S4(t0-t1,t1,t2,t3,-t3+t5-1,-t3+t4-1) ;
          }
        }
        for (t5=32*t2;t5<=32*t2+31;t5++) {
          S4(t0-t1,t1,t2,t3,-t3+t5-1,ny-1) ;
        }
      }
      for (t3=max(max(max(32*t1,0),32*t2-nx+1),32*t0-32*t1);t3<=min(min(min(32*t0-32*t1+31,32*t1+30),tmax-1),32*t2-nx+31);t3++) {
        for (t5=32*t2;t5<=t3+nx-1;t5++) {
          S2(t0-t1,t1,t2,t3,-t3+t5,0) ;
        }
        for (t4=t3+1;t4<=32*t1+31;t4++) {
          for (t5=32*t2;t5<=t3+nx-1;t5++) {
            S2(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S3(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S4(t0-t1,t1,t2,t3,-t3+t5-1,-t3+t4-1) ;
          }
          S4(t0-t1,t1,t2,t3,nx-1,-t3+t4-1) ;
        }
      }
      for (t3=max(max(max(0,32*t0-32*t1),32*t2-nx+32),32*t1-ny+32);t3<=min(min(min(32*t2-1,32*t0-32*t1+31),tmax-1),32*t1-1);t3++) {
/*@ begin Loop(
	transform RegTile(loops=['t4','t5'], ufactors=[8,8])
        for (t4=32*t1;t4<=32*t1+31;t4++) 
          for (t5=32*t2;t5<=32*t2+31;t5++) 
{
            S2(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S3(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S4(t0-t1,t1,t2,t3,-t3+t5-1,-t3+t4-1) ;
}
) @*/
        for (t4=32*t1;t4<=32*t1+31;t4++) {
          for (t5=32*t2;t5<=32*t2+31;t5++) {
            S2(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S3(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S4(t0-t1,t1,t2,t3,-t3+t5-1,-t3+t4-1) ;
          }
        }
/*@ end @*/
      }
      for (t3=max(max(max(32*t1,32*t2-nx+32),0),32*t0-32*t1);t3<=min(min(min(32*t2-1,32*t0-32*t1+31),32*t1+30),tmax-1);t3++) {
        for (t5=32*t2;t5<=32*t2+31;t5++) {
          S2(t0-t1,t1,t2,t3,-t3+t5,0) ;
        }
        for (t4=t3+1;t4<=32*t1+31;t4++) {
          for (t5=32*t2;t5<=32*t2+31;t5++) {
            S2(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S3(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S4(t0-t1,t1,t2,t3,-t3+t5-1,-t3+t4-1) ;
          }
        }
      }
      for (t3=max(max(max(32*t0-32*t1,32*t2),32*t1-ny+1),0);t3<=min(min(min(32*t1-ny+31,tmax-1),32*t0-32*t1+31),32*t2+30);t3++) {
        for (t4=32*t1;t4<=t3+ny-1;t4++) {
          S1(t0-t1,t1,t2,t3,-t3+t4) ;
          S3(t0-t1,t1,t2,t3,0,-t3+t4) ;
          for (t5=t3+1;t5<=32*t2+31;t5++) {
            S2(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S3(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S4(t0-t1,t1,t2,t3,-t3+t5-1,-t3+t4-1) ;
          }
        }
        for (t5=t3+1;t5<=32*t2+31;t5++) {
          S4(t0-t1,t1,t2,t3,-t3+t5-1,ny-1) ;
        }
      }
      for (t3=max(max(max(32*t2,32*t0-32*t1),0),32*t1-ny+32);t3<=min(min(min(tmax-1,32*t0-32*t1+31),32*t2+30),32*t1-1);t3++) {
        for (t4=32*t1;t4<=32*t1+31;t4++) {
          S1(t0-t1,t1,t2,t3,-t3+t4) ;
          S3(t0-t1,t1,t2,t3,0,-t3+t4) ;
          for (t5=t3+1;t5<=32*t2+31;t5++) {
            S2(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S3(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S4(t0-t1,t1,t2,t3,-t3+t5-1,-t3+t4-1) ;
          }
        }
      }
      for (t3=max(max(max(32*t1,32*t2),32*t0-32*t1),0);t3<=min(min(min(tmax-1,32*t0-32*t1+31),32*t1+30),32*t2+30);t3++) {
        S1(t0-t1,t1,t2,t3,0) ;
        for (t5=t3+1;t5<=32*t2+31;t5++) {
          S2(t0-t1,t1,t2,t3,-t3+t5,0) ;
        }
        for (t4=t3+1;t4<=32*t1+31;t4++) {
          S1(t0-t1,t1,t2,t3,-t3+t4) ;
          S3(t0-t1,t1,t2,t3,0,-t3+t4) ;
          for (t5=t3+1;t5<=32*t2+31;t5++) {
            S2(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S3(t0-t1,t1,t2,t3,-t3+t5,-t3+t4) ;
            S4(t0-t1,t1,t2,t3,-t3+t5-1,-t3+t4-1) ;
          }
        }
      }
      if ((t0 >= 2*t1) && (t1 <= min(floord(tmax-32,32),t2-1))) {
        for (t5=32*t2;t5<=min(32*t1+nx+30,32*t2+31);t5++) {
          S2(t0-t1,t1,t2,32*t1+31,-32*t1+t5-31,0) ;
        }
      }
      if ((t0 >= 2*t1) && (t1 <= min(floord(32*t2-1,32),floord(tmax-32,32))) && (t1 >= ceild(32*t2-31,32))) {
        S1(t0-t1,t1,t2,32*t1+31,0) ;
        for (t5=32*t1+32;t5<=32*t2+31;t5++) {
          S2(t0-t1,t1,t2,32*t1+31,-32*t1+t5-31,0) ;
        }
      }
      if ((t0 >= t1+t2) && (t1 <= floord(32*t2+31,32)) && (t1 >= ceild(32*t2+1,32)) && (t2 <= floord(tmax-32,32))) {
        S1(t0-t1,t1,t2,32*t2+31,0) ;
        for (t4=32*t2+32;t4<=32*t1+31;t4++) {
          S1(t0-t1,t1,t2,32*t2+31,-32*t2+t4-31) ;
          S3(t0-t1,t1,t2,32*t2+31,0,-32*t2+t4-31) ;
        }
      }
      if ((t0 >= t1+t2) && (t1 >= t2+1) && (t2 <= floord(tmax-32,32))) {
        for (t4=32*t1;t4<=min(32*t1+31,32*t2+ny+30);t4++) {
          S1(t0-t1,t1,t2,32*t2+31,-32*t2+t4-31) ;
          S3(t0-t1,t1,t2,32*t2+31,0,-32*t2+t4-31) ;
        }
      }
      if ((t0 >= 2*t1) && (-t1 == -t2) && (t1 <= floord(tmax-32,32))) {
        S1(t0-t1,t1,t1,32*t1+31,0) ;
      }
    }
  }
}
/* End of CLooG code */
