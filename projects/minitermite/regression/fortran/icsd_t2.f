# 1 "icsd_t2.F"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "icsd_t2.F"
      SUBROUTINE icsd_t2(d_f1,d_i0,d_t1,d_t2,d_v2,k_f1_offset,k_i0_offse
     &t,k_t1_offset,k_t2_offset,k_v2_offset,size_t1,size_t2,d_c2)

c      SUBROUTINE icsd_t2(d_f1,d_i0,d_t1,d_t2,d_v2,k_f1_offset,k_i0_offse
c     &t,k_t1_offset,k_t2_offset,k_v2_offset)

C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_v + = 1 * v ( p3 p4 h1 h2 )_v                                                         DONE
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( h10 ) * t ( p3 h10 )_t * i1 ( h10 p4 h1 h2 )_v             DONE
C         i1 ( h10 p3 h1 h2 )_v + = 1 * v ( h10 p3 h1 h2 )_v                                                   DONE
C         i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( h11 ) * t ( p3 h11 )_t * i2 ( h10 h11 h1 h2 )_v               DONE
C             i2 ( h10 h11 h1 h2 )_v + = -1 * v ( h10 h11 h1 h2 )_v                                            DONE
C             i2 ( h10 h11 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i3 ( h10 h11 h2 p5 )_v
C                 i3 ( h10 h11 h1 p5 )_v + = 1 * v ( h10 h11 h1 p5 )_v                                         DONE
C                 i3 ( h10 h11 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 h11 p5 p6 )_v
C             i2 ( h10 h11 h1 h2 )_vt + = -1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h10 h11 p7 p8 )_v
C         i1 ( h10 p3 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i2 ( h10 p3 h2 p5 )_v
C             i2 ( h10 p3 h1 p5 )_v + = 1 * v ( h10 p3 h1 p5 )_v                                               DONE
C             i2 ( h10 p3 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 p3 p5 p6 )_v
C         i1 ( h10 p3 h1 h2 )_ft + = -1 * Sum ( p5 ) * t ( p3 p5 h1 h2 )_t * i2 ( h10 p5 )_f
C             i2 ( h10 p5 )_f + = 1 * f ( h10 p5 )_f                                                           DONE
C             i2 ( h10 p5 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h10 p5 p6 )_v
C         i1 ( h10 p3 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( h7 p9 ) * t ( p3 p9 h1 h7 )_t * i2 ( h7 h10 h2 p9 )_v
C             i2 ( h7 h10 h1 p9 )_v + = 1 * v ( h7 h10 h1 p9 )_v                                               DONE
C             i2 ( h7 h10 h1 p9 )_vt + = 1 * Sum ( p5 ) * t ( p5 h1 )_t * v ( h7 h10 p5 p9 )_v
C         i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( h10 p3 p5 p6 )_v
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i1 ( p3 p4 h2 p5 )_v               UNUSED (NOPE)
C         i1 ( p3 p4 h1 p5 )_v + = 1 * v ( p3 p4 h1 p5 )_v                                                    UNUSED (NOPE)
C         i1 ( p3 p4 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( p3 p4 p5 p6 )_v                   UNUSED (NOPE)
C     i0 ( p3 p4 h1 h2 )_tf + = -1 * P( 2 ) * Sum ( h9 ) * t ( p3 p4 h1 h9 )_t * i1 ( h9 h2 )_f
C         i1 ( h9 h1 )_f + = 1 * f ( h9 h1 )_f                                                                 DONE
C         i1 ( h9 h1 )_ft + = 1 * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h9 p8 )_f                                  DONE
C             i2 ( h9 p8 )_f + = 1 * f ( h9 p8 )_f                                                             DONE
C             i2 ( h9 p8 )_vt + = 1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h9 p6 p8 )_v
C         i1 ( h9 h1 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h9 h1 p6 )_v
C         i1 ( h9 h1 )_vt + = -1/2 * Sum ( h8 p6 p7 ) * t ( p6 p7 h1 h8 )_t * v ( h8 h9 p6 p7 )_v
C     i0 ( p3 p4 h1 h2 )_tf + = 1 * P( 2 ) * Sum ( p5 ) * t ( p3 p5 h1 h2 )_t * i1 ( p4 p5 )_f                 DONE
C         i1 ( p3 p5 )_f + = 1 * f ( p3 p5 )_f                                                                 DONE
C         i1 ( p3 p5 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 p3 p5 p6 )_v
C         i1 ( p3 p5 )_vt + = -1/2 * Sum ( h7 h8 p6 ) * t ( p3 p6 h7 h8 )_t * v ( h7 h8 p5 p6 )_v
C     i0 ( p3 p4 h1 h2 )_vt + = -1/2 * Sum ( h11 h9 ) * t ( p3 p4 h9 h11 )_t * i1 ( h9 h11 h1 h2 )_v
C         i1 ( h9 h11 h1 h2 )_v + = -1 * v ( h9 h11 h1 h2 )_v                                                  DONE
C         i1 ( h9 h11 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h9 h11 h2 p8 )_v
C             i2 ( h9 h11 h1 p8 )_v + = 1 * v ( h9 h11 h1 p8 )_v                                               DONE
C             i2 ( h9 h11 h1 p8 )_vt + = 1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h9 h11 p6 p8 )_v
C         i1 ( h9 h11 h1 h2 )_vt + = -1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( h9 h11 p5 p6 )_v
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 4 ) * Sum ( h6 p5 ) * t ( p3 p5 h1 h6 )_t * i1 ( h6 p4 h2 p5 )_v
C         i1 ( h6 p3 h1 p5 )_v + = 1 * v ( h6 p3 h1 p5 )_v                                                     DONE
C         i1 ( h6 p3 h1 p5 )_vt + = -1 * Sum ( p7 ) * t ( p7 h1 )_t * v ( h6 p3 p5 p7 )_v
C         i1 ( h6 p3 h1 p5 )_vt + = -1/2 * Sum ( h8 p7 ) * t ( p3 p7 h1 h8 )_t * v ( h6 h8 p5 p7 )_v
C     i0 ( p3 p4 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( p3 p4 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

# 1 "gacommon.h" 1




# 1 "macommon.h" 1












# 22 "macommon.h"
                     














# 5 "gacommon.h" 2







# 22 "gacommon.h"









# 2 "global.fh" 2
      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 56 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1



!
!     $Id: mafdecls.fh,v 1.11 2002-09-14 05:40:30 d3g001 Exp $
!

!
!     Public header file for a portable dynamic memory allocator.
!
!     This file may be included by internal and external FORTRAN files.
!



!
!     The guard ends here instead of at the end of the file because we only
!     need the cpp constants (stuff above) defined once per FORTRAN file,
!     but need the declarations (stuff below) to be defined each time this
!     file is included in a FORTRAN file.
!



!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 57 "icsd_t2.F" 2

# 1 "util.fh" 1

# 1 "printlevels.fh" 1
      integer print_none, print_low, print_medium, print_high, 
     $     print_debug, print_default, print_never
C$Id: printlevels.fh 19707 2010-10-29 17:59:36Z d3y133 $
      parameter (print_none=0, print_low=10, print_medium=20,
     $     print_high=30, print_debug=100, print_never=1000000)
      parameter (print_default = print_medium)
# 2 "util.fh" 2
c      
C$Id: util.fh 19707 2010-10-29 17:59:36Z d3y133 $
      logical util_print
      double precision ddot
      double precision util_cpusec
      double precision util_wallsec
      double precision util_random
      integer util_batch_job_time_remaining
      integer util_time_remaining
      logical util_test_time_remaining
      logical util_nwchemrc_get
      external util_print
      external ddot
      external util_cpusec
      external util_wallsec
      external util_random
      external util_batch_job_time_remaining
      external util_time_remaining
      external util_test_time_remaining
      external util_nwchemrc_get
c
      logical util_xyz_seek
      external util_xyz_seek
      logical util_xyz_nframes
      external util_xyz_nframes
c
      logical util_get_io_unit
      external util_get_io_unit
c
      integer nw_max_path_len   ! Maximum path len -> posix standard is what?
      parameter (nw_max_path_len = 255)
c
# 58 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 59 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 60 "icsd_t2.F" 2

# 1 "tce_main.fh" 1
c $Id: tce_main.fh 21257 2011-10-20 18:44:41Z kowalski $
c
c Include file for TCE module
c
c Written by So Hirata (c) Battelle, PNNL (2002).
c
c from tce.fh (does not appear to be necessary for computer-generated code)
c
      integer l_offset, k_offset  ! Offset of blocks
      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
c
c      integer rtdb
c      logical nodezero                       ! True if node 0
c      integer iter                           ! Iteration counter
c      integer dummy                          ! Dummy argument for DIIS
c      double precision residual              ! Largest residual
c      character*255 filename
c
      integer bytes                           ! Number of bytes in a double
      integer max_size                        ! A large number
      parameter (max_size = 10000)
      integer max_files                       ! Maximum number of files
      parameter (max_files = 131072)
      integer geom                            ! Geometry handle
      integer ao_bas_han                      ! AO basis set handle
      logical oskel,oadapt                    ! Symmetry control parameters
      integer nbf,nshells                     ! Number of AO basis functions and shells
      integer ipol                            ! =1 (restricted), =2 (unrestricted)
      integer nocc(2)                         ! Number of alpha, beta electrons
      integer nmo(2)                          ! Number of alpha, beta orbitals
      integer nfc(2),nfv(2)                   ! Number of frozen cores/virtuals
      integer oactive(2)                      ! Number of active occupieds
      integer vactive(2)                      ! Number of active virtuals
      integer oatiles(2)                      ! Number of active occupied tiles
      integer vatiles(2)                      ! Number of active unoccupied tiles
      integer l_active,k_active               ! Active tiles (0-inactive, 1 otherwise)
      integer numact                          ! Active excitation level
c ccsd_act/eomccsd_act
      integer oact,uact        ! active space
      integer l_active_n,k_active_n ! Active tiles (0-inactive, 1 otherwise)
      integer l_active_o,k_active_o ! same as above but for orbitals
      double precision emin_act,emax_act ! energy interval for active CC calculations
c
      character*10 model                      ! CC model
      character*10 perturbative               ! PT model
      character*10 ccsd_var                   ! CCSD variant (CC2)
      logical left                            ! Dipole moments & dipole transition moments
      logical ampnorms                        ! Calculate and print amplitude norms
      logical diagnt1                         ! Calculate the T1 diagnostic
      logical fast_ccsd_t                     ! Use vectorized CCSD(T) code which does not produce CCSD[T]
      integer multipole                       ! Multipole moments
      integer maxiter                         ! Maximum number of Davidson iterations
      integer l_evl(2),k_evl(2)               ! MA handles for eigenvalues (AB)
      integer l_occ(2),k_occ(2)               ! MA handles for occupancies (AB)
      integer mult                            ! Ground state spin multiplicity
      integer nirreps                         ! Number of irreducible representations
      double precision maxdiff                ! New
      double precision thresh                 ! Convergence threshold for amplitude equation
      double precision printtol               ! Amplitude printing threshold
      double precision damp                   ! Damping on solver for T and Lambda
      double precision damp2                  ! Damping on solver 2 (regular response)
      double precision damp3                  ! Damping on solver 3 (imaginary response)
      double precision zlshift                ! Level Shift for T
      double precision zlshiftl               ! Level Shift for Lambda
      double precision zlshift2(2)            ! Level Shift for T(1) and L(1) in normal linear response
      double precision zlshift3(2)            ! Level Shift for T(R) and T(I) in imaginary response
      integer l_irs(2),k_irs(2)               ! Irreps of MOs
      integer nmix(2)                         ! Number of symmetry contaminations
      double precision tol2e                  ! 2-e integral tolerance
      integer g_movecs(2)                     ! GA handle for MO vectors
      integer l_irs_sorted,k_irs_sorted       ! MA handles for irreps
      integer l_evl_sorted,k_evl_sorted       ! MA handles for eigenvalues
      integer l_spin_sorted,k_spin_sorted     ! MA handles for eigenvalues
      integer l_movecs_sorted,k_movecs_sorted ! MA handles for MO coeffs
      integer rec_mem          !restart record size in MB
c tce.fh < integer l_spin, k_spin             ! Spins of blocks
c tce.fh < integer l_sym, k_sym               ! Symmetry of blocks
c tce.fh < integer l_range, k_range           ! Length of blocks
c tce.fh < integer l_offset, k_offset         ! Offset of blocks
c tce.fh < integer l_alpha,k_alpha            ! Alpha-izer of beta orbitals (for restricted case)
c tce.fh < integer noa,nob,nva,nvb            ! Number of blocks
c tce.fh < integer noab,nvab                  ! Number of blocks
      integer available                       ! Available memory in doubles
      character*255 filenames(max_files)      ! File name holder
      integer filehandles(max_files)          ! File handle holder
      integer filesizes(max_files)            ! File size holder
      logical fileisga(max_files)             ! True if a file is a GA
      logical activecalc                      !True for CCSDt, CCSDtq, EOMCCSDt,EOMCCSDtq
      integer nfiles                          ! Number of files
      integer ioalg                           ! 0 = Fortran Direct Access 
                                              ! 1 = Exclusive Access File Library
                                              ! 2 = Global Array Incore
                                              ! 3 = Shared File Library
                                              ! 4 = Replicated Exclusive Access Files
                                              ! 5 = Disk Resident Array Algorithm
                                              ! 6 = GA/EAF Replicated Algorithm
      integer reference                       ! 0 = DFT
                                              ! 1 = HF/SCF
      integer l_mo_index,k_mo_index           ! MA handles for MO index
c --- relevant if intorb = .true. ----
      character*10 model2e
c tce.fh < logical intorb 
      integer l_b2am,k_b2am
      integer l_spin_alpha,k_spin_alpha
      integer l_sym_alpha,k_sym_alpha
      integer l_range_alpha,k_range_alpha
      integer l_offset_alpha,k_offset_alpha
      integer d_v2orb
      integer l_o2o_offset                    ! Offset for offset to offset table
      integer k_o2o_offset                    ! Offset for offset to offset table
      integer l_o2ot_offset                   ! orbitals for offset to offset tables
      integer k_o2ot_offset                   ! orbitals for offset to offset tables
      integer l_v2_alpha_offset               ! Offset for 2e integrals if intorb=.true.
      integer k_v2_alpha_offset               ! Offset for 2e integrals if intorb=.true. 
      integer l_v2spin_offset
      integer k_v2spin_offset
c --------------------------------------
      integer tile_dim
      integer idisk,fast2e,ichop,imaxsize
c
      integer atpart                          ! number of groups teh atomic orbitals are divided to
      integer nalength(200)                   ! number of elements in each group
      integer a2length(200)                   ! pointers to the last nshell in a given group
c
      integer max_clocks
      parameter (max_clocks = 100)
      double precision cpusecs(max_clocks)    ! Multipurpose clock counter
      integer buffer_size                     ! Buffer size for tce_zero & reconcilefile
      parameter (buffer_size = 3000000)
c tce.fh < logical restricted
c
c     ALL IRREPS MOVED TO tce.fh
c
      integer target                          ! Target root
      character*4 targetsym                   ! Irrep of target root
      logical symmetry                        ! True if only roots with targetsym are sought
c
c     Integers
c 
      common /tcemaininteger/
     1  bytes,geom,ao_bas_han,nbf,nshells,ipol,nocc,nmo,nfc,nfv,maxiter,
     2  l_evl,k_evl,l_occ,k_occ,mult,nirreps,l_irs,k_irs,nmix,g_movecs,
     3  l_irs_sorted,k_irs_sorted,l_evl_sorted,k_evl_sorted,
     4  l_spin_sorted,k_spin_sorted,l_movecs_sorted,k_movecs_sorted,
     6  available,nfiles,filehandles,ioalg,
     7  reference,multipole,
     5  target,filesizes,oactive,
     6  vactive,oatiles,vatiles,l_active,k_active,numact,l_b2am,k_b2am,
     7  d_v2orb,l_spin_alpha,k_spin_alpha,l_sym_alpha,k_sym_alpha,
     8  l_range_alpha,k_range_alpha,l_offset_alpha,k_offset_alpha,
     9  l_o2o_offset,k_o2o_offset,l_o2ot_offset,k_o2ot_offset,
     1  l_v2_alpha_offset,k_v2_alpha_offset,l_v2spin_offset,
     2  k_v2spin_offset,atpart,nalength,a2length,tile_dim,
     3  idisk,fast2e,ichop,imaxsize,l_mo_index, k_mo_index,
     4  l_alpha,k_alpha,l_offset,k_offset,rec_mem,
     5  l_active_n,k_active_n,oact,uact,l_active_o,k_active_o
c
c     Doubles
c
      common /tcemaindouble/
     1  thresh,printtol,tol2e,cpusecs,
     2  zlshift,zlshiftl,zlshift2,zlshift3,
     3  maxdiff,damp3,emin_act,emax_act
c
c     Characters
c
      common /tcemainchar/
     1  model,perturbative,targetsym,model2e,filenames,ccsd_var
c
c     Logicals
c
      common /tcemainlogical/
     1  oskel,oadapt,left,fileisga,ampnorms,diagnt1,
     2  symmetry,activecalc,fast_ccsd_t

# 61 "icsd_t2.F" 2
c when local copies of  T1/X1 tensors are used,  d_t1 refers to k_t1_local (kk)
c local copies of the most important 2-dimensional intermediates
c icsd_t2_4(...) and icsd_t2_5(...) (kk)
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER l_i1_offset
      INTEGER size_i1
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER l_i2_offset
      INTEGER size_i2
c      INTEGER size_t2
      INTEGER d_i3
      INTEGER k_i3_offset
      INTEGER l_i3_offset
      INTEGER size_i3
      INTEGER d_f1
      INTEGER k_f1_offset

c PETA
      integer d_c2
      integer d_i1_2
      integer d_i2_2a,d_i2_2b,d_i2_2c,d_i2_2d
      integer d_i3_2
      integer d_i1_3
      integer d_i2_3
      integer d_i1_4
      integer d_i2_4
      integer d_i1_5
      integer d_i1_6
      integer d_i2_6
      integer d_i1_7
      integer d_i1_vt
      integer l_i1_2_offset,k_i1_2_offset
      integer l_i2_2a_offset,k_i2_2a_offset
      integer l_i2_2b_offset,k_i2_2b_offset
      integer l_i2_2c_offset,k_i2_2c_offset
      integer l_i2_2d_offset,k_i2_2d_offset
      integer l_i3_2_offset,k_i3_2_offset
      integer l_i1_3_offset,k_i1_3_offset
      integer l_i2_3_offset,k_i2_3_offset
      integer l_i1_4_offset,k_i1_4_offset
      integer l_i2_4_offset,k_i2_4_offset
      integer l_i1_5_offset,k_i1_5_offset
      integer l_i1_6_offset,k_i1_6_offset
      integer l_i2_6_offset,k_i2_6_offset
      integer l_i1_7_offset,k_i1_7_offset
      integer l_i1_vt_offset,k_i1_vt_offset
c
      integer l_i1_4_local,k_i1_4_local
      integer l_i1_5_local,k_i1_5_local
c
      integer size_i1_2
      integer size_i2_2a,size_i2_2b,size_i2_2c,size_i2_2d
      integer size_i3_2
      integer size_i1_3
      integer size_i2_3
      integer size_i1_4
      integer size_i2_4
      integer size_i1_5
      integer size_i1_6
      integer size_i2_6
      integer size_i1_7
      integer size_i1_vt     
      integer level_x
      integer size_t1,size_t2
      integer layer1,layer2,layer3,layer4
c ----- independent counters -----
      external nxt_ctx_create, nxt_ctx_destroy, nxt_ctx_next
      integer num_count
      integer ctx
      integer total_start1, total_start2, total_start3, total_start4
      integer total_sync1, total_sync2, total_sync3, total_sync4
      integer total_end1, total_end2, total_end3, total_end4
      parameter(num_count=41)
c --------------------------------
c - T1/X1 LOCALIZATION -------------------
      integer l_i1_local,k_i1_local
c ---------------------------------------
      CHARACTER*255 filename
      logical nodezero         ! True if node 0
      double precision cpu, cpu_2     ! CPU sec counter
      double precision wall, wall_2    ! WALL sec counter
c      call record_change()
        cpu_2=-util_cpusec()
        wall_2=-util_wallsec()

      nodezero=(ga_nodeid().eq.0)
      CALL icsd_t2_1(d_v2,k_v2_offset,d_i0,k_i0_offset)
      CALL OFFSET_icsd_t2_2_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('icsd_t2_2_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL icsd_t2_2_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL OFFSET_icsd_t2_2_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('icsd_t2_2_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL icsd_t2_2_2_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL OFFSET_icsd_t2_2_2_2_1(l_i3_offset,k_i3_offset,size_i3)
      CALL TCE_FILENAME('icsd_t2_2_2_2_1_i3',filename)
      CALL CREATEFILE(filename,d_i3,size_i3)
      CALL icsd_t2_2_2_2_1(d_v2,k_v2_offset,d_i3,k_i3_offset)
      CALL icsd_t2_2_2_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                     d_i3,k_i3_offset)
      CALL RECONCILEFILE(d_i3,size_i3)
      CALL icsd_t2_2_2_2(d_t1,k_t1_offset,d_i3,k_i3_offset,
     1                   d_i2,k_i2_offset)
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
      CALL icsd_t2_2_2_3(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                   d_i2,k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL icsd_t2_2_2(d_t1,k_t1_offset,d_i2,k_i2_offset,
     1                 d_i1,k_i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
      CALL OFFSET_icsd_t2_2_4_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('icsd_t2_2_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL icsd_t2_2_4_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL icsd_t2_2_4_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                   d_i2,k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL icsd_t2_2_4(d_t2,k_t2_offset,d_i2,k_i2_offset,
     1                 d_i1,k_i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
      CALL OFFSET_icsd_t2_2_5_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('icsd_t2_2_5_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL icsd_t2_2_5_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL icsd_t2_2_5_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                   d_i2,k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL icsd_t2_2_5(d_t2,k_t2_offset,d_i2,k_i2_offset,
     1                 d_i1,k_i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
c      CALL c2f_t2_t12(d_t1,k_t1_offset,d_t2,k_t2_offset)
      CALL icsd_t2_2_6(d_c2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
c      CALL c2d_t2_t12(d_t1,k_t1_offset,d_t2,k_t2_offset) 
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL icsd_t2_2(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
      CALL licsd_t2_3x(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                 d_i0,k_i0_offset)
      CALL OFFSET_icsd_t2_4_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('icsd_t2_4_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL icsd_t2_4_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL OFFSET_icsd_t2_4_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('icsd_t2_4_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL icsd_t2_4_2_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL icsd_t2_4_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                   d_i2,k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL icsd_t2_4_2(d_t1,k_t1_offset,d_i2,k_i2_offset,
     1                 d_i1,k_i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
      CALL icsd_t2_4_3(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL icsd_t2_4_4(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
c - T1/X1 LOCALIZATION ----------
        if (.not.MA_PUSH_GET(mt_dbl,size_i1,'i1_local',
     1      l_i1_local,k_i1_local))
     1      call errquit('i1_local',1,MA_ERR)
        call ma_zero(dbl_mb(k_i1_local),size_i1)
c    copy d_t1 ==> l_t1_local
        call ga_get(d_i1,1,size_i1,1,1,dbl_mb(k_i1_local),1)
c -------------------------------
ccx      CALL icsd_t2_4(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL icsd_t2_4(d_t2,k_t2_offset,k_i1_local,k_i1_offset,
     &              d_i0,k_i0_offset)
c - T1/X1 LOCALIZATION --
         if(.not.MA_POP_STACK(l_i1_local))
     &      call errquit('l_i1_local',2,MA_ERR)
c -----------------------
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
      CALL OFFSET_icsd_t2_5_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('icsd_t2_5_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL icsd_t2_5_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL icsd_t2_5_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL icsd_t2_5_3(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
c - T1/X1 LOCALIZATION ----------
        if (.not.MA_PUSH_GET(mt_dbl,size_i1,'i1_local',
     1      l_i1_local,k_i1_local))
     1      call errquit('i1_local',1,MA_ERR)
        call ma_zero(dbl_mb(k_i1_local),size_i1)
c    copy d_t1 ==> l_t1_local
        call ga_get(d_i1,1,size_i1,1,1,dbl_mb(k_i1_local),1)
c -------------------------------
ccx      CALL icsd_t2_5(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL icsd_t2_5(d_t2,k_t2_offset,k_i1_local,k_i1_offset,
     &               d_i0,k_i0_offset)
c - T1/X1 LOCALIZATION --
         if(.not.MA_POP_STACK(l_i1_local))
     &      call errquit('l_i1_local',2,MA_ERR)
c -----------------------
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
      CALL OFFSET_icsd_t2_6_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('icsd_t2_6_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL icsd_t2_6_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL OFFSET_icsd_t2_6_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('icsd_t2_6_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL icsd_t2_6_2_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL icsd_t2_6_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                   d_i2,k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL icsd_t2_6_2(d_t1,k_t1_offset,d_i2,k_i2_offset,
     1                 d_i1,k_i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
      CALL icsd_t2_6_3(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL icsd_t2_6(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
      CALL OFFSET_icsd_t2_7_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('icsd_t2_7_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL icsd_t2_7_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL icsd_t2_7_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL icsd_t2_7_3(d_t2,k_t2_offset,d_v2,k_v2_offset,
     1                 d_i1,k_i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL icsd_t2_7(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('icsd_t2',-1,MA_ERR)
      CALL OFFSET_icsd_vt1t1_1_1(l_i1_offset,k_i1_offset,size_i1)

      CALL TCE_FILENAME('icsd_vt1t1_1_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
c      CALL vt1t1_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL icsd_vt1t1_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,
     &d_i1,k_i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)

c      CALL vt1t1_1(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL icsd_vt1t1_1(d_t1,k_t1_offset,d_i1,k_i1_offset,
     &d_i0,k_i0_offset)

      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) 
     1    CALL ERRQUIT('icsd_vt1t1',-1,MA_ERR)
c      CALL c2f_t2_t12(d_t1,k_t1_offset,d_t2,k_t2_offset)
      cpu = - util_cpusec()
      wall = - util_wallsec()
c#ifdef NEW_COMM_STRUCT
c      CALL icsd_t2_8_spiral(d_t2,k_t2_offset,d_v2,k_v2_offset,
c     1                      d_i0,k_i0_offset)
c#else
      CALL icsd_t2_8(d_c2,k_t2_offset,d_v2,k_v2_offset,
     1               d_i0,k_i0_offset)
c#endif
      cpu = cpu + util_cpusec()
      wall = wall + util_wallsec()
      cpusecs(37) = cpu
      cpusecs(38) = wall
        cpu_2=cpu_2+util_cpusec()
        wall_2=wall_2+util_wallsec()
        if (nodezero) then
          write(*,*) "ccsd_t2 CPU and WALL", cpu_2,wall_2
        endif

c      CALL c2d_t2_t12(d_t1,k_t1_offset,d_t2,k_t2_offset)
c --- PETA ----------
c 9020 format('DIAG-D',i3,1x,'Cpu & wall time / sec',2f15.4)
c 9021 format('   DIAG-D',i3,1x,i3,2x,'Cpu & wall time / sec',2f15.4)
c -------------------
      RETURN
      END





      SUBROUTINE icsd_t2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_v + = 1 * v ( p3 p4 h1 h2 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 378 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 379 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 380 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 381 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 382 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b, p4b, h1b, h2b, p3b_1, p4b_1, h1b_1, h2b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p4b = p3b,noab+nvab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     2           .eq. irrep_v) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL TCE_RESTRICTED_4(p3b,p4b,h1b,h2b,
     1                              p3b_1,p4b_1,h1b_1,h2b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     2              CALL ERRQUIT('icsd_t2_1',1,MA_ERR)
               if(.not.intorb) then
                CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1               int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2               (h1b_1 - 1 + (noab+nvab) * (p4b_1 - 1 + 
     3               (noab+nvab) * (p3b_1 - 1)))))
               else
                CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1               int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2               (h1b_1 - 1 + (noab+nvab) * (p4b_1 - 1 + 
     3               (noab+nvab) * (p3b_1 - 1)))),
     4               h2b_1,h1b_1,p4b_1,p3b_1)
               end if
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * 
     2              (h1b - 1 + noab * (p4b - noab - 1 + nvab * 
     3              (p3b - noab - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('icsd_t2_1',4,MA_ERR)
              END IF
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END






      SUBROUTINE icsd_t2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( h10 ) * t ( p3 h10 )_t * i1 ( h10 p4 h1 h2 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 458 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 459 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 460 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 461 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 462 "icsd_t2.F" 2
      INTEGER d_a, d_b, d_c
      INTEGER k_a_offset, k_b_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,p4b,h1b,h2b,h10b,p3b_1,h10b_1,p4b_2,h10b_2,h1b_2,h2b_2
      INTEGER dim_common, dima_sort, dimb_sort, dima, dimb, dimc
      INTEGER k_a,k_bs,l_bs,k_b,l_b,k_cs,l_cs,k_c,l_c



      INTEGER offset_a

      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p4b = noab+1,noab+nvab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. 
     2           ieor(irrep_v,irrep_t)) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     1             CALL ERRQUIT('icsd_t2_2',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO h10b = 1,noab
               IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h10b-1)) THEN
                IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h10b-1)) 
     1              .eq. irrep_t) THEN
                 CALL TCE_RESTRICTED_2(p3b,h10b,p3b_1,h10b_1)
                 CALL TCE_RESTRICTED_4(p4b,h10b,h1b,h2b,
     1                                 p4b_2,h10b_2,h1b_2,h2b_2)
                 dim_common = int_mb(k_range+h10b-1)
                 dima_sort = int_mb(k_range+p3b-1)
                 dima = dim_common * dima_sort
                 dimb_sort = int_mb(k_range+p4b-1) 
     1                     * int_mb(k_range+h1b-1) 
     2                     * int_mb(k_range+h2b-1)
                 dimb = dim_common * dimb_sort
                 IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN







                  call tce_hash(int_mb(k_a_offset),
     1                          (h10b_1-1 + noab * (p3b_1-noab-1)),
     2                          offset_a)
                  k_a = d_a + offset_a

                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) 
     1                 CALL ERRQUIT('icsd_t2_2',4,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     1                 CALL ERRQUIT('icsd_t2_2',5,MA_ERR)
                  CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1                 int_mb(k_b_offset),(h2b_2 - 1 + noab * 
     2                 (h1b_2 - 1 + noab * (h10b_2 - 1 + noab * 
     3                 (p4b_2 - noab - 1)))))
                  CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     1                 int_mb(k_range+p4b-1),int_mb(k_range+h10b-1),
     2                 int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                 4,3,1,2,1.0d0)
                  IF (.not.MA_POP_STACK(l_b)) 
     1                 CALL ERRQUIT('icsd_t2_2',6,MA_ERR)
                  CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     1                 1.0d0,dbl_mb(k_a),dim_common,dbl_mb(k_bs),
     2                 dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
                  IF (.not.MA_POP_STACK(l_bs)) 
     1                 CALL ERRQUIT('icsd_t2_2',7,MA_ERR)




                 END IF
                END IF
               END IF
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     1             CALL ERRQUIT('icsd_t2_2',9,MA_ERR)
              IF ((p3b .le. p4b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1              int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     2              int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),
     3              4,3,2,1,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * 
     2              (h1b - 1 + noab * (p4b - noab - 1 + nvab * 
     3              (p3b - noab - 1)))))
              END IF
              IF ((p4b .le. p3b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1              int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     2              int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),
     3              3,4,2,1,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * 
     2              (h1b - 1 + noab * (p3b - noab - 1 + nvab * 
     3              (p4b - noab - 1)))))
              END IF
              IF (.not.MA_POP_STACK(l_c)) 
     1             CALL ERRQUIT('icsd_t2_2',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     1             CALL ERRQUIT('icsd_t2_2',11,MA_ERR)
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_v + = 1 * v ( h10 p3 h1 h2 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 600 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 601 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 602 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 603 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 604 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,h10b,h1b,h2b,p3b_1,h10b_1,h1b_1,h2b_1
      INTEGER dimc
      INTEGER k_as, l_as, k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h10b = 1,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     2           .eq. irrep_v) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL TCE_RESTRICTED_4(p3b,h10b,h1b,h2b,
     1                              p3b_1,h10b_1,h1b_1,h2b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'as',l_as,k_as)) 
     1              CALL ERRQUIT('icsd_t2_2_1',0,MA_ERR)
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('icsd_t2_2_1',1,MA_ERR)
               IF ((h10b .le. p3b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                h2b_1,h1b_1,p3b_1,h10b_1)
                end if
                CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     2               int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3               2,1,3,4,1.0d0)
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_as),dimc,
     1              int_mb(k_c_offset),
     2              (h2b - 1 + noab * (h1b - 1 + noab * 
     3              (h10b - 1 + noab * (p3b - noab - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('icsd_t2_2_1',4,MA_ERR)
               IF (.not.MA_POP_STACK(l_as)) 
     1              CALL ERRQUIT('icsd_t2_2_1',5,MA_ERR)
              END IF
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END





      SUBROUTINE OFFSET_icsd_t2_2_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 689 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 690 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 691 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 692 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 693 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h2b - 1 + noab * (h1b - 1 + noab * (h10b
     & - 1 + noab * (p3b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END




      SUBROUTINE icsd_t2_2_2(d_a,k_a_offset,d_b,k_b_offset,
     1                       d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( h11 ) * t ( p3 h11 )_t * i2 ( h10 h11 h1 h2 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 763 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 764 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 765 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 766 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 767 "icsd_t2.F" 2
      INTEGER d_a, d_b, d_c
      INTEGER k_a_offset, k_b_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,h10b,h1b,h2b,h11b,p3b_1,h11b_1
      INTEGER h10b_2,h11b_2,h1b_2,h2b_2
      INTEGER dim_common,dima_sort,dima,dimb_sort,dimb,dimc
      INTEGER k_a,k_bs,l_bs,k_b,l_b,k_cs,l_cs,k_c,l_c



      INTEGER offset_a

      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h10b = 1,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. 
     2           ieor(irrep_v,irrep_t)) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     1             CALL ERRQUIT('icsd_t2_2_2',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO h11b = 1,noab
               IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h11b-1)) THEN
                IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h11b-1)) 
     1              .eq. irrep_t) THEN
                 CALL TCE_RESTRICTED_2(p3b,h11b,p3b_1,h11b_1)
                 CALL TCE_RESTRICTED_4(h10b,h11b,h1b,h2b,
     1                                 h10b_2,h11b_2,h1b_2,h2b_2)
                 dim_common = int_mb(k_range+h11b-1)
                 dima_sort = int_mb(k_range+p3b-1)
                 dima = dim_common * dima_sort
                 dimb_sort = int_mb(k_range+h10b-1) 
     1                     * int_mb(k_range+h1b-1) 
     2                     * int_mb(k_range+h2b-1)
                 dimb = dim_common * dimb_sort
                 IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN







                  call tce_hash(int_mb(k_a_offset),
     1                          (h11b_1-1 + noab * (p3b_1-noab-1)),
     2                          offset_a)
                  k_a = d_a + offset_a

                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) 
     1                 CALL ERRQUIT('icsd_t2_2_2',4,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     1                 CALL ERRQUIT('icsd_t2_2_2',5,MA_ERR)
                  IF ((h11b .lt. h10b)) THEN
                   CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1                  int_mb(k_b_offset),(h2b_2 - 1 + noab * 
     2                  (h1b_2 - 1 + noab * (h10b_2 - 1 + noab * 
     3                  (h11b_2 - 1)))))
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     1                  int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),
     2                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                  4,3,2,1,-1.0d0)
                  END IF
                  IF ((h10b .le. h11b)) THEN
                   CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1                  int_mb(k_b_offset),(h2b_2 - 1 + noab * 
     2                  (h1b_2 - 1 + noab * (h11b_2 - 1 + noab * 
     3                  (h10b_2 - 1)))))
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     1                  int_mb(k_range+h10b-1),int_mb(k_range+h11b-1),
     2                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                  4,3,1,2,1.0d0)
                  END IF
                  IF (.not.MA_POP_STACK(l_b)) 
     1                 CALL ERRQUIT('icsd_t2_2_2',6,MA_ERR)
                  CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     1                 1.0d0,dbl_mb(k_a),dim_common,dbl_mb(k_bs),
     2                 dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
                  IF (.not.MA_POP_STACK(l_bs)) 
     1                 CALL ERRQUIT('icsd_t2_2_2',7,MA_ERR)




                 END IF
                END IF
               END IF
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     1             CALL ERRQUIT('icsd_t2_2_2',9,MA_ERR)
              CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1             int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     2             int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     3             4,3,2,1,1.0d0/2.0d0)
              CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1             int_mb(k_c_offset),(h2b - 1 + noab * 
     2             (h1b - 1 + noab * (h10b - 1 + noab * 
     3             (p3b - noab - 1)))))
              IF (.not.MA_POP_STACK(l_c)) 
     1             CALL ERRQUIT('icsd_t2_2_2',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     1             CALL ERRQUIT('icsd_t2_2_2',11,MA_ERR)
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_v + = -1 * v ( h10 h11 h1 h2 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 906 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 907 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 908 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 909 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 910 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h10b,h11b,h1b,h2b,h10b_1,h11b_1,h1b_1,h2b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)
     1          +int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     2           .eq. irrep_v) THEN
              dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL TCE_RESTRICTED_4(h10b,h11b,h1b,h2b,
     1                              h10b_1,h11b_1,h1b_1,h2b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('icsd_t2_2_2_1',1,MA_ERR)
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                h2b_1,h1b_1,h11b_1,h10b_1)
                end if
                CALL DSCAL(dimc,-1.0d0,dbl_mb(k_a),1)
                CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1               int_mb(k_c_offset),(h2b - 1 + noab * 
     2               (h1b - 1 + noab * (h11b - 1 + noab * 
     3               (h10b - 1)))))
                IF (.not.MA_POP_STACK(l_a)) 
     1               CALL ERRQUIT('icsd_t2_2_2_1',4,MA_ERR)
              END IF
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END





      SUBROUTINE OFFSET_icsd_t2_2_2_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 986 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 987 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 988 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 989 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 990 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq.
     &        int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
           IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     &         ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     &         .eq. irrep_v) THEN
            IF ((.not.restricted).or.
     &          (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)
     &          +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
             length = length + 1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'a',l_a_offset,k_a_offset))
     &   CALL ERRQUIT('icsd_t2_2_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq.
     &        int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
           IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     &         ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     &         .eq. irrep_v) THEN
            IF ((.not.restricted).or.
     &          (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)
     &          +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
             addr = addr + 1
             int_mb(k_a_offset+addr) = h2b-1+noab*(h1b-1+noab
     &                                 *(h11b-1+noab*(h10b-1)))
             int_mb(k_a_offset+length+addr) = size
             size = size+int_mb(k_range+h10b-1)*int_mb(k_range+h11b-1)
     &                  *int_mb(k_range+h1b-1)*int_mb(k_range+h2b-1)
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      RETURN
      END





      SUBROUTINE icsd_t2_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i3 ( h10 h11 h2 p5 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 1065 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 1066 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 1067 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 1068 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 1069 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_2_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h11b,h2b,p5b,h10b_2,h11b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_2_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_2_2_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h11b_2 - 1 + noab * (h10
     &b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-
     &1),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_2_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_2_2_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_2_2_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_2_2_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_2_2_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_2_2_2',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_2_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h11 h1 p5 )_v + = 1 * v ( h10 h11 h1 p5 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 1219 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 1220 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 1221 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 1222 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 1223 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h10b,h11b,h1b,p5b,h10b_1,h11b_1,h1b_1,p5b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO p5b = noab+1,noab+nvab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)
     1          +int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p5b-1).ne.8)) THEN
            IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
             IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     2           .eq. irrep_v) THEN
              dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
              CALL TCE_RESTRICTED_4(h10b,h11b,h1b,p5b,
     1                              h10b_1,h11b_1,h1b_1,p5b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('icsd_t2_2_2_2_1',1,MA_ERR)
               IF ((h1b .le. p5b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                p5b_1,h1b_1,h11b_1,h10b_1)
                end if
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(p5b - noab - 1 + nvab * 
     2              (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('icsd_t2_2_2_2_1',4,MA_ERR)
              END IF
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END





      SUBROUTINE OFFSET_icsd_t2_2_2_2_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h11 h1 p5 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 1299 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 1300 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 1301 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 1302 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 1303 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p5b
      length = 0
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_2_2_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p5b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h11b - 1 + noab * (h10b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE icsd_t2_2_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h11 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 h11 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 1369 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 1370 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 1371 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 1372 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 1373 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_2_2_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h11b,p5b,p6b,h10b_2,h11b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_2_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_2_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_2_2_2_2',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_2_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_2_2_2_2',5,MA_ERR)
      IF ((p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))),p5b_2,p6b_2,h11b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-
     &1),4,2,1,3,-1.0d0)
      END IF
      IF ((p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,h11b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-
     &1),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_2_2_2_2',6,MA_ER
     &R)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_2_2_2_2',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_2_2_2_2',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_2_2_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_2_2_2_2',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_2_2_2_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_2_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_vt + = -1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h10 h11 p7 p8 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 1538 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 1539 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 1540 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 1541 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 1542 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p7b
      INTEGER p8b
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_2_2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p7b,p8b,h1b,h2b,p7b_1,p8b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(h10b,h11b,p7b,p8b,h10b_2,h11b_2,p7b_2,p8b_2)
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_2_2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_2_2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1 + nvab * (p7b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p8b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_2_2_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_2_2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_2_2_3',5,MA_ERR)
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p8b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))),p8b_2,p7b_2,h11b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p7b-1),int_mb(k_range+p8b-
     &1),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_2_2_3',6,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_as),dim_common,dbl_
     &mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_2_2_3',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_2_2_3',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_2_2_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h11b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-
     &1),2,1,4,3,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_2_2_3',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_2_2_3',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i2 ( h10 p3 h2 p5 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 1705 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 1706 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 1707 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 1708 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 1709 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER h10b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,h10b,h2b,p5b,p3b_2,h10b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_2_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_2_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (p3b
     &_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-1
     &),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_2_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_2_3',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_2_3',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_2_3',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1
     &),3,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_2_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_2_3',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_2_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p3 h1 p5 )_v + = 1 * v ( h10 p3 h1 p5 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 1856 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 1857 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 1858 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 1859 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 1860 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,h10b,h1b,p5b,p3b_1,h10b_1,h1b_1,p5b_1
      INTEGER dimc
      INTEGER k_as, l_as, k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h10b = 1,noab
        DO h1b = 1,noab
         DO p5b = noab+1,noab+nvab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p5b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     2           .eq. irrep_v) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
              CALL TCE_RESTRICTED_4(p3b,h10b,h1b,p5b,
     1                              p3b_1,h10b_1,h1b_1,p5b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'as',l_as,k_as))
     1              CALL ERRQUIT('icsd_t2_2_3_1',0,MA_ERR)
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('icsd_t2_2_3_1',1,MA_ERR)
               IF ((h10b .le. p3b) .and. (h1b .le. p5b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + 
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                p5b_1,h1b_1,p3b_1,h10b_1)
                end if
                CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     2               int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),
     3               2,1,3,4,1.0d0)
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),
     2              (p5b - noab - 1 + nvab * (h1b - 1 + noab * 
     3              (h10b - 1 + noab * (p3b - noab - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('icsd_t2_2_3_1',4,MA_ERR)
               IF (.not.MA_POP_STACK(l_as)) 
     1              CALL ERRQUIT('icsd_t2_2_3_1',5,MA_ERR)
              END IF
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_icsd_t2_2_3_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p3 h1 p5 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 1940 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 1941 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 1942 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 1943 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 1944 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER p5b
      length = 0
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_2_3_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p3b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p5b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h10b - 1 + noab * (p3b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE icsd_t2_2_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p3 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 p3 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 2010 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 2011 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 2012 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 2013 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 2014 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER h10b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_2_3_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,h10b,p5b,p6b,p3b_2,h10b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_2_3_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_2_3_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_2_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_2_3_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_2_3_2',5,MA_ERR)
      IF ((h10b .le. p3b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p5b_2,p6b_2,p3b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,1,2,3,-1.0d0)
      END IF
      IF ((h10b .le. p3b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,p3b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_2_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_2_3_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_2_3_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_2_3_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noa
     &b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_2_3_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_2_3_2',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_ft + = -1 * Sum ( p5 ) * t ( p3 p5 h1 h2 )_t * i2 ( h10 p5 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 2177 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 2178 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 2179 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 2180 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 2181 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p3b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_f,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_2_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h2b,p3b_1,p5b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_2(h10b,p5b,h10b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_2_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_2_4',2,MA_ERR)
      IF ((p5b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,-1.0d0)
      END IF
      IF ((p3b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_2_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_2_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_2_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h10b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p5b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_2_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_2_4',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_2_4',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_2_4',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h10b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1
     &),4,1,3,2,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_2_4',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_2_4',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_2_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 )_f + = 1 * f ( h10 p5 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 2332 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 2333 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 2334 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 2335 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 2336 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h10b, p5b, h10b_1, p5b_1
      INTEGER dim_common, dima_sort, dima, dimc
      INTEGER k_as, l_as, k_a, l_a, k_c, l_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
       DO p5b = noab+1,noab+nvab
        IF (next.eq.count) THEN
         IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)
     1                            +int_mb(k_spin+p5b-1).ne.4)) THEN
          IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p5b-1)) THEN
           IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p5b-1)) 
     1         .eq. irrep_f) THEN
            dimc = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
            CALL TCE_RESTRICTED_2(h10b,p5b,h10b_1,p5b_1)
            dim_common = 1
            dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
            dima = dim_common * dima_sort
            IF (dima .gt. 0) THEN
             IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     1            CALL ERRQUIT('icsd_t2_2_4_1',0,MA_ERR)
             IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     1            CALL ERRQUIT('icsd_t2_2_4_1',1,MA_ERR)
             CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     1            int_mb(k_a_offset),
     2            (p5b_1 - 1 + (noab+nvab) * (h10b_1 - 1)))
             CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),
     1            int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),
     2            2,1,1.0d0)
             IF (.not.MA_POP_STACK(l_a)) 
     1            CALL ERRQUIT('icsd_t2_2_4_1',2,MA_ERR)
             IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     1            CALL ERRQUIT('icsd_t2_2_4_1',3,MA_ERR)
             CALL TCE_SORT_2(dbl_mb(k_as),dbl_mb(k_c),
     1            int_mb(k_range+p5b-1),int_mb(k_range+h10b-1),
     2            2,1,1.0d0)
             CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1            int_mb(k_c_offset),
     2            (p5b - noab - 1 + nvab * (h10b - 1)))
             IF (.not.MA_POP_STACK(l_c)) 
     1            CALL ERRQUIT('icsd_t2_2_4_1',4,MA_ERR)
             IF (.not.MA_POP_STACK(l_as)) 
     1            CALL ERRQUIT('icsd_t2_2_4_1',5,MA_ERR)
            END IF
           END IF
          END IF
         END IF
         next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE OFFSET_icsd_t2_2_4_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 2408 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 2409 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 2410 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 2411 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 2412 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER p5b
      length = 0
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_2_4_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p5b - noab - 1 + nvab * (h10b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE icsd_t2_2_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h10 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 2464 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 2465 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 2466 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 2467 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 2468 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h10b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p5b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_2_4_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h10b,h7b,p5b,p6b,h10b_2,h7b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_2_4_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_2_4_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_2_4_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_2_4_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_2_4_2',5,MA_ERR)
      IF ((h7b .le. h10b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p5b_2,p6b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,2,1,3,-1.0d0)
      END IF
      IF ((h7b .le. h10b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p6b_2,p5b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF ((h10b .lt. h7b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p5b_2,p6b_2,h7b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,1,2,3,1.0d0)
      END IF
      IF ((h10b .lt. h7b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,h7b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_2_4_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_2_4_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_2_4_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_2_4_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h10b-1),2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_2_4_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_2_4_2',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_2_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( h7 p9 ) * t ( p3 p9 h1 h7 )_t * i2 ( h7 h10 h2 p9 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 2652 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 2653 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 2654 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 2655 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 2656 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p9b
      INTEGER h7b
      INTEGER p3b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER h10b_2
      INTEGER h7b_2
      INTEGER h2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_2_5',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p9b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p9b,h1b,h7b,p3b_1,p9b_1,h1b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h10b,h7b,h2b,p9b,h10b_2,h7b_2,h2b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_2_5',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_2_5',2,MA_ERR)
      IF ((p9b .lt. p3b) .and. (h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p9b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1)
     &,4,2,3,1,1.0d0)
      END IF
      IF ((p9b .lt. p3b) .and. (h1b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p9b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h7b-1)
     &,3,2,4,1,-1.0d0)
      END IF
      IF ((p3b .le. p9b) .and. (h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1)
     &,4,1,3,2,-1.0d0)
      END IF
      IF ((p3b .le. p9b) .and. (h1b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h1b-1),int_mb(k_range+h7b-1)
     &,3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_2_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_2_5',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_2_5',5,MA_ERR)
      IF ((h7b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (h7b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+p9b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF ((h10b .lt. h7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h7b_2 - 1 + noab * (h10b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+h2b-1),int_mb(k_range+p9b-1
     &),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_2_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_2_5',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_2_5',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_2_5',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1
     &),4,2,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1
     &),4,2,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_2_5',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_2_5',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_2_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h10 h1 p9 )_v + = 1 * v ( h7 h10 h1 p9 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 2849 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 2850 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 2851 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 2852 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 2853 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h7b,h10b,h1b,p9b,h7b_1,h10b_1,h1b_1,p9b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h7b = 1,noab
       DO h10b = h7b,noab
        DO h1b = 1,noab
         DO p9b = noab+1,noab+nvab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p9b-1).ne.8)) THEN
            IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1)) THEN
             IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) 
     2           .eq. irrep_v) THEN
              dimc = int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
              CALL TCE_RESTRICTED_4(h7b,h10b,h1b,p9b,
     1                              h7b_1,h10b_1,h1b_1,p9b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('icsd_t2_2_5_1',1,MA_ERR)
               IF ((h1b .le. p9b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p9b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h10b_1 - 1 + 
     3                (noab+nvab) * (h7b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p9b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h10b_1 - 1 + 
     3                (noab+nvab) * (h7b_1 - 1)))),
     4                p9b_1,h1b_1,h10b_1,h7b_1)
                end if
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(p9b - noab - 1 + nvab * 
     2              (h1b - 1 + noab * (h10b - 1 + noab * (h7b - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('icsd_t2_2_5_1',4,MA_ERR)
              END IF
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE OFFSET_icsd_t2_2_5_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h10 h1 p9 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 2928 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 2929 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 2930 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 2931 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 2932 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h7b
      INTEGER h10b
      INTEGER h1b
      INTEGER p9b
      length = 0
      DO h7b = 1,noab
      DO h10b = h7b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_2_5_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h7b = 1,noab
      DO h10b = h7b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h10b - 1 + noab * (h7b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE icsd_t2_2_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h10 h1 p9 )_vt + = 1 * Sum ( p5 ) * t ( p5 h1 )_t * v ( h7 h10 p5 p9 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 2998 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 2999 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 3000 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 3001 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 3002 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h10b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h7b_2
      INTEGER h10b_2
      INTEGER p9b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h7b = 1,noab
      DO h10b = h7b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_2_5_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h7b,h10b,p9b,p5b,h7b_2,h10b_2,p9b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_2_5_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_2_5_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_2_5_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_2_5_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_2_5_2',5,MA_ERR)
      IF ((p5b .le. p9b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p9b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p9b_2,p5b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),int_mb(k_range+p9b-1
     &),4,2,1,3,1.0d0)
      END IF
      IF ((p9b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p5b_2,p9b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p9b-1),int_mb(k_range+p5b-1
     &),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_2_5_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_2_5_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_2_5_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_2_5_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1 + noab * (h7b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_2_5_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_2_5_2',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_2_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( h10 p3 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 3165 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 3166 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 3167 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 3168 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 3169 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p6b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p3b_2
      INTEGER h10b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_2_6',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,p5b_1,p6b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(p3b,h10b,p5b,p6b,p3b_2,h10b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_2_6',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_2_6',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_2_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_2_6',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_2_6',5,MA_ERR)
      IF ((h10b .le. p3b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,p3b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),1,2,4,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_2_6',6,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_as),dim_common,dbl_
     &mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_2_6',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_2_6',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_2_6',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),2,1,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_2_6',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_2_6',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END







      SUBROUTINE icsd_t2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_tf + = -1 * P( 2 ) * Sum ( h9 ) * t ( p3 p4 h1 h9 )_t * i1 ( h9 h2 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 3340 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 3341 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 3342 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 3343 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 3344 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER h9b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h1b_1
      INTEGER h9b_1
      INTEGER h9b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_t,irrep_f)) TH
     &EN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO h9b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p4b,h1b,h9b,p3b_1,p4b_1,h1b_1,h9b_1)
      CALL TCE_RESTRICTED_2(h9b,h2b,h9b_2,h2b_2)
      dim_common = int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb
     &(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_4',2,MA_ERR)
      IF ((h9b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h9b-1),int_mb(k_range+h1b-1)
     &,4,2,1,3,-1.0d0)
      END IF
      IF ((h1b .le. h9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h9b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+h9b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_4',5,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_b),dbl_mb(k_b),dimb,
     & int_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h9b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h2b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_4',7,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_4',8,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_4',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,4,3,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,4,3,1,2,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_4',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_4',11,MA_ER
     &R)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h1 )_f + = 1 * f ( h9 h1 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 3506 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 3507 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 3508 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 3509 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 3510 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h9b, h1b, h9b_1, h1b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
       DO h1b = 1,noab
        IF (next.eq.count) THEN
         IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)
     1        +int_mb(k_spin+h1b-1).ne.4)) THEN
          IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
           IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) 
     1         .eq. irrep_f) THEN
            dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
            CALL TCE_RESTRICTED_2(h9b,h1b,h9b_1,h1b_1)
            IF (dimc .gt. 0) THEN
             IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1            CALL ERRQUIT('icsd_t2_4_1',1,MA_ERR)
             CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1            int_mb(k_a_offset),(h1b_1 - 1 + (noab+nvab) * 
     2            (h9b_1 - 1)))
             CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1            int_mb(k_c_offset),(h1b - 1 + noab * (h9b - 1)))
             IF (.not.MA_POP_STACK(l_a)) 
     1            CALL ERRQUIT('icsd_t2_4_1',4,MA_ERR)
            END IF
           END IF
          END IF
         END IF
         next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE OFFSET_icsd_t2_4_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h1 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 3564 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 3565 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 3566 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 3567 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 3568 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h9b
      INTEGER h1b
      length = 0
      DO h9b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_4_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h9b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h1b - 1 + noab * (h9b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END




      SUBROUTINE icsd_t2_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h1 )_ft + = 1 * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h9 p8 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 3624 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 3625 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 3626 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 3627 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 3628 "icsd_t2.F" 2
      INTEGER d_a, d_b, d_c
      INTEGER k_a_offset, k_b_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h9b, h1b, p8b, p8b_1, h1b_1, h9b_2, p8b_2
      INTEGER dim_common,dima_sort,dimb_sort,dima,dimb,dimc
      INTEGER k_as,l_as
      INTEGER k_a, l_a,k_b,l_b,k_c,l_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
       DO h1b = 1,noab
        IF (next.eq.count) THEN
         IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)
     1                            +int_mb(k_spin+h1b-1).ne.4)) THEN
          IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
           IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) 
     1         .eq. ieor(irrep_f,irrep_t)) THEN
            dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
            IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     1           CALL ERRQUIT('icsd_t2_4_2',0,MA_ERR)
            CALL DFILL(dimc,0.0d0,dbl_mb(k_c),1)
            DO p8b = noab+1,noab+nvab
             IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
              IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) 
     1            .eq. irrep_t) THEN
               CALL TCE_RESTRICTED_2(p8b,h1b,p8b_1,h1b_1)
               CALL TCE_RESTRICTED_2(h9b,p8b,h9b_2,p8b_2)
               dim_common = int_mb(k_range+p8b-1)
               dima_sort = int_mb(k_range+h1b-1)
               dima = dim_common * dima_sort
               dimb_sort = int_mb(k_range+h9b-1)
               dimb = dim_common * dimb_sort
               IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     1               CALL ERRQUIT('icsd_t2_4_2',1,MA_ERR)
                IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     1               CALL ERRQUIT('icsd_t2_4_2',2,MA_ERR)
                CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     1               int_mb(k_a_offset),
     2               (h1b_1 - 1 + noab * (p8b_1 - noab - 1)))
                CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+p8b-1),int_mb(k_range+h1b-1),
     2               2,1,1.0d0)
                IF (.not.MA_POP_STACK(l_a)) 
     1               CALL ERRQUIT('icsd_t2_4_2',3,MA_ERR)
                IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     1               CALL ERRQUIT('icsd_t2_4_2',5,MA_ERR)
                CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1               int_mb(k_b_offset),
     2               (p8b_2 - noab - 1 + nvab * (h9b_2 - 1)))
                CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     1               1.0d0,dbl_mb(k_as),dim_common,dbl_mb(k_b),
     2               dim_common,1.0d0,dbl_mb(k_c),dima_sort)
                IF (.not.MA_POP_STACK(l_b)) 
     1               CALL ERRQUIT('icsd_t2_4_2',7,MA_ERR)
                IF (.not.MA_POP_STACK(l_as)) 
     1               CALL ERRQUIT('icsd_t2_4_2',8,MA_ERR)
               END IF
              END IF
             END IF
            END DO
           CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1          int_mb(k_c_offset),
     2          (h1b - 1 + noab * (h9b - 1)))
           IF (.not.MA_POP_STACK(l_c)) 
     1          CALL ERRQUIT('icsd_t2_4_2',10,MA_ERR)
           END IF
          END IF
         END IF
         next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_4_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 p8 )_f + = 1 * f ( h9 p8 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 3719 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 3720 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 3721 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 3722 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 3723 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h9b, p8b, h9b_1, p8b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
       DO p8b = noab+1,noab+nvab
        IF (next.eq.count) THEN
         IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)
     1                            +int_mb(k_spin+p8b-1).ne.4)) THEN
          IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p8b-1)) THEN
           IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p8b-1)) 
     1         .eq. irrep_f) THEN
            dimc = int_mb(k_range+h9b-1) * int_mb(k_range+p8b-1)
            CALL TCE_RESTRICTED_2(h9b,p8b,h9b_1,p8b_1)
            IF (dimc .gt. 0) THEN
             IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1            CALL ERRQUIT('icsd_t2_4_2_1',1,MA_ERR)
             CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1            int_mb(k_a_offset),
     2            (p8b_1 - 1 + (noab+nvab) * (h9b_1 - 1)))
             CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1            int_mb(k_c_offset),
     2            (p8b - noab - 1 + nvab * (h9b - 1)))
             IF (.not.MA_POP_STACK(l_a)) 
     1            CALL ERRQUIT('icsd_t2_4_2_1',4,MA_ERR)
            END IF
           END IF
          END IF
         END IF
         next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_icsd_t2_4_2_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 p8 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 3774 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 3775 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 3776 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 3777 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 3778 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h9b
      INTEGER p8b
      length = 0
      DO h9b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p8b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_4_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h9b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p8b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p8b - noab - 1 + nvab * (h9b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h9b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE icsd_t2_4_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 p8 )_vt + = 1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h9 p6 p8 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 3830 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 3831 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 3832 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 3833 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 3834 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h9b_2
      INTEGER h7b_2
      INTEGER p8b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_4_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h9b,h7b,p8b,p6b,h9b_2,h7b_2,p8b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_4_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_4_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_4_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_4_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_4_2_2',5,MA_ERR)
      IF ((h7b .le. h9b) .and. (p6b .le. p8b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p8b_2,p6b_2,h9b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1)
     &,4,2,1,3,1.0d0)
      END IF
      IF ((h7b .le. h9b) .and. (p8b .lt. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p6b_2,p8b_2,h9b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,-1.0d0)
      END IF
      IF ((h9b .lt. h7b) .and. (p6b .le. p8b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))),p8b_2,p6b_2,h7b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1)
     &,4,1,2,3,-1.0d0)
      END IF
      IF ((h9b .lt. h7b) .and. (p8b .lt. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))),p6b_2,p8b_2,h7b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1)
     &,3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_4_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_4_2_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_4_2_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_4_2_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h9b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (h9b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_4_2_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_4_2_2',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_4_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h1 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h9 h1 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 4018 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 4019 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 4020 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 4021 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 4022 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h9b_2
      INTEGER h7b_2
      INTEGER h1b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_4_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h9b,h7b,h1b,p6b,h9b_2,h7b_2,h1b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_4_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_4_3',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_4_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_4_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_4_3',5,MA_ERR)
      IF ((h7b .le. h9b) .and. (h1b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p6b_2,h1b_2,h9b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF ((h9b .lt. h7b) .and. (h1b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))),p6b_2,h1b_2,h7b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1)
     &,3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_4_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_4_3',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_4_3',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_4_3',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h9b-1),2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h9b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_4_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_4_3',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_4_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h1 )_vt + = -1/2 * Sum ( h8 p6 p7 ) * t ( p6 p7 h1 h8 )_t * v ( h8 h9 p6 p7 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 4175 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 4176 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 4177 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 4178 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 4179 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p7b
      INTEGER h8b
      INTEGER p6b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h9b_2
      INTEGER h8b_2
      INTEGER p6b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_4_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO p7b = p6b,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p6b,p7b,h1b,h8b,p6b_1,p7b_1,h1b_1,h8b_1)
      CALL TCE_RESTRICTED_4(h9b,h8b,p6b,p7b,h9b_2,h8b_2,p6b_2,p7b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+p7b-1) * int_m
     &b(k_range+h8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_4_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_4_4',2,MA_ERR)
      IF ((h8b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p6b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1)
     &,4,3,2,1,-1.0d0)
      END IF
      IF ((h1b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p6b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+h8b-1)
     &,3,4,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_4_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_4_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_4_4',5,MA_ERR)
      IF ((h8b .le. h9b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))),p7b_2,p6b_2,h9b_2,h8b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+p6b-1),int_mb(k_range+p7b-1)
     &,2,1,4,3,1.0d0)
      END IF
      IF ((h9b .lt. h8b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h9b_2 - 1)))),p7b_2,p6b_2,h8b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p6b-1),int_mb(k_range+p7b-1)
     &,1,2,4,3,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_4_4',6,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p6b .eq. p7b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_as),dim_common,dbl_
     &mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_4_4',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_4_4',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_4_4',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h1b-1),1,2,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h9b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_4_4',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_4_4',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_tf + = 1 * P( 2 ) * Sum ( p5 ) * t ( p3 p5 h1 h2 )_t * i1 ( p4 p5 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 4365 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 4366 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 4367 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 4368 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 4369 "icsd_t2.F" 2
      INTEGER d_a, d_b, d_c
      INTEGER k_a_offset, k_b_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,p4b,h1b,h2b,p5b,p3b_1,p5b_1,h1b_1,h2b_1,p4b_2,p5b_2
      INTEGER dim_common,dima_sort,dimb_sort,dima,dimb,dimc
      INTEGER k_a,l_a,k_c,l_c,k_as,l_as,k_cs,l_cs,k_b



      INTEGER offset_b

      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p4b = noab+1,noab+nvab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. 
     2           ieor(irrep_t,irrep_f)) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     1             CALL ERRQUIT('icsd_t2_5',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO p5b = noab+1,noab+nvab
               IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. 
     1             int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
                IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),
     1              ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     2              .eq. irrep_t) THEN
                 CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h2b,
     1                                 p3b_1,p5b_1,h1b_1,h2b_1)
                 CALL TCE_RESTRICTED_2(p4b,p5b,p4b_2,p5b_2)
                 dim_common = int_mb(k_range+p5b-1)
                 dima_sort = int_mb(k_range+p3b-1) 
     1                     * int_mb(k_range+h1b-1) 
     2                     * int_mb(k_range+h2b-1)
                 dima = dim_common * dima_sort
                 dimb_sort = int_mb(k_range+p4b-1)
                 dimb = dim_common * dimb_sort
                 IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     1                 CALL ERRQUIT('icsd_t2_5',1,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     1                 CALL ERRQUIT('icsd_t2_5',2,MA_ERR)
                  IF ((p5b .lt. p3b)) THEN
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     1                  int_mb(k_a_offset),(h2b_1 - 1 + noab * 
     2                  (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * 
     3                  (p5b_1 - noab - 1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1                  int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),
     2                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                  4,3,2,1,-1.0d0)
                  END IF
                  IF ((p3b .le. p5b)) THEN
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     1                  int_mb(k_a_offset),(h2b_1 - 1 + noab * 
     2                  (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * 
     3                  (p3b_1 - noab - 1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1                  int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),
     2                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                  4,3,1,2,1.0d0)
                  END IF
                  IF (.not.MA_POP_STACK(l_a)) 
     1                 CALL ERRQUIT('icsd_t2_5',3,MA_ERR)







                   call tce_hash(int_mb(k_b_offset),
     1                           (p5b_2-noab-1 + nvab * (p4b_2-noab-1)),
     2                           offset_b)
                   k_b = d_b + offset_b

                  CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     1                 1.0d0,dbl_mb(k_as),dim_common,dbl_mb(k_b),
     2                 dim_common,1.0d0,dbl_mb(k_cs),dima_sort)




                  IF (.not.MA_POP_STACK(l_as)) 
     1                 CALL ERRQUIT('icsd_t2_5',8,MA_ERR)
                 END IF
                END IF
               END IF
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     1             CALL ERRQUIT('icsd_t2_5',9,MA_ERR)
              IF ((p3b .le. p4b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1              int_mb(k_range+p4b-1),int_mb(k_range+h2b-1),
     2              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     3              4,1,3,2,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * 
     2              (h1b - 1 + noab * (p4b - noab - 1 + nvab * 
     3              (p3b - noab - 1)))))
              END IF
              IF ((p4b .le. p3b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1              int_mb(k_range+p4b-1),int_mb(k_range+h2b-1),
     2              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     3              1,4,3,2,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * 
     2              (h1b - 1 + noab * (p3b - noab - 1 + nvab * 
     3              (p4b - noab - 1)))))
              END IF
              IF (.not.MA_POP_STACK(l_c)) 
     1             CALL ERRQUIT('icsd_t2_5',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     1             CALL ERRQUIT('icsd_t2_5',11,MA_ERR)
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END



      SUBROUTINE icsd_t2_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p3 p5 )_f + = 1 * f ( p3 p5 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 4520 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 4521 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 4522 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 4523 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 4524 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b, p5b, p3b_1, p5b_1
      INTEGER dimc
      INTEGER k_a,l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p5b = noab+1,noab+nvab
        IF (next.eq.count) THEN
         IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1        +int_mb(k_spin+p5b-1).ne.4)) THEN
          IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
           IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p5b-1)) 
     1         .eq. irrep_f) THEN
            dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
            CALL TCE_RESTRICTED_2(p3b,p5b,p3b_1,p5b_1)
            IF (dimc .gt. 0) THEN
             IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1            CALL ERRQUIT('icsd_t2_5_1',1,MA_ERR)
             CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1            int_mb(k_a_offset),(p5b_1 - 1 + 
     2            (noab+nvab) * (p3b_1 - 1)))
             CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1            int_mb(k_c_offset),(p5b - noab - 1 + nvab * 
     2            (p3b - noab - 1)))
             IF (.not.MA_POP_STACK(l_a)) 
     1            CALL ERRQUIT('icsd_t2_5_1',4,MA_ERR)
            END IF
           END IF
          END IF
         END IF
         next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE OFFSET_icsd_t2_5_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p3 p5 )_f
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 4579 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 4580 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 4581 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 4582 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 4583 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER p5b
      length = 0
      DO p3b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_5_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p3b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p5b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p5b - noab - 1 + nvab * (p3b - noab - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE icsd_t2_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p3 p5 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 p3 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 4635 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 4636 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 4637 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 4638 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 4639 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER p3b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p5b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_5_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(p3b,h7b,p5b,p6b,p3b_2,h7b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_5_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_5_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_5_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_5_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_5_2',5,MA_ERR)
      IF ((h7b .le. p3b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p5b_2,p6b_2,p3b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1)
     &,4,2,1,3,-1.0d0)
      END IF
      IF ((h7b .le. p3b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p6b_2,p5b_2,p3b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_5_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_5_2',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_5_2',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_5_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (p3b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_5_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_5_2',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_5_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p3 p5 )_vt + = -1/2 * Sum ( h7 h8 p6 ) * t ( p3 p6 h7 h8 )_t * v ( h7 h8 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 4792 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 4793 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 4794 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 4795 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 4796 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p3b_1
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p5b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_5_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h7b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p6b,h7b,h8b,p3b_1,p6b_1,h7b_1,h8b_1)
      CALL TCE_RESTRICTED_4(h7b,h8b,p5b,p6b,h7b_2,h8b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1) * int_m
     &b(k_range+h8b-1)
      dima_sort = int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_5_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_5_3',2,MA_ERR)
      IF ((p6b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p6b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,2,4,3,1,-1.0d0)
      END IF
      IF ((p3b .le. p6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,1,4,3,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_5_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_5_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_5_3',5,MA_ERR)
      IF ((p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p5b_2,p6b_2,h8b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1)
     &,4,2,1,3,-1.0d0)
      END IF
      IF ((p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))),p6b_2,p5b_2,h8b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_5_3',6,MA_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_as),dim_common,dbl_mb(k
     &_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_5_3',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_5_3',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_5_3',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),2,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (p3b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_5_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_5_3',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = -1/2 * Sum ( h11 h9 ) * t ( p3 p4 h9 h11 )_t * i1 ( h9 h11 h1 h2 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 4978 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 4979 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 4980 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 4981 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 4982 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER h9b
      INTEGER h11b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h9b_1
      INTEGER h11b_1
      INTEGER h9b_2
      INTEGER h11b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_6',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO h9b = 1,noab
      DO h11b = h9b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &9b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h9b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p4b,h9b,h11b,p3b_1,p4b_1,h9b_1,h11b_1)
      CALL TCE_RESTRICTED_4(h9b,h11b,h1b,h2b,h9b_2,h11b_2,h1b_2,h2b_2)
      dim_common = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_6',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_6',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (h9b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h9b-1),int_mb(k_range+h11b-1
     &),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_6',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_6',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_6',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noab * (h9b_2 - 1)
     &))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_6',6,MA_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h9b .eq. h11b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_as),dim_common,dbl_mb(k
     &_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_6',7,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_6',8,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_6',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,4,3,2,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_6',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_6',11,MA_ER
     &R)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_6_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h11 h1 h2 )_v + = -1 * v ( h9 h11 h1 h2 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 5141 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 5142 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 5143 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 5144 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 5145 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h9b,h11b,h1b,h2b,h9b_1,h11b_1,h1b_1,h2b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
       DO h11b = h9b,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)
     1          +int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     2           .eq. irrep_v) THEN
              dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL TCE_RESTRICTED_4(h9b,h11b,h1b,h2b,
     1                              h9b_1,h11b_1,h1b_1,h2b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('icsd_t2_6_1',1,MA_ERR)
               if(.not.intorb) then
                CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1               int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2               (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3               (noab+nvab) * (h9b_1 - 1)))))
               else
                CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1               int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) * 
     2               (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3               (noab+nvab) * (h9b_1 - 1)))),
     4               h2b_1,h1b_1,h11b_1,h9b_1)
               end if
               CALL DSCAL(dimc,-1.0d0,dbl_mb(k_a),1)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab * (h1b - 1 + noab
     2              * (h11b - 1 + noab * (h9b - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('icsd_t2_6_1',4,MA_ERR)
              END IF
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE OFFSET_icsd_t2_6_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h11 h1 h2 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 5219 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 5220 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 5221 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 5222 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 5223 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h9b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_6_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h2b - 1 + noab * (h1b - 1 + noab * (h11b
     & - 1 + noab * (h9b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE icsd_t2_6_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h11 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p8 ) * t ( p8 h1 )_t * i2 ( h9 h11 h2 p8 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 5289 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 5290 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 5291 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 5292 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 5293 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h9b_2
      INTEGER h11b_2
      INTEGER h2b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_6_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p8b,h1b,p8b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h9b,h11b,h2b,p8b,h9b_2,h11b_2,h2b_2,p8b_2)
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_6_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_6_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p8b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_6_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_6_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_6_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p8b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h11b_2 - 1 + noab * (h9b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1
     &),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_6_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_6_2',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_6_2',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_6_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h9b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (h9b - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h9b-1),int_mb(k_range+h1b-1
     &),3,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h11b - 1 + noab * (h9b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_6_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_6_2',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_6_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h11 h1 p8 )_v + = 1 * v ( h9 h11 h1 p8 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 5442 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 5443 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 5444 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 5445 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 5446 "icsd_t2.F" 2
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h9b,h11b,h1b,p8b,h9b_1,h11b_1,h1b_1,p8b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
       DO h11b = h9b,noab
        DO h1b = 1,noab
         DO p8b = noab+1,noab+nvab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)
     1          +int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p8b-1).ne.8)) THEN
            IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1)) THEN
             IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) 
     2           .eq. irrep_v) THEN
              dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p8b-1)
              CALL TCE_RESTRICTED_4(h9b,h11b,h1b,p8b,
     1                              h9b_1,h11b_1,h1b_1,p8b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('icsd_t2_6_2_1',1,MA_ERR)
               IF ((h1b .le. p8b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p8b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h9b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p8b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + 
     3                (noab+nvab) * (h9b_1 - 1)))),
     4                p8b_1,h1b_1,h11b_1,h9b_1)
                end if
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(p8b - noab - 1 + nvab * 
     2              (h1b - 1 + noab * (h11b - 1 + noab * (h9b - 1)))))
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('icsd_t2_6_2_1',4,MA_ERR)
              END IF
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE OFFSET_icsd_t2_6_2_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h11 h1 p8 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 5521 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 5522 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 5523 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 5524 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 5525 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h9b
      INTEGER h11b
      INTEGER h1b
      INTEGER p8b
      length = 0
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_6_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p8b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h11b - 1 + noab * (h9b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE icsd_t2_6_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h11 h1 p8 )_vt + = 1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h9 h11 p6 p8 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 5591 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 5592 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 5593 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 5594 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 5595 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h11b
      INTEGER h1b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h9b_2
      INTEGER h11b_2
      INTEGER p8b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p8b-1).ne.8)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p8b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_6_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h9b,h11b,p8b,p6b,h9b_2,h11b_2,p8b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_6_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_6_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_6_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_6_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_6_2_2',5,MA_ERR)
      IF ((p6b .le. p8b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))),p8b_2,p6b_2,h11b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1
     &),4,2,1,3,1.0d0)
      END IF
      IF ((p8b .lt. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))),p6b_2,p8b_2,h11b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1
     &),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_6_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_6_2_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_6_2_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_6_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h9b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h9b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_6_2_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_6_2_2',11,M
     &A_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_6_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h9 h11 h1 h2 )_vt + = -1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( h9 h11 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 5758 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 5759 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 5760 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 5761 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 5762 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p6b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h9b_2
      INTEGER h11b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_6_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,p5b_1,p6b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(h9b,h11b,p5b,p6b,h9b_2,h11b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_6_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_6_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_6_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_6_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_6_3',5,MA_ERR)
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))),p6b_2,p5b_2,h11b_2,h9b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_6_3',6,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_as),dim_common,dbl_
     &mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_6_3',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_6_3',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_6_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h11b-1
     &),int_mb(k_range+h9b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),2,1,4,3,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (h9b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_6_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_6_3',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 4 ) * Sum ( h6 p5 ) * t ( p3 p5 h1 h6 )_t * i1 ( h6 p4 h2 p5 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 5923 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 5924 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 5925 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 5926 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 5927 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER h6b
      INTEGER p3b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h6b_1
      INTEGER p4b_2
      INTEGER h6b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_7',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h6b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h6b,p3b_1,p5b_1,h1b_1,h6b_1)
      CALL TCE_RESTRICTED_4(p4b,h6b,h2b,p5b,p4b_2,h6b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_7',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_7',2,MA_ERR)
      IF ((p5b .lt. p3b) .and. (h6b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h6b-1),int_mb(k_range+h1b-1)
     &,4,2,3,1,1.0d0)
      END IF
      IF ((p5b .lt. p3b) .and. (h1b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h6b-1)
     &,3,2,4,1,-1.0d0)
      END IF
      IF ((p3b .le. p5b) .and. (h6b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h1b-1)
     &,4,1,3,2,-1.0d0)
      END IF
      IF ((p3b .le. p5b) .and. (h1b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h6b-1)
     &,3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_7',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_7',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_7',5,MA_ERR)
c *** peta *****
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(h6b_2 -1 + noab * (p5b_2 - noab -1 +nvab * (h2b_2 - 1 + noab *
     &( p4b_2 - noab -1 )))))
c **************
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-1)
     &,3,1,2,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_7',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_7',7,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_7',8,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_7',9,MA_ERR)
      IF ((p3b .le. p4b) .and. (h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,4,2,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((p3b .le. p4b) .and. (h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,4,2,1,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((p4b .le. p3b) .and. (h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,2,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1 + nvab * (p4b - noab
     & - 1)))))
      END IF
      IF ((p4b .le. p3b) .and. (h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,2,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p3b - noab - 1 + nvab * (p4b - noab
     & - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_7',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_7',11,MA_ER
     &R)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END





      SUBROUTINE icsd_t2_7_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_v + = 1 * v ( h6 p3 h1 p5 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 6129 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 6130 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 6131 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 6132 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 6133 "icsd_t2.F" 2
      INTEGER d_a,d_c
      INTEGER k_a_offset,k_c_offset
      INTEGER NXTASK,next,nprocs,count
      INTEGER p3b,h6b,h1b,p5b,p3b_1,h6b_1,h1b_1,p5b_1
      INTEGER dimc
      INTEGER k_as,l_as,k_a,l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
c *** peta ***
      DO p3b = noab+1,noab+nvab
       DO h1b = 1,noab
        DO p5b = noab+1,noab+nvab
         DO h6b = 1,noab
c ************
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p5b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     2           .eq. irrep_v) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h6b-1) 
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
              CALL TCE_RESTRICTED_4(p3b,h6b,h1b,p5b,
     1                              p3b_1,h6b_1,h1b_1,p5b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'as',l_as,k_as)) 
     1              CALL ERRQUIT('icsd_t2_7_1',0,MA_ERR)
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('icsd_t2_7_1',1,MA_ERR)
               IF ((h6b .le. p3b) .and. (h1b .le. p5b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + 
     3                (noab+nvab) * (h6b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) * 
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + 
     3                (noab+nvab) * (h6b_1 - 1)))),
     4                p5b_1,h1b_1,p3b_1,h6b_1)
                end if
                CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+h6b-1),int_mb(k_range+p3b-1),
     2               int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),
     3               2,1,3,4,1.0d0)
               END IF
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('icsd_t2_7_1',2,MA_ERR)
c *** peta *****
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_as),dimc,
     1              int_mb(k_c_offset),(h6b -1 + noab * 
     2              (p5b - noab -1 +nvab * (h1b - 1 + noab * 
     3              ( p3b - noab -1 )))))
c **************
               IF (.not.MA_POP_STACK(l_as)) 
     1              CALL ERRQUIT('icsd_t2_7_1',5,MA_ERR)
              END IF
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END





      SUBROUTINE OFFSET_icsd_t2_7_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 6222 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 6223 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 6224 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 6225 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 6226 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER h6b
      INTEGER h1b
      INTEGER p5b
      length = 0
c *** peta ****
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
c *************
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p3b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('icsd_t2_7_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
c *** peta ***
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
c ************
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p3b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      addr = addr + 1
c *** peta ***
      int_mb(k_a_offset+addr) = h6b -1 + noab * (p5b - noab -1 +nvab * (
     &h1b - 1 + noab * ( p3b - noab -1 )))
c ************ 
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE icsd_t2_7_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_vt + = -1 * Sum ( p7 ) * t ( p7 h1 )_t * v ( h6 p3 p5 p7 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 6298 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 6299 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 6300 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 6301 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 6302 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h6b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER h6b_2
      INTEGER p5b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
c *** peta ***
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
c ************
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_7_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p7b,h1b,p7b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,h6b,p5b,p7b,p3b_2,h6b_2,p5b_2,p7b_2)
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_7_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_7_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p7b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_7_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_7_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_7_2',5,MA_ERR)
      IF ((h6b .le. p3b) .and. (p7b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))),p5b_2,p7b_2,p3b_2,h6b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p7b-1),int_mb(k_range+p5b-1)
     &,4,1,2,3,-1.0d0)
      END IF
      IF ((h6b .le. p3b) .and. (p5b .le. p7b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p7b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))),p7b_2,p5b_2,p3b_2,h6b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p7b-1)
     &,3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_7_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_7_2',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_7_2',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_7_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,3,2,4,1,-1.0d0)
c *** peta ***
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),
     &(h6b -1 + noab * (p5b - noab -1 +nvab * (h1b - 1 + noab *
     &( p3b - noab -1 )))))
c ************
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_7_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_7_2',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE icsd_t2_7_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_vt + = -1/2 * Sum ( h8 p7 ) * t ( p3 p7 h1 h8 )_t * v ( h6 h8 p5 p7 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 6468 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 6469 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 6470 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 6471 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 6472 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h6b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p7b
      INTEGER h8b
      INTEGER p3b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h6b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
c *** peta ***
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
c ************
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_7_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO h8b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p7b,h1b,h8b,p3b_1,p7b_1,h1b_1,h8b_1)
      CALL TCE_RESTRICTED_4(h6b,h8b,p5b,p7b,h6b_2,h8b_2,p5b_2,p7b_2)
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_7_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_7_3',2,MA_ERR)
      IF ((p7b .lt. p3b) .and. (h8b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h8b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p7b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1)
     &,4,2,3,1,1.0d0)
      END IF
      IF ((p7b .lt. p3b) .and. (h1b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p7b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h8b-1)
     &,3,2,4,1,-1.0d0)
      END IF
      IF ((p3b .le. p7b) .and. (h8b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h8b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1)
     &,4,1,3,2,-1.0d0)
      END IF
      IF ((p3b .le. p7b) .and. (h1b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+h8b-1)
     &,3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_7_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_7_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_7_3',5,MA_ERR)
      IF ((h8b .lt. h6b) .and. (p7b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))),p5b_2,p7b_2,h6b_2,h8b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p7b-1),int_mb(k_range+p5b-1)
     &,4,2,1,3,1.0d0)
      END IF
      IF ((h8b .lt. h6b) .and. (p5b .le. p7b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p7b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))),p7b_2,p5b_2,h6b_2,h8b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p5b-1),int_mb(k_range+p7b-1)
     &,3,2,1,4,-1.0d0)
      END IF
      IF ((h6b .le. h8b) .and. (p7b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))),p5b_2,p7b_2,h8b_2,h6b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p7b-1),int_mb(k_range+p5b-1)
     &,4,1,2,3,-1.0d0)
      END IF
      IF ((h6b .le. h8b) .and. (p5b .le. p7b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p7b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))),p7b_2,p5b_2,h8b_2,h6b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p5b-1),int_mb(k_range+p7b-1)
     &,3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_7_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_7_3',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_7_3',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_7_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,4,2,3,1,-1.0d0/2.0d0)
c *** peta ***
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),
     &(h6b -1 + noab * (p5b - noab -1 +nvab * (h1b - 1 + noab *
     &( p3b - noab -1 )))))
c ************
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_7_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_7_3',11,MA_
     &ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE icsd_t2_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( p3 p4 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 6703 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 6704 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 6705 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 6706 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 6707 "icsd_t2.F" 2
c *** peta ***
c#include "util.fh"
c*************
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p6b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
c *** peta ****
c      logical nodezero         ! True if node 0
c      double precision cpu     ! CPU sec counter
c      double precision wall    ! WALL sec counter
c *************
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('icsd_t2_8',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
c             cpu = - util_cpusec()
c             wall = - util_wallsec()
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,p5b_1,p6b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(p3b,p4b,p5b,p6b,p3b_2,p4b_2,p5b_2,p6b_2)
c             cpu = cpu + util_cpusec()
c             wall = wall + util_wallsec()
c             write(6,*)'      '
c             write(6,9022)ga_nodeid(),cpu, wall
c             write(6,*)'      '
c             call util_flush(6)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('icsd_t2_8',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &icsd_t2_8',2,MA_ERR)
c             cpu = - util_cpusec()
c             wall = - util_wallsec()
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
c             cpu = cpu + util_cpusec()
c             wall = wall + util_wallsec()
c             write(6,*)'      '
c             write(6,9020)ga_nodeid(),cpu, wall,h2b,h1b,p6b,p5b,dima
c             write(6,*)'      ' 
c             call util_flush(6)
c 
c             cpu = - util_cpusec()
c             wall = - util_wallsec()
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0)
c             cpu = cpu + util_cpusec()
c             wall = wall + util_wallsec()
c             write(6,*)'      '
c             write(6,9023)ga_nodeid(),cpu, wall
c             write(6,*)'      '
c             call util_flush(6)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('icsd_t2_8',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('icsd_t2_8',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &icsd_t2_8',5,MA_ERR)
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab
     &+nvab) * (p3b_2 - 1)))))
      else
c             cpu = - util_cpusec()
c             wall = - util_wallsec()
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab
     &+nvab) * (p3b_2 - 1)))),p6b_2,p5b_2,p4b_2,p3b_2)
c             cpu = cpu + util_cpusec()
c             wall = wall + util_wallsec()
c             write(6,*)'      '
c             write(6,9021)ga_nodeid(),cpu, wall,p6b_2,p5b_2,p4b_2,p3b_2,
c     6                    dimb
c             write(6,*)'      '
c             call util_flush(6)
      end if
c             cpu = - util_cpusec()
c             wall = - util_wallsec()
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,2,1,4,3,1.0d0)
c             cpu = cpu + util_cpusec()
c             wall = wall + util_wallsec()
c             write(6,*)'      '
c             write(6,9023)ga_nodeid(),cpu, wall
c             write(6,*)'      '
c             call util_flush(6)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('icsd_t2_8',6,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
c             cpu = - util_cpusec()
c             wall = - util_wallsec()
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_as),dim_common,dbl_
     &mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
c             cpu = cpu + util_cpusec()
c             wall = wall + util_wallsec()
c             write(6,*)'      '
c             write(6,9024)ga_nodeid(),cpu, wall
c             write(6,*)'      '
c             call util_flush(6)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('icsd_t2_8',7,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('icsd_t2_8',8,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &icsd_t2_8',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1)
     &,2,1,4,3,1.0d0/2.0d0)
c             cpu = - util_cpusec()
c             wall = - util_wallsec()
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
c             cpu = cpu + util_cpusec()
c             wall = wall + util_wallsec()
c             write(6,*)'      '
c             write(6,9025)ga_nodeid(),cpu, wall
c             write(6,*)'      '
c             call util_flush(6)
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('icsd_t2_8',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('icsd_t2_8',11,MA_ER
     &R)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
 9020 format('  T2 GA',i4,1x,'Cpu  wall ',2(f17.12,1x),1x,4i4,2x,i10)
 9021 format('  V2 GA',i4,1x,'Cpu  wall ',2(f17.12,1x),1x,4i4,2x,i10)
 9022 format('  TRANS',i4,1x,'Cpu  wall ',2(f17.12,1x))  
 9023 format('  SORT ',i4,1x,'Cpu  wall ',2(f17.12,1x))
 9024 format('  DGEMM',i4,1x,'Cpu  wall ',2(f17.12,1x))
 9025 format(' ADD_BL',i4,1x,'Cpu  wall ',2(f17.12,1x))
      RETURN
      END



      SUBROUTINE icsd_t2_8_test(d_a,k_a_offset,
     &                          d_b,k_b_offset,
     &                          d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( p3 p4 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 6946 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 6947 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 6948 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 6949 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 6950 "icsd_t2.F" 2
      INTEGER d_a,d_b,d_c
      INTEGER k_a_offset,k_b_offset,k_c_offset
      INTEGER next,nprocs,count
      INTEGER p3b,p4b,h1b,h2b
      INTEGER k_cs,l_cs
      INTEGER p5b,p6b
      INTEGER p5b_1,p6b_1,h1b_1,h2b_1
      INTEGER p3b_2,p4b_2,p5b_2,p6b_2
      INTEGER dima,dimb,dimc,dim_common,dima_sort,dimb_sort
      INTEGER k_a,l_a,k_b,l_b,k_c,l_c,k_bs,l_bs,k_as,l_as
!      INTEGER nsuperp(2),isuperp
      double precision alpha
      INTEGER NXTASK
      EXTERNAL NXTASK
!      DOUBLE PRECISION FACTORIAL
!      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p4b = p3b,noab+nvab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF (next.eq.count) THEN
           IF ((.not.restricted).or.
     &         ( int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)
     &          +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     &          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     &           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     &                  .eq. ieor(irrep_v,irrep_t)) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) 
     &             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     &          CALL ERRQUIT('icsd_t2_8',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO p5b = noab+1,noab+nvab
               DO p6b = p5b,noab+nvab
                IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq.
     &              int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
                 IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),
     &               ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     &                      .eq. irrep_t) THEN
                  CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,
     &                                  p5b_1,p6b_1,h1b_1,h2b_1)
                  CALL TCE_RESTRICTED_4(p3b,p4b,p5b,p6b,
     &                                  p3b_2,p4b_2,p5b_2,p6b_2)
                  dim_common = int_mb(k_range+p5b-1) 
     &                       * int_mb(k_range+p6b-1)
                  dima_sort = int_mb(k_range+h1b-1) 
     &                      * int_mb(k_range+h2b-1)
                  dimb_sort = int_mb(k_range+p3b-1) 
     &                      * int_mb(k_range+p4b-1)
                  dima = dim_common * dima_sort
                  dimb = dim_common * dimb_sort
                  IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
!
!
!
                   IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     &               CALL ERRQUIT('icsd_t2_8',1,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     &               CALL ERRQUIT('icsd_t2_8',2,MA_ERR)
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     &                  int_mb(k_a_offset),(h2b_1-1+noab*(h1b_1-1+noab*
     &                  (p6b_1-noab-1+nvab*(p5b_1-noab-1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                  int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),
     &                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     &                  4,3,2,1,1.0d0)
                   IF (.not.MA_POP_STACK(l_a)) 
     &               CALL ERRQUIT('icsd_t2_8',3,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs))
     &               CALL ERRQUIT('icsd_t2_8',4,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b))
     &               CALL ERRQUIT('icsd_t2_8',5,MA_ERR)
                   if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p6b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(p4b_2-1+(noab+nvab)*
     &                   (p3b_2-1)))))
                   else
                    CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p6b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(p4b_2-1+(noab+nvab)*
     &                   (p3b_2-1)))),p6b_2,p5b_2,p4b_2,p3b_2)
                   end if
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                  int_mb(k_range+p3b-1),int_mb(k_range+p4b-1),
     &                  int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),
     &                  2,1,4,3,1.0d0)
                   IF (.not.MA_POP_STACK(l_b)) 
     &               CALL ERRQUIT('icsd_t2_8',6,MA_ERR)
!                   nsuperp(1) = 1
!                   nsuperp(2) = 1
!                   isuperp = 1
!                   IF (p5b .eq. p6b) THEN
!                    nsuperp(isuperp) = nsuperp(isuperp) + 1
!                   ELSE
!                    isuperp = isuperp + 1
!                   END IF
                   if (p5b .eq. p6b) then
                    alpha = 1.0d0
                   else
                    alpha = 2.0d0
                   end if
!                   CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_as),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
                   CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     &                  alpha,dbl_mb(k_as),dim_common,dbl_mb(k_bs),
     &                  dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
                   IF (.not.MA_POP_STACK(l_bs)) 
     &               CALL ERRQUIT('icsd_t2_8',7,MA_ERR)
                   IF (.not.MA_POP_STACK(l_as)) 
     &               CALL ERRQUIT('icsd_t2_8',8,MA_ERR)
!
!
!
                  END IF
                 END IF
                END IF
               END DO
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     &          CALL ERRQUIT('icsd_t2_8',9,MA_ERR)
              CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &             int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),
     &             int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     &             2,1,4,3,0.5d0)
              CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     &             int_mb(k_c_offset),(h2b-1+noab*(h1b-1+noab*
     &             (p4b-noab-1+nvab*(p3b-noab-1)))))
              IF (.not.MA_POP_STACK(l_c)) 
     &          CALL ERRQUIT('icsd_t2_8',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     &          CALL ERRQUIT('icsd_t2_8',11,MA_ERR)
             END IF
            END IF
           END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
 9020 format('  T2 GA',i4,1x,'Cpu  wall ',2(f17.12,1x),1x,4i4,2x,i10)
 9021 format('  V2 GA',i4,1x,'Cpu  wall ',2(f17.12,1x),1x,4i4,2x,i10)
 9022 format('  TRANS',i4,1x,'Cpu  wall ',2(f17.12,1x))  
 9023 format('  SORT ',i4,1x,'Cpu  wall ',2(f17.12,1x))
 9024 format('  DGEMM',i4,1x,'Cpu  wall ',2(f17.12,1x))
 9025 format(' ADD_BL',i4,1x,'Cpu  wall ',2(f17.12,1x))
      RETURN
      END














      SUBROUTINE icsd_t2_8_spiral(d_a,k_a_offset,d_b,k_b_offset,
     1                            d_c,k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( p3 p4 p5 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 7128 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 7129 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 7130 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 7131 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 7132 "icsd_t2.F" 2

# 1 "tce_main.fh" 1
c $Id: tce_main.fh 21257 2011-10-20 18:44:41Z kowalski $
c
c Include file for TCE module
c
c Written by So Hirata (c) Battelle, PNNL (2002).
c
c from tce.fh (does not appear to be necessary for computer-generated code)
c
      integer l_offset, k_offset  ! Offset of blocks
      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
c
c      integer rtdb
c      logical nodezero                       ! True if node 0
c      integer iter                           ! Iteration counter
c      integer dummy                          ! Dummy argument for DIIS
c      double precision residual              ! Largest residual
c      character*255 filename
c
      integer bytes                           ! Number of bytes in a double
      integer max_size                        ! A large number
      parameter (max_size = 10000)
      integer max_files                       ! Maximum number of files
      parameter (max_files = 131072)
      integer geom                            ! Geometry handle
      integer ao_bas_han                      ! AO basis set handle
      logical oskel,oadapt                    ! Symmetry control parameters
      integer nbf,nshells                     ! Number of AO basis functions and shells
      integer ipol                            ! =1 (restricted), =2 (unrestricted)
      integer nocc(2)                         ! Number of alpha, beta electrons
      integer nmo(2)                          ! Number of alpha, beta orbitals
      integer nfc(2),nfv(2)                   ! Number of frozen cores/virtuals
      integer oactive(2)                      ! Number of active occupieds
      integer vactive(2)                      ! Number of active virtuals
      integer oatiles(2)                      ! Number of active occupied tiles
      integer vatiles(2)                      ! Number of active unoccupied tiles
      integer l_active,k_active               ! Active tiles (0-inactive, 1 otherwise)
      integer numact                          ! Active excitation level
c ccsd_act/eomccsd_act
      integer oact,uact        ! active space
      integer l_active_n,k_active_n ! Active tiles (0-inactive, 1 otherwise)
      integer l_active_o,k_active_o ! same as above but for orbitals
      double precision emin_act,emax_act ! energy interval for active CC calculations
c
      character*10 model                      ! CC model
      character*10 perturbative               ! PT model
      character*10 ccsd_var                   ! CCSD variant (CC2)
      logical left                            ! Dipole moments & dipole transition moments
      logical ampnorms                        ! Calculate and print amplitude norms
      logical diagnt1                         ! Calculate the T1 diagnostic
      logical fast_ccsd_t                     ! Use vectorized CCSD(T) code which does not produce CCSD[T]
      integer multipole                       ! Multipole moments
      integer maxiter                         ! Maximum number of Davidson iterations
      integer l_evl(2),k_evl(2)               ! MA handles for eigenvalues (AB)
      integer l_occ(2),k_occ(2)               ! MA handles for occupancies (AB)
      integer mult                            ! Ground state spin multiplicity
      integer nirreps                         ! Number of irreducible representations
      double precision maxdiff                ! New
      double precision thresh                 ! Convergence threshold for amplitude equation
      double precision printtol               ! Amplitude printing threshold
      double precision damp                   ! Damping on solver for T and Lambda
      double precision damp2                  ! Damping on solver 2 (regular response)
      double precision damp3                  ! Damping on solver 3 (imaginary response)
      double precision zlshift                ! Level Shift for T
      double precision zlshiftl               ! Level Shift for Lambda
      double precision zlshift2(2)            ! Level Shift for T(1) and L(1) in normal linear response
      double precision zlshift3(2)            ! Level Shift for T(R) and T(I) in imaginary response
      integer l_irs(2),k_irs(2)               ! Irreps of MOs
      integer nmix(2)                         ! Number of symmetry contaminations
      double precision tol2e                  ! 2-e integral tolerance
      integer g_movecs(2)                     ! GA handle for MO vectors
      integer l_irs_sorted,k_irs_sorted       ! MA handles for irreps
      integer l_evl_sorted,k_evl_sorted       ! MA handles for eigenvalues
      integer l_spin_sorted,k_spin_sorted     ! MA handles for eigenvalues
      integer l_movecs_sorted,k_movecs_sorted ! MA handles for MO coeffs
      integer rec_mem          !restart record size in MB
c tce.fh < integer l_spin, k_spin             ! Spins of blocks
c tce.fh < integer l_sym, k_sym               ! Symmetry of blocks
c tce.fh < integer l_range, k_range           ! Length of blocks
c tce.fh < integer l_offset, k_offset         ! Offset of blocks
c tce.fh < integer l_alpha,k_alpha            ! Alpha-izer of beta orbitals (for restricted case)
c tce.fh < integer noa,nob,nva,nvb            ! Number of blocks
c tce.fh < integer noab,nvab                  ! Number of blocks
      integer available                       ! Available memory in doubles
      character*255 filenames(max_files)      ! File name holder
      integer filehandles(max_files)          ! File handle holder
      integer filesizes(max_files)            ! File size holder
      logical fileisga(max_files)             ! True if a file is a GA
      logical activecalc                      !True for CCSDt, CCSDtq, EOMCCSDt,EOMCCSDtq
      integer nfiles                          ! Number of files
      integer ioalg                           ! 0 = Fortran Direct Access 
                                              ! 1 = Exclusive Access File Library
                                              ! 2 = Global Array Incore
                                              ! 3 = Shared File Library
                                              ! 4 = Replicated Exclusive Access Files
                                              ! 5 = Disk Resident Array Algorithm
                                              ! 6 = GA/EAF Replicated Algorithm
      integer reference                       ! 0 = DFT
                                              ! 1 = HF/SCF
      integer l_mo_index,k_mo_index           ! MA handles for MO index
c --- relevant if intorb = .true. ----
      character*10 model2e
c tce.fh < logical intorb 
      integer l_b2am,k_b2am
      integer l_spin_alpha,k_spin_alpha
      integer l_sym_alpha,k_sym_alpha
      integer l_range_alpha,k_range_alpha
      integer l_offset_alpha,k_offset_alpha
      integer d_v2orb
      integer l_o2o_offset                    ! Offset for offset to offset table
      integer k_o2o_offset                    ! Offset for offset to offset table
      integer l_o2ot_offset                   ! orbitals for offset to offset tables
      integer k_o2ot_offset                   ! orbitals for offset to offset tables
      integer l_v2_alpha_offset               ! Offset for 2e integrals if intorb=.true.
      integer k_v2_alpha_offset               ! Offset for 2e integrals if intorb=.true. 
      integer l_v2spin_offset
      integer k_v2spin_offset
c --------------------------------------
      integer tile_dim
      integer idisk,fast2e,ichop,imaxsize
c
      integer atpart                          ! number of groups teh atomic orbitals are divided to
      integer nalength(200)                   ! number of elements in each group
      integer a2length(200)                   ! pointers to the last nshell in a given group
c
      integer max_clocks
      parameter (max_clocks = 100)
      double precision cpusecs(max_clocks)    ! Multipurpose clock counter
      integer buffer_size                     ! Buffer size for tce_zero & reconcilefile
      parameter (buffer_size = 3000000)
c tce.fh < logical restricted
c
c     ALL IRREPS MOVED TO tce.fh
c
      integer target                          ! Target root
      character*4 targetsym                   ! Irrep of target root
      logical symmetry                        ! True if only roots with targetsym are sought
c
c     Integers
c 
      common /tcemaininteger/
     1  bytes,geom,ao_bas_han,nbf,nshells,ipol,nocc,nmo,nfc,nfv,maxiter,
     2  l_evl,k_evl,l_occ,k_occ,mult,nirreps,l_irs,k_irs,nmix,g_movecs,
     3  l_irs_sorted,k_irs_sorted,l_evl_sorted,k_evl_sorted,
     4  l_spin_sorted,k_spin_sorted,l_movecs_sorted,k_movecs_sorted,
     6  available,nfiles,filehandles,ioalg,
     7  reference,multipole,
     5  target,filesizes,oactive,
     6  vactive,oatiles,vatiles,l_active,k_active,numact,l_b2am,k_b2am,
     7  d_v2orb,l_spin_alpha,k_spin_alpha,l_sym_alpha,k_sym_alpha,
     8  l_range_alpha,k_range_alpha,l_offset_alpha,k_offset_alpha,
     9  l_o2o_offset,k_o2o_offset,l_o2ot_offset,k_o2ot_offset,
     1  l_v2_alpha_offset,k_v2_alpha_offset,l_v2spin_offset,
     2  k_v2spin_offset,atpart,nalength,a2length,tile_dim,
     3  idisk,fast2e,ichop,imaxsize,l_mo_index, k_mo_index,
     4  l_alpha,k_alpha,l_offset,k_offset,rec_mem,
     5  l_active_n,k_active_n,oact,uact,l_active_o,k_active_o
c
c     Doubles
c
      common /tcemaindouble/
     1  thresh,printtol,tol2e,cpusecs,
     2  zlshift,zlshiftl,zlshift2,zlshift3,
     3  maxdiff,damp3,emin_act,emax_act
c
c     Characters
c
      common /tcemainchar/
     1  model,perturbative,targetsym,model2e,filenames,ccsd_var
c
c     Logicals
c
      common /tcemainlogical/
     1  oskel,oadapt,left,fileisga,ampnorms,diagnt1,
     2  symmetry,activecalc,fast_ccsd_t

# 7133 "icsd_t2.F" 2
      integer d_a, d_b, d_c
      integer k_a_offset, k_b_offset, k_c_offset
      integer NXTASK, next, nprocs, count
      integer p3b, p4b, h1b, h2b, p5b, p6b
      integer p5b_1, p6b_1, h1b_1, h2b_1, p3b_2, p4b_2, p5b_2, p6b_2
      integer dim1,dim2,dim3,dim4,dim5,dim6
      integer dim12,dim34,dim56
      integer dima,dimb,dimc
      integer spn1,spn2,spn3,spn4,spn5,spn6
      integer spn12,spn34,spn56
      integer sym1,sym2,sym3,sym4,sym5,sym6
      integer sym12,sym34,sym56
      integer k_as, l_as, k_a, l_a
      integer k_bs, l_bs, k_b, l_b
      integer k_cs, l_cs, k_c, l_c
      integer nbh
      double precision alpha
      external NXTASK
c
c      print*,'entering icsd_t2_8_spiral (energy)'
c
      nprocs = ga_nnodes()
      count = 0
      next = nxtask(nprocs, 1)
c
      if (.not.ma_push_get(mt_dbl,tile_dim**4,'c',l_c,k_c)) 
     1     call errquit('icsd_t2_8',9,MA_ERR)
c
      do p3b = noab+1,noab+nvab
       dim3=int_mb(k_range+p3b-1)
       spn3=int_mb(k_spin +p3b-1)
       sym3=int_mb(k_sym  +p3b-1)
       do p4b = p3b,noab+nvab
        dim4=int_mb(k_range+p4b-1)
        spn4=int_mb(k_spin +p4b-1)
        sym4=int_mb(k_sym  +p4b-1)
c
        dim34 = dim3 * dim4
        spn34 = spn3 + spn4
        sym34 = ieor(sym3,sym4)
c
        do p5b = noab+1,noab+nvab
         dim5=int_mb(k_range+p5b-1)
         spn5=int_mb(k_spin +p5b-1)
         sym5=int_mb(k_sym  +p5b-1)
         do p6b = p5b,noab+nvab
          dim6=int_mb(k_range+p6b-1)
          spn6=int_mb(k_spin +p6b-1)
          sym6=int_mb(k_sym  +p6b-1)
c
          dim56 = dim5 * dim6
          spn56 = spn5 + spn6
          sym56 = ieor(sym5,sym6)
c
          dimb  = dim34 * dim56 
c
          if ( (dimb.gt.0) .and. (ieor(sym34,sym56).eq.0)
     1         .and. (spn34.eq.spn56) ) then
c
          if (next.eq.count) then
c
           call tce_restricted_4(p3b,p4b,p5b,p6b,
     1                           p3b_2,p4b_2,p5b_2,p6b_2)
c
           if (.not.ma_push_get(mt_dbl,dimb,'bs',l_bs,k_bs)) 
     1              call errquit('icsd_t2_8',4,MA_ERR)
           if (.not.ma_push_get(mt_dbl,dimb,'b',l_b,k_b)) 
     1              call errquit('icsd_t2_8',5,MA_ERR)
c
           if(.not.intorb) then
            call get_hash_block(d_b,dbl_mb(k_b),dimb,
     1           int_mb(k_b_offset),
     2           (p6b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + 
     3           (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * 
     4           (p3b_2 - 1)))))
           else
            call get_hash_block_i(d_b,dbl_mb(k_b),dimb,
     1           int_mb(k_b_offset),
     2           (p6b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + 
     3           (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * 
     4           (p3b_2 - 1)))),p6b_2,p5b_2,p4b_2,p3b_2)
           end if
c
           call tce_sort_4(dbl_mb(k_b),dbl_mb(k_bs),
     1          dim3,dim4,dim5,dim6,2,1,4,3,1.0d0)
c
           if (.not.ma_pop_stack(l_b)) 
     1              call errquit('icsd_t2_8',6,MA_ERR)
c
           do h1b = 1,noab
            dim1=int_mb(k_range+h1b-1)
            spn1=int_mb(k_spin +h1b-1)
            sym1=int_mb(k_sym  +h1b-1)
            do h2b = h1b,noab
             dim2=int_mb(k_range+h2b-1)
             spn2=int_mb(k_spin +h2b-1)
             sym2=int_mb(k_sym  +h2b-1)
c
             dim12 = dim1 * dim2
             spn12 = spn1 + spn2
             sym12 = ieor(sym1,sym2)
c
             dima  = dim12 * dim56
c
             if (dima.gt.0) then
c
              call tce_restricted_4(p5b,p6b,h1b,h2b,
     1                              p5b_1,p6b_1,h1b_1,h2b_1)
c
              if (spn34.eq.spn12) then
               if (spn56.eq.spn12) then
                if ((.not.restricted).or.((spn34+spn12).ne.8)) then
                 if (ieor(sym34,sym12).eq.0) then
                  if (ieor(sym56,sym12).eq.0) then
c 
                   dimc  = dim12 * dim34
c 
                   if (.not.ma_push_get(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     1                 call errquit('icsd_t2_8',0,MA_ERR)
c 
                   call dfill(dimc,0.0d0,dbl_mb(k_cs),1)
c 
                   if (.not.ma_push_get(mt_dbl,dima,'as',l_as,k_as)) 
     1                 call errquit('icsd_t2_8',1,MA_ERR)
                   if (.not.ma_push_get(mt_dbl,dima,'a',l_a,k_a)) 
     1                 call errquit('icsd_t2_8',2,MA_ERR)
c 
                   call get_hash_block(d_a,dbl_mb(k_a),dima,
     1                  int_mb(k_a_offset),
     2                  (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * 
     3                  (p6b_1 - noab - 1 + nvab * 
     4                  (p5b_1 - noab - 1)))))
c 
                   call tce_sort_4(dbl_mb(k_a),dbl_mb(k_as),
     1                  dim5,dim6,dim1,dim2,4,3,2,1,1.0d0)
c
                   if (.not.ma_pop_stack(l_a)) 
     1                 call errquit('icsd_t2_8',3,MA_ERR)
c
                   if (p5b .eq. p6b) then
                    alpha = 1.0d0
                   else
                    alpha = 2.0d0
                   end if
                   call dgemm('T','N',dim12,dim34,dim56,alpha,
     2                  dbl_mb(k_as),dim56,dbl_mb(k_bs),dim56,
     3                  1.0d0,dbl_mb(k_cs),dim12)
c
                   if (.not.ma_pop_stack(l_as)) 
     1                 call errquit('icsd_t2_8',8,MA_ERR)
c
                   call ga_nbwait(nbh) ! wait until previous put of c is gone before overwriting buffer
c
                   call tce_sort_4(dbl_mb(k_cs),dbl_mb(k_c),
     1                  dim4,dim3,dim2,dim1,2,1,4,3,0.5d0) 
c 
                   call add_hash_block_nb(d_c,dbl_mb(k_c),dimc,
     1                  int_mb(k_c_offset),(h2b-1+noab*(h1b-1+noab*
     2                  (p4b-noab-1+nvab*(p3b-noab-1)))),nbh)
c 
                   if (.not.ma_pop_stack(l_cs)) 
     1                 call errquit('icsd_t2_8',11,MA_ERR)
c
                  end if
                 end if
                end if
               end if
              end if
c
             endif ! dima>0
c
            end do
           end do
c
           if (.not.ma_pop_stack(l_bs)) 
     1              call errquit('icsd_t2_8',7,MA_ERR)
c
            next = NXTASK(nprocs, 1)
           end if ! next=count
           count = count + 1
c
          endif ! dimb>0
c
         end do
        end do
       end do
      end do
c
      if (.not.ma_pop_stack(l_c)) 
     1    call errquit('icsd_t2_8',10,MA_ERR)
c
      next = NXTASK(-nprocs, 1)
      call ga_sync()
c
c 9020 format('  T2 GA',i4,1x,'Cpu  wall ',2(f17.12,1x),1x,4i4,2x,i10)
c 9021 format('  V2 GA',i4,1x,'Cpu  wall ',2(f17.12,1x),1x,4i4,2x,i10)
c 9022 format('  TRANS',i4,1x,'Cpu  wall ',2(f17.12,1x))  
c 9023 format('  SORT ',i4,1x,'Cpu  wall ',2(f17.12,1x))
c 9024 format('  DGEMM',i4,1x,'Cpu  wall ',2(f17.12,1x))
c 9025 format(' ADD_BL',i4,1x,'Cpu  wall ',2(f17.12,1x))
c
      RETURN
      END





c
c
c
c
c
      SUBROUTINE licsd_t2_3x(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * v ( p3 p4 h2 p5 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 7354 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 7355 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 7356 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 7357 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 7358 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
cc      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
cc      EXTERNAL NXTVAL
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
cc      next = NXTVAL(nprocs)
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('licsd_t2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,p4b,h2b,p5b,p3b_2,p4b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb
     &(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('licsd_t2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &licsd_t2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('licsd_t2_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('licsd_t2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &licsd_t2_3',5,MA_ERR)
      IF ((h2b .le. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab
     &+nvab) * (p3b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab
     &+nvab) * (p3b_2 - 1)))),p5b_2,h2b_2,p4b_2,p3b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('licsd_t2_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('licsd_t2_3',7,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('licsd_t2_3',8,MA_ER
     &R)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &licsd_t2_3',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,3,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('licsd_t2_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('licsd_t2_3',11,MA_E
     &RR)
      END IF
      END IF
      END IF
cc      next = NXTVAL(nprocs)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
cc      next = NXTVAL(-nprocs)
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
c
c
c
c
c
c
c
c
c
c
c
c
      SUBROUTINE icsd_vt1t1_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offs
     &et)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vtt + = -1/2 * P( 2 ) * Sum ( h5 ) * t ( p3 h5 )_t * i1 ( h5 p4 h1 h2 )_vt
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 7532 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 7533 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 7534 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 7535 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 7536 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
cc      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER h5b
      INTEGER p3b_1
      INTEGER h5b_1
      INTEGER p4b_2
      INTEGER h5b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
cc      EXTERNAL NXTVAL
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
cc      next = NXTVAL(nprocs)
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO p4b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(irrep_t
     &,irrep_t))) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('vt1t1_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO h5b = 1,noab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h5b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p3b,h5b,p3b_1,h5b_1)
      CALL TCE_RESTRICTED_4(p4b,h5b,h1b,h2b,p4b_2,h5b_2,h1b_2,h2b_2)
      dim_common = int_mb(k_range+h5b-1)
      dima_sort = int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('vt1t1_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &vt1t1_1',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h5b_1
     & - 1 + noab * (p3b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h5b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('vt1t1_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('vt1t1_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &vt1t1_1',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h1b_2 - 1 + noab * (h5b_2 - 1 + noab * (p4b_2 - noa
     &b - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('vt1t1_1',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('vt1t1_1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('vt1t1_1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &vt1t1_1',9,MA_ERR)
      IF ((p3b .le. p4b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,4,3,2,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p4b - noab - 1 + nvab * (p3b - noab
     & - 1)))))
      END IF
      IF ((p4b .le. p3b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,3,4,2,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1 + nvab * (p4b - noab
     & - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('vt1t1_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('vt1t1_1',11,MA_ERR)
      END IF
      END IF
      END IF
cc      next = NXTVAL(nprocs)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
cc      next = NXTVAL(-nprocs)
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_icsd_vt1t1_1_1(l_a_offset,k_a_offset,size)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p3 h1 h2 )_vt
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 7685 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 7686 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 7687 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 7688 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 7689 "icsd_t2.F" 2
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER h5b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO p3b = noab+1,noab+nvab
      DO h5b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p3b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('vt1t1_1_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p3b = noab+1,noab+nvab
      DO h5b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p3b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h2b - 1 + noab * (h1b - 1 + noab * (h5b 
     &- 1 + noab * (p3b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+h5b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE icsd_vt1t1_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     $Id: icsd_t2.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p3 h1 h2 )_vt + = -2 * P( 2 ) * Sum ( p6 ) * t ( p6 h1 )_t * v ( h5 p3 h2 p6 )_v
      IMPLICIT NONE

# 1 "global.fh" 1

      integer ga_max_dim
      parameter (ga_max_dim = 7)
!
      integer ga_nnodes, ga_nodeid, ga_read_inc
      integer ga_pgroup_nnodes, ga_pgroup_nodeid
      integer nga_pgroup_nnodes, nga_pgroup_nodeid
      integer ga_spd_invert, ga_solve, ga_llt_solve
      integer ga_inquire_memory, ga_memory_avail
      integer nga_inquire_memory, nga_memory_avail
      logical ga_create, ga_destroy, ga_locate, ga_create_irreg
      logical nga_destroy
      logical ga_locate_region
      logical ga_compare_distr, ga_duplicate, ga_uses_ma
      logical nga_compare_distr, nga_duplicate, nga_uses_ma
      logical ga_memory_limited, nga_memory_limited
      logical ga_create_mutexes
      logical nga_create_mutexes
      logical ga_destroy_mutexes
      logical nga_destroy_mutexes
      logical ga_valid_handle, nga_valid_handle
      logical ga_verify_handle, nga_verify_handle
      logical ga_update2_ghosts
      logical ga_update3_ghosts
      logical ga_update4_ghosts
      logical ga_update5_ghosts
      logical ga_update6_ghosts
      logical ga_update7_ghosts
      logical ga_set_update4_info
      logical ga_set_update5_info
      logical nga_update_ghost_dir
      logical ga_has_ghosts, nga_has_ghosts
      integer ga_create_handle
      integer nga_create_handle
      logical ga_allocate
      integer ga_pgroup_create, nga_pgroup_create
      integer ga_pgroup_split, nga_pgroup_split
      integer ga_pgroup_split_irreg, nga_pgroup_split_irreg
      double precision ga_ddot, ga_ddot_patch
      double complex   ga_zdot, ga_zdot_patch
      double complex   nga_zdot_patch
      complex   ga_cdot, ga_cdot_patch
      complex   nga_cdot_patch
      double precision nga_ddot_patch, ga_wtime
      integer ga_idot
      integer nga_idot_patch
      integer ga_pgroup_get_default, ga_pgroup_get_mirror
      integer nga_pgroup_get_default, nga_pgroup_get_mirror
      integer ga_pgroup_get_world, nga_pgroup_get_world
      integer ga_ndim, nga_ndim
      real ga_sdot, ga_sdot_patch, nga_sdot_patch
      integer ga_is_mirrored, nga_is_mirrored
      integer ga_nbtest, nga_nbtest
!
      integer nga_read_inc
      integer ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      integer ga_cluster_procid, ga_cluster_proc_nodeid
      integer nga_locate_num_blocks
      integer ga_total_blocks, nga_total_blocks
      logical ga_uses_proc_grid, nga_uses_proc_grid
      logical nga_create, nga_locate, nga_create_irreg
      logical nga_locate_region
      logical nga_create_ghosts_irreg,nga_create_ghosts
      logical nga_create_config, nga_create_irreg_config
      logical nga_create_ghosts_irreg_config, nga_create_ghosts_config
      logical ga_get_debug, nga_get_debug
      integer ga_get_dimension, nga_get_dimension
      integer ga_get_pgroup, nga_get_pgroup
      integer ga_get_pgroup_size, nga_get_pgroup_size
      logical ga_pgroup_destroy, nga_pgroup_destroy
      integer ga_pgroup_absolute_id, nga_pgroup_absolute_id
      integer nga_register_type, nga_deregister_type
      logical nga_check_notify
!
      external ga_create, ga_destroy, ga_ddot, ga_locate
      external nga_destroy
      external ga_locate_region
      external ga_nnodes, ga_nodeid, ga_read_inc, ga_create_irreg
      external ga_pgroup_nnodes, ga_pgroup_nodeid
      external nga_pgroup_nnodes, nga_pgroup_nodeid
      external ga_ddot_patch, ga_compare_distr, ga_duplicate
      external nga_compare_distr, nga_duplicate
      external ga_inquire_memory, ga_uses_ma, ga_memory_limited
      external nga_inquire_memory, nga_uses_ma, nga_memory_limited
      external ga_memory_avail
      external ga_zdot, ga_zdot_patch
      external ga_cdot, ga_cdot_patch
      external ga_create_mutexes
      external nga_create_mutexes
      external ga_destroy_mutexes
      external nga_destroy_mutexes
      external ga_valid_handle, nga_valid_handle
      external ga_verify_handle, nga_verify_handle
      external ga_update2_ghosts
      external ga_update3_ghosts
      external ga_update4_ghosts
      external ga_update5_ghosts
      external ga_update6_ghosts
      external ga_update7_ghosts
      external ga_set_update4_info
      external ga_set_update5_info
      external nga_update_ghost_dir
      external ga_create_handle
      external nga_create_handle
      external ga_allocate
      external ga_pgroup_create, nga_pgroup_create
      external ga_pgroup_split, nga_pgroup_split
      external ga_pgroup_split_irreg, nga_pgroup_split_irreg
      external ga_has_ghosts, nga_has_ghosts
      external ga_pgroup_get_default, ga_pgroup_get_mirror
      external nga_pgroup_get_default, nga_pgroup_get_mirror
      external ga_pgroup_get_world, nga_pgroup_get_world
      external ga_ndim, nga_ndim
      external ga_spd_invert, ga_solve, ga_llt_solve
      external nga_read_inc, nga_create, nga_locate, nga_create_irreg
      external nga_locate_region
      external nga_create_ghosts_irreg,nga_create_ghosts
      external nga_create_config, nga_create_irreg_config
      external nga_create_ghosts_irreg_config,nga_create_ghosts_config
      external nga_ddot_patch, nga_zdot_patch, nga_cdot_patch
      external nga_idot_patch, ga_idot
      external ga_sdot, ga_sdot_patch, nga_sdot_patch
      external ga_cluster_nprocs, ga_cluster_nodeid, ga_cluster_nnodes
      external ga_cluster_procid, ga_cluster_proc_nodeid
      external ga_is_mirrored
      external nga_locate_num_blocks
      external ga_total_blocks
      external ga_uses_proc_grid, nga_uses_proc_grid
      external ga_get_debug, nga_get_debug
      external ga_get_pgroup, nga_get_pgroup
      external ga_get_pgroup_size, nga_get_pgroup_size
      external ga_pgroup_destroy, nga_pgroup_destroy
      external ga_wtime
      external ga_nbtest, nga_nbtest
      external ga_pgroup_absolute_id, nga_pgroup_absolute_id
      external nga_register_type, nga_deregister_type
      external nga_get_field, nga_nbget_field
      external nga_put_field, nga_nbput_field
      external nga_check_notify
!
# 7757 "icsd_t2.F" 2

# 1 "mafdecls.fh" 1
# 24 "mafdecls.fh"

!
!     constants
!

!     type declarations for datatype constants
      integer    MT_BYTE      ! byte
      integer    MT_INT       ! integer
      integer    MT_LOG       ! logical
      integer    MT_REAL      ! real
      integer    MT_DBL       ! double precision
      integer    MT_SCPL      ! single precision complex
      integer    MT_DCPL      ! double precision complex

      integer    MT_F_FIRST   ! first type
      integer    MT_F_LAST    ! last type

!     parameter declarations for datatype constants
      parameter    (MT_BYTE = (1000 + 9))
      parameter    (MT_INT = (1000 + 10))
      parameter    (MT_LOG = (1000 + 11))
      parameter    (MT_REAL = (1000 + 12))
      parameter    (MT_DBL = (1000 + 13))
      parameter    (MT_SCPL = (1000 + 14))
      parameter    (MT_DCPL = (1000 + 15))

      parameter    (MT_F_FIRST = MT_BYTE)
      parameter    (MT_F_LAST = MT_DCPL)

!
!     function types
!


      logical MA_alloc_get
      logical MA_allocate_heap
      logical MA_chop_stack
      logical MA_free_heap
      logical MA_free_heap_piece
      logical MA_get_index
      logical MA_get_next_memhandle
      logical MA_get_numalign
      logical MA_init
      logical MA_initialized
      logical MA_init_memhandle_iterator
      integer MA_inquire_avail
      integer MA_inquire_heap
      integer MA_inquire_heap_check_stack
      integer MA_inquire_heap_no_partition
      integer MA_inquire_stack
      integer MA_inquire_stack_check_heap
      integer MA_inquire_stack_no_partition
      logical MA_pop_stack
!     subroutine MA_print_stats
      logical MA_push_get
      logical MA_push_stack
      logical MA_set_auto_verify
      logical MA_set_error_print
      logical MA_set_hard_fail
      logical MA_set_numalign
      integer MA_sizeof
      integer MA_sizeof_overhead
!     subroutine MA_summarize_allocated_blocks
!     subroutine MA_trace
      logical MA_verify_allocator_stuff

      external MA_alloc_get
      external MA_allocate_heap
      external MA_chop_stack
      external MA_free_heap
      external MA_free_heap_piece
      external MA_get_index
      external MA_get_next_memhandle
      external MA_get_numalign
      external MA_init
      external MA_initialized
      external MA_init_memhandle_iterator
      external MA_inquire_avail
      external MA_inquire_heap
      external MA_inquire_heap_check_stack
      external MA_inquire_heap_no_partition
      external MA_inquire_stack
      external MA_inquire_stack_check_heap
      external MA_inquire_stack_no_partition
      external MA_pop_stack
      external MA_print_stats
      external MA_push_get
      external MA_push_stack
      external MA_set_auto_verify
      external MA_set_error_print
      external MA_set_hard_fail
      external MA_set_numalign
      external MA_sizeof
      external MA_sizeof_overhead
      external MA_summarize_allocated_blocks
      external MA_trace
      external MA_verify_allocator_stuff


!
!     variables
!
      character*1       byte_mb(2)

      integer           int_mb(2)

      logical           log_mb(2)

      real              real_mb(2)

      double precision  dbl_mb(2)

      complex           scpl_mb(2)

      double complex    dcpl_mb(2)

# 7758 "icsd_t2.F" 2

# 1 "sym.fh" 1
      logical sym_shell, sym_shell_pair, sym_atom, sym_atom_pair
      logical sym_char_table, sym_abelian_group
C      logical sym_shell_quartet, sym_atom_quartet
C$Id: sym.fh 19708 2010-10-29 18:04:21Z d3y133 $
      logical  sym_atom_quartet
      integer sym_center_map, sym_number_ops
      external sym_shell, sym_atom
      external sym_center_map, sym_number_ops
      external sym_shell_pair, sym_atom_pair
      external  sym_atom_quartet, sym_char_table
      external sym_abelian_group
C      external sym_shell_quartet, sym_atom_quartet
# 7759 "icsd_t2.F" 2

# 1 "errquit.fh" 1
c UERR - Not yet assigned to a catagory
c UNKNOWN_ERR - Not yet assigned to a catagory
c MEM_ERR - Generic Memory error
c RTDB_ERR - Error in the Runtime Database
c INPUT_ERR - Error resulting from inproper user input
c CAPMIS_ERR - Features that have not been implemented yet
c BASIS_ERR - Error related to basis sets
c GEOM_ERR - Error related to geometry
c MA_ERR - local memory error
c GA_ERR - global memory error
c INT_ERR - error related to integrals
c DISK_ERR - error in reading or writing from disk
c CALC_ERR - calcutation fails to converge
c FMM_ERR - 
c STACK_ERR - error in MA stack
c HEAP_ERR - error in MA heap
      integer UERR,UNKNOWN_ERR, MEM_ERR, RTDB_ERR, INPUT_ERR, CAPMIS_ERR
      integer BASIS_ERR, GEOM_ERR, GA_ERR, MA_ERR, INT_ERR, DISK_ERR
      integer CALC_ERR, FMM_ERR, STACK_ERR, HEAP_ERR
      parameter (UERR=0,UNKNOWN_ERR=0, MEM_ERR=10, RTDB_ERR=20,
     I  INPUT_ERR=30)
      parameter (CAPMIS_ERR=40, BASIS_ERR=50, GEOM_ERR=60, GA_ERR=70)
      parameter (MA_ERR=80, INT_ERR=90, DISK_ERR=100, CALC_ERR=110)
      parameter (FMM_ERR=120, STACK_ERR=11, HEAP_ERR=12)
c $Id: errquit.fh 21176 2011-10-10 06:35:49Z d3y133 $
# 7760 "icsd_t2.F" 2

# 1 "tce.fh" 1
c
c $Id: tce.fh 21409 2011-11-05 06:36:24Z d3y133 $
c
c     This is the universal header file for TCE subroutines.  Only variables which
c     must be shared by ALL subroutines should be placed here.  In other words,
c     only those variables needed by the computer-generated code or related to
c     intorb should be here.  Most variables should go in tce_main.fh, although
c     there are distinct headers for other features.
c
c     Warning: if you modify this file, the entire TCE must be recompiled.
c
c     - Jeff Hammond, January 2008
c
      integer l_spin, k_spin      ! Spins of blocks
      integer l_sym, k_sym        ! Symmetry of blocks
      integer l_range, k_range    ! Length of blocks
c      integer l_offset, k_offset  ! Offset of blocks
c      integer l_alpha,k_alpha     ! Alpha-izer of beta orbitals (for restricted case)
      integer noa,nob,nva,nvb     ! Number of blocks
      integer noab,nvab           ! Number of blocks
      integer irrep_e             ! Totally symmetric
      parameter (irrep_e = 0)
      integer irrep_e2            ! Totally symmetric
      parameter (irrep_e2 = 0)
      integer irrep_f             ! Totally symmetric
      parameter (irrep_f = 0)
      integer irrep_v             ! Totally symmetric
      parameter (irrep_v = 0)
      integer irrep_t             ! Totally symmetric
      parameter (irrep_t = 0)
      integer irrep_t1            ! Totally symmetric
      parameter (irrep_t1 = 0)
      integer irrep_t2            ! Totally symmetric
      parameter (irrep_t2 = 0)
      integer irrep_t3            ! Totally symmetric
      parameter (irrep_t3 = 0)
      integer irrep_x             ! Irreducible representation of X vector (X=EOM-RIGHT)
      integer irrep_y             ! Irreducible representation of Y vector (Y=EOM-LEFT
      integer irrep_d             ! Irreducible representation of D vector (D=dipole)
      integer irrep_o             ! Irreducible representation of O vector (O=operator)
      integer irrep_a             ! Generic irrep in property codes
      integer irrep_b             ! Generic irrep in property codes
      integer irrep_c             ! Generic irrep in property codes
      integer irrep_tr            ! Irreducible representation of T(1)
      integer irrep_yr            ! Irreducible representation of L(1) (L=Lambda)
      integer irrep_oa            ! Irreducible representation of property A
      integer irrep_ob            ! Irreducible representation of property B
      integer irrep_oc            ! Irreducible representation of property C
      integer irrep_od            ! Irreducible representation of property D
c
      integer irrep_tra           ! Irreducible representation of T(1) w.r.t. A
      integer irrep_trb           ! Irreducible representation of T(1) w.r.t. B
      integer irrep_trc           ! Irreducible representation of T(1) w.r.t. C
      integer irrep_trd           ! Irreducible representation of T(1) w.r.t. D
c
      integer idiv2e            ! offset related parameter
c
c     Currently not in use but I am reserving them for future use.
c
c      integer irrep_yra           ! Irreducible representation of L(1) w.r.t. A
c      integer irrep_yrb           ! Irreducible representation of L(1) w.r.t. B
c      integer irrep_yrc           ! Irreducible representation of L(1) w.r.t. C
c      integer irrep_yrd           ! Irreducible representation of L(1) w.r.t. D
c
c      integer irrep_qrab          ! For quadratic response whenever it gets done
c      integer irrep_qrac          ! QR=T(2)
c      integer irrep_qrad          ! Each of the unique off-diagonal components of
c      integer irrep_qrbc          ! (A,B,C,D) (x) (A,B,C,D) each has a symmetry handle, which is why
c      integer irrep_qrbd          ! handle, which is why there are six of them.
c      integer irrep_qrcd          !
c
c      integer irrep_z             ! Irreducible representation of Z vector (Z=Xi) (for EOM properties)
c      integer irrep_za            ! Irreducible representation of Z(1) vector w.r.t. A 
c      integer irrep_zb            ! Irreducible representation of Z(1) vector w.r.t. B
c      integer irrep_zc            ! Irreducible representation of Z(1) vector w.r.t. C
c      integer irrep_zd            ! Irreducible representation of Z(1) vector w.r.t. D
c
      logical restricted          ! As in RHF
      logical intorb              ! When using spatial indexing of the 2-electron integrals
c
      logical read_int,write_int
      logical read_ta,write_ta
      logical read_xa,write_xa
      logical read_in3,write_in3
      integer  nproc_read_tensor,nproc_write_tensor

      common /tceinteger/
     1  noa,nob,nva,nvb,noab,nvab,!l_alpha,k_alpha,
     2  l_spin,k_spin,l_sym,k_sym,l_range,k_range,!l_offset,k_offset,
     4  irrep_x,irrep_y,irrep_d,irrep_o,irrep_tr,irrep_yr,
     5  irrep_a,irrep_b,irrep_c,
     6  irrep_oa,irrep_ob,irrep_oc,irrep_od,
     7  irrep_tra,irrep_trb,irrep_trc,irrep_trd,
     8  nproc_read_tensor,nproc_write_tensor,idiv2e
c     8  irrep_yra,irrep_yrb,irrep_yrc,irrep_yrd
c     9  irrep_qrab,irrep_qrac,irrep_qrad,
c     1  irrep_qrbc,irrep_qrbd,irrep_qrcd,
c     2  irrep_z,irrep_za,irrep_zb,irrep_zc,irrep_zd

      common /tcelogical/
     1  restricted,intorb,read_int,write_int,read_ta,write_ta,
     2  read_xa,write_xa,read_in3,write_in3
# 7761 "icsd_t2.F" 2
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
cc      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h5b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER h5b_2
      INTEGER h2b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
cc      EXTERNAL NXTVAL
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
cc      next = NXTVAL(nprocs)
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h5b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h5b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h5b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('vt1t1_1_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,h5b,h2b,p6b,p3b_2,h5b_2,h2b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h5b-1) * int_mb
     &(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('vt1t1_1_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &vt1t1_1_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('vt1t1_1_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('vt1t1_1_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &vt1t1_1_2',5,MA_ERR)
      IF ((h5b .le. p3b) .and. (h2b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))),p6b_2,h2b_2,p3b_2,h5b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p6b-1)
     &,3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('vt1t1_1_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('vt1t1_1_2',7,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('vt1t1_1_2',8,MA_ERR
     &)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &vt1t1_1_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,3,2,4,1,-2.0d0/1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h5b - 1 + noab * (p3b - noab - 1)))
     &))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,3,2,1,4,2.0d0/1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h5b - 1 + noab * (p3b - noab - 1)))
     &))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('vt1t1_1_2',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('vt1t1_1_2',11,MA_ER
     &R)
      END IF
      END IF
      END IF
cc      next = NXTVAL(nprocs)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
cc      next = NXTVAL(-nprocs)
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
c
c
c
c
c
c
c
c
c
c




# 8423 "icsd_t2.F"

