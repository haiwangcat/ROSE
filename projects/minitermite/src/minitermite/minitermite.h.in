/* -*- C++ -*-
 * Copyright 2008 Adrian Prantl <adrian@complang.tuwien.ac.at>
 *
 * Configures the TERMITE term representation.
 */

/**
 * \mainpage
 * <h1>minitermite</h1>
 *  
 *
 *  
 * <h2>About</h2>
 *  
 * <p>Minitermite is a light-weight library that transforms C, C++, and
 * Fortran programs into a term-based representation of their abstract
 * syntax trees (AST) and vice versa. Minitermite is based on the ROSE
 * compiler.  From a end-user's point of view minitermite provides two
 * tools <code>src2term</code> and <code>term2src</code> that perform the transformation
 * between source code and term formats.</p>
 * <p>The term representation generated by minitermite is useful in many
 * applications, for example, source-to-source transformation.
 * The following diagram depicts how minitermite can be used to hook up a
 * Stratego term rewrite engine to the ROSE infrastructure:</p>
 *  
 * <pre> original    src2term            Stratego            term2src   transf'd
 * +--------+   +-----+                                  +----+   +--------+
 * |src1.c  |   |     |                                  |    |   |src1.c  |
 * |src2.f90|--&gt;|ROSE |-&gt;proj.term--&gt;TRANS--&gt;proj1.term-&gt;|ROSE|--&gt;|src2.f90|
 * |src3.cpp|   +-----+  ^            FORM!              |    |   |src3.cpp|
 * +--------+ -&gt; clang --|                               +----+   +--------+
 * </pre>
 *  
 * <p>In the past, we also successfully used (mini-)termite together with
 * the CiME3 term rewrite system and with the Prolog programming language
 * which we used to create static program analyses and compilers.  </p>
 *  
 * <p>For more information, please consult the man pages <code>src2term(1)</code> and
 * <code>term2src(1)</code> or run the tools with the <code>--help</code> option.</p>
 *  
 * <h3>Design</h3>
 *  
 * <p>For the term generation, we support 3.5 backends:</p>
 *  
 * <ul>
 * <li><p>STL
 * This is the default fall-back implementation based on C++ strings.</p></li>
 * <li><p>SWI-Prolog
 * If minitermite is configured with the <code>--with-swi-prolog</code> switch,
 * all terms are generated as native Prolog objects. This
 * representation is significantly more memory efficient, since Atoms
 * are shared. Also, Prolog queries can be executed on the term
 * representation in memory without having to go out to the disk.</p></li>
 * <li><p>Stratego
 * This backend is based off the STL backend and provides an alternate
 * syntax that is compatible with what the Stratego [1] term rewrite system
 * accepts. It can be activated by passing the <code>--stratego</code> switch to
 * <code>src2term</code> and friends.</p></li>
 * <li><p>Clang (C -> term only)
 * There is also a patch for an older version of the Clang compiler
 * that adds an <code>--emit-term</code> option. This is meant as an alternative
 * to the ROSE frontend. The patched version of Clang can be built with
 * the <code>make clang</code> target. It will fetch the required version of Clang
 * from SVN and apply the patch automatically.</p></li>
 * </ul>
 *  
 * <p>[1] http://strategoxt.org/</p>
 *  
 * <h3>Term grammar definition and additional tools</h3>
 *  
 * <p>Note: the following tools are written in Prolog and will only be
 * installed if minitermite is configured with the <code>--with-swi-prolog</code>
 * switch.</p>
 *  
 * <p>To aid with the debugging of rewrite, we are providing the tool
 * <code>termite_lint</code>, which checks term files against a formal grammar of
 * legal terms. The grammar can be found in <code>src/termite/termite_spec.pl</code>.</p>
 *  
 * <p>A pretty printer for terms is called <code>termpretty</code>.
 * The utilities <code>cime3-signatures</code> and <code>stratego-signatures</code> output the
 * term grammar in a format understood by the CiME3 and Stratego term
 * rewrite systems, respectively.</p>
 *  
 * <h2>Related work, Provenance</h2>
 *  
 * <p>Minitermite is a spin-off (friendly fork) of Termite [2] which is
 * distributed as part of the SATIrE program analysis framework [3] from
 * the Computer Languages group at Vienna University of Technology,
 * Austria.</p>
 *  
 * <p>[2] http://www.complang.tuwien.ac.at/adrian/termite
 * [3] http://www.complang.tuwien.ac.at/satire</p>
 *  
 * <h2>Authors</h2>
 *  
 * <p>The corresponding author and maintainer is Adrian Prantl. The original
 * Termite was based on an earlier prototype by Christoph Bonitz and
 * Markus Schordan.  Gergo Barany contributed the term_lint grammar
 * checker, as well as support for the ICFG and other PAG-based analyses
 * and numerous bug fixes and improvements. Several testcases were
 * contributed by Viktor Pavlu. The majority of the Clang front-end
 * integration was contributed by Dietmar Ebner with some help from
 * Florian Brandner.</p>
 *  
 * <h2>Installation instructions</h2>
 *  
 * <p>The following commands should do the job on a UNIX-like system::</p>
 *  
 * <pre>mkdir build &amp;&amp; cd build
 * ../configure --prefix=/usr/local --with-rosedir=/opt/rose 
 *              --with-boostdir=/usr --with-swi-prolog=no
 * make -j&lt;N&gt; install
 * make installcheck
 * </pre>
 *  
 * <h2>Dependencies</h2>
 *  
 * <p>ROSE: http://www.rosecompiler.org/
 * flex, yacc, boost</p>
 *  
 * <p>Optional: swi-prolog, clang, doxygen, rst2man</p>
 *  
 * <h2>License</h2>
 *  
 * <p>Just like SATIrE, minitermite is distributed under a permissive
 * three-clause BSD license. See COPYING for details.</p>
 *  

 */

#ifndef __TERMITE_H__
#define __TERMITE_H__

#define SWI_HOME_DIR "@SWI_PROLOG_HOME_DIR@"

#define ROSE_INCLUDE_DIR ROSE_INSTALLATION_PATH "/include"

#define DEBUG_TERMITE 0

extern bool yy_use_stratego_filter;

#include <rosePublicConfig.h>
#include <stl-term.h++>
#include <swipl-term.h++>
#include <stratego-term.h++>


#endif
