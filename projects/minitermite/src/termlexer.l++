%{ // -*- C++ -*-
/* 
Copyright 2006 Christoph Bonitz <christoph.bonitz@gmail.com>
     2007-2011 Adrian Prantl <adrian@complang.tuwien.ac.at>
*/
using namespace std;
#include <string>
#include <vector>
#include <iostream> 
#include <boost/algorithm/string.hpp>
#include "minitermite.h"
#include "termparser.tab.h++"

bool yy_use_stratego_filter = false;
int colno = 0;

void count() {
  for (int i = 0; yytext[i] != '\0'; i++)
    if (yytext[i] == '\n')
      colno = 0;
    else if (yytext[i] == '\t')
      colno += 8 - (colno % 8);
    else
      colno++;
} 

#define unescape() \
  /* expand sequences such as '\n' */                                \
  char buf[yyleng]; /* if anything, the string should get shorter */ \
  int i,j;                                                           \
  for (i = 0, j= 0; i < yyleng-2; ++i, ++j) {                        \
    if (yytext[j] == '\\' && i < yyleng-3) {                         \
      switch(yytext[j+1]) {                                          \
      case '\\': buf[i] = '\\'; ++j; break; /* Literal backslash  */ \
      case '\"': buf[i] = '\"'; ++j; break; /* Double quote       */ \
      case '\'': buf[i] = '\''; ++j; break; /* Single quote       */ \
      case  'n': buf[i] = '\n'; ++j; break; /* Newline (line feed)*/ \
      case  'r': buf[i] = '\r'; ++j; break; /* Carriage return    */ \
      case  'b': buf[i] = '\b'; ++j; break; /* Backspace          */ \
      case  't': buf[i] = '\t'; ++j; break; /* Horizontal tab     */ \
      case  'f': buf[i] = '\f'; ++j; break; /* Form feed          */ \
      case  'a': buf[i] = '\a'; ++j; break; /* Alert (bell)       */ \
      case  'v': buf[i] = '\v'; ++j; break; /* Vertical tab       */ \
      default: buf[i] = yytext[j]; /* nothing */                     \
      }                                                              \
    } else {                                                         \
      buf[i] = yytext[j];                                            \
    }                                                                \
  }                                                                  \
  buf[i] = 0;


%}
%option yylineno noyywrap

comment %[^\n]*
singlechar \"\\[0-9][0-9][0-9]\\\"
doublequoted \"([^\"\\]*(\\.[^\"\\]*)*)\"
quoted \'([^\'\\]*(\\.[^\'\\]*)*)\'
variable [A-Z][A-Za-z_]*
int \-?[0-9]+
float \-?[0-9]+\.[0-9]+
atom [a-z][A-Za-z_0-9]*
operator [\-\+\*\/\<\=\>\:\.\#]+

%%

{comment} { count(); }
[ \t\n]   { count(); }

{singlechar} {
          /* ISO Prolog insists on quoting Characters as "\123\" */
          /* which leads to this strange ambiguity */
          count();
          yytext[5] = 0;
          yylval.intValue = (int)strtol(yytext+2, NULL, 10);
          return(INT);
        }

{doublequoted} {
       /* FIXME write a more elegant regexp instead */
       if ((yyleng > 7) && (yytext[1] == '\\') && 
          (yytext[2] >= '0') && (yytext[2] <= '9') &&
          (yytext[3] >= '0') && (yytext[3] <= '9') &&
          (yytext[4] >= '0') && (yytext[4] <= '9') &&
          (yytext[5] == '\\') && (yytext[6] == '"')) REJECT; /* singlechar */
 

        count();
        yytext++;
        *(yytext + yyleng - 2) = '\0';
        unescape();
        yylval.strValue = new string(buf);
        if (yy_use_stratego_filter) {
          /* screw efficiency... */
          boost::replace_all(*yylval.strValue, "MINITERMITE-STRATEGO-BANG", "!");
          boost::replace_all(*yylval.strValue, "MINITERMITE-STRATEGO-OCTOTHORPE", "#");
        }
        return(STRING);
        }

{quoted} {
       /* FIXME write a more elegant regexp instead */
       if ((yyleng > 7) && (yytext[1] == '\\') && 
          (yytext[2] >= '0') && (yytext[2] <= '9') &&
          (yytext[3] >= '0') && (yytext[3] <= '9') &&
          (yytext[4] >= '0') && (yytext[4] <= '9') &&
          (yytext[5] == '\\') && (yytext[6] == '\'')) REJECT; /* singlechar */

        count();
        yytext++;
        *(yytext + yyleng - 2) = '\0';
        unescape();
        yylval.strValue = new string(buf);
        if (yy_use_stratego_filter) {
          /* screw efficiency... */
          boost::replace_all(*yylval.strValue, "MINITERMITE-STRATEGO-BANG", "!");
          boost::replace_all(*yylval.strValue, "MINITERMITE-STRATEGO-OCTOTHORPE", "#");
        }
        return(ATOM);
        }

{variable} { count(); yylval.strValue = new string(yytext); return(VARIABLE); }
{int}      { count(); yylval.intValue = atoi(yytext);       return(INT);      }
{float}    { count(); yylval.floatValue = atof(yytext);     return(FLOAT);    }
{atom}     { count(); yylval.strValue = new string(yytext); return(ATOM);     }
{operator} { count(); yylval.strValue = new string(yytext); return(OPERATOR); }
.          { count(); return(yytext[0]); }

%%
