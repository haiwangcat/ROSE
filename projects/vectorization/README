Project: Vectorization
------------------------------------------------------------------------------------------

Author: Pei-Hung Lin
Contact: lin32@llnl.gov, phlin@cs.umn.edu

Date Created       : July 2012

------------------------------------------------------------------------------------------
Motivation:
1. With the introduction of SIMD intrinsic functions, high-level language can perform the 
low-level SIMD instructions through these intrinsic function calls.  Therefore, code generation
for SIMD instructions in the high-level expression is feasable. ROSE, with its strength in 
source-to-source transforamtion, lacks such ability in its current software package.  Having
vectorization framework in ROSE can be beneficial to programmers to perform the vectorization 
without relying on back-end compiler.
2. Current compilers might miss vectorization opportunities in scientific benchmarks.  Some manual
transformations and vectorization might be necessary in pursuiting high performance. 

Reference:
Saeed Maleki, Yaoqing Gao, María Jesús Garzarán, Tommy Wong, David A. Padua: An Evaluation of Vectorizing Compilers. PACT 2011: 372-382
Pei-Hung Lin, J. Jayaraj, P. R. Woodward, P. Yew, A Code Transformation Framework for Scientific Applications on Structured Grids, Technical Report 11-021, UMN Computer Science and Engineering Technical Report, Sep. 2011.

------------------------------------------------------------------------------------------
Project Goal: 
This project will implement vectorization in ROSE

------------------------------------------------------------------------------------------
Design/Implementation:

1. Using source-to-source approach to generate vectorized code in the source code.
    a. Code transformation that improves code structure, and allow compiler to recoginze it.
    b. Generate SIMD intrinsic function calls to enforace the vector instruction.

2. Allow user to provide directive to identify the vectorizable loops.
3. Provide multiple-platform vectorization.  The translator generates unified code, and 
   the runtime library can map the functions to the intrinsic functions used on different 
   platform.

------------------------------------------------------------------------------------------
Instruction:
Command:
  vectorization -msse3 -lsimd source_code_name.c -I$(ROSE_BUILD_TREE)/include -L$(ROSE_BUILD_TREE)/lib

Options:
  -msse3 is for SSE 3
  -lsimd use the runtime library
  
Be sure to include the rose_simd.h in $(ROSE_BUILD_TREE)/include and link libsimd.a in $(ROSE_BUILD_TREE)/lib

------------------------------------------------------------------------------------------
Feasible capabilities:

Perform strip-mining for normal loop.
check if loop is innermost, and stride one structure.
Basic loop-level vectorization for most basic arithmetic operators.
Able to catch FMA (fused multiply-add instruction.) e.g. a = b * c + d;  ==> a = _SIMD_madd(b,c,d);
Able to handle multi-dimensional array in C.
Testing codes can be translated, and compiled by GNU C compiler with SSE 3 instructions.

Compiler support for SIMD versions:
SSE 3 : GCC 4.0.2+
SSE 4+: GCC 4.3.2+
AVX   : GCC 4.6+

(updated at Aug 16.)
------------------------------------------------------------------------------------------
TODO list:

1. Use Defuse analysis to take care of scalar statements in the vector loop.
2. Generate translation for most binaryOp (should be straight forward).
3. Generate translation for if statement in vector loop.  This has to follow Fortran's CVMGM instruction.
4. Generate translation for special mathematical functions, e.g. sin, cos, pow...
5. Create prologue and epiloge iterations if the loop iteratins isn't perfect.
6. Involve the data-dependence analysis in vectorization.
7. Subscript analysis.  Make sure the subscripts fulfill the SIMD requirement.
8. Alignment handling.  Except the __attribute__((aligned(x))), do we have better approach to force alignment?
9. Multi-platform:  need to test IBM platform using AltiVec instruction.  
10.Supports for SSE4.2, AVX instructions, but this requires support from later version of GCC (4.5+).


Note: To allow Fortan code to use this framework, we have to finish the Fortran-to-C work.
 
