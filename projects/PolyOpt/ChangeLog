2012-03-12  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* configure.ac: Bump to 0.2.1. Stop building legacy (broken) test
	scripts.
	* pocc-installer.sh: Update to pocc-1.1, which contains numerous
	fixes.

	* install.sh,
	* doc/polyopt.texi,
	* AUTHORS,
	* README,
	* INSTALL: Update the documentation. The project is now PolyOpt/C,
	to differentiate with Fortran.

	* src/Makefile.am,
	* tests/Makefile.am,
	* doc/Makefile.am,
	* polyopt/Makefile.am,
	* Makefile.am,
	* benchmarks/Makefile.am: Makefile massaging to make 'make dist'
	work.

2012-03-01 Mohanish Narayan <narayanm@cse.ohio-state.edu>
	Adding log2tex by swaroop.
	*    tests/regression/checker/scripts/log2tex
	*    tests/regression/checker/scripts/log2tex/icc.demo.speedup.csv
	*    tests/regression/checker/scripts/log2tex/configfile
	*    tests/regression/checker/scripts/log2tex/speedup-gen.sh
	*   tests/regression/checker/scripts/log2tex/speedup-gen.pl
	*   tests/regression/checker/scripts/log2tex/gengraphs.sh
	*    tests/regression/checker/scripts/log2tex/transpose.pl
	*    tests/regression/checker/scripts/log2tex/genh.pl
	*   tests/regression/checker/scripts/log2tex/log2tex.sh
	*    tests/regression/checker/scripts/log2tex/gcc.demo.speedup.csv

	Adding patch for generating combined speedup and data files.
	*    tests/regression/checker/scripts/speedup-gen.sh
	*    tests/regression/checker/scripts/speedup-gen.pl
	Adding a seprate MACRO for providing STACK_ARRAYS
	*    tests/regression/checker/scripts/checker_perfcorrect.sh

2012-02-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopParser.cpp: Fix a regression reg. scop splitting.

2012-02-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopParser.cpp,
	* polyopt/PastToSage.cpp: Fix a bug in the generation of new
	iterator names (was: incomplete symbol collection).

	* tests/unitary/bug-fix/rose_bug13.c,
	* tests/unitary/bug-fix/bug13.c: Associated regression tests.

2012-02-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* tests/unitary/bug-fix/rose_bug9.c,
	* tests/unitary/bug-fix/bug1.c,
	* tests/unitary/bug-fix/rose_bug8b.c,
	* tests/unitary/bug-fix/bug2.c,
	* tests/unitary/bug-fix/rose_bug9b.c,
	* tests/unitary/bug-fix/rose_bug8c.c,
	* tests/unitary/bug-fix/bug8.c,
	* tests/unitary/bug-fix/bug9.c,
	* tests/unitary/bug-fix/bug8b.c,
	* tests/unitary/bug-fix/rose_bug12.c,
	* tests/unitary/bug-fix/bug8c.c,
	* tests/unitary/bug-fix/bug9b.c,
	* tests/unitary/bug-fix/bug12.c,
	* tests/unitary/bug-fix/rose_bug1.c,
	* tests/unitary/bug-fix/rose_bug2.c,
	* tests/unitary/bug-fix/rose_bug8.c: Add regression test files for
	recently fixed bugs.

2012-02-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/SageTools.cpp: Fix missing case in ceil/floor parser.
	* polyopt/AffineConverter.cpp: Fix missing support of unary operators.

2012-02-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopParser.cpp: Prevent '>' and '>=' from appearing in a
	loop test.

2012-02-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/AffineConverter.cpp,
	* polyopt/ScopParser.cpp: Support min/max function calls inside
	control expressions. Prevent linear combinations of min/max to be
	parsed.

2012-02-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/SageTools.cpp: Fix a bug in checkGeneralEquivalence.

2012-02-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopExtractorVisitor.cpp: Update function documentation.
	* polyopt/ScopParser.cpp: Fix checkAffineExpressionsReadOnlySymbols.

2012-02-20 Mohanish Narayan <narayanm@cse.ohio-state.edu>
	Changing checker_perfcorrect.sh to support polybench-3.1
	* tests/regression/checker/scripts/checker_perfcorrect.sh


2012-01-20  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* AUTHORS,
	* src/Main.cpp,
	* configure.ac,
	* doc/polyopt.texi,
	* INSTALL,
	* polyopt/PolyOpt.cpp,
	* polyopt/ClastToSage.cpp,
	* polyopt/SageNodeAnnotation.cpp,
	* polyopt/ScopExtractorVisitor.cpp,
	* polyopt/ScopParser.cpp,
	* polyopt/SageTools.cpp,
	* polyopt/ScopExtractor.cpp,
	* polyopt/include/polyopt/ScopExtractor.hpp,
	* polyopt/include/polyopt/SageTools.hpp,
	* polyopt/include/polyopt/PoCCOptimize.hpp,
	* polyopt/include/polyopt/PolyOpt.hpp,
	* polyopt/include/polyopt/ClastToSage.hpp,
	* polyopt/include/polyopt/PastToSage.hpp,
	* polyopt/include/polyopt/PolyoptModule.hpp,
	* polyopt/include/polyopt/ScopExtractorVisitor.hpp,
	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/include/polyopt/AffineConverter.hpp,
	* polyopt/include/polyopt/ScopParser.hpp,
	* polyopt/include/polyopt/PolyDDV.hpp,
	* polyopt/include/polyopt/PolyOptDriver.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PastToSage.cpp,
	* polyopt/PolyoptModule.cpp,
	* polyopt/AffineConverter.cpp,
	* polyopt/PolyDDV.cpp,
	* polyopt/PolyOptDriver.cpp,
	* polyopt/PolyRoseOptions.cpp,
	* COPYING,
	* README,
	* LICENSE.txt,
	* README.txt: Update license and authors everywhere needed.

	* polyopt/PolyRoseOptions.cpp: Add options for various Pluto
	fusion heuristics.

	* polyopt/PastToSage.cpp: Add a missing guard when privatization is
	off.

	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PastToSage.cpp,
	* polyopt/PolyRoseOptions.cpp: Add integrated support for scalar
	privatization. Create the --polyopt-scalar-privatization flag.

	* polyopt/SageTools.cpp,
	* polyopt/PastToSage.cpp: Fix a bug in the handling of structs in
	loop bounds/conditionals.

2011-11-21 Mohanish Narayan <narayanm@cse.ohio-state.edu>
	Adding graph-gen scripts to checker
	* tests/regression/checker/README
	* tests/regression/checker/scripts/genh.pl
	* tests/regression/checker/scripts/speedup-gen.pl
	* tests/regression/checker/scripts/speedup-gen.sh
	* tests/regression/checker/scripts/gen-c-gcc-icc-graphs.sh
	* tests/regression/checker/scripts/transform-gcc-icc.template
	* tests/regression/checker/scripts/benchmark-gcc-icc.template

	Adding fixes to ctests. Computing run time by taking avg
	* tests/regression/ctests/scripts/PolyoptTestSuite-perfonly.py
	* tests/regression/ctests/scripts/PolyoptTestSuite-perfrefcorrect.py
	* tests/regression/ctests/scripts/PolyoptTestSuite-perfcorrect.py
	* tests/regression/ctests/scripts/postprocess

	Fixing the regression calculation
	* tests/regression/checker/scripts/checker_perfcorrect.sh

2011-11-19 Mohanish Narayan <narayanm@cse.ohio-state.edu>
	Adding fixes to test suites.
	*   tests/regression/ctests/scripts/PolyoptTestSuite-perfrefcorrect.py
	*   tests/regression/ctests/scripts/PolyoptTestSuite-perfcorrect.py
	*   tests/regression/ctests/scripts/PolyoptTestSuite-perfonly.py
	*   tests/regression/ctests/scripts/run.user
	*   tests/regression/ctests/scripts/run.default
	*   tests/regression/ctests/scripts/postprocess
	*   tests/regression/ctests/scripts/prepare
	*   tests/regression/ctests/scripts/csv.pl
	*   tests/regression/ctests/scripts/chk-begin-loop.sh
	*   tests/regression/ctests/scripts/runtest.sh

2011-09-09  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/AffineConverter.hpp,
	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/include/polyopt/ScopParser.hpp,
	* polyopt/ScopExtractorVisitor.cpp,
	* polyopt/AffineConverter.cpp,
	* polyopt/ScopParser.cpp: Fix a bug in the recognition of
	non-affine array dimensions. Improve the support of
	partially-affine arrays, by approximating only the non-affine
	dimensions by a scalar.

2011-09-08  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PolyOpy.cpp: Print the dependence type.

2011-09-08  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PolyOpy.cpp: Fix printing function, to conform A&K.

2011-08-30  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PolyOpt.cpp: Conform to standard Allen&Kennedy's
	definition of dependence distance (was: reverse of the definition,
	ddv were lexico-negative).

2011-08-26  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/ScopParser.hpp,
	* polyopt/AffineConverter.cpp,
	* polyopt/ScopExtractorVisitor.cpp,
	* polyopt/ScopParser.cpp: Fix a bug when a loop iterator is
	live-in to the scop.

2011-07-29 Mohanish Narayan <narayanm@cse.ohio-state.edu>
	Adding fixes to test suites.

	* tests/regression/checker/scripts/checker_perfcorrect.sh

	Adding polybench-2.1, and a robust csv generator
	* tests/regression/ctests/polybench-2.1.tar.gz
	* tests/regression/ctests/scripts/run.user
	* tests/regression/ctests/scripts/postprocess
	* tests/regression/ctests/scripts/csv.pl
	* tests/regression/ctests/scripts/prepare
	* tests/regression/ctests/Env

	Adding pending reference files
	* unitary/unitparametericloopbound.c
	* unitary/references/simplecond.passthru.reference.c
	* unitary/references/unitparametericloopbound.tile.reference.c
	* unitary/references/unitparametericloopbound.passthru.c
	* unitary/references/segfault1.pluto.reference.c
	* unitary/references/segfault2.pluto.reference.c
	* unitary/references/unitparametericloopbound.tile.c
	* unitary/references/redefiter.passthru.reference.c
	* unitary/references/unitparametericloopbound.passthru.reference.c




2011-07-28 Mohanish Narayan <narayanm@cse.ohio-state.edu>
	Adding checker_perfcorrect test suite
	*  tests/regression/checker
	*  tests/regression/checker/scripts
	*  tests/regression/checker/scripts/conflist-small.txt
	*  tests/regression/checker/scripts/checker_perfcorrect.sh
	*  tests/regression/checker/scripts/checker_plutotile.sh
	*  tests/regression/checker/scripts/checker_ptpup.sh
	*  tests/regression/checker/scripts/conflist-large.txt
	*  tests/regression/checker/scripts/checker.sh
	*  tests/regression/checker/scripts/compute_regressions.sh
	*  tests/regression/checker/scripts/add-benchmark.sh
	*  tests/regression/checker/scripts/tester.sh
	*  tests/regression/checker/scripts/checker_plutotilepar.sh
	*  tests/regression/checker/scripts/checker_correctness.sh
	*  tests/regression/checker/scripts/data_to_csv.sh
	*  tests/regression/checker/scripts/checker_passthru.sh
	*  tests/regression/checker/scripts/checker_plutotilemf.sh
	*  tests/regression/checker/scripts/checker_plutotileparunroll.sh
	*  tests/regression/checker/scripts/conflist-passthru.txt
	*  tests/regression/checker/scripts/checker_plutotileparmf.sh

2011-07-28  Mohanish Narayan <narayanm@cse.ohio-state.edu>
	Adding new unitary test suite files.
	*     tests/unitary/Makefile
	*     tests/unitary/test.sh
	*     tests/unitary/README

	Adding a new test
	*     tests/unitary/pasttosageassert.c

	Adding all the reference files
	*     tests/unitary/references
	*     tests/unitary/references/looptempvar2.passthru.reference.c
	*     tests/unitary/references/assigniter2.passthru.reference.c
	*     tests/unitary/references/parallel.passthru.reference.c
	*     tests/unitary/references/pasttosageassert.passthru.reference.c
	*     tests/unitary/references/twoconds.passthru.reference.c
	*     tests/unitary/references/parallel.par-tile.reference.c
	*     tests/unitary/references/empty.passthru.c
	*     tests/unitary/references/object.passthru.reference.c
	*     tests/unitary/references/noloop.passthru.reference.c
	*     tests/unitary/references/complexop.passthru.reference.c
	*     tests/unitary/references/binop.passthru.reference.c
	*     tests/unitary/references/twocondincond.passthru.reference.c
	*     tests/unitary/references/basicnest.passthru.reference.c
	*     tests/unitary/references/jacobi1d.passthru.reference.c
	*     tests/unitary/references/unitparametericloopbound.passthru.c
	*     tests/unitary/references/field.passthru.reference.c
	*     tests/unitary/references/loopbounds.passthru.reference.c
	*     tests/unitary/references/parenthesis.passthru.reference.c
	*     tests/unitary/references/noloop2.passthru.reference.c
	*     tests/unitary/references/initaddit.passthru.references.c
	*     tests/unitary/references/switch.passthru.reference.c
	*     tests/unitary/references/memory.pluto.reference.c
	*     tests/unitary/references/assigniter.pluto.reference.c
	*     tests/unitary/references/functioncall2.passthru.reference.c
	*     tests/unitary/references/float.passthru.reference.c
	*     tests/unitary/references/parallel.par.reference.c


2011-07-26  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopExtractorVisitor.cpp: Fix 'switch.c' unitary test fail.
	Was: missing support of switch and case constructs.

2011-07-26  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopExtractorVisitor.cpp: Fix 'while.c' unitary test fail.
	Was: missing support of while conditional nodes.
	* polyopt/SageTools.cpp: Fix 'negassing.c' unitary test fail.
	Was: incorrectly process all unary ops as write operators.

2011-07-21  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PastToSage.cpp: Fix a bug in the collecting of iterators
	for the case of single occurences of tiled one-time-loops.

2011-07-21  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PastToSage.cpp: Generate #pragma simd for ICC 12.0.

2011-07-18  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PastToSage.cpp: Add support of past_statement nodes. Only
	affine expressions in the body of the past_statement are supported.

2011-07-18  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* src/Makefile.am,
	* polyopt/Makefile.am: Update to link with piplib-hybrid.

2011-07-14  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* README.txt,
	* doc/polyopt.texi: Fix an error in min/max description.

2011-07-12  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* README.txt,
	* doc/polyopt.texi: Warn that PTile is stable in all cases but one.

2011-07-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* README.txt,
	* doc/polyopt.texi: Warn that PTile is unstable.

2011-07-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/SageTools.cpp: Add missing implementation to check the
	equivalence of Sage sub-trees.

2011-07-09  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* README.txt: New. Update.

2011-07-09  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* doc/polyopt.texi: Update.

2011-07-08  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* doc/polyrose.texi: Rename to...
	* doc/polyopt.texi: ... This.
	* doc/Makefile.am: Update accordingly.

2011-07-08  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PastToSage.cpp: Remove extra '&' in the generated tiling
	API call.

2011-07-08  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* doc/polyrose.texi: Write a first user documentation.

	* README.txt: New. README file based on doc/polyrose.texinfo.

2011-07-05  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PastToSage.cpp: Update the parametric tiling PACE API
	generated code, to pass the loop nest depth.

2011-07-05  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	Create 3 optimization paths in the option system:
	--polyopt-fixed-tiling
	--polyopt-parametric-tiling
	--polyopt-parallel-only

	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyRoseOptions.cpp: Add 3 main optimization paths in
	the option system.

2011-06-29  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyRoseOptions.cpp: Improve quiet option, restore
	pluto-parallel for ptile invoke.

2011-06-28  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/PastToSage.hpp,
	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyOpt.cpp,
	* polyopt/PastToSage.cpp,
	* polyopt/PolyRoseOptions.cpp: Implement PTile API for parametric
	tiling.

	* pace_tiling_api.c: Example of API.

2011-06-28  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/SageTools.cpp: Add missing case (cast operator) in
	collectReadWriteRefsFastImpl.

2011-06-27  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/SageTools.cpp: Add missing case (ternary operator) in
	collectReadWriteRefsFastImpl.

2011-06-27  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/PolyOptDriver.hpp,
	* polyopt/PolyOptDriver.cpp: New. Driver for PolyOpt.
	* polyopt/Makefile.am: Update accordingly.

	* polyopt/include/polyopt/PolyOpt.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyOpt.cpp,
	* polyopt/PolyRoseOptions.cpp: Expose parts of PolyOpt options to
	the driver. Create setters for the options.

2011-06-27  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopExtractor.cpp,
	* polyopt/include/polyopt/ScopExtractor.hpp,
	* polyopt/PolyOpt.cpp: Improve verbosity.

2011-06-27  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/SageTools.cpp: Add missing case in collectReadWriteRefsFastImpl.

2011-06-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopExtractor.cpp: Improve verbositty.
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyRoseOptions.cpp: Expose a setter for 'quiet' option.
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyOpt.cpp: Support C99 variable declaration in for
	loop init in annotations for vectorization.

2011-06-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PolyOpt.cpp: Fix typo in DDV invocation.

2011-06-23  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PolyOpt.cpp: Fix missing invocation of DDV computation.

2011-06-23  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/SageTools.cpp,
	* polyopt/include/polyopt/SageTools.hpp: Fix compilation warning.

	* polyopt/include/polyopt/ScopParser.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PastToSage.cpp,
	* polyopt/ScopExtractorVisitor.cpp,
	* polyopt/AffineConverter.cpp,
	* polyopt/ScopParser.cpp: Support C99 declaration of loop iterator
	in the loop init.

2011-06-20  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopExtractor.cpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyOpt.cpp,
	* polyopt/PastToSage.cpp,
	* polyopt/PolyRoseOptions.cpp: Provide option --polyopt-quiet.

2011-06-25  Mohanish Narayan  <narayanm@cse.ohio-state.edu>
	Adding INSTALL.standard file.
	This file contains install instructions for boost, rose
	and polyopt.
	* INSTALL.standard

2011-06-21  Mohanish Narayan  <narayanm@cse.ohio-state.edu>
	Adding fixes for ptile tests.
	The following files have been updated.
	*    ctests/scripts/run.ptile
	*    ctests/scripts/csv.pl
	*    ctests/scripts/PolyoptTestSuite.py
	*    ctests/scripts/chk-begin-loop.sh
	*    ctests/scripts/run.ptile.gcc
	*    ctests/scripts/prepare


2011-06-20  Mohanish Narayan  <narayanm@cse.ohio-state.edu>
	Added the ctest suite for polybench kernels.

	* tests/regression/ctests/
	* tests/regression/ctests/references
	* tests/regression/ctests/README
	* tests/regression/ctests/polybench-2.0.tar.gz
	* tests/regression/ctests/Makefile
	* tests/regression/ctests/Env
	* tests/regression/ctests/scripts
	* tests/regression/ctests/scripts/run.ptile
	* tests/regression/ctests/scripts/run.ptile.gcc
	* tests/regression/ctests/scripts/run.user
	* tests/regression/ctests/scripts/prepare
	* tests/regression/ctests/scripts/chk.sh
	* tests/regression/ctests/scripts/PolyoptTestSuite.py
	* tests/regression/ctests/scripts/postprocess
	* tests/regression/ctests/scripts/run.default
	* tests/regression/ctests/scripts/chk.pl
	* tests/regression/ctests/scripts/csv.pl
	* tests/regression/ctests/scripts/chk-begin-loop.sh


2011-06-13  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch changes the default back-end of PolyOpt. Was:
	ClastToSage, now: PastToSage.

	* polyopt/PolyRoseOptions.cpp: Systematically use pluto-parallel
	when using PTile. Use the PAST back-end by default.

2011-06-13  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/SageTools.cpp: Enable for loop iterator detection when
	the loop increment is not one.

	* polyopt/PastToSage.cpp: Enable assignment of loop iterator
	value, as generated by CLooG for some cases of one-time-loop
	optimizations.

2011-06-12  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* src/Makefile.am,
	* polyopt/Makefile.am: Fix missing includes.

2011-06-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/AffineConverter.cpp: Fix a potential bug in schedule
	generation.

2011-06-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/PastToSage.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PastToSage.cpp: Fix OpenMP pragma generation for PTile,
	and ensure newly created iterators do not use names already in use.

2011-06-10  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch finalizes the integration of parametric tiling in
	PolyOpt.

	* polyopt/include/polyopt/PastToSage.hpp,
	* polyopt/PolyOpt.cpp,
	* polyopt/PastToSage.cpp: Fix final bugs in PastToSage for
	parametric tiling support, add automatic #pragma omp generation.

2011-06-09  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/PoCCOptimize.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyOpt.cpp,
	* polyopt/PastToSage.cpp,
	* polyopt/PolyRoseOptions.cpp: Changes/bug fixes in supporting PTile.

2011-06-09  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PoCCOptimize.cpp: Fix typo.

2011-06-09  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PastToSage.cpp: Fix typo.

2011-06-09  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch adds the support for polyhedral parametric tiling,
	activated with --polyopt-codegen-use-ptile. By default, this
	option will invoke Pluto, as it is currently a pre-requesite for
	the PTile module to operate correctly.

	* polyopt/include/polyopt/PoCCOptimize.hpp,
	* polyopt/PoCCOptimize.cpp: Support PTile.

	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyRoseOptions.cpp: Create --polyopt-codegen-use-ptile
	option.

	* src/Makefile.am,
	* polyopt/Makefile.am: Link with the ptile and irconverter modules.

	* polyopt/PastToSage.cpp: Minor fix to handle opaque references,
	for parametric tile sizes.

	* polyopt/AffineConverter.cpp: Normalize schedules after scop
	extraction.

2011-06-09  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	Modify temporary headers, to be replaced when the correct license
	has been determined. As of now, LGPL v3 with copyright to OSU and
	myself.

	* polyopt/ScopExtractor.cpp,
	* polyopt/SageTools.cpp,
	* polyopt/include/polyopt/ClastToSage.hpp,
	* polyopt/include/polyopt/PastToSage.hpp,
	* polyopt/include/polyopt/AffineConverter.hpp,
	* polyopt/include/polyopt/PlutoRoseUtility.hpp,
	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/include/polyopt/SageTools.hpp,
	* polyopt/include/polyopt/ScopExtractor.hpp,
	* polyopt/include/polyopt/ScopExtractorVisitor.hpp,
	* polyopt/include/polyopt/PolyDDV.hpp,
	* polyopt/include/polyopt/ScopParser.hpp,
	* polyopt/include/polyopt/PoCCOptimize.hpp,
	* polyopt/include/polyopt/PolyOpt.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyOpt.cpp,
	* polyopt/ClastToSage.cpp,
	* polyopt/PastToSage.cpp,
	* polyopt/ScopExtractorVisitor.cpp,
	* polyopt/SageNodeAnnotation.cpp,
	* polyopt/AffineConverter.cpp,
	* polyopt/ScopParser.cpp,
	* polyopt/PolyDDV.cpp,
	* polyopt/PolyRoseOptions.cpp: Insert LGPL v3 header.

	* polyopt/PolyOptOptions.cpp: Delete.

2011-05-31  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopExtractor.cpp,
	* polyopt/include/polyopt/ScopParser.hpp,
	* polyopt/ClastToSage.cpp,
	* polyopt/ScopParser.cpp: Restore to rev 7557 (was: incorrect SVN
	commands issued by an external user).

2011-05-29  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/SageTools.cpp: Fix a bug in collectReadWriteRefFastImpl.

2011-05-29  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	This patch provides the option --polyopt-safe-math-func, which
	will interpret math function call (eg, sin, cos, sqrt, etc.) as
	side-effect free functions.

	* polyopt/include/polyopt/SageTools.hpp,
	* polyopt/SageTools.cpp,
	* polyopt/include/polyopt/ScopParser.hpp,
	* polyopt/ScopParser.cpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyRoseOptions.cpp,
	* polyopt/ScopExtractorVisitor.cpp: Implement a dedicated method
	to collect read/write references.

2011-05-26  Mohanish Narayan  <narayanm@cse.ohio-state.edu>
	* Added the following files in tests/unitary
	* - correlation.c correlation.passthru.c ifthenelse.c ifthenelse.passthru.c
	* - jacobi1d.c loopbounds.c looptempvar.c looptempvar2.c
	* - ludcmp.c ludcmp.passthru.c memory.c parallel.c
	* - segfault1.c segfault2.c switch.c while.c

2011-05-19  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PastToSage.cpp: Fix a bug in root node handling.

2011-05-19  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PastToSage.cpp: Update to match latest PAST API.

2011-05-19  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* INSTALL.lab: Minor update.

2011-05-19  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* pocc-installer.sh: Minor fix.

2011-05-18  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* INSTALL.lab: New. File to describe the installation for a lab
	machine.

2011-05-18  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* install.sh,
	* pocc-installer.sh: Provide routines to install on lab machines.

2011-05-12  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PoCCOptimize.cpp: Update to support latest PAST update.
	* pocc-installer.sh: Improve, automagically re-download/upgrade
	pocc.

2011-05-16  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* pocc-installer.sh: Minor fix.

2011-05-13  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PastToSage.cpp: Minor fix to match latest PAST update.

2011-05-12  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PoCCOptimize.cpp: Minor bug fix.

2011-05-12  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PoCCOptimize.cpp: Update to support latest PAST update.
	* pocc-installer.sh: Improve, automagically re-download/upgrade
	pocc.

2011-05-12  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/PastToSage.hpp,
	* polyopt/PastToSage.cpp: New. Unit to convert PAST to Sage AST.
	* polyopt/Makefile.am: Update accordingly.

	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyRoseOptions.cpp: Create new option
	--polyopt-use-past, to enable the PAST ast code generator.

	* polyopt/include/polyopt/PoCCOptimize.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyOpt.cpp: Update to conditionally use the PAST mechanism.

2011-05-12  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* pocc-installer.sh: Update to pocc-1.0-rc4 with PAST support.

2011-04-12  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/AffineConverter.cpp: Embed beta-prefix normalization in
	the schedule computation function.

2011-04-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/AffineConverter.hpp,
	* polyopt/AffineConverter.cpp: Normalize all beta prefix (in
	schedules) to 0. Candl supports only this shape for the schedule.

2011-04-08  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ClastToSage.cpp: Fix a bug when a for loop is declared
	both vectorizable and OpenMP parallelizable at the same time.

2011-04-08  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* COPYING.LESSER: New. License file for GNU Lesser GPL v3.

	* polyopt/ScopExtractor.cpp,
	* polyopt/SageTools.cpp,
	* polyopt/include/polyopt/ClastToSage.hpp,
	* polyopt/include/polyopt/ScopExtractor.hpp,
	* polyopt/include/polyopt/PlutoRoseUtility.hpp,
	* polyopt/include/polyopt/SageTools.hpp,
	* polyopt/include/polyopt/ScopExtractorVisitor.hpp,
	* polyopt/include/polyopt/AffineConverter.hpp,
	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/include/polyopt/ScopParser.hpp,
	* polyopt/include/polyopt/PolyDDV.hpp,
	* polyopt/include/polyopt/PolyRoseModule.hpp,
	* polyopt/include/polyopt/PoCCOptimize.hpp,
	* polyopt/include/polyopt/PolyOpt.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyOpt.cpp,
	* polyopt/ClastToSage.cpp,
	* polyopt/SageNodeAnnotation.cpp,
	* polyopt/ScopExtractorVisitor.cpp,
	* polyopt/AffineConverter.cpp,
	* polyopt/ScopParser.cpp,
	* polyopt/PolyDDV.cpp,
	* polyopt/PolyOptOptions.cpp,
	* polyopt/PolyRoseModule.cpp,
	* polyopt/PolyRoseOptions.cpp: Add a temporary header to all
	source files. Note: this header is technically not the good one as
	OSU should claim the copyright. But it's better than nothing.

2011-04-08  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ClastToSage.cpp: Fix a potential bug for infinite for
	loop generation (was: ROSE does not support empty test in a for
	loop).

2011-03-21  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ClastToSage.cpp: Fix a potential incorrect generation of
	OpenMP private() clauses.

2011-03-20  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PoCCOptimize.cpp: Set specific names for the scattering
	to the input of CLooG.

2011-03-20  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PoCCOptimize.cpp: Fix a bug with tile iterators incorrectly
	supported for some cases.

2011-03-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopExtractorVisitor.cpp: Fix a bug in the handling of
	if-then-else statement with an else clause that is
	Scop-compatible.

2011-03-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PoCCOptimize.cpp: Fix a bug in the interface between
	CLooG and Rose. Was: multiple parameters incorrectly handled due
	to strcmp call in CLooG.

2011-03-10  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* pocc-installer.sh: Update to PoCC rc3.1 version.
	* polyopt/PoCCOptimize.cpp: Update the cloogify_schedule function
	to mirror latest changes in PoCC.

	* polyopt/AffineConverter.cpp: Fix a potential bug.

2011-02-16  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	Fix a significant bug in code generation preparation.

	* polyopt/PoCCOptimize.cpp: Implement a pass-by-address mechanism
	to store parameter names in the CloogInput. The genuine CLooG
	method uses strdup, which is incompatible with pointer-based
	representations.

2011-02-16  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PoCCOptimize.cpp: Fix a missing include problem.

2011-02-15  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch provides two changes:
	1) Upgrade to pocc-1.0-rc3-generic. This implies
	   - changes in PoCC interfaces
	   - new functionalities (DDV computation from Candl)
	   - numerous bug fixes in the polyhedral engine
	   - up-to-date software for polyhedral computation

	2) Compute Dependence Distance Vector computation in PolyOpt, for
	SCoPs only. This is accessible as annotations, in the SageForInfo
	structure. Annotations are activated with
	--polyopt-annotate-only OR --polyopt-annotate-inner-loops,
	AND to activate DDV extraction --polyopt-compute-ddv.

	* pocc-installer.sh: Update to pocc-1.0-rc3-generic.
	* polyopt/include/polyopt/PoCCOptimize.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/include/polyopt/ClastToSage.hpp: Move from CloogProgram
	to CloogInput, revamp the interface with pocc/Cloog.

	* polyopt/include/polyopt/PolyDDV.hpp,
	* polyopt/PolyDDV.cpp: New. Unit to manage Dependence Distance Vectors.
	* polyopt/Makefile.am: Update accordingly.

	* polyopt/include/polyopt/SageNodeAnnotation.hpp: Annotate
	SgForStatement* loops (SageForInfo) with a vector of PolyDDV.

	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyRoseOptions.cpp: Create two new options:
	--polyopt-compute-ddv: creates DDVS for the SCoP program loops
	--polyopt-hullify-ddv: reduction of the DDV vector to a single element.

	* polyopt/PolyOpt.cpp: Support DDV computation for SCoPs.

2010-12-16  Arnold Schwaighofer <arnold.schwaighofer@rice.edu>
	This patch fixes a potential NULL pointer dereference in
	SageMemoryReferenceInfo's copy-constructor.

	* polyopt/include/polyopt/SageNodeAnnotation.hpp: Check
	alignmentExpression for NULL before calling copy.

2010-11-30  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch computes a fresh expression that represents the
	alignment information expression for an affine array access which
	is assumed to be padded for hardware alignment.  If the array
	index has stride-1 and the inner-loop is parallel, then the field
	alignmentExpression of SageMemoryReferenceInfo is filled.
	Ex:
	for (i = 0; i < N; ++i)
	  for (j = i + P; j < M; ++j)
	    A[i][j + 2] += 42;

	then A[i][j+2] is annotated with a SageMemoryReferenceInfo class,
	whose fields are set as:
	isStrideZero = 0
	isStrideOne = 1
	isMaybeAligned = 1
	alignmentExpression = A + i + P + 2

	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/PoCCOptimize.cpp: Add support for alignment expression
	computation.

2010-11-23  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/PoCCOptimize.cpp: Add support for isStrideZero field in
	the annotation for memory references.

2010-11-22  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch introduces a new annotation class,
	SageMemoryReferenceInfo. Memory references associated to arrays in
	polyhedral inner-most loop are annotated with this structure when
	using the option --polyopt-annotate-inner-loops.

	Field isStrideOne is set to 1 if the memory reference has stride-1
	access, to 0 otherwise.

	* polyopt/AffineConverter.cpp,
	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/include/polyopt/PoCCOptimize.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyOpt.cpp: Add annotation support for stride-1
	information at the level of the memory reference.

2010-11-19  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/SageNodeAnnotation.hpp: Add isStrideOne
	attribute for loops.

	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyOpt.cpp: Implement stride-one recognition for inner
	parallel loops.

2010-11-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* src/Makefile.am: Add explicit link to GMP include.

2010-11-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/Makefile.am: Add explicit link to GMP include.

2010-10-22  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch introduces a mechanism to annotate inner-most loops
	with parallelism and alignment information.

	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyRoseOptions.cpp,
	* src/Main.cpp: Add support for option
	--polyopt-annotate-inner-loops.

	* polyopt/ScopExtractor.cpp,

	* polyopt/ScopExtractorVisitor.cpp: Fix a minor issue for
	processing of subtrees during scop detection.

	* polyopt/include/polyopt/SageNodeAnnotation.hpp: Add isAligned
	flag to the SageForAnnotation class.

	* polyopt/include/polyopt/PoCCOptimize.hpp,
	* polyopt/include/polyopt/PolyOpt.hpp,
	* polyopt/PoCCOptimize.cpp,

	* polyopt/PolyOpt.cpp: Provide a mechanism to automatically
	annotate inner-most loops with SageForAnnotation. Currently sets
	only the isParallel flag.

2010-10-21  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ClastToSage.cpp: Support tile size larger than iteration
	domain during pragma generation (is: parallel loop iterator not
	in BB).

2010-10-21  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ClastToSage.cpp: Support clast_assignment nodes.

2010-10-08  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ClastToSage.cpp: Fix incorrect AST generation in min/max
	conditions (was: same node reused multiple times without copying
	it).

2010-10-07  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ClastToSage.cpp: Implement the generation of #pragma
	ivdep and #pragma vector always based on the input given by Pluto.

2010-10-06  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/include/polyopt/ClastToSage.hpp,
	* polyopt/ClastToSage.cpp: Implement the generation of the OpenMp
	pragma based on input given by Pluto for the parallel loops.

	* polyopt/include/polyopt/SageTools.hpp,
	* polyopt/SageTools.cpp: Create new function to retrieve the
	symbol associated to a loop iterator.

	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyRoseOptions.cppAdd option
	--polyopt-generate-pragmas, must be enabled to generate
	openmp/ivdep pragmas.

	* polyopt/PolyOpt.cpp: Optionally call reentrance (deactivated
	now).

2010-09-30  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/ScopExtractorVisitor.cpp: Earlier termination of the
	Scop processing when the scop does not contain any loop.

2010-09-29  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* install.sh,
	* pocc-installer.sh: Update to use the released version of PoCC
	instead of the SVN development one.

	* polyopt/include/polyopt/PolyRoseModule.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyRoseOptions.cpp: Fix previous patch reg. PAO module
	declaration.

2010-09-28  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PolyRoseOptions.cpp: Declare PAO module default value.

2010-09-27  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch merges the latest OSU changes into
	rice/PACE-code/branches/polyopt-2.0.

	* /: Full replacement (deletion+creation).

	* src/Makefile.am,
	* pocc-installer.sh,
	* README,
	* configure.ac,
	* polyopt/include/polyopt/PolyRoseModule.hpp,
	* polyopt/include/pacecc/PaoModule.hpp,
	* polyopt/Makefile.am,
	* polyopt/PolyOptModule.cpp: Fix PoCC installation directories,
	and update with PAO/PACE requirements.

2010-08-31  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch provides the option --polyopt-annotate-only. The input
	Sage project is analyzed using the affine framework, and parallel
	loops are annotated with SageForInfo class, bit isParallel set to
	one.

	* src/Main.cpp,
	* polyopt/AffineConverter.cpp,
	* polyopt/include/polyopt/ClastToSage.hpp,
	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyOpt.cpp,
	* polyopt/PolyRoseOptions.cpp,
	* polyopt/Makefile.am,
	* polyopt/ClastToSage.cpp: Update to support annotation of
	parallel for loops.

2010-08-30  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyopt/PoCCOptimize.cpp,
	* polyopt/PolyRoseOptions.cpp: Add support for nicer
	pretty-printing in pluto: string representation of sage
	nodes (iterator/parameter names) are now given as a scop
	information.

2010-08-29  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch finalizes the analysis of non-linearized affine
	expressions (eg, (1 + 2) * i <=> 3 * i).
	Provide option --polyopt-f2c-scop-extractor (dummy at the moment).
	Start implementation of array access function delinearization.

	* polyopt/ScopExtractorVisitor.cpp,
	* polyopt/AffineConverter.cpp,
	* polyopt/SageTools.cpp,
	* polyopt/ScopParser.cpp,
	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/include/polyopt/AffineConverter.hpp,
	* polyopt/include/polyopt/ScopExtractorVisitor.hpp,
	* polyopt/include/polyopt/ScopParser.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp,
	* polyopt/PolyOpt.cpp,
	* polyopt/PolyRoseOptions.cpp: Improve the robustness of the
	expression evaluator, start array delinearization implementation.

2010-08-26  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	Patch 3/2 to rename polyrose into polyopt...

	* src/Main.cpp,
	* configure.ac,
	* Makefile.am: Fix last remaining occurences of 'polyrose'.

2010-08-26  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	Patch 2/2 to rename polyrose into polyopt.

	* polyopt/include/polyrose/ClastToSage.hpp,
	* polyopt/include/polyrose/SageNodeAnnotation.hpp,
	* polyopt/include/polyrose/PlutoRoseUtility.hpp,
	* polyopt/include/polyrose/ScopExtractor.hpp,
	* polyopt/include/polyrose/AffineConverter.hpp,
	* polyopt/include/polyrose/ScopExtractorVisitor.hpp,
	* polyopt/include/polyrose/SageTools.hpp,
	* polyopt/include/polyrose/ScopParser.hpp,
	* polyopt/include/polyrose/PoCCOptimize.hpp,
	* polyopt/include/polyrose/PolyOpt.hpp,
	* polyopt/include/polyrose/PolyRoseOptions.hpp: Rename to...

	* polyopt/include/polyopt/ClastToSage.hpp,
	* polyopt/include/polyopt/SageNodeAnnotation.hpp,
	* polyopt/include/polyopt/PlutoRoseUtility.hpp,
	* polyopt/include/polyopt/ScopExtractor.hpp,
	* polyopt/include/polyopt/AffineConverter.hpp,
	* polyopt/include/polyopt/ScopExtractorVisitor.hpp,
	* polyopt/include/polyopt/SageTools.hpp,
	* polyopt/include/polyopt/ScopParser.hpp,
	* polyopt/include/polyopt/PoCCOptimize.hpp,
	* polyopt/include/polyopt/PolyOpt.hpp,
	* polyopt/include/polyopt/PolyRoseOptions.hpp: ... This.

2010-08-26  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	Patch 1/2 to rename polyrose into polyopt.

	* polyrose/ScopExtractor.cpp,
	* polyrose/ScopExtractorVisitor.cpp,
	* polyrose/SageNodeAnnotation.cpp,
	* polyrose/AffineConverter.cpp,
	* polyrose/SageTools.cpp,
	* polyrose/ScopParser.cpp,
	* polyrose/include/polyrose/ClastToSage.hpp,
	* polyrose/include/polyrose/SageNodeAnnotation.hpp,
	* polyrose/include/polyrose/PlutoRoseUtility.hpp,
	* polyrose/include/polyrose/ScopExtractor.hpp,
	* polyrose/include/polyrose/AffineConverter.hpp,
	* polyrose/include/polyrose/ScopExtractorVisitor.hpp,
	* polyrose/include/polyrose/SageTools.hpp,
	* polyrose/include/polyrose/ScopParser.hpp,
	* polyrose/include/polyrose/PoCCOptimize.hpp,
	* polyrose/include/polyrose/PolyOpt.hpp,
	* polyrose/include/polyrose/PolyRoseOptions.hpp,
	* polyrose/PoCCOptimize.cpp,
	* polyrose/PolyOpt.cpp,
	* polyrose/PolyRoseOptions.cpp,
	* polyrose/Makefile.am,
	* polyrose/ClastToSage.cpp: Rename to...

	* polyopt/ScopExtractor.cpp,
	* polyopt/ScopExtractorVisitor.cpp,
	* polyopt/SageNodeAnnotation.cpp,
	* polyopt/AffineConverter.cpp,
	* polyopt/SageTools.cpp,
	* polyopt/ScopParser.cpp,
	* polyopt/include/polyrose/ScopExtractor.hpp,
	* polyopt/include/polyrose/AffineConverter.hpp,
	* polyopt/include/polyrose/ScopExtractorVisitor.hpp,
	* polyopt/include/polyrose/SageTools.hpp,
	* polyopt/include/polyrose/PoCCOptimize.hpp,
	* polyopt/include/polyrose/PolyOpt.hpp,
	* polyopt/include/polyrose/PolyRoseOptions.hpp,
	* polyopt/PolyOpt.cpp,
	* polyopt/PolyRoseOptions.cpp,
	* polyopt/Makefile.am,
	* polyopt/ClastToSage.cpp: ... This.

	* src/Makefile.am: Update accordingly.

2010-08-26  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyrose/include/polyrose/PolyRose.hpp,
	* polyrose/PolyRose.cpp: Delete.

	* polyrose/include/polyrose/PolyOpt.hpp,
	* polyrose/PolyOpt.cpp: New. Entry point for the library. Expose
	high-level functions for AST annotations (eg, dependence analysis
	only).

	* polyrose/Makefile.am,
	* src/Main.cpp: Update accordingly.

	* polyrose/include/polyrose/ScopExtractor.hpp,
	* polyrose/ScopExtractor.cpp: Expose sub-tree scop detection
	functions.

2010-08-26  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyrose/ScopExtractor.cpp,
	* polyrose/ScopExtractorVisitor.cpp,
	* polyrose/AffineConverter.cpp,
	* polyrose/ScopParser.cpp,
	* polyrose/include/polyrose/ClastToSage.hpp,
	* polyrose/include/polyrose/PolyRose.hpp,
	* polyrose/include/polyrose/SageNodeAnnotation.hpp,
	* polyrose/include/polyrose/ScopExtractor.hpp,
	* polyrose/include/polyrose/AffineConverter.hpp,
	* polyrose/include/polyrose/ScopExtractorVisitor.hpp,
	* polyrose/include/polyrose/ScopParser.hpp,
	* polyrose/ClastToSage.cpp,
	* polyrose/PolyRose.cpp: Clean, refactor and document the code.

	* polyrose/SageTools.cpp,
	* polyrose/include/polyrose/SageTools.hpp: New. Unit containing
	static functions useful for Sage AST manipulation (reference
	manipulation, AST pattern-matching).

	* polyrose/Makefile.am: Update accordingly.


2010-08-25  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch extends polyopt capabilities with:
	- C structures: a.b is correctly parsed as a variable (occuring in
	an array index, loop bound, etc.)
	- Complex expressions: (1 + 2) * i is correctly parsed as 3 * i.

	* polyrose/ScopExtractorVisitor.cpp,
	* polyrose/AffineConverter.cpp,
	* polyrose/ScopParser.cpp,
	* polyrose/include/polyrose/ClastToSage.hpp,
	* polyrose/include/polyrose/SageNodeAnnotation.hpp,
	* polyrose/include/polyrose/AffineConverter.hpp,
	* polyrose/include/polyrose/ScopExtractorVisitor.hpp,
	* polyrose/include/polyrose/ScopParser.hpp,
	* polyrose/ClastToSage.cpp: Add support for fields and basic
	expression linearization.

2010-08-25  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyrose/ScopExtractor.cpp,
	* polyrose/ScopExtractorVisitor.cpp,
	* polyrose/ScopParser.cpp,
	* polyrose/include/polyrose/ScopExtractor.hpp,
	* polyrose/include/polyrose/ScopParser.hpp,
	* polyrose/PolyRose.cpp: Fix detection of read/write references to
	properly handle any kind of pointer arithmetics.

2010-08-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch provides the support for non-affine array
	accesses. They are over-approximated to scalars. Use
	--polyopt-approximate-scop-extractor to enable.

	Also provides a better verbose output. Use:
	--polyopt-scop-extractor-verbose={1,5} to control the
	output. Level 4 and above report which statements are breaking the
	scop.

	* polyrose/ScopExtractor.cpp,
	* polyrose/ScopExtractorVisitor.cpp,
	* polyrose/AffineConverter.cpp,
	* polyrose/ScopParser.cpp,
	* polyrose/include/polyrose/SageNodeAnnotation.hpp,
	* polyrose/include/polyrose/ScopExtractor.hpp,
	* polyrose/include/polyrose/AffineConverter.hpp,
	* polyrose/include/polyrose/ScopExtractorVisitor.hpp,
	* polyrose/include/polyrose/ScopParser.hpp: Support for non-affine
	array accesses.

	* polyrose/PolyRose.cpp,
	* polyrose/include/polyrose/PolyRoseOptions.hpp,
	* polyrose/PolyRoseOptions.cpp: Improve the option system for
	verbosity.

2010-08-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch enables the support of ceil/floor operators as
	generated by ClastToSage in the scop extraction.
	Fixes some problem in the validity of the generated Sage AST (was:
	invalid Sage tree, invalid symbol table. Fixed).

	* polyrose/ScopExtractor.cpp,
	* polyrose/AffineConverter.cpp,
	* polyrose/ScopParser.cpp,
	* polyrose/include/polyrose/AffineConverter.hpp,
	* polyrose/include/polyrose/ScopParser.hpp,
	* polyrose/ClastToSage.cpp,
	* polyrose/PolyRose.cpp: Enable support for floor/ceil and reentrance.

2010-08-19  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyrose/AffineConverter.cpp,
	* polyrose/ScopParser.cpp,
	* polyrose/PolyRose.cpp: Finalize support of min/max operators in
	loop bounds.

2010-08-18  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch pushes the first stage of the new, extended scop
	extraction. Available functionalities provided with this patch are
	roughly equivalent to the old scop extraction.

	* polyrose/include/polyrose/ScopExtractor.hpp,
	* polyrose/ScopExtractor.cpp,
	* polyrose/include/polyrose/ScopExtractorVisitor.hpp,
	* polyrose/ScopExtractorVisitor.cpp,
	* polyrose/include/polyrose/ScopParser.hpp,
	* polyrose/ScopParser.cpp: New. Units dedicated to scop detection.

	* polyrose/AffineConverter.cpp: New. Unit dedicated to affine
	conversion of scops.

	* polyrose/include/polyrose/SageNodeAnnotation.hpp,
	* polyrose/SageNodeAnnotation.cpp: New. Unit dedicated to AST
	annotations of Sage nodes.

	* polyrose/PolyRose.cpp,
	* polyrose/PoCCOptimize.cpp,
	* polyrose/ClastToSage.cpp: Update to support the new scop
	extraction mechanism.

	* polyrose/SimpleSageScopToClan.cpp,
	* polyrose/SimpleScopExtractor.cpp,
	* polyrose/PlutoRoseUtility.cpp,
	* polyrose/SageScop.cpp,
	* polyrose/LoopAnalyzer.cpp,
	* polyrose/AssignmentAnalyzer.cpp,
	* polyrose/StmtExprAnalyzer.cpp,
	* polyrose/SageScopToClan.cpp,
	* polyrose/ExpressionTraversal.cpp,
	* polyrose/ArrayIndexMap.cpp,
	* polyrose/SimpleExpressionTraversal.cpp,
	* polyrose/include/polyrose/LoopAnalyzer.hpp,
	* polyrose/include/polyrose/SimpleExpressionTraversal.hpp,
	* polyrose/include/polyrose/PlutoRoseUtility.hpp,
	* polyrose/include/polyrose/AssignmentAnalyzer.hpp,
	* polyrose/include/polyrose/PoCCOptimize.hpp,
	* polyrose/include/polyrose/ScopExtractor.hpp,
	* polyrose/include/polyrose/ClastToSage.hpp,
	* polyrose/include/polyrose/ArrayIndexMap.hpp,
	* polyrose/include/polyrose/StmtExprAnalyzer.hpp,
	* polyrose/include/polyrose/SimpleScopExtractor.hpp,
	* polyrose/include/polyrose/SageScopToClan.hpp,
	* polyrose/include/polyrose/ExpressionTraversal.hpp,
	* polyrose/include/polyrose/SimpleSageScopToClan.hpp: Delete.

	* tests/unitary: New unitary test suite (not finalized).

2010-05-06  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch (1) updates the option system of the polyrose binary:
	now all options are prefixed with --polyopt- instead of
	--pocc-; (2) paves the way for a second scop extractor (not called
	by default).

	* polyrose/include/polyrose/ScopExtractor.hpp,
	* polyrose/ScopExtractor.cpp: Move to...
	* polyrose/include/polyrose/ScopExtractorOld.hpp
	* polyrose/ScopExtractorOld.cpp: ...this.

	* polyrose/PolyRose.cpp: Conditionally call the new scop
	extraction mechanism.
	* polyrose/include/polyrose/ScopExtractor.hpp,
	* polyrose/ScopExtractor.cpp: Template for the new scop
	extraction.

	* src/Main.cpp
	* tests/regression/polybenchs/run-regression.pl.in
	* tests/correctness/run-correctness.pl.in
	* polyrose/include/polyrose/PolyRoseOptions.hpp
	* polyrose/PolyRoseOptions.cpp: Change all options to be prefixed
	now with --polyopt instead of --pocc.

2010-03-19	Justin Holewinski		<holewins@cse.ohio-state.edu>

	* tests/regression/polybenchs/run-regression.pl.in:  Various improvements
	* tests/regression/polybenchs/*.reference.c:  Updated reference files to
	match new output from Cloog version bump.
	* polyrose/SageScopToClan.cpp: Fixed a bug when generating scoplib
	statements for AST nodes with no surrounding loops.


2010-03-05	Justin Holewinski		<holewins@cse.ohio-state.edu>

	* tests/regression/polybenchs/run-regression.pl.in:  Improved
	error reporting and logging.

2010-03-04	Justin Holewinski		<holewins@cse.ohio-state.edu>

	* tests/regression/polybenchs/run-regression.pl.in:  Added
	preliminary benchmark timing and improvements to the way the
	Perl script reports errors.

2010-03-02	Justin Holewinski		<holewins@cse.ohio-state.edu>

	* tests/regression/polybenchs/run-regression.pl.in:
	Added output checks for --pocc-pluto and --pocc-pluto-tile.

2010-02-25	Justin Holewinski		<holewins@cse.ohio-state.edu>

  * tests/regression/polybenchs/stencil/adi/adi.reference.c,
	* tests/regression/polybenchs/stencil/fdtd-2d/fdtd-2d.reference.c,
	* tests/regression/polybenchs/stencil/fdtd-apml/fdtd-apml.reference.c:
	Added adi, fdtd-2d, and fdtd-apml to polybenchs regression tests

2010-02-25  Justin Holewinski		<holewins@cse.ohio-state.edu>

	* tests/regression/polybenchs: Polybenchs benchmark suite
	* tests/regression/polybenchs/run-regression.pl.in: Driver
	script for running regression tests against Polybench
	* configure.ac: Added target to generate run-regression.pl
	* benchmarks/Makefile.in: Deleted from repository.
	* tests/regression/polybenchs/SVN: Repository marker for
	Polybenchs.

2010-02-24  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* include/polyrose/StmtExprAnalyzer.hpp,
	* include/polyrose/SageScop.hpp,
	* include/polyrose/SimpleScopExtractor.hpp,
	* SageScop.cpp,
	* PoCCOptimize.cpp,
	* SimpleScopExtractor.cpp,
	* StmtExprAnalyzer.cpp: Integrate Nasko's latest implementation
	for SCoP extraction (from end of Dec. 2009).

2010-02-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyrose/PoCCOptimize.cpp: Fix function call of array
	contraction.
	* benchmarks/Makefile.in: Delete from repository.

2010-02-10 Justin Holewinski    <holewins@cse.ohio-state.edu>
	Fixed a bug in SCoP iterator extraction.

	* polyrose/SageScopToClan.cpp: Fixed how iterators are
	handled when there are inner basic blocks but no loops
	(e.g. single if statement)

2010-02-10 Justin Holewinski    <holewins@cse.ohio-state.edu>
	Fix some bugs and added additional functionality to the
	ExpressionTraversal and SageScopToClan classes to enable
	pass-through processing of several previously-failing
	SPEC CPU2000/CPU2006 benchmarks.

	* polyrose/include/polyrose/ExpressionTraversal.hpp,
	* polyrose/SageScopToClan.cpp,
	* polyrose/PolyRose.cpp,
	* polyrose/ExpressionTraversal.cpp: Fix some polyhedral
	extraction bugs and added functionality to handle additional
	Sage constructs.

2010-01-29  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch integrates the optimizers/storcompacter module from
	PoCC, to perform array storage compaction. The module is enabled
	with option --pocc-storage-compaction.

	* polyrose/include/polyrose/PolyRoseOptions.hpp,
	* polyrose/PolyRoseOptions.cpp: Provide new option
	--pocc-storage-compaction

	* polyrose/PoCCOptimize.cpp: Call the storage compaction module.

	* polyrose/Makefile.am: Update with references to the new module.

2010-01-29  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyrose/PoCCOptimize.cpp: Change to match the new prototype of
	the vectorizer

2010-01-27  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyrose/ClastToSage.cpp: Support clast_vectorfor node.

2010-01-27  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch integrates the latest PoCC modules into PolyRose. It
	provides the option --pocc-vectorizer, to call the
	new (experimental) polyhedral vectorization module of PoCC.

	* polyrose/include/polyrose/PolyRoseOptions.hpp,
	* polyrose/PolyRoseOptions.cpp: Create and manage the
	--pocc-vectorizer option.

	* polyrose/include/polyrose/ClastToSage.hpp,
	* polyrose/ClastToSage.cpp: Implement the support of clast_parfor
	node.
	* polyrose/PoCCOptimize.cpp: Call the vectorizer.

	* polyrose/Makefile.am,
	* src/Makefile.am: Update to include the new vectorizer module,
	the new clasttools module (containing CLAST node extensions
	clast_parfor and clast_pragma*), and the scoptools module for
	automatic conversion to/from clast - scop.

2010-01-25  Justin Holewinski		<holewins@cse.ohio-state.edu>
	Added simple, preliminary sanity check scripts.

	* Makefile.am, configure.ac: Add makefile target and configure file
	for tests/sanity/run-sanity-checks.sh.in.
	* tests/sanity/run-sanity-checks.sh.in: Sanity check script template.
	* tests/sanity/fdtd-2d: FDTD-2D benchmark from Pluto, with expected
	output from PolyRose with no optimizations.
	* tests/sanity/jacobi-1d-imper:  Jacobi-1D benchmark from Pluto, with
	expected output from PolyRose with no optimizations.

2010-01-22  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* src/Makefile.am: Add missing candl and fm deps in INCLUDEDIR.

2010-01-22  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>

	* polyrose/Makefile.am: Add missing candl and fm deps in INCLUDEDIR.

2010-01-21  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch extends the Clast2Sage pass to support the 2 new CLAST
	node types: clast_pragma_omp_for and clast_pragma_vectorize. These
	are now generated automatically by PoCC, as a post-pass after
	CLooG.

	* polyrose/include/polyrose/ClastToSage.hpp,
	* polyrose/PoCCOptimize.cpp,
	* polyrose/ClastToSage.cpp: Modify to support pretty-printing of
	clast_pragma_omp_for and clast_pragma_vectorize CLAST nodes.

	* polyrose/Makefile.am: Add pragmatize in INCLUDEDIR, to
	retrieve the new clast node types.

	* polyrose/PolyRoseOptions.cpp: Fix a typo in --pocc-pluto-prevector.

	* Makefile.am: Minor fix in the update-polyrose rule.

2010-01-20  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch adds the update targets for the Makefile, to update the
	full the PolyRose project.

	* Makefile.am: Add update-pocc rule, to update to the newest
	version of pocc. Add update-polyrose rule, to update to the newest
	version of the project.

2010-01-20  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	Provide a quick-and-dirty option parser, compatible with PoCC
	option system. Among the interesting available options, all pluto
	options are available. Use option --polyrose-help for more
	information.

	* src/Main.cpp,
	* polyrose/include/polyrose/PolyRoseOptions.hpp,
	* polyrose/ClastToSage.cpp,
	* polyrose/PolyRose.cpp,
	* polyrose/PolyRoseOptions.cpp: Provide a system of options for
	PolyRose. Almost all options from PoCC are available, they are all
	prefixed by --pocc-.

	* src/Makefile.am: Add letsee and pluto in INCLUDEDIR.
	* Makefile.am: Add the build-pocc rule, to re-build pocc. Not added
	to all-hook.

2010-01-20  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch fixes a bug causing instability during
	Clast2Sage (potential empty name identifiers in the clast).

	* polyrose/PoCCOptimize.cpp: Fix a significant bug in memory
	management.

2010-01-20  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch changes the installer to use the SVN version of PoCC by
	default.

	* install.sh,
	* pocc-installer.sh: Install SVN version of PoCC by default,
	instead of the released one.

	* polyrose/Makefile.am: Add -Wno-deprecated.

2010-01-12  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch polishes the installer, and update to the latest
	version of PoCC.

	* install.sh,
	* pocc-installer.sh: Improve the robustness of the installer,
	update to latest version of PoCC.

	* src/Main.cpp: Fix remaining warning for multiple redef of PACKAGE_xxx
	macros.

	* benchmarks/run: Delete.

2010-01-11  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	This patch commits the first verion for the trunk. Project was
	renamed PolyRose. PoCC is now used to compute the
	optimization. README contains information about installation and
	usage of the compiler. Sucessfully tested on dgemm in passthru
	mode (no option) and with --pluto-tile.

	* ChangeLog,
	* NEWS,
	* AUTHORS,
	* INSTALL,
	* COPYING: Standard files (not touched).

	* README: Update with new pocc dependencies, new install procedure.

	* bootstrap.sh: New. Fixed bootstraper for auto{conf,make}

	* src/Main.cpp,
	* src/Makefile.am: New. Main driver for the library.

	* pocc-installer.sh: New. Automatic download and install of PoCC.

	* Makefile.am,
	* configure.ac: Simplified, redesigned and fixed to match the new
	build infrastructure.

	* config/ax_polylib.m4,
	* config/ax_clan.m4,
	* config/ax_piplib.m4,
	* config/ax_boost_base.m4,
	* config/ax_candl.m4,
	* config/ax_cloog.m4,
	* config/ax_pocc.m4,
	* config/ax_boost.m4: Old macro files. Not used anymore for most
	of them.

	* doc/Doxyfile,
	* doc/polyrose.texi,
	* doc/Makefile.am: New. Attempt for a doc/ directory.
	* install.sh,

	* dgemm.c: New. Sample test file.

	* polyrose/Makefile.am,
	* polyrose/ScopExtractor.cpp,
	* polyrose/include/polyrose/StmtExprAnalyzer.hpp,
	* polyrose/include/polyrose/SimpleExpressionTraversal.hpp,
	* polyrose/include/polyrose/ScopExtractor.hpp,
	* polyrose/include/polyrose/ArrayIndexMap.hpp,
	* polyrose/include/polyrose/SageScop.hpp,
	* polyrose/include/polyrose/SageScopToClan.hpp,
	* polyrose/include/polyrose/ClastToSage.hpp,
	* polyrose/include/polyrose/SimpleScopExtractor.hpp,
	* polyrose/include/polyrose/AssignmentAnalyzer.hpp,
	* polyrose/include/polyrose/LoopAnalyzer.hpp,
	* polyrose/include/polyrose/SimpleSageScopToClan.hpp,
	* polyrose/include/polyrose/PlutoRoseUtility.hpp,
	* polyrose/include/polyrose/ExpressionTraversal.hpp,
	* polyrose/ArrayIndexMap.cpp,
	* polyrose/SageScop.cpp,
	* polyrose/SageScopToClan.cpp,
	* polyrose/ClastToSage.cpp,
	* polyrose/SimpleScopExtractor.cpp,
	* polyrose/AssignmentAnalyzer.cpp,
	* polyrose/LoopAnalyzer.cpp,
	* polyrose/SimpleSageScopToClan.cpp,
	* polyrose/PlutoRoseUtility.cpp,
	* polyrose/ExpressionTraversal.cpp,
	* polyrose/StmtExprAnalyzer.cpp,
	* polyrose/SimpleExpressionTraversal.cpp: Update and clean to use
	scoplib / PoCC.

	* polyrose/include/polyrose/PolyRoseOptions.hpp,
	* polyrose/PolyRoseOptions.cpp: New. Unit to store internal
	options for the project.

	* polyrose/include/polyrose/PolyRose.hpp,
	* polyrose/PolyRose.cpp: New. Main entry point for the library,
	running analysis, scop extraction, scop optimization (with PoCC)
	and Sage regeneration.

	* polyrose/include/polyrose/PoCCOptimize.hpp,
	* polyrose/PoCCOptimize.cpp: New. Optimization driver with PoCC.

	* benchmarks/utdsp/modfft/traps.h,
	* benchmarks/utdsp/modfft/modfft.c,
	* benchmarks/utdsp/modfft/input.dsp,
	* benchmarks/utdsp/modfft/fft_1024.c,
	* benchmarks/utdsp/modfft/IO.c,
	* benchmarks/utdsp/modfft/all_files,
	* benchmarks/utdsp/modfft/test-output-file,
	* benchmarks/utdsp/modfft/test-run-options,
	* benchmarks/utdsp/modfft/test-source-files,
	* benchmarks/utdsp/modfft/test-compile-options,
	* benchmarks/utdsp/fft/traps.h,
	* benchmarks/utdsp/fft/fft.c,
	* benchmarks/utdsp/fft/input.dsp,
	* benchmarks/utdsp/fft/fft_1024.c,
	* benchmarks/utdsp/fft/IO.c,
	* benchmarks/utdsp/fft/all_files,
	* benchmarks/utdsp/fft/test-output-file,
	* benchmarks/utdsp/fft/test-run-options,
	* benchmarks/utdsp/fft/test-source-files,
	* benchmarks/utdsp/fft/test-compile-options,
	* benchmarks/utdsp/modmult/traps.h,
	* benchmarks/utdsp/modmult/modmult.c,
	* benchmarks/utdsp/modmult/mult_10_10.c,
	* benchmarks/utdsp/modmult/input.dsp,
	* benchmarks/utdsp/modmult/IO.c,
	* benchmarks/utdsp/modmult/all_files,
	* benchmarks/utdsp/modmult/test-output-file,
	* benchmarks/utdsp/modmult/test-run-options,
	* benchmarks/utdsp/modmult/test-source-files,
	* benchmarks/utdsp/modmult/test-compile-options,
	* benchmarks/utdsp/mult/traps.h,
	* benchmarks/utdsp/mult/mult.c,
	* benchmarks/utdsp/mult/mult_10_10.c,
	* benchmarks/utdsp/mult/input.dsp,
	* benchmarks/utdsp/mult/IO.c,
	* benchmarks/utdsp/mult/all_files,
	* benchmarks/utdsp/mult/test-output-file,
	* benchmarks/utdsp/mult/test-run-options,
	* benchmarks/utdsp/mult/test-source-files,
	* benchmarks/utdsp/mult/test-compile-options,
	* benchmarks/utdsp/fir-1d/traps.h,
	* benchmarks/utdsp/fir-1d/fir-1d.c,
	* benchmarks/utdsp/fir-1d/input.dsp,
	* benchmarks/utdsp/fir-1d/fir_32_1.c,
	* benchmarks/utdsp/fir-1d/IO.c,
	* benchmarks/utdsp/fir-1d/all_files,
	* benchmarks/utdsp/fir-1d/test-output-file,
	* benchmarks/utdsp/fir-1d/test-run-options,
	* benchmarks/utdsp/fir-1d/test-source-files,
	* benchmarks/utdsp/fir-1d/test-compile-options,
	* benchmarks/utdsp/modfir-1d/traps.h,
	* benchmarks/utdsp/modfir-1d/modfir-1d.c,
	* benchmarks/utdsp/modfir-1d/input.dsp,
	* benchmarks/utdsp/modfir-1d/fir_32_1.c,
	* benchmarks/utdsp/modfir-1d/IO.c,
	* benchmarks/utdsp/modfir-1d/all_files,
	* benchmarks/utdsp/modfir-1d/test-output-file,
	* benchmarks/utdsp/modfir-1d/test-run-options,
	* benchmarks/utdsp/modfir-1d/test-source-files,
	* benchmarks/utdsp/modfir-1d/test-compile-options,
	* benchmarks/utdsp/fir-2d/traps.h,
	* benchmarks/utdsp/fir-2d/fir-2d.c,
	* benchmarks/utdsp/fir-2d/input.dsp,
	* benchmarks/utdsp/fir-2d/fir_256_64.c,
	* benchmarks/utdsp/fir-2d/IO.c,
	* benchmarks/utdsp/fir-2d/all_files,
	* benchmarks/utdsp/fir-2d/test-output-file,
	* benchmarks/utdsp/fir-2d/test-run-options,
	* benchmarks/utdsp/fir-2d/test-source-files,
	* benchmarks/utdsp/fir-2d/test-compile-options,
	* benchmarks/utdsp/modfir-2d/traps.h,
	* benchmarks/utdsp/modfir-2d/input.dsp,
	* benchmarks/utdsp/modfir-2d/modfir-2d.c,
	* benchmarks/utdsp/modfir-2d/fir_256_64.c,
	* benchmarks/utdsp/modfir-2d/IO.c,
	* benchmarks/utdsp/modfir-2d/all_files,
	* benchmarks/utdsp/modfir-2d/test-output-file,
	* benchmarks/utdsp/modfir-2d/test-run-options,
	* benchmarks/utdsp/modfir-2d/test-source-files,
	* benchmarks/utdsp/modfir-2d/test-compile-options,
	* benchmarks/utdsp/modadpcm/traps.h,
	* benchmarks/utdsp/modadpcm/input.dsp,
	* benchmarks/utdsp/modadpcm/adpcm.c,
	* benchmarks/utdsp/modadpcm/modadpcm.c,
	* benchmarks/utdsp/modadpcm/IO.c,
	* benchmarks/utdsp/modadpcm/all_files,
	* benchmarks/utdsp/modadpcm/test-output-file,
	* benchmarks/utdsp/modadpcm/test-run-options,
	* benchmarks/utdsp/modadpcm/README,
	* benchmarks/utdsp/modadpcm/test-source-files,
	* benchmarks/utdsp/modadpcm/test-compile-options,
	* benchmarks/utdsp/adpcm/traps.h,
	* benchmarks/utdsp/adpcm/input.dsp,
	* benchmarks/utdsp/adpcm/adpcm.c,
	* benchmarks/utdsp/adpcm/IO.c,
	* benchmarks/utdsp/adpcm/all_files,
	* benchmarks/utdsp/adpcm/test-output-file,
	* benchmarks/utdsp/adpcm/test-run-options,
	* benchmarks/utdsp/adpcm/README,
	* benchmarks/utdsp/adpcm/test-source-files,
	* benchmarks/utdsp/adpcm/test-compile-options,
	* benchmarks/utdsp/test-utdsp.sh,
	* benchmarks/utdsp/iir-2d/traps.h,
	* benchmarks/utdsp/iir-2d/iir_4_64.c,
	* benchmarks/utdsp/iir-2d/input.dsp,
	* benchmarks/utdsp/iir-2d/iir-2d.c,
	* benchmarks/utdsp/iir-2d/IO.c,
	* benchmarks/utdsp/iir-2d/all_files,
	* benchmarks/utdsp/iir-2d/test-output-file,
	* benchmarks/utdsp/iir-2d/test-run-options,
	* benchmarks/utdsp/iir-2d/test-source-files,
	* benchmarks/utdsp/iir-2d/test-compile-options,
	* benchmarks/utdsp/modiir-2d/traps.h,
	* benchmarks/utdsp/modiir-2d/iir_4_64.c,
	* benchmarks/utdsp/modiir-2d/input.dsp,
	* benchmarks/utdsp/modiir-2d/modiir-2d.c,
	* benchmarks/utdsp/modiir-2d/IO.c,
	* benchmarks/utdsp/modiir-2d/all_files,
	* benchmarks/utdsp/modiir-2d/test-output-file,
	* benchmarks/utdsp/modiir-2d/test-run-options,
	* benchmarks/utdsp/modiir-2d/test-source-files,
	* benchmarks/utdsp/modiir-2d/test-compile-options,
	* benchmarks/utdsp/modcompress/traps.h,
	* benchmarks/utdsp/modcompress/input.dsp,
	* benchmarks/utdsp/modcompress/IO.c,
	* benchmarks/utdsp/modcompress/all_files,
	* benchmarks/utdsp/modcompress/test-output-file,
	* benchmarks/utdsp/modcompress/test-run-options,
	* benchmarks/utdsp/modcompress/compress.c,
	* benchmarks/utdsp/modcompress/modcompress.c,
	* benchmarks/utdsp/modcompress/README,
	* benchmarks/utdsp/modcompress/test-source-files,
	* benchmarks/utdsp/modcompress/test-compile-options,
	* benchmarks/utdsp/compress/traps.h,
	* benchmarks/utdsp/compress/input.dsp,
	* benchmarks/utdsp/compress/IO.c,
	* benchmarks/utdsp/compress/all_files,
	* benchmarks/utdsp/compress/test-output-file,
	* benchmarks/utdsp/compress/test-run-options,
	* benchmarks/utdsp/compress/compress.c,
	* benchmarks/utdsp/compress/README,
	* benchmarks/utdsp/compress/test-source-files,
	* benchmarks/utdsp/compress/test-compile-options,
	* benchmarks/utdsp/modedge_detect/traps.h,
	* benchmarks/utdsp/modedge_detect/input.dsp,
	* benchmarks/utdsp/modedge_detect/IO.c,
	* benchmarks/utdsp/modedge_detect/all_files,
	* benchmarks/utdsp/modedge_detect/test-output-file,
	* benchmarks/utdsp/modedge_detect/test-run-options,
	* benchmarks/utdsp/modedge_detect/edge_detect.c,
	* benchmarks/utdsp/modedge_detect/modedge_detect.c,
	* benchmarks/utdsp/modedge_detect/test-source-files,
	* benchmarks/utdsp/modedge_detect/test-compile-options,
	* benchmarks/utdsp/edge_detect/traps.h,
	* benchmarks/utdsp/edge_detect/input.dsp,
	* benchmarks/utdsp/edge_detect/IO.c,
	* benchmarks/utdsp/edge_detect/all_files,
	* benchmarks/utdsp/edge_detect/test-output-file,
	* benchmarks/utdsp/edge_detect/test-run-options,
	* benchmarks/utdsp/edge_detect/edge_detect.c,
	* benchmarks/utdsp/edge_detect/test-source-files,
	* benchmarks/utdsp/edge_detect/test-compile-options,
	* benchmarks/utdsp/latnrm/traps.h,
	* benchmarks/utdsp/latnrm/input.dsp,
	* benchmarks/utdsp/latnrm/IO.c,
	* benchmarks/utdsp/latnrm/all_files,
	* benchmarks/utdsp/latnrm/test-output-file,
	* benchmarks/utdsp/latnrm/test-run-options,
	* benchmarks/utdsp/latnrm/latnrm_32_64.c,
	* benchmarks/utdsp/latnrm/test-source-files,
	* benchmarks/utdsp/latnrm/latnrm.c,
	* benchmarks/utdsp/latnrm/test-compile-options,
	* benchmarks/utdsp/histogram/traps.h,
	* benchmarks/utdsp/histogram/input.dsp,
	* benchmarks/utdsp/histogram/IO.c,
	* benchmarks/utdsp/histogram/all_files,
	* benchmarks/utdsp/histogram/test-output-file,
	* benchmarks/utdsp/histogram/test-run-options,
	* benchmarks/utdsp/histogram/test-source-files,
	* benchmarks/utdsp/histogram/histogram.c,
	* benchmarks/utdsp/histogram/test-compile-options,
	* benchmarks/utdsp/modhistogram/traps.h,
	* benchmarks/utdsp/modhistogram/input.dsp,
	* benchmarks/utdsp/modhistogram/IO.c,
	* benchmarks/utdsp/modhistogram/all_files,
	* benchmarks/utdsp/modhistogram/test-output-file,
	* benchmarks/utdsp/modhistogram/test-run-options,
	* benchmarks/utdsp/modhistogram/test-source-files,
	* benchmarks/utdsp/modhistogram/histogram.c,
	* benchmarks/utdsp/modhistogram/modhistogram.c,
	* benchmarks/utdsp/modhistogram/test-compile-options,
	* benchmarks/utdsp/modlatnrm/traps.h,
	* benchmarks/utdsp/modlatnrm/input.dsp,
	* benchmarks/utdsp/modlatnrm/IO.c,
	* benchmarks/utdsp/modlatnrm/all_files,
	* benchmarks/utdsp/modlatnrm/test-output-file,
	* benchmarks/utdsp/modlatnrm/test-run-options,
	* benchmarks/utdsp/modlatnrm/latnrm_32_64.c,
	* benchmarks/utdsp/modlatnrm/test-source-files,
	* benchmarks/utdsp/modlatnrm/modlatnrm.c,
	* benchmarks/utdsp/modlatnrm/test-compile-options,
	* benchmarks/utdsp/lmsfir-1d/lmsfir-1d.c,
	* benchmarks/utdsp/lmsfir-1d/traps.h,
	* benchmarks/utdsp/lmsfir-1d/input.dsp,
	* benchmarks/utdsp/lmsfir-1d/lmsfir_8_1.c,
	* benchmarks/utdsp/lmsfir-1d/IO.c,
	* benchmarks/utdsp/lmsfir-1d/all_files,
	* benchmarks/utdsp/lmsfir-1d/test-output-file,
	* benchmarks/utdsp/lmsfir-1d/test-run-options,
	* benchmarks/utdsp/lmsfir-1d/test-source-files,
	* benchmarks/utdsp/lmsfir-1d/test-compile-options,
	* benchmarks/utdsp/modlmsfir-1d/modlmsfir-1d.c,
	* benchmarks/utdsp/modlmsfir-1d/traps.h,
	* benchmarks/utdsp/modlmsfir-1d/input.dsp,
	* benchmarks/utdsp/modlmsfir-1d/lmsfir_8_1.c,
	* benchmarks/utdsp/modlmsfir-1d/IO.c,
	* benchmarks/utdsp/modlmsfir-1d/all_files,
	* benchmarks/utdsp/modlmsfir-1d/test-output-file,
	* benchmarks/utdsp/modlmsfir-1d/test-run-options,
	* benchmarks/utdsp/modlmsfir-1d/test-source-files,
	* benchmarks/utdsp/modlmsfir-1d/test-compile-options,
	* benchmarks/utdsp/lmsfir-2d/traps.h,
	* benchmarks/utdsp/lmsfir-2d/lmsfir-2d.c,
	* benchmarks/utdsp/lmsfir-2d/input.dsp,
	* benchmarks/utdsp/lmsfir-2d/IO.c,
	* benchmarks/utdsp/lmsfir-2d/all_files,
	* benchmarks/utdsp/lmsfir-2d/lmsfir_32_64.c,
	* benchmarks/utdsp/lmsfir-2d/test-output-file,
	* benchmarks/utdsp/lmsfir-2d/test-run-options,
	* benchmarks/utdsp/lmsfir-2d/test-source-files,
	* benchmarks/utdsp/lmsfir-2d/test-compile-options,
	* benchmarks/utdsp/modlmsfir-2d/traps.h,
	* benchmarks/utdsp/modlmsfir-2d/modlmsfir-2d.c,
	* benchmarks/utdsp/modlmsfir-2d/input.dsp,
	* benchmarks/utdsp/modlmsfir-2d/IO.c,
	* benchmarks/utdsp/modlmsfir-2d/all_files,
	* benchmarks/utdsp/modlmsfir-2d/lmsfir_32_64.c,
	* benchmarks/utdsp/modlmsfir-2d/test-output-file,
	* benchmarks/utdsp/modlmsfir-2d/test-run-options,
	* benchmarks/utdsp/modlmsfir-2d/test-source-files,
	* benchmarks/utdsp/modlmsfir-2d/test-compile-options,
	* benchmarks/utdsp/modspectral/traps.h,
	* benchmarks/utdsp/modspectral/input.dsp,
	* benchmarks/utdsp/modspectral/IO.c,
	* benchmarks/utdsp/modspectral/all_files,
	* benchmarks/utdsp/modspectral/spectral_estimation.c,
	* benchmarks/utdsp/modspectral/test-output-file,
	* benchmarks/utdsp/modspectral/test-run-options,
	* benchmarks/utdsp/modspectral/README,
	* benchmarks/utdsp/modspectral/test-source-files,
	* benchmarks/utdsp/modspectral/modspectral.c,
	* benchmarks/utdsp/modspectral/test-compile-options,
	* benchmarks/utdsp/spectral/traps.h,
	* benchmarks/utdsp/spectral/input.dsp,
	* benchmarks/utdsp/spectral/IO.c,
	* benchmarks/utdsp/spectral/all_files,
	* benchmarks/utdsp/spectral/spectral_estimation.c,
	* benchmarks/utdsp/spectral/test-output-file,
	* benchmarks/utdsp/spectral/test-run-options,
	* benchmarks/utdsp/spectral/README,
	* benchmarks/utdsp/spectral/test-source-files,
	* benchmarks/utdsp/spectral/spectral.c,
	* benchmarks/utdsp/spectral/test-compile-options,
	* benchmarks/utdsp/lpc/lpc.c,
	* benchmarks/utdsp/lpc/traps.h,
	* benchmarks/utdsp/lpc/input.dsp,
	* benchmarks/utdsp/lpc/IO.c,
	* benchmarks/utdsp/lpc/all_files,
	* benchmarks/utdsp/lpc/test-output-file,
	* benchmarks/utdsp/lpc/test-run-options,
	* benchmarks/utdsp/lpc/README,
	* benchmarks/utdsp/lpc/test-source-files,
	* benchmarks/utdsp/lpc/test-compile-options,
	* benchmarks/utdsp/modlpc/lpc.c,
	* benchmarks/utdsp/modlpc/modlpc.c,
	* benchmarks/utdsp/modlpc/traps.h,
	* benchmarks/utdsp/modlpc/input.dsp,
	* benchmarks/utdsp/modlpc/IO.c,
	* benchmarks/utdsp/modlpc/all_files,
	* benchmarks/utdsp/modlpc/test-output-file,
	* benchmarks/utdsp/modlpc/test-run-options,
	* benchmarks/utdsp/modlpc/README,
	* benchmarks/utdsp/modlpc/test-source-files,
	* benchmarks/utdsp/modlpc/test-compile-options,
	* benchmarks/pluto-compare.sh,
	* benchmarks/Makefile.in,
	* benchmarks/pluto/matmul/decls.h,
	* benchmarks/pluto/matmul/matmul.c,
	* benchmarks/pluto/matmul/papi_defs.h,
	* benchmarks/pluto/matmul/matmul.scop,
	* benchmarks/pluto/matmul/util.h,
	* benchmarks/pluto/matmul/tile.sizes,
	* benchmarks/pluto/matmul/all_files,
	* benchmarks/pluto/matmul/test-run-options,
	* benchmarks/pluto/matmul/test-source-files,
	* benchmarks/pluto/matmul/test-compile-options,
	* benchmarks/pluto/lu/decls.h,
	* benchmarks/pluto/lu/papi_defs.h,
	* benchmarks/pluto/lu/lu.c,
	* benchmarks/pluto/lu/lu.scop,
	* benchmarks/pluto/lu/util.h,
	* benchmarks/pluto/lu/tile.sizes,
	* benchmarks/pluto/lu/all_files,
	* benchmarks/pluto/lu/test-run-options,
	* benchmarks/pluto/lu/test-source-files,
	* benchmarks/pluto/lu/test-compile-options,
	* benchmarks/pluto/matmul-init/decls.h,
	* benchmarks/pluto/matmul-init/papi_defs.h,
	* benchmarks/pluto/matmul-init/matmul-init.c,
	* benchmarks/pluto/matmul-init/matmul-init.scop,
	* benchmarks/pluto/matmul-init/util.h,
	* benchmarks/pluto/matmul-init/tile.sizes,
	* benchmarks/pluto/matmul-init/all_files,
	* benchmarks/pluto/matmul-init/test-run-options,
	* benchmarks/pluto/matmul-init/test-source-files,
	* benchmarks/pluto/matmul-init/test-compile-options,
	* benchmarks/pluto/jacobi-1d-imper/decls.h,
	* benchmarks/pluto/jacobi-1d-imper/papi_defs.h,
	* benchmarks/pluto/jacobi-1d-imper/util.h,
	* benchmarks/pluto/jacobi-1d-imper/jacobi-1d-imper.c,
	* benchmarks/pluto/jacobi-1d-imper/jacobi-1d-imper.scop,
	* benchmarks/pluto/jacobi-1d-imper/tile.sizes,
	* benchmarks/pluto/jacobi-1d-imper/all_files,
	* benchmarks/pluto/jacobi-1d-imper/test-run-options,
	* benchmarks/pluto/jacobi-1d-imper/test-source-files,
	* benchmarks/pluto/jacobi-1d-imper/test-compile-options,
	* benchmarks/pluto/fdtd-2d/decls.h,
	* benchmarks/pluto/fdtd-2d/papi_defs.h,
	* benchmarks/pluto/fdtd-2d/util.h,
	* benchmarks/pluto/fdtd-2d/fdtd-2d.c,
	* benchmarks/pluto/fdtd-2d/fdtd-2d.scop,
	* benchmarks/pluto/fdtd-2d/all_files,
	* benchmarks/pluto/fdtd-2d/test-run-options,
	* benchmarks/pluto/fdtd-2d/test-source-files,
	* benchmarks/pluto/fdtd-2d/test-compile-options,
	* benchmarks/pluto/jacobi-2d-imper/decls.h,
	* benchmarks/pluto/jacobi-2d-imper/papi_defs.h,
	* benchmarks/pluto/jacobi-2d-imper/util.h,
	* benchmarks/pluto/jacobi-2d-imper/jacobi-2d-imper.c,
	* benchmarks/pluto/jacobi-2d-imper/jacobi-2d-imper.scop,
	* benchmarks/pluto/jacobi-2d-imper/all_files,
	* benchmarks/pluto/jacobi-2d-imper/test-run-options,
	* benchmarks/pluto/jacobi-2d-imper/test-source-files,
	* benchmarks/pluto/jacobi-2d-imper/test-compile-options,
	* benchmarks/pluto/gemver/decls.h,
	* benchmarks/pluto/gemver/papi_defs.h,
	* benchmarks/pluto/gemver/util.h,
	* benchmarks/pluto/gemver/gemver.c,
	* benchmarks/pluto/gemver/gemver.scop,
	* benchmarks/pluto/gemver/tile.sizes,
	* benchmarks/pluto/gemver/all_files,
	* benchmarks/pluto/gemver/test-run-options,
	* benchmarks/pluto/gemver/test-source-files,
	* benchmarks/pluto/gemver/test-compile-options,
	* benchmarks/pluto/seidel/decls.h,
	* benchmarks/pluto/seidel/papi_defs.h,
	* benchmarks/pluto/seidel/util.h,
	* benchmarks/pluto/seidel/seidel.c,
	* benchmarks/pluto/seidel/seidel.scop,
	* benchmarks/pluto/seidel/tile.sizes,
	* benchmarks/pluto/seidel/all_files,
	* benchmarks/pluto/seidel/test-run-options,
	* benchmarks/pluto/seidel/test-source-files,
	* benchmarks/pluto/seidel/test-compile-options,
	* benchmarks/pluto/mvt/decls.h,
	* benchmarks/pluto/mvt/papi_defs.h,
	* benchmarks/pluto/mvt/util.h,
	* benchmarks/pluto/mvt/mvt.c,
	* benchmarks/pluto/mvt/mvt.scop,
	* benchmarks/pluto/mvt/all_files,
	* benchmarks/pluto/mvt/test-run-options,
	* benchmarks/pluto/mvt/test-source-files,
	* benchmarks/pluto/mvt/test-compile-options,
	* benchmarks/pluto/stencil3d/decls.h,
	* benchmarks/pluto/stencil3d/papi_defs.h,
	* benchmarks/pluto/stencil3d/util.h,
	* benchmarks/pluto/stencil3d/stencil3d.c,
	* benchmarks/pluto/stencil3d/tile.sizes,
	* benchmarks/pluto/stencil3d/all_files,
	* benchmarks/pluto/stencil3d/test-run-options,
	* benchmarks/pluto/stencil3d/stencil3d.scop,
	* benchmarks/pluto/stencil3d/test-source-files,
	* benchmarks/pluto/stencil3d/test-compile-options,
	* benchmarks/pluto/doitgen/decls.h,
	* benchmarks/pluto/doitgen/papi_defs.h,
	* benchmarks/pluto/doitgen/util.h,
	* benchmarks/pluto/doitgen/tile.sizes,
	* benchmarks/pluto/doitgen/all_files,
	* benchmarks/pluto/doitgen/doitgen.c,
	* benchmarks/pluto/doitgen/test-run-options,
	* benchmarks/pluto/doitgen/doitgen.scop,
	* benchmarks/pluto/doitgen/test-source-files,
	* benchmarks/pluto/doitgen/test-compile-options,
	* benchmarks/pluto/test-pluto.sh,
	* benchmarks/pluto/template/decls.h,
	* benchmarks/pluto/template/papi_defs.h,
	* benchmarks/pluto/template/util.h,
	* benchmarks/pluto/template/all_files,
	* benchmarks/pluto/template/test-run-options,
	* benchmarks/pluto/template/template.c,
	* benchmarks/pluto/template/test-source-files,
	* benchmarks/pluto/template/template.scop,
	* benchmarks/pluto/template/test-compile-options,
	* benchmarks/pluto/adi/adi.scop,
	* benchmarks/pluto/adi/decls.h,
	* benchmarks/pluto/adi/papi_defs.h,
	* benchmarks/pluto/adi/util.h,
	* benchmarks/pluto/adi/all_files,
	* benchmarks/pluto/adi/test-run-options,
	* benchmarks/pluto/adi/test-source-files,
	* benchmarks/pluto/adi/adi.c,
	* benchmarks/pluto/adi/test-compile-options,
	* benchmarks/run.pl.in,
	* benchmarks/run,
	* benchmarks/Makefile.am,
	* benchmarks/SPEC2000/modmesa/copypix.h,
	* benchmarks/SPEC2000/modmesa/misc.h,
	* benchmarks/SPEC2000/modmesa/depth.c,
	* benchmarks/SPEC2000/modmesa/light.c,
	* benchmarks/SPEC2000/modmesa/vbrender.c,
	* benchmarks/SPEC2000/modmesa/all_files,
	* benchmarks/SPEC2000/modmesa/depth.h,
	* benchmarks/SPEC2000/modmesa/config.h,
	* benchmarks/SPEC2000/modmesa/light.h,
	* benchmarks/SPEC2000/modmesa/points.c,
	* benchmarks/SPEC2000/modmesa/vbrender.h,
	* benchmarks/SPEC2000/modmesa/all.h,
	* benchmarks/SPEC2000/modmesa/quads.c,
	* benchmarks/SPEC2000/modmesa/drawpix.c,
	* benchmarks/SPEC2000/modmesa/dlist.c,
	* benchmarks/SPEC2000/modmesa/points.h,
	* benchmarks/SPEC2000/modmesa/linetemp.h,
	* benchmarks/SPEC2000/modmesa/image.c,
	* benchmarks/SPEC2000/modmesa/quads.h,
	* benchmarks/SPEC2000/modmesa/hash.c,
	* benchmarks/SPEC2000/modmesa/drawpix.h,
	* benchmarks/SPEC2000/modmesa/dlist.h,
	* benchmarks/SPEC2000/modmesa/blend.c,
	* benchmarks/SPEC2000/modmesa/attrib.c,
	* benchmarks/SPEC2000/modmesa/image.h,
	* benchmarks/SPEC2000/modmesa/hash.h,
	* benchmarks/SPEC2000/modmesa/accum.c,
	* benchmarks/SPEC2000/modmesa/blend.h,
	* benchmarks/SPEC2000/modmesa/attrib.h,
	* benchmarks/SPEC2000/modmesa/dd.h,
	* benchmarks/SPEC2000/modmesa/accum.h,
	* benchmarks/SPEC2000/modmesa/pb.c,
	* benchmarks/SPEC2000/modmesa/stencil.c,
	* benchmarks/SPEC2000/modmesa/pointers.c,
	* benchmarks/SPEC2000/modmesa/pb.h,
	* benchmarks/SPEC2000/modmesa/stencil.h,
	* benchmarks/SPEC2000/modmesa/mesa3.c,
	* benchmarks/SPEC2000/modmesa/pointers.h,
	* benchmarks/SPEC2000/modmesa/lines.c,
	* benchmarks/SPEC2000/modmesa/bitmap.c,
	* benchmarks/SPEC2000/modmesa/lines.h,
	* benchmarks/SPEC2000/modmesa/bitmap.h,
	* benchmarks/SPEC2000/modmesa/alphabuf.c,
	* benchmarks/SPEC2000/modmesa/feedback.c,
	* benchmarks/SPEC2000/modmesa/scissor.c,
	* benchmarks/SPEC2000/modmesa/alphabuf.h,
	* benchmarks/SPEC2000/modmesa/clip.c,
	* benchmarks/SPEC2000/modmesa/osmesa.c,
	* benchmarks/SPEC2000/modmesa/polygon.c,
	* benchmarks/SPEC2000/modmesa/masking.c,
	* benchmarks/SPEC2000/modmesa/macros.h,
	* benchmarks/SPEC2000/modmesa/feedback.h,
	* benchmarks/SPEC2000/modmesa/tritemp.h,
	* benchmarks/SPEC2000/modmesa/scissor.h,
	* benchmarks/SPEC2000/modmesa/api2.c,
	* benchmarks/SPEC2000/modmesa/xform.c,
	* benchmarks/SPEC2000/modmesa/clip.h,
	* benchmarks/SPEC2000/modmesa/polygon.h,
	* benchmarks/SPEC2000/modmesa/readpix.c,
	* benchmarks/SPEC2000/modmesa/masking.h,
	* benchmarks/SPEC2000/modmesa/texture.c,
	* benchmarks/SPEC2000/modmesa/xform.h,
	* benchmarks/SPEC2000/modmesa/readpix.h,
	* benchmarks/SPEC2000/modmesa/span.c,
	* benchmarks/SPEC2000/modmesa/texstate.c,
	* benchmarks/SPEC2000/modmesa/varray.c,
	* benchmarks/SPEC2000/modmesa/texture.h,
	* benchmarks/SPEC2000/modmesa/triangle.c,
	* benchmarks/SPEC2000/modmesa/colors.h,
	* benchmarks/SPEC2000/modmesa/mmath.c,
	* benchmarks/SPEC2000/modmesa/span.h,
	* benchmarks/SPEC2000/modmesa/stereo.h,
	* benchmarks/SPEC2000/modmesa/texstate.h,
	* benchmarks/SPEC2000/modmesa/types.h,
	* benchmarks/SPEC2000/modmesa/varray.h,
	* benchmarks/SPEC2000/modmesa/triangle.h,
	* benchmarks/SPEC2000/modmesa/mmath.h,
	* benchmarks/SPEC2000/modmesa/api.h,
	* benchmarks/SPEC2000/modmesa/vbfill.c,
	* benchmarks/SPEC2000/modmesa/vbfill.h,
	* benchmarks/SPEC2000/modmesa/vbxform.c,
	* benchmarks/SPEC2000/modmesa/shade.c,
	* benchmarks/SPEC2000/modmesa/alpha.c,
	* benchmarks/SPEC2000/modmesa/vbxform.h,
	* benchmarks/SPEC2000/modmesa/shade.h,
	* benchmarks/SPEC2000/modmesa/makemesh.c,
	* benchmarks/SPEC2000/modmesa/alpha.h,
	* benchmarks/SPEC2000/modmesa/rastpos.c,
	* benchmarks/SPEC2000/modmesa/texobj.c,
	* benchmarks/SPEC2000/modmesa/logic.c,
	* benchmarks/SPEC2000/modmesa/rect.c,
	* benchmarks/SPEC2000/modmesa/rastpos.h,
	* benchmarks/SPEC2000/modmesa/texobj.h,
	* benchmarks/SPEC2000/modmesa/logic.h,
	* benchmarks/SPEC2000/modmesa/rect.h,
	* benchmarks/SPEC2000/modmesa/teximage.c,
	* benchmarks/SPEC2000/modmesa/matrix.c,
	* benchmarks/SPEC2000/modmesa/fixed.h,
	* benchmarks/SPEC2000/modmesa/colortab.c,
	* benchmarks/SPEC2000/modmesa/vb.c,
	* benchmarks/SPEC2000/modmesa/teximage.h,
	* benchmarks/SPEC2000/modmesa/mesa4.c,
	* benchmarks/SPEC2000/modmesa/matrix.h,
	* benchmarks/SPEC2000/modmesa/colortab.h,
	* benchmarks/SPEC2000/modmesa/fog.c,
	* benchmarks/SPEC2000/modmesa/vb.h,
	* benchmarks/SPEC2000/modmesa/get.c,
	* benchmarks/SPEC2000/modmesa/winpos.c,
	* benchmarks/SPEC2000/modmesa/fog.h,
	* benchmarks/SPEC2000/modmesa/GL/gl.h,
	* benchmarks/SPEC2000/modmesa/GL/osmesa.h,
	* benchmarks/SPEC2000/modmesa/pixel.c,
	* benchmarks/SPEC2000/modmesa/get.h,
	* benchmarks/SPEC2000/modmesa/context.c,
	* benchmarks/SPEC2000/modmesa/winpos.h,
	* benchmarks/SPEC2000/modmesa/enable.c,
	* benchmarks/SPEC2000/modmesa/pixel.h,
	* benchmarks/SPEC2000/modmesa/context.h,
	* benchmarks/SPEC2000/modmesa/api1.c,
	* benchmarks/SPEC2000/modmesa/enable.h,
	* benchmarks/SPEC2000/modmesa/copypix.c,
	* benchmarks/SPEC2000/modmesa/misc.c,
	* benchmarks/SPEC2000/modmesa/eval.h,
	* benchmarks/SPEC2000/modmesa/mesa_eval.c,
	* benchmarks/SPEC2000/modart/modart.c,
	* benchmarks/SPEC2000/modart/all_files,
	* benchmarks/SPEC2000/modart/scanner.c,
	* benchmarks/SPEC2000/modquake/modquake.c,
	* benchmarks/SPEC2000/modquake/all_files,
	* benchmarks/SPEC2000/modammp/ammp.h,
	* benchmarks/SPEC2000/modammp/analyze.c,
	* benchmarks/SPEC2000/modammp/bonds.c,
	* benchmarks/SPEC2000/modammp/all_files,
	* benchmarks/SPEC2000/modammp/graceless.h,
	* benchmarks/SPEC2000/modammp/animate.c,
	* benchmarks/SPEC2000/modammp/tgroup.c,
	* benchmarks/SPEC2000/modammp/atoms.c,
	* benchmarks/SPEC2000/modammp/gsdg.c,
	* benchmarks/SPEC2000/modammp/angle.c,
	* benchmarks/SPEC2000/modammp/rectmm.c,
	* benchmarks/SPEC2000/modammp/math.c,
	* benchmarks/SPEC2000/modammp/tailor.c,
	* benchmarks/SPEC2000/modammp/anonbon.c,
	* benchmarks/SPEC2000/modammp/modammp.c,
	* benchmarks/SPEC2000/modammp/noel.c,
	* benchmarks/SPEC2000/modammp/numeric.h,
	* benchmarks/SPEC2000/modammp/optimist.c,
	* benchmarks/SPEC2000/modammp/unonbon.c,
	* benchmarks/SPEC2000/modammp/vnonbon.c,
	* benchmarks/SPEC2000/modammp/tset.c,
	* benchmarks/SPEC2000/modammp/random.c,
	* benchmarks/SPEC2000/modammp/hybrid.c,
	* benchmarks/SPEC2000/modammp/significance.c,
	* benchmarks/SPEC2000/modammp/variable.c,
	* benchmarks/SPEC2000/modammp/monitor.c,
	* benchmarks/SPEC2000/modammp/restrain.c,
	* benchmarks/SPEC2000/modammp/mom.c,
	* benchmarks/SPEC2000/modammp/box.c,
	* benchmarks/SPEC2000/modammp/tether.c,
	* benchmarks/SPEC2000/modammp/torsion.c,
	* benchmarks/run-tests.sh: Benchmarks (not touched).


2010-01-04  Louis-Noel Pouchet  <pouchet@cse.ohio-state.edu>
	Commit the project. Currently does not compile: missing files,
	build system broken, patch unchecked.

	* ChangeLog,
	* AUTHORS,
	* COPYING,
	* INSTALL,
	* NEWS,
	* README,
	* configure.ac,
	* config/ax_polylib.m4,
	* config/ax_clan.m4,
	* config/ax_piplib.m4,
	* config/ax_boost_base.m4,
	* config/ax_candl.m4,
	* config/ax_cloog.m4,
	* config/ax_boost.m4,
	* doc/Doxyfile,
	* Makefile.am,
	* autogen.sh,
	* pocc-installer.sh,
	* include/polyRose/ClastToSage.hpp,
	* include/polyRose/SimpleScopExtractor.hpp,
	* include/polyRose/StmtExprAnalyzer.hpp,
	* include/polyRose/SimpleExpressionTraversal.hpp,
	* include/polyRose/AssignmentAnalyzer.hpp,
	* include/polyRose/LoopAnalyzer.hpp,
	* include/polyRose/SimpleSageScopToClan.hpp,
	* include/polyRose/PlutoRoseUtility.hpp,
	* include/polyRose/ScopExtractor.hpp,
	* include/polyRose/ExpressionTraversal.hpp,
	* include/polyRose/ArrayIndexMap.hpp,
	* include/polyRose/SageScop.hpp,
	* include/polyRose/SageScopToClan.hpp,
	* src/SimpleMain.cpp,
	* src/ScopExtractor.cpp,
	* src/ArrayIndexMap.cpp,
	* src/SageScop.cpp,
	* src/PoCCOptimize.cpp,
	* src/SageScopToClan.cpp,
	* src/ClastToSage.cpp,
	* src/SimpleScopExtractor.cpp,
	* src/PoCCRose.cpp,
	* src/AssignmentAnalyzer.cpp,
	* src/LoopAnalyzer.cpp,
	* src/SimpleSageScopToClan.cpp,
	* src/PlutoRoseUtility.cpp,
	* src/ExpressionTraversal.cpp,
	* src/Main.cpp,
	* src/StmtExprAnalyzer.cpp,
	* src/SimpleExpressionTraversal.cpp: Modification of CVS plutorose
	to support PoCC and ScopLib. Work in progress.

	* benchmarks/utdsp/modfft/traps.h,
	* benchmarks/utdsp/modfft/modfft.c,
	* benchmarks/utdsp/modfft/input.dsp,
	* benchmarks/utdsp/modfft/fft_1024.c,
	* benchmarks/utdsp/modfft/IO.c,
	* benchmarks/utdsp/modfft/all_files,
	* benchmarks/utdsp/modfft/test-output-file,
	* benchmarks/utdsp/modfft/test-run-options,
	* benchmarks/utdsp/modfft/test-source-files,
	* benchmarks/utdsp/modfft/test-compile-options,
	* benchmarks/utdsp/fft/traps.h,
	* benchmarks/utdsp/fft/fft.c,
	* benchmarks/utdsp/fft/input.dsp,
	* benchmarks/utdsp/fft/fft_1024.c,
	* benchmarks/utdsp/fft/IO.c,
	* benchmarks/utdsp/fft/all_files,
	* benchmarks/utdsp/fft/test-output-file,
	* benchmarks/utdsp/fft/test-run-options,
	* benchmarks/utdsp/fft/test-source-files,
	* benchmarks/utdsp/fft/test-compile-options,
	* benchmarks/utdsp/mult/traps.h,
	* benchmarks/utdsp/mult/mult.c,
	* benchmarks/utdsp/mult/mult_10_10.c,
	* benchmarks/utdsp/mult/input.dsp,
	* benchmarks/utdsp/mult/IO.c,
	* benchmarks/utdsp/mult/all_files,
	* benchmarks/utdsp/mult/test-output-file,
	* benchmarks/utdsp/mult/test-run-options,
	* benchmarks/utdsp/mult/test-source-files,
	* benchmarks/utdsp/mult/test-compile-options,
	* benchmarks/utdsp/modmult/traps.h,
	* benchmarks/utdsp/modmult/modmult.c,
	* benchmarks/utdsp/modmult/mult_10_10.c,
	* benchmarks/utdsp/modmult/input.dsp,
	* benchmarks/utdsp/modmult/IO.c,
	* benchmarks/utdsp/modmult/all_files,
	* benchmarks/utdsp/modmult/test-output-file,
	* benchmarks/utdsp/modmult/test-run-options,
	* benchmarks/utdsp/modmult/test-source-files,
	* benchmarks/utdsp/modmult/test-compile-options,
	* benchmarks/utdsp/modfir-1d/traps.h,
	* benchmarks/utdsp/modfir-1d/modfir-1d.c,
	* benchmarks/utdsp/modfir-1d/input.dsp,
	* benchmarks/utdsp/modfir-1d/fir_32_1.c,
	* benchmarks/utdsp/modfir-1d/IO.c,
	* benchmarks/utdsp/modfir-1d/all_files,
	* benchmarks/utdsp/modfir-1d/test-output-file,
	* benchmarks/utdsp/modfir-1d/test-run-options,
	* benchmarks/utdsp/modfir-1d/test-source-files,
	* benchmarks/utdsp/modfir-1d/test-compile-options,
	* benchmarks/utdsp/fir-1d/traps.h,
	* benchmarks/utdsp/fir-1d/fir-1d.c,
	* benchmarks/utdsp/fir-1d/input.dsp,
	* benchmarks/utdsp/fir-1d/fir_32_1.c,
	* benchmarks/utdsp/fir-1d/IO.c,
	* benchmarks/utdsp/fir-1d/all_files,
	* benchmarks/utdsp/fir-1d/test-output-file,
	* benchmarks/utdsp/fir-1d/test-run-options,
	* benchmarks/utdsp/fir-1d/test-source-files,
	* benchmarks/utdsp/fir-1d/test-compile-options,
	* benchmarks/utdsp/modfir-2d/traps.h,
	* benchmarks/utdsp/modfir-2d/input.dsp,
	* benchmarks/utdsp/modfir-2d/modfir-2d.c,
	* benchmarks/utdsp/modfir-2d/fir_256_64.c,
	* benchmarks/utdsp/modfir-2d/IO.c,
	* benchmarks/utdsp/modfir-2d/all_files,
	* benchmarks/utdsp/modfir-2d/test-output-file,
	* benchmarks/utdsp/modfir-2d/test-run-options,
	* benchmarks/utdsp/modfir-2d/test-source-files,
	* benchmarks/utdsp/modfir-2d/test-compile-options,
	* benchmarks/utdsp/fir-2d/traps.h,
	* benchmarks/utdsp/fir-2d/fir-2d.c,
	* benchmarks/utdsp/fir-2d/input.dsp,
	* benchmarks/utdsp/fir-2d/fir_256_64.c,
	* benchmarks/utdsp/fir-2d/IO.c,
	* benchmarks/utdsp/fir-2d/all_files,
	* benchmarks/utdsp/fir-2d/test-output-file,
	* benchmarks/utdsp/fir-2d/test-run-options,
	* benchmarks/utdsp/fir-2d/test-source-files,
	* benchmarks/utdsp/fir-2d/test-compile-options,
	* benchmarks/utdsp/adpcm/traps.h,
	* benchmarks/utdsp/adpcm/input.dsp,
	* benchmarks/utdsp/adpcm/adpcm.c,
	* benchmarks/utdsp/adpcm/IO.c,
	* benchmarks/utdsp/adpcm/all_files,
	* benchmarks/utdsp/adpcm/test-output-file,
	* benchmarks/utdsp/adpcm/test-run-options,
	* benchmarks/utdsp/adpcm/README,
	* benchmarks/utdsp/adpcm/test-source-files,
	* benchmarks/utdsp/adpcm/test-compile-options,
	* benchmarks/utdsp/modadpcm/traps.h,
	* benchmarks/utdsp/modadpcm/input.dsp,
	* benchmarks/utdsp/modadpcm/adpcm.c,
	* benchmarks/utdsp/modadpcm/modadpcm.c,
	* benchmarks/utdsp/modadpcm/IO.c,
	* benchmarks/utdsp/modadpcm/all_files,
	* benchmarks/utdsp/modadpcm/test-output-file,
	* benchmarks/utdsp/modadpcm/test-run-options,
	* benchmarks/utdsp/modadpcm/README,
	* benchmarks/utdsp/modadpcm/test-source-files,
	* benchmarks/utdsp/modadpcm/test-compile-options,
	* benchmarks/utdsp/test-utdsp.sh,
	* benchmarks/utdsp/modiir-2d/traps.h,
	* benchmarks/utdsp/modiir-2d/iir_4_64.c,
	* benchmarks/utdsp/modiir-2d/input.dsp,
	* benchmarks/utdsp/modiir-2d/modiir-2d.c,
	* benchmarks/utdsp/modiir-2d/IO.c,
	* benchmarks/utdsp/modiir-2d/all_files,
	* benchmarks/utdsp/modiir-2d/test-output-file,
	* benchmarks/utdsp/modiir-2d/test-run-options,
	* benchmarks/utdsp/modiir-2d/test-source-files,
	* benchmarks/utdsp/modiir-2d/test-compile-options,
	* benchmarks/utdsp/iir-2d/traps.h,
	* benchmarks/utdsp/iir-2d/iir_4_64.c,
	* benchmarks/utdsp/iir-2d/input.dsp,
	* benchmarks/utdsp/iir-2d/iir-2d.c,
	* benchmarks/utdsp/iir-2d/IO.c,
	* benchmarks/utdsp/iir-2d/all_files,
	* benchmarks/utdsp/iir-2d/test-output-file,
	* benchmarks/utdsp/iir-2d/test-run-options,
	* benchmarks/utdsp/iir-2d/test-source-files,
	* benchmarks/utdsp/iir-2d/test-compile-options,
	* benchmarks/utdsp/compress/traps.h,
	* benchmarks/utdsp/compress/input.dsp,
	* benchmarks/utdsp/compress/IO.c,
	* benchmarks/utdsp/compress/all_files,
	* benchmarks/utdsp/compress/test-output-file,
	* benchmarks/utdsp/compress/test-run-options,
	* benchmarks/utdsp/compress/compress.c,
	* benchmarks/utdsp/compress/README,
	* benchmarks/utdsp/compress/test-source-files,
	* benchmarks/utdsp/compress/test-compile-options,
	* benchmarks/utdsp/modcompress/traps.h,
	* benchmarks/utdsp/modcompress/input.dsp,
	* benchmarks/utdsp/modcompress/IO.c,
	* benchmarks/utdsp/modcompress/all_files,
	* benchmarks/utdsp/modcompress/test-output-file,
	* benchmarks/utdsp/modcompress/test-run-options,
	* benchmarks/utdsp/modcompress/compress.c,
	* benchmarks/utdsp/modcompress/modcompress.c,
	* benchmarks/utdsp/modcompress/README,
	* benchmarks/utdsp/modcompress/test-source-files,
	* benchmarks/utdsp/modcompress/test-compile-options,
	* benchmarks/utdsp/modedge_detect/traps.h,
	* benchmarks/utdsp/modedge_detect/input.dsp,
	* benchmarks/utdsp/modedge_detect/IO.c,
	* benchmarks/utdsp/modedge_detect/all_files,
	* benchmarks/utdsp/modedge_detect/test-output-file,
	* benchmarks/utdsp/modedge_detect/test-run-options,
	* benchmarks/utdsp/modedge_detect/edge_detect.c,
	* benchmarks/utdsp/modedge_detect/modedge_detect.c,
	* benchmarks/utdsp/modedge_detect/test-source-files,
	* benchmarks/utdsp/modedge_detect/test-compile-options,
	* benchmarks/utdsp/edge_detect/traps.h,
	* benchmarks/utdsp/edge_detect/input.dsp,
	* benchmarks/utdsp/edge_detect/IO.c,
	* benchmarks/utdsp/edge_detect/all_files,
	* benchmarks/utdsp/edge_detect/test-output-file,
	* benchmarks/utdsp/edge_detect/test-run-options,
	* benchmarks/utdsp/edge_detect/edge_detect.c,
	* benchmarks/utdsp/edge_detect/test-source-files,
	* benchmarks/utdsp/edge_detect/test-compile-options,
	* benchmarks/utdsp/latnrm/traps.h,
	* benchmarks/utdsp/latnrm/input.dsp,
	* benchmarks/utdsp/latnrm/IO.c,
	* benchmarks/utdsp/latnrm/all_files,
	* benchmarks/utdsp/latnrm/test-output-file,
	* benchmarks/utdsp/latnrm/test-run-options,
	* benchmarks/utdsp/latnrm/latnrm_32_64.c,
	* benchmarks/utdsp/latnrm/test-source-files,
	* benchmarks/utdsp/latnrm/latnrm.c,
	* benchmarks/utdsp/latnrm/test-compile-options,
	* benchmarks/utdsp/histogram/traps.h,
	* benchmarks/utdsp/histogram/input.dsp,
	* benchmarks/utdsp/histogram/IO.c,
	* benchmarks/utdsp/histogram/all_files,
	* benchmarks/utdsp/histogram/test-output-file,
	* benchmarks/utdsp/histogram/test-run-options,
	* benchmarks/utdsp/histogram/test-source-files,
	* benchmarks/utdsp/histogram/histogram.c,
	* benchmarks/utdsp/histogram/test-compile-options,
	* benchmarks/utdsp/modhistogram/traps.h,
	* benchmarks/utdsp/modhistogram/input.dsp,
	* benchmarks/utdsp/modhistogram/IO.c,
	* benchmarks/utdsp/modhistogram/all_files,
	* benchmarks/utdsp/modhistogram/test-output-file,
	* benchmarks/utdsp/modhistogram/test-run-options,
	* benchmarks/utdsp/modhistogram/test-source-files,
	* benchmarks/utdsp/modhistogram/histogram.c,
	* benchmarks/utdsp/modhistogram/modhistogram.c,
	* benchmarks/utdsp/modhistogram/test-compile-options,
	* benchmarks/utdsp/modlatnrm/traps.h,
	* benchmarks/utdsp/modlatnrm/input.dsp,
	* benchmarks/utdsp/modlatnrm/IO.c,
	* benchmarks/utdsp/modlatnrm/all_files,
	* benchmarks/utdsp/modlatnrm/test-output-file,
	* benchmarks/utdsp/modlatnrm/test-run-options,
	* benchmarks/utdsp/modlatnrm/latnrm_32_64.c,
	* benchmarks/utdsp/modlatnrm/test-source-files,
	* benchmarks/utdsp/modlatnrm/modlatnrm.c,
	* benchmarks/utdsp/modlatnrm/test-compile-options,
	* benchmarks/utdsp/lmsfir-1d/lmsfir-1d.c,
	* benchmarks/utdsp/lmsfir-1d/traps.h,
	* benchmarks/utdsp/lmsfir-1d/input.dsp,
	* benchmarks/utdsp/lmsfir-1d/lmsfir_8_1.c,
	* benchmarks/utdsp/lmsfir-1d/IO.c,
	* benchmarks/utdsp/lmsfir-1d/all_files,
	* benchmarks/utdsp/lmsfir-1d/test-output-file,
	* benchmarks/utdsp/lmsfir-1d/test-run-options,
	* benchmarks/utdsp/lmsfir-1d/test-source-files,
	* benchmarks/utdsp/lmsfir-1d/test-compile-options,
	* benchmarks/utdsp/modlmsfir-1d/modlmsfir-1d.c,
	* benchmarks/utdsp/modlmsfir-1d/traps.h,
	* benchmarks/utdsp/modlmsfir-1d/input.dsp,
	* benchmarks/utdsp/modlmsfir-1d/lmsfir_8_1.c,
	* benchmarks/utdsp/modlmsfir-1d/IO.c,
	* benchmarks/utdsp/modlmsfir-1d/all_files,
	* benchmarks/utdsp/modlmsfir-1d/test-output-file,
	* benchmarks/utdsp/modlmsfir-1d/test-run-options,
	* benchmarks/utdsp/modlmsfir-1d/test-source-files,
	* benchmarks/utdsp/modlmsfir-1d/test-compile-options,
	* benchmarks/utdsp/lmsfir-2d/traps.h,
	* benchmarks/utdsp/lmsfir-2d/lmsfir-2d.c,
	* benchmarks/utdsp/lmsfir-2d/input.dsp,
	* benchmarks/utdsp/lmsfir-2d/IO.c,
	* benchmarks/utdsp/lmsfir-2d/all_files,
	* benchmarks/utdsp/lmsfir-2d/lmsfir_32_64.c,
	* benchmarks/utdsp/lmsfir-2d/test-output-file,
	* benchmarks/utdsp/lmsfir-2d/test-run-options,
	* benchmarks/utdsp/lmsfir-2d/test-source-files,
	* benchmarks/utdsp/lmsfir-2d/test-compile-options,
	* benchmarks/utdsp/modlmsfir-2d/traps.h,
	* benchmarks/utdsp/modlmsfir-2d/modlmsfir-2d.c,
	* benchmarks/utdsp/modlmsfir-2d/input.dsp,
	* benchmarks/utdsp/modlmsfir-2d/IO.c,
	* benchmarks/utdsp/modlmsfir-2d/all_files,
	* benchmarks/utdsp/modlmsfir-2d/lmsfir_32_64.c,
	* benchmarks/utdsp/modlmsfir-2d/test-output-file,
	* benchmarks/utdsp/modlmsfir-2d/test-run-options,
	* benchmarks/utdsp/modlmsfir-2d/test-source-files,
	* benchmarks/utdsp/modlmsfir-2d/test-compile-options,
	* benchmarks/utdsp/modspectral/traps.h,
	* benchmarks/utdsp/modspectral/input.dsp,
	* benchmarks/utdsp/modspectral/IO.c,
	* benchmarks/utdsp/modspectral/all_files,
	* benchmarks/utdsp/modspectral/spectral_estimation.c,
	* benchmarks/utdsp/modspectral/test-output-file,
	* benchmarks/utdsp/modspectral/test-run-options,
	* benchmarks/utdsp/modspectral/README,
	* benchmarks/utdsp/modspectral/test-source-files,
	* benchmarks/utdsp/modspectral/modspectral.c,
	* benchmarks/utdsp/modspectral/test-compile-options,
	* benchmarks/utdsp/spectral/traps.h,
	* benchmarks/utdsp/spectral/input.dsp,
	* benchmarks/utdsp/spectral/IO.c,
	* benchmarks/utdsp/spectral/all_files,
	* benchmarks/utdsp/spectral/spectral_estimation.c,
	* benchmarks/utdsp/spectral/test-output-file,
	* benchmarks/utdsp/spectral/test-run-options,
	* benchmarks/utdsp/spectral/README,
	* benchmarks/utdsp/spectral/test-source-files,
	* benchmarks/utdsp/spectral/spectral.c,
	* benchmarks/utdsp/spectral/test-compile-options,
	* benchmarks/utdsp/lpc/lpc.c,
	* benchmarks/utdsp/lpc/traps.h,
	* benchmarks/utdsp/lpc/input.dsp,
	* benchmarks/utdsp/lpc/IO.c,
	* benchmarks/utdsp/lpc/all_files,
	* benchmarks/utdsp/lpc/test-output-file,
	* benchmarks/utdsp/lpc/test-run-options,
	* benchmarks/utdsp/lpc/README,
	* benchmarks/utdsp/lpc/test-source-files,
	* benchmarks/utdsp/lpc/test-compile-options,
	* benchmarks/utdsp/modlpc/lpc.c,
	* benchmarks/utdsp/modlpc/modlpc.c,
	* benchmarks/utdsp/modlpc/traps.h,
	* benchmarks/utdsp/modlpc/input.dsp,
	* benchmarks/utdsp/modlpc/IO.c,
	* benchmarks/utdsp/modlpc/all_files,
	* benchmarks/utdsp/modlpc/test-output-file,
	* benchmarks/utdsp/modlpc/test-run-options,
	* benchmarks/utdsp/modlpc/README,
	* benchmarks/utdsp/modlpc/test-source-files,
	* benchmarks/utdsp/modlpc/test-compile-options,
	* benchmarks/pluto-compare.sh,
	* benchmarks/pluto/matmul/decls.h,
	* benchmarks/pluto/matmul/matmul.c,
	* benchmarks/pluto/matmul/papi_defs.h,
	* benchmarks/pluto/matmul/matmul.scop,
	* benchmarks/pluto/matmul/util.h,
	* benchmarks/pluto/matmul/tile.sizes,
	* benchmarks/pluto/matmul/all_files,
	* benchmarks/pluto/matmul/test-run-options,
	* benchmarks/pluto/matmul/test-source-files,
	* benchmarks/pluto/matmul/test-compile-options,
	* benchmarks/pluto/lu/decls.h,
	* benchmarks/pluto/lu/papi_defs.h,
	* benchmarks/pluto/lu/lu.c,
	* benchmarks/pluto/lu/lu.scop,
	* benchmarks/pluto/lu/util.h,
	* benchmarks/pluto/lu/tile.sizes,
	* benchmarks/pluto/lu/all_files,
	* benchmarks/pluto/lu/test-run-options,
	* benchmarks/pluto/lu/test-source-files,
	* benchmarks/pluto/lu/test-compile-options,
	* benchmarks/pluto/matmul-init/decls.h,
	* benchmarks/pluto/matmul-init/papi_defs.h,
	* benchmarks/pluto/matmul-init/matmul-init.c,
	* benchmarks/pluto/matmul-init/matmul-init.scop,
	* benchmarks/pluto/matmul-init/util.h,
	* benchmarks/pluto/matmul-init/tile.sizes,
	* benchmarks/pluto/matmul-init/all_files,
	* benchmarks/pluto/matmul-init/test-run-options,
	* benchmarks/pluto/matmul-init/test-source-files,
	* benchmarks/pluto/matmul-init/test-compile-options,
	* benchmarks/pluto/jacobi-1d-imper/decls.h,
	* benchmarks/pluto/jacobi-1d-imper/papi_defs.h,
	* benchmarks/pluto/jacobi-1d-imper/util.h,
	* benchmarks/pluto/jacobi-1d-imper/jacobi-1d-imper.c,
	* benchmarks/pluto/jacobi-1d-imper/jacobi-1d-imper.scop,
	* benchmarks/pluto/jacobi-1d-imper/tile.sizes,
	* benchmarks/pluto/jacobi-1d-imper/all_files,
	* benchmarks/pluto/jacobi-1d-imper/test-run-options,
	* benchmarks/pluto/jacobi-1d-imper/test-source-files,
	* benchmarks/pluto/jacobi-1d-imper/test-compile-options,
	* benchmarks/pluto/fdtd-2d/decls.h,
	* benchmarks/pluto/fdtd-2d/papi_defs.h,
	* benchmarks/pluto/fdtd-2d/util.h,
	* benchmarks/pluto/fdtd-2d/fdtd-2d.c,
	* benchmarks/pluto/fdtd-2d/fdtd-2d.scop,
	* benchmarks/pluto/fdtd-2d/all_files,
	* benchmarks/pluto/fdtd-2d/test-run-options,
	* benchmarks/pluto/fdtd-2d/test-source-files,
	* benchmarks/pluto/fdtd-2d/test-compile-options,
	* benchmarks/pluto/jacobi-2d-imper/decls.h,
	* benchmarks/pluto/jacobi-2d-imper/papi_defs.h,
	* benchmarks/pluto/jacobi-2d-imper/util.h,
	* benchmarks/pluto/jacobi-2d-imper/jacobi-2d-imper.c,
	* benchmarks/pluto/jacobi-2d-imper/jacobi-2d-imper.scop,
	* benchmarks/pluto/jacobi-2d-imper/all_files,
	* benchmarks/pluto/jacobi-2d-imper/test-run-options,
	* benchmarks/pluto/jacobi-2d-imper/test-source-files,
	* benchmarks/pluto/jacobi-2d-imper/test-compile-options,
	* benchmarks/pluto/gemver/decls.h,
	* benchmarks/pluto/gemver/papi_defs.h,
	* benchmarks/pluto/gemver/util.h,
	* benchmarks/pluto/gemver/gemver.c,
	* benchmarks/pluto/gemver/gemver.scop,
	* benchmarks/pluto/gemver/tile.sizes,
	* benchmarks/pluto/gemver/all_files,
	* benchmarks/pluto/gemver/test-run-options,
	* benchmarks/pluto/gemver/test-source-files,
	* benchmarks/pluto/gemver/test-compile-options,
	* benchmarks/pluto/seidel/decls.h,
	* benchmarks/pluto/seidel/papi_defs.h,
	* benchmarks/pluto/seidel/util.h,
	* benchmarks/pluto/seidel/seidel.c,
	* benchmarks/pluto/seidel/seidel.scop,
	* benchmarks/pluto/seidel/tile.sizes,
	* benchmarks/pluto/seidel/all_files,
	* benchmarks/pluto/seidel/test-run-options,
	* benchmarks/pluto/seidel/test-source-files,
	* benchmarks/pluto/seidel/test-compile-options,
	* benchmarks/pluto/mvt/decls.h,
	* benchmarks/pluto/mvt/papi_defs.h,
	* benchmarks/pluto/mvt/util.h,
	* benchmarks/pluto/mvt/mvt.c,
	* benchmarks/pluto/mvt/mvt.scop,
	* benchmarks/pluto/mvt/all_files,
	* benchmarks/pluto/mvt/test-run-options,
	* benchmarks/pluto/mvt/test-source-files,
	* benchmarks/pluto/mvt/test-compile-options,
	* benchmarks/pluto/stencil3d/decls.h,
	* benchmarks/pluto/stencil3d/papi_defs.h,
	* benchmarks/pluto/stencil3d/util.h,
	* benchmarks/pluto/stencil3d/stencil3d.c,
	* benchmarks/pluto/stencil3d/tile.sizes,
	* benchmarks/pluto/stencil3d/all_files,
	* benchmarks/pluto/stencil3d/test-run-options,
	* benchmarks/pluto/stencil3d/stencil3d.scop,
	* benchmarks/pluto/stencil3d/test-source-files,
	* benchmarks/pluto/stencil3d/test-compile-options,
	* benchmarks/pluto/doitgen/decls.h,
	* benchmarks/pluto/doitgen/papi_defs.h,
	* benchmarks/pluto/doitgen/util.h,
	* benchmarks/pluto/doitgen/tile.sizes,
	* benchmarks/pluto/doitgen/all_files,
	* benchmarks/pluto/doitgen/doitgen.c,
	* benchmarks/pluto/doitgen/test-run-options,
	* benchmarks/pluto/doitgen/doitgen.scop,
	* benchmarks/pluto/doitgen/test-source-files,
	* benchmarks/pluto/doitgen/test-compile-options,
	* benchmarks/pluto/test-pluto.sh,
	* benchmarks/pluto/template/decls.h,
	* benchmarks/pluto/template/papi_defs.h,
	* benchmarks/pluto/template/util.h,
	* benchmarks/pluto/template/all_files,
	* benchmarks/pluto/template/test-run-options,
	* benchmarks/pluto/template/template.c,
	* benchmarks/pluto/template/test-source-files,
	* benchmarks/pluto/template/template.scop,
	* benchmarks/pluto/template/test-compile-options,
	* benchmarks/pluto/adi/adi.scop,
	* benchmarks/pluto/adi/decls.h,
	* benchmarks/pluto/adi/papi_defs.h,
	* benchmarks/pluto/adi/util.h,
	* benchmarks/pluto/adi/all_files,
	* benchmarks/pluto/adi/test-run-options,
	* benchmarks/pluto/adi/test-source-files,
	* benchmarks/pluto/adi/adi.c,
	* benchmarks/pluto/adi/test-compile-options,
	* benchmarks/run.pl.in,
	* benchmarks/Makefile.am,
	* benchmarks/SPEC2000/modmesa/misc.h,
	* benchmarks/SPEC2000/modmesa/copypix.h,
	* benchmarks/SPEC2000/modmesa/depth.c,
	* benchmarks/SPEC2000/modmesa/vbrender.c,
	* benchmarks/SPEC2000/modmesa/light.c,
	* benchmarks/SPEC2000/modmesa/depth.h,
	* benchmarks/SPEC2000/modmesa/all_files,
	* benchmarks/SPEC2000/modmesa/config.h,
	* benchmarks/SPEC2000/modmesa/vbrender.h,
	* benchmarks/SPEC2000/modmesa/points.c,
	* benchmarks/SPEC2000/modmesa/light.h,
	* benchmarks/SPEC2000/modmesa/quads.c,
	* benchmarks/SPEC2000/modmesa/all.h,
	* benchmarks/SPEC2000/modmesa/drawpix.c,
	* benchmarks/SPEC2000/modmesa/dlist.c,
	* benchmarks/SPEC2000/modmesa/points.h,
	* benchmarks/SPEC2000/modmesa/linetemp.h,
	* benchmarks/SPEC2000/modmesa/image.c,
	* benchmarks/SPEC2000/modmesa/quads.h,
	* benchmarks/SPEC2000/modmesa/hash.c,
	* benchmarks/SPEC2000/modmesa/drawpix.h,
	* benchmarks/SPEC2000/modmesa/dlist.h,
	* benchmarks/SPEC2000/modmesa/blend.c,
	* benchmarks/SPEC2000/modmesa/attrib.c,
	* benchmarks/SPEC2000/modmesa/image.h,
	* benchmarks/SPEC2000/modmesa/hash.h,
	* benchmarks/SPEC2000/modmesa/accum.c,
	* benchmarks/SPEC2000/modmesa/blend.h,
	* benchmarks/SPEC2000/modmesa/attrib.h,
	* benchmarks/SPEC2000/modmesa/dd.h,
	* benchmarks/SPEC2000/modmesa/accum.h,
	* benchmarks/SPEC2000/modmesa/stencil.c,
	* benchmarks/SPEC2000/modmesa/pb.c,
	* benchmarks/SPEC2000/modmesa/pointers.c,
	* benchmarks/SPEC2000/modmesa/stencil.h,
	* benchmarks/SPEC2000/modmesa/pb.h,
	* benchmarks/SPEC2000/modmesa/pointers.h,
	* benchmarks/SPEC2000/modmesa/mesa3.c,
	* benchmarks/SPEC2000/modmesa/lines.c,
	* benchmarks/SPEC2000/modmesa/bitmap.c,
	* benchmarks/SPEC2000/modmesa/lines.h,
	* benchmarks/SPEC2000/modmesa/bitmap.h,
	* benchmarks/SPEC2000/modmesa/alphabuf.c,
	* benchmarks/SPEC2000/modmesa/feedback.c,
	* benchmarks/SPEC2000/modmesa/scissor.c,
	* benchmarks/SPEC2000/modmesa/polygon.c,
	* benchmarks/SPEC2000/modmesa/osmesa.c,
	* benchmarks/SPEC2000/modmesa/clip.c,
	* benchmarks/SPEC2000/modmesa/alphabuf.h,
	* benchmarks/SPEC2000/modmesa/tritemp.h,
	* benchmarks/SPEC2000/modmesa/feedback.h,
	* benchmarks/SPEC2000/modmesa/macros.h,
	* benchmarks/SPEC2000/modmesa/masking.c,
	* benchmarks/SPEC2000/modmesa/scissor.h,
	* benchmarks/SPEC2000/modmesa/xform.c,
	* benchmarks/SPEC2000/modmesa/api2.c,
	* benchmarks/SPEC2000/modmesa/readpix.c,
	* benchmarks/SPEC2000/modmesa/polygon.h,
	* benchmarks/SPEC2000/modmesa/clip.h,
	* benchmarks/SPEC2000/modmesa/masking.h,
	* benchmarks/SPEC2000/modmesa/xform.h,
	* benchmarks/SPEC2000/modmesa/texture.c,
	* benchmarks/SPEC2000/modmesa/readpix.h,
	* benchmarks/SPEC2000/modmesa/span.c,
	* benchmarks/SPEC2000/modmesa/texstate.c,
	* benchmarks/SPEC2000/modmesa/varray.c,
	* benchmarks/SPEC2000/modmesa/texture.h,
	* benchmarks/SPEC2000/modmesa/triangle.c,
	* benchmarks/SPEC2000/modmesa/colors.h,
	* benchmarks/SPEC2000/modmesa/mmath.c,
	* benchmarks/SPEC2000/modmesa/span.h,
	* benchmarks/SPEC2000/modmesa/stereo.h,
	* benchmarks/SPEC2000/modmesa/texstate.h,
	* benchmarks/SPEC2000/modmesa/types.h,
	* benchmarks/SPEC2000/modmesa/varray.h,
	* benchmarks/SPEC2000/modmesa/triangle.h,
	* benchmarks/SPEC2000/modmesa/mmath.h,
	* benchmarks/SPEC2000/modmesa/api.h,
	* benchmarks/SPEC2000/modmesa/vbfill.c,
	* benchmarks/SPEC2000/modmesa/vbfill.h,
	* benchmarks/SPEC2000/modmesa/vbxform.c,
	* benchmarks/SPEC2000/modmesa/shade.c,
	* benchmarks/SPEC2000/modmesa/alpha.c,
	* benchmarks/SPEC2000/modmesa/vbxform.h,
	* benchmarks/SPEC2000/modmesa/shade.h,
	* benchmarks/SPEC2000/modmesa/makemesh.c,
	* benchmarks/SPEC2000/modmesa/alpha.h,
	* benchmarks/SPEC2000/modmesa/rastpos.c,
	* benchmarks/SPEC2000/modmesa/texobj.c,
	* benchmarks/SPEC2000/modmesa/logic.c,
	* benchmarks/SPEC2000/modmesa/rect.c,
	* benchmarks/SPEC2000/modmesa/rastpos.h,
	* benchmarks/SPEC2000/modmesa/texobj.h,
	* benchmarks/SPEC2000/modmesa/logic.h,
	* benchmarks/SPEC2000/modmesa/rect.h,
	* benchmarks/SPEC2000/modmesa/teximage.c,
	* benchmarks/SPEC2000/modmesa/matrix.c,
	* benchmarks/SPEC2000/modmesa/fixed.h,
	* benchmarks/SPEC2000/modmesa/colortab.c,
	* benchmarks/SPEC2000/modmesa/vb.c,
	* benchmarks/SPEC2000/modmesa/teximage.h,
	* benchmarks/SPEC2000/modmesa/matrix.h,
	* benchmarks/SPEC2000/modmesa/mesa4.c,
	* benchmarks/SPEC2000/modmesa/colortab.h,
	* benchmarks/SPEC2000/modmesa/fog.c,
	* benchmarks/SPEC2000/modmesa/vb.h,
	* benchmarks/SPEC2000/modmesa/get.c,
	* benchmarks/SPEC2000/modmesa/winpos.c,
	* benchmarks/SPEC2000/modmesa/fog.h,
	* benchmarks/SPEC2000/modmesa/GL/gl.h,
	* benchmarks/SPEC2000/modmesa/GL/osmesa.h,
	* benchmarks/SPEC2000/modmesa/pixel.c,
	* benchmarks/SPEC2000/modmesa/get.h,
	* benchmarks/SPEC2000/modmesa/context.c,
	* benchmarks/SPEC2000/modmesa/winpos.h,
	* benchmarks/SPEC2000/modmesa/enable.c,
	* benchmarks/SPEC2000/modmesa/pixel.h,
	* benchmarks/SPEC2000/modmesa/context.h,
	* benchmarks/SPEC2000/modmesa/api1.c,
	* benchmarks/SPEC2000/modmesa/enable.h,
	* benchmarks/SPEC2000/modmesa/copypix.c,
	* benchmarks/SPEC2000/modmesa/misc.c,
	* benchmarks/SPEC2000/modmesa/eval.h,
	* benchmarks/SPEC2000/modmesa/mesa_eval.c,
	* benchmarks/SPEC2000/modart/modart.c,
	* benchmarks/SPEC2000/modart/all_files,
	* benchmarks/SPEC2000/modart/scanner.c,
	* benchmarks/SPEC2000/modquake/modquake.c,
	* benchmarks/SPEC2000/modquake/all_files,
	* benchmarks/SPEC2000/modammp/ammp.h,
	* benchmarks/SPEC2000/modammp/analyze.c,
	* benchmarks/SPEC2000/modammp/bonds.c,
	* benchmarks/SPEC2000/modammp/all_files,
	* benchmarks/SPEC2000/modammp/graceless.h,
	* benchmarks/SPEC2000/modammp/animate.c,
	* benchmarks/SPEC2000/modammp/tgroup.c,
	* benchmarks/SPEC2000/modammp/atoms.c,
	* benchmarks/SPEC2000/modammp/gsdg.c,
	* benchmarks/SPEC2000/modammp/angle.c,
	* benchmarks/SPEC2000/modammp/rectmm.c,
	* benchmarks/SPEC2000/modammp/math.c,
	* benchmarks/SPEC2000/modammp/tailor.c,
	* benchmarks/SPEC2000/modammp/anonbon.c,
	* benchmarks/SPEC2000/modammp/modammp.c,
	* benchmarks/SPEC2000/modammp/noel.c,
	* benchmarks/SPEC2000/modammp/numeric.h,
	* benchmarks/SPEC2000/modammp/optimist.c,
	* benchmarks/SPEC2000/modammp/unonbon.c,
	* benchmarks/SPEC2000/modammp/tset.c,
	* benchmarks/SPEC2000/modammp/vnonbon.c,
	* benchmarks/SPEC2000/modammp/random.c,
	* benchmarks/SPEC2000/modammp/hybrid.c,
	* benchmarks/SPEC2000/modammp/significance.c,
	* benchmarks/SPEC2000/modammp/variable.c,
	* benchmarks/SPEC2000/modammp/monitor.c,
	* benchmarks/SPEC2000/modammp/restrain.c,
	* benchmarks/SPEC2000/modammp/mom.c,
	* benchmarks/SPEC2000/modammp/box.c,
	* benchmarks/SPEC2000/modammp/tether.c,
	* benchmarks/SPEC2000/modammp/torsion.c,
	* benchmarks/run-tests.sh: Benchmark suite from CVS plutorose.
