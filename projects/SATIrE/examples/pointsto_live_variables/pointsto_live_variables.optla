// This is the specification of a small "live variables" analysis for a
// fragment of C using only a few types of operators, but including pointers
// (for now, only pointers to stack variables). It is mainly meant to be a
// demonstration of how to use some of the features of the points-to
// analysis provided by SATIrE. The analysis is not meant to do anything
// meaningful on more than one function, all test cases are intraprocedural.

// Analyzers created from this specification must be run with the
// --run-pointsto-analysis command line flag; they will segfault otherwise.
// For this analysis, when running the runtests script, the runtests.custom
// file ensures that the flag is set. When running it manually, the user
// must take care to set it.

// Author: Gergo Barany, Nov 2008

SET
DOMAIN
    VarSet = set(VariableId)
    VarLattice = lift(VarSet)
ENDDOMAIN


PROBLEM Live_Variables_With_Points_To_Information
    prefix:     ptlv_
    direction:  backward
    carrier:    VarLattice
    init:       bot
    init_start: println("") lift({})
    combine:    varlattice_combine
    widening:   varlattice_combine
    retfunc:    varlattice_combine
    equal:      varlattice_equal


TRANSFER
ExprStatement(expr), _:
    let live_vars <= @;
    in  lift(transfer_expr(expr, live_vars));

ScopeStatement(IfStmt(ExprStatement(expr))), _:
    let live_vars <= @;
    in  lift(transfer_expr(expr, live_vars));

ScopeStatement(WhileStmt(ExprStatement(expr))), _:
    let live_vars <= @;
    in  lift(transfer_expr(expr, live_vars));


stmt, _:
    println("ignoring statement ", stmt_asttext(stmt), ", info: ", @)
    @;


SUPPORT
varlattice_combine :: VarLattice, VarLattice -> VarLattice;
varlattice_combine(a, b) = (a lub b);

varlattice_equal :: VarLattice, VarLattice -> bool;
varlattice_equal(a, b) = (a = b);

transfer_expr :: Expression, VarSet -> VarSet;
transfer_expr(expr, live_vars) =
    let kill = kills(expr);
        gen  = gens(expr);
    in  union(subtract(live_vars, kill), gen);

subtract :: VarSet, VarSet -> VarSet;
subtract(a, b) = { v !! v <-- a, if !(v ? b) };

// Everything above is the same as for plain and simple "live variables".
// However, the kill and gen sets for expressions are computed not only for
// variables that appear explicitly in the given expressions; rather, we use
// points-to information to derive the sets of all variables that might be
// referenced by expressions.

// expr_varset(expr): Compute the variables contained in the location this
// expression evaluates to, if any; empty set otherwise. Note that this is
// not the set of all variables used to evaluate the expression; for
// instance, when applied to a dereference *p, this set will not include the
// variable p, only the variables it might point to.
// This function uses SATIrE's auxiliary functions exprid_has_location to
// determine whether the expression evaluates to a location, exprid_location
// to access that location, if any, and location_varsyms to get the
// syntactic list of variables associated with that location.
expr_varset :: Expression -> VarSet;
expr_varset(expr) =
    let exprid = expr_exprid(expr);
    in  if exprid_has_location(exprid) then
            varsymlist_varset(location_varsyms(exprid_location(exprid)))
        else
            {};

// varsymlist_varset(varsymlist): Compute the set of variables belonging to
// a syntactic list of variable symbols. This must be done recursively
// because SATIrE does not support cursors (needed for ZF expressions) over
// syntactic lists at the moment.
varsymlist_varset([!]) = {};
varsymlist_varset(v::vs) =
    let varid = varsym_varid(v);
    in  varsymlist_varset(vs) ~ varid;

// Based on expr_varset, we can compute the kill and gen sets. We allow
// assignments (nested!), ++, and -- operators as the only ones with side
// effects, and a few arithmetic expressions without side effects.
// Assignment operators of the form op= would be easy to support as well.

// Kill those variables that are *definitely* modified by this expression.
// This requires some thought: Modifying operators are =, ++, and --. These
// *definitely* modify some variable if they are applied directly to the
// variable (the easy case). As the points-to analysis is correct, these
// operators also *definitely* modify some variable if they are applied to
// some more complex expression which has a "singleton" location, i.e., may
// only refer to a single variable. Otherwise, the expression may refer to
// two or more variables, and we do not know which one it modifies, so we do
// not kill any of those.
// We use the singleton_var function, defined below, to compute {x}
// for an expression which evaluates to a singleton location for variable x,
// {} otherwise.
kills :: Expression -> VarSet;
kills(expr) =
    case expr of
     // Assignment to a variable or singleton kills the variable; we also
     // traverse both lhs and rhs expressions because they might be
     // arbitrarily complex, containing further modifying operators.
     // (Strictly speaking, thanks to singleton_var, we do not need
     // this first case, the other would cover it.)
        AssignOp(VarRefExp(_) as v, rhs)
                                    => kills(rhs) ~ varref_varid(v);
        AssignOp(lhs, rhs)          => union(singleton_var(lhs),
                                             union(kills(lhs), kills(rhs)));

     // ++ and -- modify their operands and may contain further modifying
     // expressions.
        PlusPlusOp(e)               => union(singleton_var(e), kills(e));
        MinusMinusOp(e)             => union(singleton_var(e), kills(e));

     // Pointer expressions are the interesting cases. A pointer dereference
     // itself does not modify anything; something like *p = ... is handled
     // by the assignment rule. However, we must check whether in the
     // PointerDerefExp *p or in the PntrArrRefExp a[e] there are any nested
     // modifications.
        PointerDerefExp(e)          => kills(e);
        PntrArrRefExp(a, e)         => union(kills(a), kills(e));

     // The address-of operator is harmless, but again, check for nested
     // modifying operators.
        AddressOfOp(e)              => kills(e);

     // Simple and verbose arithmetic/logical operators. These have no side
     // effects but may have operands that do.
        AddOp(lhs, rhs)             => union(kills(lhs), kills(rhs));
        SubtractOp(lhs, rhs)        => union(kills(lhs), kills(rhs));
        MultiplyOp(lhs, rhs)        => union(kills(lhs), kills(rhs));
        DivideOp(lhs, rhs)          => union(kills(lhs), kills(rhs));
        EqualityOp(lhs, rhs)        => union(kills(lhs), kills(rhs));
        LessThanOp(lhs, rhs)        => union(kills(lhs), kills(rhs));

     // A variable reference itself does not kill anything. If this variable
     // reference appears as the operand of a modifying operator, then the
     // rule for that operator took care of computing a kill set.
        VarRefExp(_)                => {};

     // Nothing to kill for constants.
        IntVal(_)                   => {};

     // And the rest. There should be no rest in our simple test programs,
     // and this analysis should not be used on non-simple non-test
     // programs...
        _ => println("What do you mean by ", expr_asttext(expr), "?") {};
    endcase;

// singleton_var(expr): If expr has a singleton location for variable x,
// return {x}; otherwise, return {}. Sorry, I couldn't come up with a good
// name for this function.
singleton_var(VarRefExp(_) as var) =
    {varref_varid(var)};
singleton_var(expr) =
    let exprid = expr_exprid(expr);
    in  if exprid_has_location(exprid) then
            let symlist = location_varsyms(exprid_location(exprid));
            in  case symlist of
                 // one-element symbol list, i.e., a singleton location
                    varsym::[!] => {varsym_varid(varsym)};
                 // any other symbol list, i.e., not a singleton location
                    _           => {};
                endcase
        else
            {};

// Generate those variables that *may be* read by this expression.
gens :: Expression -> VarSet;
gens(expr) =
    case expr of
     // For assignments, if the lhs is a simple variable reference, there is
     // no gen set for that side (the variable is not read); otherwise, if
     // it is a more complex expression such as a pointer dereference, we
     // need to look at the lhs as well.
     // In the simple language of this analysis, we allow three forms for
     // an assignment's lhs: var; *<expr>; <expr>[<expr>]. Each of these
     // must be treated specially. For instance, we need to generate uses
     // for variables read in the nested <expr> of the dereference
     // expression, but at the same time we do *not* want to generate a use
     // for the location of the dereference expression itself. This means
     // that we may not simply call gens on the entire lhs expression of the
     // assignment, but we must decompose it first.
        AssignOp(VarRefExp(_), rhs) => gens(rhs);
        AssignOp(PointerDerefExp(e), rhs)
                                    => union(gens(e), gens(rhs));
        AssignOp(PntrArrRefExp(a, e), rhs)
                                    => union(union(gens(a), gens(e)),
                                             gens(rhs));

     // ++ and -- read their operands as well as modifying it, so we recurse
     // into the operand expression.
        PlusPlusOp(e)               => gens(e);
        MinusMinusOp(e)             => gens(e);

     // These are the interesting cases. The PointerDerefExp is *p,
     // PntrArrRefExp is a[e]. In these two cases, we need to use the
     // expr_varset function from above to fetch the sets of variables these
     // expressions *may* refer to. In addition, we need to recurse to
     // collect all the variables appearing in the expression explicitly
     // which may be read.
        PointerDerefExp(e) as deref => union(expr_varset(deref), gens(e));
        PntrArrRefExp(lhs, rhs) as ref
                                    => union(expr_varset(ref),
                                             union(gens(lhs), gens(rhs)));

     // The address-of operator returns a value, so only its operand
     // matters. Taking the address of a variable is not a use of the
     // variable; taking the address of a more complex expression may use
     // variables.
        AddressOfOp(VarRefExp(_))   => {};
        AddressOfOp(e)              => gens(e);

     // These are simple and verbose.
        AddOp(lhs, rhs)             => union(gens(lhs), gens(rhs));
        SubtractOp(lhs, rhs)        => union(gens(lhs), gens(rhs));
        MultiplyOp(lhs, rhs)        => union(gens(lhs), gens(rhs));
        DivideOp(lhs, rhs)          => union(gens(lhs), gens(rhs));
        EqualityOp(lhs, rhs)        => union(gens(lhs), gens(rhs));
        LessThanOp(lhs, rhs)        => union(gens(lhs), gens(rhs));

     // If we got to a variable reference in a "gen" context, that means we
     // need to generate its variable ID.
        VarRefExp(_) as var         => {varref_varid(var)};

     // Nothing to generate for constants.
        IntVal(_)                   => {};

     // And the rest. There should be no rest in our simple test programs,
     // and this analysis should not be used on non-simple non-test
     // programs...
        _ => println("What do you mean by ", expr_asttext(expr), "?") {};
    endcase;

// vim: syntax=fula
