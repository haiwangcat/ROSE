// -*- prolog -*-
// vim: syntax=fula

// Author: Gergo Barany, 2006--2008

// This analysis implements simplified conditional constant propagation. All
// variables and values are int, we do not handle other types, pointers etc.
// We do have rudimentary handling of function calls.
//
// The data flow lattice is a lifted map from variables to constants, where
// "constant" is a flat lattice over snums. In total:
//     cp_LiftedState = lift(VariableId -> flat(snum))
//
// The intended semantics are as follows. "bot" in the outermost lattice
// means that a program point has not been reached yet and may be
// unreachable. Inside, variables are mapped to a (lifted) number where the
// constant is known; variables are mapped to top to denote unknown values.
//
// To avoid unreachable paths destroying our analysis information, bot must
// be the neutral element of the combination operator, so comb must be the
// least upper bound operation. This is why unknown values are top: lub will
// make sure that we do not propagate constants beyond joins where one of
// the values of a variable is a constant and the other is top.
//
// Transfer functions are monotonically decreasing:
//     if  a < b  then  f(a) < f(b)
// That is, if we know more constants in a than in b, then we will know more
// constants after evaluating a transfer function. Combination using lub
// will raise the information, i.e. some constants will be lost if they are
// not know along each path.
//
// Strictly speaking, to be monotone, killing variables would have to be
// done by assigning bot where they go out of scope explicitly
// (UndeclareStmt) or implicitly (at the unique point of use of a temporary
// variable). We do not do this because mapping them to top, the default
// value of the variable map, results in a more efficient internal
// representation of the data flow information.
//
// Nonmonotone kills should not be a problem: After undeclarations,
// variables cannot be referenced by the program anymore.


SET

DOMAIN
 // The carrier type cp_LiftedState and its parts cp_State and cp_Const are
 // predefined by SATIrE.
 // cp_Const = flat(snum)
 // cp_State = VariableId -> cp_Const
 // cp_LiftedState = lift(cp_State)

 // The auxiliary cp_ConstStatePair type is not a part of the carrier type,
 // it is only used by support functions; thus, it is only locally defined
 // here.
    cp_ConstStatePair = cp_Const * cp_State
ENDDOMAIN


PROBLEM Constant_Propagation
    prefix:     cp_
    direction:  forward
    carrier:    cp_LiftedState
    init:       bot
    init_start: lift([-> top])
    combine:    comb
    retfunc:    comb
    widening:   wide
    equal:      eq

TRANSFER
FunctionEntry(_), _:
    @;
 
ExprStatement(exp), _:
    let info <= @;
    in  lift(eval(exp, info)!2!2);

ArgumentAssignment(VarRefExp(_) as var, exp), _:
    let info <= @;
    in  lift(info\[varref_varid(var) -> eval(exp, info)!1!2]);

ParamAssignment(lhs, rhs), _:
    let info <= @;
    in  lift(
         // assign var
            info\[varsym_varid(lhs) -> info{!varsym_varid(rhs)!}]
         // kill rhs
            \[varsym_varid(rhs) -> top]
            );

ReturnAssignment(lhs, rhs), _:
    let info <= @;
    in  lift(
         // assign var
            info\[varsym_varid(lhs) -> info{!varsym_varid(rhs)!}]
         // kill rhs
            \[varsym_varid(rhs) -> top]
            );

ScopeStatement(IfStmt(ExprStatement(cond))), true_edge:
    let info <= @;
    in  lift(branch(cond, info, true));

ScopeStatement(IfStmt(ExprStatement(cond))), false_edge:
    let info <= @;
    in  lift(branch(cond, info, false));

ScopeStatement(WhileStmt(ExprStatement(cond))), true_edge:
    let info <= @;
    in  lift(branch(cond, info, true));

ScopeStatement(WhileStmt(ExprStatement(cond))), false_edge:
    let info <= @;
    in  lift(branch(cond, info, false));

ScopeStatement(DoWhileStmt(ExprStatement(cond))), true_edge:
    let info <= @;
    in  lift(branch(cond, info, true));

ScopeStatement(DoWhileStmt(ExprStatement(cond))), false_edge:
    let info <= @;
    in  lift(branch(cond, info, false));

ScopeStatement(ForStatement(_,cond,_)), true_edge:
    let info <= @;
    in  lift(branch(cond, info, true));

ScopeStatement(ForStatement(_,cond,_)), false_edge:
    let info <= @;
    in  lift(branch(cond, info, false));

LogicalIf(cond), true_edge:
    let info <= @;
    in  lift(branch(cond, info, true));

LogicalIf(cond), false_edge:
    let info <= @;
    in  lift(branch(cond, info, false));

UndeclareStmt(vars), _:
    let info <= @;
    in  lift(kill_vars(info, vars));

FunctionExit(_, vars), _:
    let info <= @;
    in  lift(kill_vars(info, vars));

FunctionCall(_,_), local_edge:
    bot; // neutral element of combine operator

_, _: @;

SUPPORT

eval :: Expression, cp_State -> cp_ConstStatePair;
eval(AssignInitializer(exp), state) =
    eval(exp, state);
eval(exp, state) =    
    if is_unary(exp) then
        unary(unary_get_child(exp), exp, state)
    else if is_binary(exp) then
        binary(binary_get_left_child(exp), binary_get_right_child(exp),
                exp, state)
    else if is_value(exp) then
        case exp of
            BoolValExp(value) => (lift(val-astint(value)), state);
            EnumVal(value)    => (lift(val-astint(value)), state);
            IntVal(value)     => (lift(val-astint(value)), state);
            ShortVal(value)   => (lift(val-astshort(value)), state);
            LongIntVal(value) => (lift(val-astlong(value)), state);
            FloatVal(value)   => (top, state);
            DoubleVal(value)  => (top, state);
            _                 => // print("unsupported value exp: ")
                                 // print(exp) print("\n")
                                 (top, [-> top]);
        endcase
    else case exp of
        VarRefExp(_)          => let id = varref_varid(exp);
                                 in  if is_tmpvarid(id) then
                                      // kill tmpvar after its one use
                                         (state{!id!}, state\[id -> top])
                                     else
                                         (state{!id!}, state)
                                     endif;
        NewExp(_,_,_)         => (top, state);
        _                     => // print("unknown exp: ")
                                 // print(exp) print("\n")
                                 (top, [-> top]);
    endcase endif endif endif;

binary :: Expression, Expression, Expression, cp_State -> cp_ConstStatePair;
binary(left, right, exp, state) =
 // Evaluate the right child expression, yielding a (value, state) pair
 // assigned to r and rs, respectively.
    let rr = eval(right, state);
    in case exp of
     // If this is an assignment operation, update the state. We do not
     // evaluate the left-hand side as this might yield top or bot, causing
     // trouble.
        AssignOp(_, _) =>
            if rr!1!2 = top || rr!1!2 = bot
            then
                (top, rr!2!2)
            else
                let r <= rr!1!2; rs = rr!2!2; in
                updatestate(rs, left, lift(r))
            endif;
     // If this is not an assignment, we may safely evaluate the left-hand
     // side as well (in the "new" state after evaluation of the rhs) and
     // perform the operation.
        _ =>
            let rlifted = rr!1!2; rs = rr!2!2;
            in let ll = eval(left, rs);
            in let llifted = ll!1!2; ls = ll!2!2;
            in if rlifted = top || rlifted = bot then (rlifted, rs) else
               if llifted = top || llifted = bot then (llifted, ls) else
                let r <= rlifted;
                    l <= llifted;
                in case exp of
                    EqualityOp(_, _)        => (lift(bool_int(l = r)), ls);
                    LessThanOp(_, _)        => (lift(bool_int(l < r)), ls);
                    GreaterThanOp(_, _)     => (lift(bool_int(l > r)), ls);
                    NotEqualOp(_, _)        => (lift(bool_int(l != r)), ls);
                    LessOrEqualOp(_, _)     => (lift(bool_int(l <= r)), ls);
                    GreaterOrEqualOp(_, _)  => (lift(bool_int(l >= r)), ls);
                    AddOp(_, _)             => (lift(l + r), ls);
                    SubtractOp(_, _)        => (lift(l - r), ls);
                    MultiplyOp(_, _)        => (lift(l * r), ls);
                    DivideOp(_, _)          => (if r != 0 then lift(l / r) else top, ls);
                    IntegerDivideOp(_, _)   => (if r != 0 then lift(l / r) else top, ls);
                    ModOp(_, _)             => (if r != 0 then lift(l % r) else top, ls);
                    LshiftOp(_, _)          => (lift(snum(unum(l)<<unum(r))), ls);
                    RshiftOp(_, _)          => (lift(snum(unum(l)>>unum(r))), ls);
                    BitAndOp(_, _)          => (lift((l & r)), ls);
                    BitOrOp(_, _)           => (lift((l | r)), ls);
                    AndOp(_, _)             => (lift(bool_int(l != 0 && r != 0)), ls);
                    OrOp(_, _)              => (lift(bool_int(l != 0 || r != 0)), ls);
                    ScopeOp(_, _)       => (lift(r), ls);
                    PlusAssignOp(_, _)  => updatestate(ls, left, lift(l + r));
                    MinusAssignOp(_, _) => updatestate(ls, left, lift(l - r));
                    MultAssignOp(_, _)  => updatestate(ls, left, lift(l * r));
                    DivAssignOp(_, _)   => updatestate(ls, left, if r != 0 then lift(l / r) else top);
                    ModAssignOp(_, _)   => updatestate(ls, left, lift(l % r));
                    _                   => // print("unsupported binary: ") print(exp)
                                           (top, [-> top]);
                endcase
            endif endif;
    endcase;

unary :: Expression, Expression, cp_State -> cp_ConstStatePair;
unary(child, exp, state) =
    let ee = eval(child, state);
    in let elifted = ee!1!2; es = ee!2!2;
    in if elifted = bot || elifted = top then (elifted, es) else
        let e <= elifted;
        in case exp of
            MinusOp(_)      => (lift(-e), es);
            UnaryAddOp(_)   => (lift(e), es);
            NotOp(_)        => (lift(bool_int(e = 0)), es);
            CastExp(_, _)   => eval(child, state);
         // the following are only correct for prefix -- and ++
            MinusMinusOp(_) => updatestate(es, child, lift(e - 1));
            PlusPlusOp(_)   => updatestate(es, child, lift(e + 1));
            _               => // print("unsupported unary: ") print(exp)
                               (top, [-> top]);
        endcase
    endif;

bool_int :: bool -> snum;
bool_int(b) =
    if b then 1 else 0 endif;

int_bool :: snum -> bool;
int_bool(i) =
    if i != 0 then true else false endif;
 
updatestate :: cp_State, Expression, cp_Const -> cp_ConstStatePair;
// Update state state by assigning the value value to the variable
// referenced by expression exp (if any). Yields a pair of the value
// and the new state.
updatestate(state, exp, value) =
    let newstate =
        case exp of
            VarRefExp(_) => state\[varref_varid(exp) -> value];
            _ => state;
        endcase;
    in (value, newstate);

branch :: Expression, cp_State, bool -> cp_State;
branch(exp, state, edge) =
    let pair = eval(exp, state);
    in let c = pair!1!2; newstate = pair!2!2;
    in if c = top || c = bot then
        newstate
    else let cond <= c;
    in if int_bool(cond) = edge then
        newstate
    else
        bot /* unreachable */
    endif
    endif;

kill_vars :: cp_State, *VariableSymbolNT -> cp_State;
kill_vars(s, [!]) =
    s;
kill_vars(s, v::vars) =
    kill_vars(s\[varsym_varid(v) -> top], vars);

shiftleft :: snum, snum -> snum;
shiftleft(a, 0) = a;
shiftleft(a, b) = shiftleft(a*2, b-1);

shiftright :: snum, snum -> snum;
shiftright(a, 0) = a;
shiftright(a, b) = shiftright(a/2, b-1);

comb(a, b) = a lub b;
wide(_, b) = b;
eq(a, b)   = (a = b);
