// SATIrE demo analysis: Available Expressions
// Author: Gergo Barany, 2008
// vim: syntax=fula

// Available expressions is a simple forward analysis that collects for each
// program point sets of expressions that must have been computed before,
// and whose values have not been modified in the meantime, i.e., whose
// operands have not been modified in the meantime. This implementation
// collects only nontrivial expressions, i.e. variables and constants,
// including constant-folded complex expressions, are never in the
// "available" set (because they are always available).
// The initial data flow value for each program point is the top value. This
// value is only assigned to program points that have not been reached by
// the analysis yet; any point that still has the top data flow value when
// the analysis ends is definitely unreachable in the program. As the
// combination function is intersection (greatest lower bound), unreachable
// paths in the program cannot have a negative influence on the data flow
// information at their reachable successors.
// Upon entering any function definition, the data flow information is set
// to the empty set.
PROBLEM Available_Expressions
    direction:  forward
    carrier:    Expressions
    init:       top
    init_start: bot
    combine:    Expressions_combine
    equal:      Expressions_equal
    widening:   Expressions_widen
    retfunc:    Expressions_retfunc

TRANSFER
// At the beginning of a function, no expressions are available.
// Interprocedural availability of expressions would be an interesting
// concept, but I don't know how to handle it.
FunctionEntry(_), _:
    lift({});

// When a variable goes out of scope, all the expressions that contain it
// are killed.
UndeclareStmt(vars), _:
    killAllVariables(vars, @);
FunctionExit(_, vars), _:
    killAllVariables(vars, @);

// Assignments between general expressions. The rhs and all of its
// nontrivial subexpressions become available, all expressions containing
// the lhs variable are killed.
ArgumentAssignment(lhs, rhs), _:
    expressionAssignment(lhs, rhs, @);
ExprStatement(AssignOp(lhs, rhs)), _:
    expressionAssignment(lhs, rhs, @);

// Assignments between variable symbols. All expressions containing the lhs
// variable are killed.
ReturnAssignment(lhs, rhs), _:
    variableSymbolAssignment(lhs, rhs, @);
ParamAssignment(lhs, rhs), _:
    variableSymbolAssignment(lhs, rhs, @);

// Various branch statements. We do not distinguish true and false edges.
// The condition and its subexpressions become available.
LogicalIf(condition), _:
    makeAvailable(condition, @);
ScopeStatement(IfStmt(ExprStatement(condition))), _:
    makeAvailable(condition, @);
ScopeStatement(WhileStmt(ExprStatement(condition))), _:
    makeAvailable(condition, @);
ScopeStatement(DoWhileStmt(ExprStatement(condition))), _:
    makeAvailable(condition, @);
ScopeStatement(SwitchStatement(ExprStatement(condition))), _:
    makeAvailable(condition, @);

// Function calls. No expressions are available along the call edge. We pass
// bot; as bot is the init_start value, every function entry will therefore
// always get bot as incoming information. The list of parameters is
// irrelevant here.
FunctionCall(_, _), call_edge:
    bot;
// Along the local edge, all expressions remain available.
FunctionCall(_, _), local_edge:
    @;

// TODO: Ideally, there should be no "catch-all" transfer function since
// every program statement has some semantics that should be modeled!
// However, this is convenient to handle IfJoin and WhileJoin. Let's see if
// we miss any interesting cases this way.
_, _:
    @;

SUPPORT
// *** Required operators

// The combination operator is the greatest lower bound.
Expressions_combine :: Expressions, Expressions -> Expressions;
Expressions_combine(a, b) = (a glb b);

// Equality of expression sets is syntactic equality.
Expressions_equal :: Expressions, Expressions -> bool;
Expressions_equal(a, b) = (a = b);

// Use no widening for now.
Expressions_widen :: Expressions, Expressions -> Expressions;
Expressions_widen(_, b) = b;

// The return function (only) retains the information from the local edge.
Expressions_retfunc :: Expressions, Expressions -> Expressions;
Expressions_retfunc(a, _) = a;


// *** Support functions for killing/generating data flow information.

// Kill all the variables in the list, i.e. remove all of their occurrences
// from the set of expressions.
killAllVariables :: *VariableSymbolNT, Expressions -> Expressions;
killAllVariables([!], expressions) =
    expressions;
killAllVariables(v::vs, expressions) =
    killAllVariables(vs, killVariable(varsym_varid(v), expressions));

// Kill a single variable identified by its Id.
killVariable :: VariableId, Expressions -> Expressions;
killVariable(v, expressions) =
    let exps <= expressions;
    in  lift({e !! e <-- exps, if !(v ? variables(e))});

// Kill a complex expression identified by its Id. It is not quite clear to
// me what killing an expression should mean; certainly it means removing
// the expression itself, but I'm not clear about subexpressions.
killExpression :: ExpressionId, Expressions -> Expressions;
killExpression(e, expressions) =
    let exps <= expressions;
    in  lift(exps # e);

// Assignment from an expression to an lhs expression: Basically, kill the
// lhs and generate all subexpressions of the rhs.
expressionAssignment :: Expression, Expression, Expressions -> Expressions;
expressionAssignment(VarRefExp(_) as lhs, rhs, expressions) =
    makeAvailable(rhs, killVariable(varref_varid(lhs), expressions));
expressionAssignment(lhs, rhs, expressions) =
    makeAvailable(rhs, killExpression(expr_exprid(lhs), expressions));

// Assignment from a variable symbol to a variable symbol: Simply kill the
// lhs variable, there is nothing to generate for the rhs.
variableSymbolAssignment :: VariableSymbolNT, VariableSymbolNT, Expressions
                         -> Expressions;
variableSymbolAssignment(lhs, _, expressions) =
    killVariable(varsym_varid(lhs), expressions);

// Make the expression available, i.e. add all of its nontrivial
// subexpressions to the data flow information.
makeAvailable :: Expression, Expressions -> Expressions;
makeAvailable(e, expressions) =
    let exps <= expressions;
    in  lift(union(expressionSubexpressions(e), exps));

// *** Other auxiliary functions.

// Find all variables inside the expression identified by its Id; this is
// just a wrapper around expressionVariables.
variables :: ExpressionId -> VariableSet;
variables(id) =
    expressionVariables(exprid_expr(id));

// Find all variables inside the expression.
expressionVariables :: Expression -> VariableSet;
expressionVariables(exp) =
    if is_value(exp) then
        {}
    else if is_unary(exp) then
        expressionVariables(unary_get_child(exp))
    else if is_binary(exp) then
        union(expressionVariables(binary_get_left_child(exp)),
              expressionVariables(binary_get_right_child(exp)))
    else case exp of
        VarRefExp(_) => {varref_varid(exp)};
        _            => {};
    endcase endif endif endif;

// Find all nontrivial subexpressions of the expression identified by its
// Id; this is just a wrapper around expressionSubexpressions.
subexpressions :: ExpressionId -> ExpressionSet;
subexpressions(id) =
    expressionSubexpressions(exprid_expr(id));

// Find all nontrivial subexpressions of the expression.
expressionSubexpressions :: Expression -> ExpressionSet;
expressionSubexpressions(exp) =
    if is_unary(exp) then
        case exp of
         // Do not include the cast node in the expression set.
            CastExp(c, _) => expressionSubexpressions(c);
            _             => expressionSubexpressions(unary_get_child(exp))
                             ~ expr_exprid(exp);
        endcase
    else if is_binary(exp) then
        union(expressionSubexpressions(binary_get_left_child(exp)),
              expressionSubexpressions(binary_get_right_child(exp)))
        ~ expr_exprid(exp)
    else case exp of
     // Compute subexpressions of the initializer, which is the "real"
     // expression, but do not include the initializer wrapper node.
        AssignInitializer(i) => expressionSubexpressions(i);
     // This case includes value expressions and variable references.
        _                    => {};
    endcase endif endif;


// *** External support functions provided by SATIrE.
varref_varid :: Expression -> VariableId;
varsym_varid :: VariableSymbolNT -> VariableId;
expr_exprid :: Expression -> ExpressionId;
exprid_expr :: ExpressionId -> Expression;
is_unary :: Expression -> bool;
is_binary :: Expression -> bool;
is_value :: Expression -> bool;
unary_get_child :: Expression -> Expression;
binary_get_left_child :: Expression -> Expression;
binary_get_right_child :: Expression -> Expression;
