GLOBAL
  numtypes: unum#
  numexprs: unum#

PROBLEM Types_and_Expressions
  direction: forward
  carrier: tesl
  init: bot
  combine: comb
  init_start: lift({})
  widening: wide
  equal: eq

TRANSFER
ExprStatement(expr), _:
  let en = expr_to_exprnum(expr); in
  let es = exprnum_to_str(en);
      tn = exprnum_typenum(en);
      ts = typenum_to_str(type_to_typenum(expr_type(expr)));
  in
      @ lub lift({(tn, ts, en, es)});

_, _: @;

SUPPORT
comb :: tesl, tesl -> tesl;
comb(x,y) = x lub y;

wide :: tesl, tesl -> tesl;
wide(x,y) = y;

eq :: tesl, tesl -> bool;
eq(x,y) = (x = y);

typenum_to_type :: unum -> Type;
type_to_typenum :: Type -> snum;
typenum_to_str :: unum -> str;
exprnum_to_expr :: unum -> Expression;
expr_to_exprnum :: Expression -> unum;
exprnum_to_str :: unum -> str;
expr_type :: Expression -> Type;
exprnum_typenum :: unum -> unum;
is_subtype_of :: Type, Type -> bool;
is_subtypenum_of :: unum, unum -> bool;
