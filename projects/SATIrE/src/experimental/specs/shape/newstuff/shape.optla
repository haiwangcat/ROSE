/* Author: Markus Schordan, 
   E-mail: markus@complang.tuwien.ac.at
   Year  : 2006 
*/

UNIVERSAL 
stacksoup  :  bool#
deletetmp  :  bool#
int_malloc :  bool#

GLOBAL
max_symb   :  str#
result     :  str#


PROBLEM pointer 
direction : forward
carrier   : dfi
init      : bot
init_start: lift((({},{}),{}))
equal     : eq
combine   : comb
widening  : w



TRANSFER

ExprStatement(ExpressionRoot(e)),_: expression1(e,(@),0);

// argumentX := y
ArgumentAssignment(VariableSymbol(na_l),VarRefExp(na_r)),_:
let  
  rx = val-c_str(na_l);
  ry = val-c_str(na_r); 
in
  lift(tassign_x_y(rx,ry,drop(@)));

ParamAssignment(VariableSymbol(na_l),VariableSymbol(param)),_:
let  
  rx = val-c_str(na_l);
  ry = val-c_str(param); 
in
  delete_var(lift(tassign_x_y(rx,ry,drop(@))),ry);

// x <- y
ReturnAssignment(VariableSymbol(na_l),VariableSymbol(na_r)),_:
let  
  rx = val-c_str(na_l);
  ry = val-c_str(na_r);
in
  let
    newinfo=lift(tassign_x_y(rx,ry,drop(@)));
  in
    delete_var(newinfo,ry);

EXIT(params), _:
  kill_params(@, params);

_,_: @;

SUPPORT

eq(a,b) = a=b;

w::dfi,dfi->dfi;
w(a,b) = b;

comb::dfi,dfi->dfi;
comb(a,b) = if a = bot then b
            else if b = bot then a 
            else let a2 <= a;
                     b2 <= b; in
             case a2,b2 of
             ((V1,E1),I1),((V2,E2),I2) =>lift(((union(V1,V2),union(E1,E2)),
                                           union(I1,I2)));
             endcase
           endif
         endif;


kill_params :: dfi, *VariableSymbolNT -> dfi;
kill_params(s, [!]) = s;
kill_params(s, VariableSymbol(p)::ps) =
     delete_var(kill_params(s, ps),val-c_str(p));

is_temp :: str -> bool;
is_temp(s) = substr(s, 0, 0) = "$";

//delete_var::dfi,str->dfi;
delete_var::dfi,str->dfi;
delete_var(info,var) = 
 case info of
 top  => top;
 bot  => bot;
 info2 => 
   let G = drop(info2); in 
     lift(assign_x_null(var,G));
 endcase;

expression1::Expression,dfi,snum -> dfi;
expression1(_,bot,_) = bot;
expression1(_,top,_) = top;
expression1(e,g,z) = case drop(g) of ((EV,ES),is_shared) as info 
=> 
  case e of

  // x = null;
  AssignOp(VarRefExp(na_l),CastExp(ValueExp(IntVal(n))))
  =>  
  let x = val-c_str(na_l); in
    lift(assign_x_null(x,info));

  // x = new;
  AssignOp(VarRefExp(na_l),NewExp(_,_,_))
  =>
  let x = val-c_str(na_l); in
    lift(tassign_x_new(x,info));

  // x = y;
  AssignOp(VarRefExp(na_l),VarRefExp(na_r))
  => 
  let 
    rx = val-c_str(na_l);
    ry = val-c_str(na_r); in 
      let res1 = lift(tassign_x_y(rx,ry,info)); in 
        if (!is_temp(ry)) then 
          res1 
        else 
          delete_var(res1,ry) // temporary is assigned exactly once and can be eliminated
        endif; 

  // x.sel = y;
  AssignOp(ArrowExp(VarRefExp(na_l),VarRefExp(na_r)),VarRefExp(na_y))
  =>
  let x   = val-c_str(na_l);
      sel = val-c_str(na_r);
      y   = val-c_str(na_y); in
      let G1 = assign_xsel_null(x,sel,info); in
          lift(assign_xsel_y(x,sel,y,G1));

  // x.sel = null;
  AssignOp(ArrowExp(VarRefExp(na_l),VarRefExp(na_r)),CastExp(ValueExp(IntVal(n))))
  => 
  let x   = val-c_str(na_l);
      sel = val-c_str(na_r); 
  in 
      if (val-int(n) = 0) then 
        lift(assign_xsel_null(x,sel,info))
      else 
        mybot() // top?
      endif;

  // x = y.sel;
  AssignOp(VarRefExp(na_l),ArrowExp(VarRefExp(na_y),VarRefExp(na_r)))
  => 
  let x   = val-c_str(na_l);
      sel = val-c_str(na_r);
      y   = val-c_str(na_y); 
  in
      lift(tassign_x_ysel(x,y,sel,info));

  _ => g;
endcase;
endcase;


// ---------------------------------------------------------------------
// High-level functions, creating temporaries for handling special cases
// ---------------------------------------------------------------------

// x = y;
tassign_x_y::str,str,dfii->dfii;
tassign_x_y(x,y,G) =
  if x = y then
    G 
  else
    let G1=assign_x_y("_$",y,G); in
    let G2=assign_x_null(x,G1); in
    let G3=assign_x_y(x,y,G2); in
      assign_x_null("_$",G3)
  endif 
;  

// x.sel = y;
tassign_xsel_y::str,str,str,dfii->dfii;
tassign_xsel_y(x,selp,y,G) =
  let G1=assign_x_y("_$",y,G); in
  let G2=assign_xsel_null(x,selp,G1); in
  let G3=assign_xsel_y(x,selp,"_$",G2); in
    assign_x_null("_$",G3);

// x = y.sel;
tassign_x_ysel::str,str,str,dfii -> dfii;
tassign_x_ysel(x,y,selp,G) =
  let G1=assign_x_ysel("_$",y,selp,G); in
  let G2=assign_x_null(x,G1); in
  let G3=assign_x_y(x,"_$",G2); in
    assign_x_null("_$",G3);

// x = new;
tassign_x_new::str,dfii->dfii;
tassign_x_new(x,G) =
    let G1=assign_x_null(x,G); in
      assign_x_new(x,G1);

// x.sel = new;
tassign_xsel_new::str,str,dfii->dfii;
tassign_xsel_new(x,selp,G) =
    let G1=assign_xsel_null(x,selp,G); in
    let G2=assign_x_new("_$",G1); in
    let G3=assign_xsel_y(x,selp,"_$",G2); in
      assign_x_null("_$",G3);

// ----------------------------------------------------------------------
// Low-level functions, without temporaries (do not handle special cases)
// ----------------------------------------------------------------------

// x = null;
assign_x_null::str,dfii -> dfii;
assign_x_null(x,((Ev0,Es0),is0)) =
  let Ev1={(y,rem(x,W))!!(y,W) <-- Ev0, if !(y=x)};
    Es1={(rem(x,V),sel0,rem(x,W))!!(V,sel0,W) <-- Es0};
    is1={rem(x,n) !! n <-- is0};
  in ((Ev1,Es1),is1);

// x.sel = null;
assign_xsel_null::str,str,dfii -> dfii;
assign_xsel_null(x,selp,((Ev0,Es0),is0)) =
         let Es1 = edgesetminus(Es0,{(X0,sel0,ANY0) !! (X0,sel0,ANY0) <-- Es0, if x ? X0 && sel0=selp});
         in
           let is1 = nodesetminus(is0,{n !! n <-- is0, if (!iis(Es1,n)) && no_outedge_exists(Es1,n)});
           in ((Ev0,Es1),is1);

// an outedge is an edge starting at the summary node '{}' and ending in 'n'
// we check this for a given set of edges 'Es'
no_outedge_exists::Node2NodeS,VarSet -> bool;
no_outedge_exists(Es,n)=
  {"1" !! (X0,sel0,Y0) <-- Es, if X0={} && Y0=n} = {}; // the set of found outedges must be empty

// x = new
assign_x_new::str,dfii->dfii;
assign_x_new(x,((Ev0,Es0),is0)) =
  ((union(Ev0,{(x,{x})}),Es0),is0);

// x = y;
assign_x_y::str,str,dfii -> dfii;
assign_x_y(x,y,((Ev0,Es0),is0)) =
  let Ev1=union({(za,msgc(x,y,Z))!!(za,Z) <-- Ev0},
              {(x,msgc(x,y,Z))!!(y1,Z) <-- Ev0, if y1=y});
    Es1={(msgc(x,y,Z1),sel0,msgc(x,y,Z2))!!(Z1,sel0,Z2) <-- Es0};
    is1={msgc(x,y,Z)!!Z <-- is0};
    in ((Ev1,Es1),is1);

// x.sel = y;
assign_xsel_y::str,str,str,dfii -> dfii;
assign_xsel_y(x,selp,y,((Ev0,Es0),is0)) =
  let Es1 = union(Es0,{(X0,selp,Y0) !! (xa,X0) <-- Ev0, (ya,Y0) <-- Ev0,
                                       if xa=x && ya=y && compatible2(X0,Y0)}
                 ); in
  let is1 = union(is0,{n !! (ya,n) <-- Ev0, if ya=y && iis(Es1,n)}); in 
    ((Ev0,Es1),is1);
  
// x = y.sel;
assign_x_ysel::str,str,str,dfii -> dfii;
assign_x_ysel(x,y,selp,((Ev0,Es0),is0)) = 
  let G=((Ev0,Es0),is0); in
    let Ev1 = union(Ev0,union(
        {(x,h(x,Z))!!(ya,Y0) <-- Ev0, (Y1,sel0,Z) <-- Es0,
                 if ya=y && Y0=Y1 && selp=sel0},
        {(za,h(x,Z))!!(ya,Y0) <-- Ev0, (Y1,sel0,Z1) <-- Es0, (za,Z) <-- Ev0,
                 if y=ya && Y0=Y1 && selp=sel0 && Z1=Z}));

       temp = {aux_as(x,y,Y0,selp,Z,G) !! (ya,Y0) <-- Ev0, (Y2,sel0,Z) <-- Es0, 
                                    if y=ya && Y0=Y2 && selp=sel0};
       in      
       let Es1 = union(
                   (edgesetminus(Es0,{(Y0,sel0,Z)!!(Y0,sel0,Z) <-- Es0, if (y ? Y0) && sel0=selp})),
	           ssunion(temp));
       in //let is1 = {s !! s <-- NEs(Es1), if rem(x,s) ? is0}; // TODO?
       let is1 = new_is(is0,x);

       in ((Ev1,Es1),is1);

// ----------------------------------------------
// Auxiliary functions for extracting information
// ----------------------------------------------

//N::Var2NodeS,Node2NodeS -> NodeSet;
//N(Ev,Es) = union({n!!(x,n)<--Ev},NEs(Es));

NEs::Node2NodeS -> NodeSet;
NEs(Es) = union({s!!(s,a,e)<--Es},{e!!(s,a,e)<--Es});

edgesetminus::Node2NodeS,Node2NodeS -> Node2NodeS;
edgesetminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

nodesetminus::NodeSet,NodeSet -> NodeSet;
nodesetminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

ssunion::Node2NodeSS -> Node2NodeS;
ssunion(ss) = { e !! s <-- ss, e <-- s };

// ----------------------------------------------------
// Auxiliary functions for low-level transfer functions
// ----------------------------------------------------

semeq::VarSet,VarSet -> bool;
semeq(X,Y) =
  X=Y;  

semneq::VarSet,VarSet -> bool;
semneq(X,Y) = 
  (!(X = Y)) || (X={} && Y={});

compatible3::VarSet,VarSet,VarSet -> bool;
compatible3(X,Y,Z) =
     (X=Y || intersect(X,Y)={}) 
  && (X=Z || intersect(X,Z)={})
  && (Y=Z || intersect(Y,Z)={});

compatible2::VarSet,VarSet -> bool;
compatible2(X,Y) = 
  X=Y || intersect(X,Y)={};

rem::str,VarSet -> VarSet;
rem(x,Z) = 
  { v !! v <-- Z, if !(x=v) }; // Z-{x};

//del::VarSet,str -> VarSet;
//del(t,x) = t # x;

h::str,VarSet -> VarSet;
h(x,Z) = union(Z,{x});

msgc::str,str,VarSet -> VarSet;
msgc(x,y,Z) =
 if y ? Z then union(Z,{x})
 else Z
 endif;

iis::Node2NodeS,VarSet -> bool;
iis(Es,Z) =
  let exist = { "1" !! (Z1,sel1,Z31) <-- Es, (Z2,sel2,Z32) <-- Es,
                if Z31=Z && Z32=Z && compatible3(Z1,Z2,Z) 
                   &&( semneq(Z1,Z2) || !(sel1=sel2))}; in
      !(exist = {});
           

compat_in::Var2Node,Node2Node,Node2Node,dfii -> bool;
compat_in((_,Y),(Y2,sel0,Z),(W,sel1,Z3),((Ev0,Es0),is0)) =
    Y=Y2 && Z=Z3
    && compatible3(Y,Z,W)
    && semneq(Z,W)
    && ((semeq(Y,W) && sel0=sel1) || (Z ? is0));

compat_out::Var2Node,Node2Node,Node2Node,dfii -> bool;
compat_out((_,Y),(Y2,sel0,Z),(W,sel1,Z3),((Ev0,Es0),is0)) =
    Y=Y2 && Z=Z3
    && compatible3(Y,Z,W) 
    && semneq(Z,W)
    && (semneq(Y,Z) || !(sel0=sel1));

compat_self::Var2Node,Node2Node,Node2Node,dfii -> bool;
compat_self((_,Y),(Y2,sel0,Z),(Z31,sel1,Z32),((Ev0,Es0),is0)) =
    Y=Y2 && Z=Z31 && Z=Z32 && Z31=Z32
      && compatible2(Y,Z)
      && ((semeq(Y,Z) && sel0=sel1) || (Z ? is0));

aux_as::str,str,VarSet,str,VarSet,dfii -> Node2NodeS;
aux_as(x,yp,Y,selp,Z,((Ev0,Es0),is0)) =
 let newin = {(W,sel1,h(x,Z)) !! (W,sel1,Z3) <-- Es0,
         if Z=Z3
         && compat_in((yp,Y),(Y,selp,Z),(W,sel1,Z),((Ev0,Es0),is0))};
    newself = {(h(x,Z),sel1,h(x,Z)) !! (Z31,sel1,Z32) <-- Es0,
        if Z=Z31 && Z=Z32
         && compat_self((yp,Y),(Y,selp,Z),(Z,sel1,Z),((Ev0,Es0),is0))};
    newout = {(h(x,Z),sel1,W) !! (Z3,sel1,W) <-- Es0,
        if Z=Z3
         && compat_out((yp,Y),(Y,selp,Z),(Z,sel1,W),((Ev0,Es0),is0))};
    in
    union(union(newin,newself),newout);

new_is(rest,x) = { ha # x !! ha <-- rest }; // should become obsolete (TODO?)

mybot::->dfi; 
mybot() = bot;

// -------------------------------------------------
// GARBAGE COLLECTION functions (not used currently)
// -------------------------------------------------

/*

gc::dfii -> dfii;
gc(((EV,ES),I)) = let newev = reach({a !! (x,a) <-- EV},ES) ;
                         in let 
                              ES_ = { obj !! (x,_,y) as obj  <-- ES, 
                                             if x ? newev,
                                             if y ? newev };
                              IS_ = intersect(I , newev); 
                              in ((EV,ES_),IS_);
   
gc_up(info) = let info2 <= info;  in  lift(gc(info2));
*/


// ----------------------------------------------------------------------
// SUPPORT FUNCTIONS
// CALLED BY APPLICATION

extract_EV :: dfii->Var2NodeS;
extract_EV(((ev,_),_)) = ev;

extract_nodes::dfii -> NodeList;
extract_nodes(((EV,ES),_))  = 
   [ x !! x <-- union(union({ a !! (a,_,_) <-- ES},{ c !! (_,_,c) <-- ES}),{b !! (_,b) <-- EV}) ];

ev_as_list::dfii -> Var2NodeL;
ev_as_list(((EV,_),_)) = [x !! x <-- EV];
es_as_list::dfii -> Node2NodeL;
es_as_list(((_,ES),_)) = [x !! x <-- ES];
is_as_list::dfii -> NodeList;
is_as_list((_,iss)) = [x !! x <-- iss];


// AUXILIARY FUNCTIONS FOR SUPPORT FUNCTIONS

in_strl::str,strl->bool;
in_strl(a,b:c) = if a=b then true else in_strl(a,c) endif;
in_strl(a,[])  = false;

remove_dup_str::strl->strl;
remove_dup_str(a:b) = if in_strl(a,b) then remove_dup_str(b) else a: remove_dup_str(b) endif;
remove_dup_str([])  = [];


// ----------------------------------------------------------------------
// TRANSFORMATION FUNCTIONS:  dfii -> set(dfii)
// TRANSFORM FROM A COMBINED SHAPE GRAPH INTO A SET OF SHAPE GRAPHS

extract_shapegraphs_t :: dfii -> dfiiList;
//funzt
//extract_shapegraphs_t(((EV,ES),IS)) = extract_shapegraphs((({("x",{"x"}),("x",{"x","y"}),("y",{"y"}),("y",{"x","y"}),("z",{"z"})},{({"x"},"next",{"z"}),({"x"},"next",{}),({},"next",{}),({"y"},"next",{})}),{}));
//funzt auch
//extract_shapegraphs_t(((EV,ES),IS)) = extract_shapegraphs((({("x",{"x"}),("z",{"z"}),("y",{"x","y"}),("x",{"x","y"})},{({"x"},"next",{"z"}),({"x"},"next",{}),({},"next",{}),({"y"},"next",{})}),{}));
//!!! ~/test/test1.C
extract_shapegraphs_t(x) = extract_shapegraphs(x);

extract_summary_graph_t :: dfii -> dfiiList;
//extract_summary_graph_t(sg) = [(({("x",{"x","y"}),("y",{"y"}),("x",{"x"}),("y",{"x","y"}),("z",{"z"})},{({"x"},"next",{"z"}),({"x"},"next",{}),({},"next",{}),({"y"},"next",{})}),{})];
//extract_summary_graph_t(sg) = [(({("x",{"x","y"}),("x",{"x"}),("y",{"x","y"}),("z",{"z"})},{({"x"},"next",{"z"}),({"x"},"next",{}),({},"next",{}),({"y"},"next",{})}),{})];
extract_summary_graph_t(sg) = extract_summary_graph(sg);

extract_summary_graph :: dfii -> dfiiList;
extract_summary_graph(sg) = [sg];

extract_shapegraphs :: dfii -> dfiiList;
extract_shapegraphs(((EV,ES),IS)) =
  remove_dup_dfii([((EVn,ESn),IS) !!
    EVn <- trans_ev(EV),
    ESn <- trans_es(
             reachable_graph({n !! (_,n) <-- EVn}, ES), // only pass reachable edges
                             {n !! (_,n) <-- EVn})      // startnodes (reachable via EV)
    ]);

// -- transform the var-edges (EV)
trans_ev::Var2NodeS->Var2NodeSL;
trans_ev(EV) = rec_trans_ev(EV, {});

rec_trans_ev :: Var2NodeS,Var2NodeS -> Var2NodeSL;
rec_trans_ev(      {}, res_graph) = [res_graph];
rec_trans_ev(in_graph, res_graph) =
  let
    var   = first(ev_extract_vars(in_graph));  // pick a variable var
  in let
    edges = ev_by_var(var,in_graph);  // select all out-edges of var
  in
    [rg !! (_,node) as edge <-- edges, //FIXME as edge weg
           rg <- rec_trans_ev(
//             ev_subtract(in_graph, {edge}), //ev_by_vars(node,in_graph)), //FIXME mit [b]
             ev_subtract(in_graph, ev_by_vars(node,in_graph)), //FIXME ohne [b]
             union(res_graph, ev_by_node(node, in_graph))
           )];

// -- transform the selector-edges (ES)
trans_es::Node2NodeS,NodeSet->Node2NodeSL;
trans_es(ES,startnodes) = rec_trans_es(ES,startnodes,{});

rec_trans_es :: Node2NodeS,NodeSet,Node2NodeS -> Node2NodeSL;
//rec_trans_es(      _,          _, res_graph) = [{}]; //FIXME zuerst EV debuggen
rec_trans_es(      {},          _, res_graph) = [res_graph];
rec_trans_es(in_graph, startnodes, res_graph) =
  let
    out_edges         = [e !! e <-- reachable_graph(startnodes, in_graph)];
  in 
    if out_edges = [] then
      [res_graph]
    else
      let
        src_sel_pattern   = Node2NodeL_first(out_edges);
      in let
        src               = es_extract_src(src_sel_pattern);
        sel               = es_extract_sel(src_sel_pattern);
      in let
        edges             = es_by_src_sel(src,sel,in_graph);
      in
        [rg !! (_,_,dest) as edge <-- edges,
               rg <- rec_trans_es(
                       es_subtract(in_graph, edges),
                       union(startnodes, {dest}),
                       union(res_graph, {edge})
                     )]
    endif;


// AUXILIARY FUNCTIONS FOR TRANSFORMATION INTO SET OF GRAPHS

first::strl->str;
first(car:cdr) = car;

Node2NodeL_first::Node2NodeL->Node2Node;
Node2NodeL_first(car:cdr) = car;


in_dfiiList::dfii,dfiiList->bool;
in_dfiiList(a,b:c) = if a=b then true else in_dfiiList(a,c) endif;
in_dfiiList(a,[])  = false;


remove_dup_dfii::dfiiList->dfiiList;
remove_dup_dfii(a:b) = if in_dfiiList(a,b) then remove_dup_dfii(b) else a: remove_dup_dfii(b) endif;
remove_dup_dfii([])  = [];



// all ev that originiate from <var>
ev_by_var::str,Var2NodeS->Var2NodeS;
ev_by_var(var,edges) = {e !! (v,_) as e <-- edges, if v = var};

// all ev that originate from any of <vars>
ev_by_vars::VarSet,Var2NodeS->Var2NodeS;
ev_by_vars(vars,edges) = {e !! (_,n) as e <-- edges, if !(intersect(vars,n) = {})};

// all ev that point to <node>
ev_by_node::VarSet,Var2NodeS->Var2NodeS;
ev_by_node(node,edges) = {e !! (_,n) as e <-- edges, if n = node};

ev_extract_vars::Var2NodeS->strl;
ev_extract_vars(EV) = remove_dup_str([v !! (v,n) <-- EV]);

ev_subtract::Var2NodeS,Var2NodeS -> Var2NodeS;
ev_subtract(S1,S2) = {x!!x<--S1, if !(x ? S2)};

es_subtract::Node2NodeS,Node2NodeS -> Node2NodeS;
es_subtract(S1,S2) = {x!!x<--S1, if !(x ? S2)};



es_by_src::VarSet,Node2NodeS -> Node2NodeS;
es_by_src(src,edges) = {e !! (s,_,_) as e <-- edges, if s = src};

es_by_src_sel::VarSet,str,Node2NodeS -> Node2NodeS;
es_by_src_sel(src,sel,edges) = {e !! (srcx,selx,_) as e <-- edges, if srcx = src && selx = sel};

es_extract_src::Node2Node->VarSet;
es_extract_src((src,_,_)) = src;

es_extract_sel::Node2Node->str;
es_extract_sel((_,sel,_)) = sel;

//es_extract_dest::Node2Node->VarSet;
//es_extract_dest((_,_,dest)) = dest;

reachable_graph::NodeSet,Node2NodeS -> Node2NodeS;
reachable_graph(nodes, es) =
  es_flatten({es_by_src(src, es) !! src <-- reachable_nodes(nodes,es)});

reachable_nodes::NodeSet,Node2NodeS -> NodeSet;
reachable_nodes(nodes,es) =
  let
    new_nodes = union({dest !! (src,_,dest) <-- es, if src ? nodes}, nodes);
  in
    if nodes != new_nodes then reachable_nodes(new_nodes,es) else new_nodes endif;

es_flatten::Node2NodeSS -> Node2NodeS;
es_flatten(sets) = rec_es_flatten([s !! s <-- sets],{});

rec_es_flatten::Node2NodeSL,Node2NodeS -> Node2NodeS;
rec_es_flatten(    [],set) = set;
rec_es_flatten(s:sets,set) = rec_es_flatten(sets, union(set,s));
  


// -- rest --

//extract_ES :: dfii->Node2NodeS;
//extract_ES(((_,es),_)) = es;

//extract_IS :: dfii -> NodeSet;
//extract_IS((_,IS)) = IS;





