/* Author: Markus Schordan, 
   E-mail: markus@complang.tuwien.ac.at
   Year  : 2006 

TODO:
testcase: stack1.C
statement: a->next=cp; 
  "looses" the sharing information on {}! create program with explicit assignments to investigate this effect
testcase: stack3.C
 see 23:y->next=t : edge y->next is not nullified
*/

UNIVERSAL 

GLOBAL
max_symb   :  str#
result     :  str#

BLOCK
label     : snum#

PROBLEM pointer 
direction : forward
carrier   : dfi
init      : bot
init_start: lift((({},{}),{}))
equal     : eq
combine   : comb
retfunc   : comb
widening  : w



TRANSFER

ExprStatement(e),_: expression1(e,(@),0);

DeclareStmt(VariableSymbol(c_var),type),_: @;

// argumentX := y
// ArgumentAssignment(VariableSymbol(na_l),VarRefExp(na_r)),_:
ArgumentAssignment(VarRefExp(na_l),NewExp(_,_,_)),_:
let  
  rx = val-aststring(na_l);
in
  lift(ttassign_x_new(rx,drop(@)));

ArgumentAssignment(VarRefExp(na_l),VarRefExp(na_r)),_:
let  
  x = val-aststring(na_l);
  y = val-aststring(na_r); 
in
  if(is_temp(x)) then
    // model effect of declaration of a temporary
    let G1=ttdeclare_x(x,drop(@)); in
    lift(ttassign_x_y(x,y,G1))
  else
    lift(ttassign_x_y(x,y,drop(@)))
  endif;

ParamAssignment(VariableSymbol(na_l),VariableSymbol(param)),_:
let  
  x = val-aststring(na_l);
  y = val-aststring(param); 
in
  let G1=ttdeclare_x(x,drop(@)); in
  ttdelete_var(lift(ttassign_x_y(x,y,G1)),y);

FunctionCall(_,_),local_edge: bot;

// x = y
ReturnAssignment(VariableSymbol(na_l),VariableSymbol(na_r)),_:
let  
  rx = val-aststring(na_l);
  ry = val-aststring(na_r);
in
  let
    newinfo=lift(ttassign_x_y(rx,ry,drop(@)));
  in
    ttdelete_var(newinfo,ry);

FunctionExit(cfunctionName,params), _:
/*
  let fName=val-aststring(cfunctionName); in
  if(is_constructor(fName)) then
    let thisfName="$".fName."$this"; in
    kill_vars(lift(tassign_x_y(thisfName,"this",drop(@))),params)
    kill_vars(@,params)
  else  
*/
/*
ERROR: use of converted values of val-aststringof cfunctionName causes seg-fault
FIXED: yes (code not updated yet)
    if(val-aststring(cfunctionName)="List") then
      kill_vars(@, params)
    else
      @
    endif;
*/
kill_vars(lift(ttassign_x_y("$List$this","this",drop(@))),params)
;

UndeclareStmt(vars), _:
    lift(ttundeclare_vars(vars,drop(@)));

_,_: @;

SUPPORT

eq(a,b) = a=b;

w::dfi,dfi->dfi;
w(a,b) = b;

comb::dfi,dfi->dfi;
comb(a,b) = if a = bot then b
            else if b = bot then a 
            else let a2 <= a;
                     b2 <= b; in
             case a2,b2 of
             ((V1,E1),I1),((V2,E2),I2) =>lift(((union(V1,V2),union(E1,E2)),
                                           union(I1,I2)));
             endcase
           endif
         endif;


kill_vars :: dfi, *VariableSymbolNT -> dfi;
kill_vars(s, [!]) = s;
kill_vars(s, VariableSymbol(p)::ps) =
     delete_var(kill_vars(s, ps),val-aststring(p));

ttkill_vars :: dfi, *VariableSymbolNT -> dfi;
ttkill_vars(s, [!]) = s;
ttkill_vars(s, VariableSymbol(p)::ps) =
     ttdelete_var(ttkill_vars(s, ps),val-aststring(p));

is_temp :: str -> bool;
is_temp(s) = substr(s, 0, 0) = "$";

kill_tempvars::dfi, *VariableSymbolNT -> dfi;
kill_tempvars(s,[!]) =s;
kill_tempvars(s,VariableSymbol(p)::ps) =
     if (is_temp(val-aststring(p))) then
          delete_var(kill_tempvars(s, ps),val-aststring(p))
     else
          kill_tempvars(s,ps)
     endif;



//delete_var::dfi,str->dfi;
delete_var::dfi,str->dfi;
delete_var(info,var) = 
 case info of
 top  => top;
 bot  => bot;
 info2 => 
   let G = drop(info2); in 
     lift(assign_x_null(var,G));
 endcase;

ttundeclare_x::str,dfii->dfii;
ttundeclare_x(var,info) = 
  drop(ttdelete_var(lift(info),var));

//delete_var::dfi,str->dfi;
ttdelete_var::dfi,str->dfi;
ttdelete_var(info,var) = 
 case info of
 top  => top;
 bot  => bot;
 info2 => 
   let G = drop(info2); in 
       lift(tassign_x_null(var,G));
 endcase;



expression1::Expression,dfi,snum -> dfi;
expression1(_,bot,_) = bot;
expression1(_,top,_) = top;
expression1(e,g,z) = case drop(g) of ((EV,ES),is_shared) as info 
=> 
  case e of

  // x = &y;
  AssignOp(VarRefExp(c_x),AddressOfOp(VarRefExp(c_y))) =>
  let x = val-aststring(c_x); in
  let y = val-aststring(c_y); in
    error("Address Operator not supported. Normalize input program before running the analysis.");

  // x=*y;
  AssignOp(VarRefExp(c_x),PointerDerefExp(VarRefExp(c_y))) =>
  print("PointerDerefExp: x=*y") g;

  // *x=y;
  AssignOp(PointerDerefExp(VarRefExp(c_x)),VarRefExp(c_y)) =>
  print("PointerDerefExp: *x=y") g;

  // x = null;
  AssignOp(VarRefExp(na_l),CastExp(IntVal(n),_))
  =>  
  let x = val-aststring(na_l); in
    lift(ttassign_x_null(x,info));

  // x = new;
  AssignOp(VarRefExp(na_l),NewExp(_,_,_))
  =>
  let x = val-aststring(na_l); in
    lift(ttassign_x_new(x,info));

  // x = y;
  AssignOp(VarRefExp(na_l),VarRefExp(na_r))
  => 
  let 
    rx = val-aststring(na_l);
    ry = val-aststring(na_r); in 
      let res1 = lift(ttassign_x_y(rx,ry,info)); in 
        if (!is_temp(ry)) then 
          res1 
        else 
          ttdelete_var(res1,ry) // temporary is assigned exactly once and can be eliminated
        endif; 

  // x.sel = y;
  AssignOp(ArrowExp(VarRefExp(na_l),VarRefExp(na_r)),VarRefExp(na_y))
  =>
  let x   = val-aststring(na_l);
      sel = val-aststring(na_r);
      y   = val-aststring(na_y); in
      let G1 = ttassign_xsel_null(x,sel,info); in
          lift(ttassign_xsel_y(x,sel,y,G1));

  // x.sel.sel = null;
  AssignOp(DotExp(PointerDerefExp(ArrowExp(VarRefExp(c_x),VarRefExp(c_sel1))),VarRefExp(c_sel2)),CastExp(IntVal(n),_))
  => 
  let x   = val-aststring(c_x);
      sel1 = val-aststring(c_sel1); 
      sel2 = val-aststring(c_sel2); 
  in 
      if (val-astint(n) = 0) then 
        print("x_sel_sel:") print(x) print(sel1) print(sel2) lift(ttassign_xselsel_null(x,sel1,sel2,info))
      else 
        mybot() // top?
      endif;

  // x.sel = null;
  AssignOp(ArrowExp(VarRefExp(na_l),VarRefExp(na_r)),CastExp(IntVal(n),_))
  => 
  let x   = val-aststring(na_l);
      sel = val-aststring(na_r); 
  in 
      if (val-astint(n) = 0) then 
        lift(ttassign_xsel_null(x,sel,info))
      else 
        mybot() // top?
      endif;

  // x = y.sel;
  AssignOp(VarRefExp(na_l),ArrowExp(VarRefExp(na_y),VarRefExp(na_r)))
  => 
  let x   = val-aststring(na_l);
      sel = val-aststring(na_r);
      y   = val-aststring(na_y); 
  in
      lift(ttassign_x_ysel(x,y,sel,info));

  // x.sel1 = y.sel2;
  AssignOp(ArrowExp(VarRefExp(c_x),VarRefExp(c_sel1)),ArrowExp(VarRefExp(c_y),VarRefExp(c_sel2)))
  => 
  let x    = val-aststring(c_x);
      sel1 = val-aststring(c_sel1);
      y    = val-aststring(c_y); 
      sel2 = val-aststring(c_sel2);
  in
      lift(ttassign_xsel_ysel(x,sel1,y,sel2,info));

  DeleteExp(VarRefExp(na_l)) 
  =>
  let  
    rx = val-aststring(na_l);
  in
    delete_var(lift(info),rx);
  


  _ => g;
endcase;
endcase;


// ----------------------------------------------------------------------------
// Super High-level functions, dealing with different stack/heap represenations
// ----------------------------------------------------------------------------

// decl x;
ttdeclare_x::str,dfii->dfii;
ttdeclare_x(x,G) = G;

// undecl x1,x2, ...., xn
ttundeclare_vars :: *VariableSymbolNT,dfii -> dfii;
ttundeclare_vars(vars,G) =
    drop(ttkill_vars(lift(G),vars));

// x = null;
ttassign_x_null::str,dfii -> dfii;
ttassign_x_null(x,G) = tassign_x_null(x,G);

// x.sel = null;
ttassign_xsel_null::str,str,dfii -> dfii;
ttassign_xsel_null(x,selp,G) = tassign_xsel_null(x,selp,G);

// x.sel.sel = null;
ttassign_xselsel_null::str,str,str,dfii -> dfii;
ttassign_xselsel_null(x,sel1,sel2,G) = tassign_xselsel_null(x,sel1,sel2,G);

// x = y;
ttassign_x_y::str,str,dfii->dfii;
ttassign_x_y(x,y,G) = tassign_x_y(x,y,G);

// x.sel = y;
ttassign_xsel_y::str,str,str,dfii->dfii;
ttassign_xsel_y(x,selp,y,G) = tassign_xsel_y(x,selp,y,G);

// x = y.sel;
ttassign_x_ysel::str,str,str,dfii -> dfii;
ttassign_x_ysel(x,y,selp,G) = tassign_x_ysel(x,y,selp,G);

// x = new;
ttassign_x_new::str,dfii->dfii;
ttassign_x_new(x,G) = tassign_x_new(x,G);

// x.sel = new;
ttassign_xsel_new::str,str,dfii->dfii;
ttassign_xsel_new(x,selp,G) =
  tassign_xsel_new(x,selp,G);

// x.sel = y.sel;
ttassign_xsel_ysel::str,str,str,str,dfii->dfii;
ttassign_xsel_ysel(x,selp1,y,selp2,G) =
  tassign_xsel_ysel(x,selp1,y,selp2,G);



// ---------------------------------------------------------------------
// High-level functions, creating temporaries for handling special cases
// ---------------------------------------------------------------------

// extended transferfunctions for convenience in super-high level functions

// undecl x;

tundeclare_x::str,dfii->dfii;
tundeclare_x(x,G) =
  tassign_x_null(x,G);


// x.sel = y.sel;
tassign_xsel_ysel::str,str,str,str,dfii->dfii;
tassign_xsel_ysel(x,selp1,y,selp2,G) =
  let t=tmpvar(y.selp2); in
  let G1=tassign_x_ysel(t,y,selp2,G); in
  let G2=tassign_xsel_y(x,selp1,t,G1); in
    tassign_x_null(t,G2);

// x = null;
tassign_x_null::str,dfii -> dfii;
tassign_x_null(x,G) =
  assign_x_null(x,G);

// x.sel = null;
tassign_xsel_null::str,str,dfii -> dfii;
tassign_xsel_null(x,selp,G) =
  assign_xsel_null(x,selp,G);

xsel_aliasvarset::str,str,dfii -> duo_l;
xsel_aliasvarset(x,sel,((Ev,Es),_)) =
  {(tx,TX)!!(t,T0)<--Ev,(T1,sel,T2)<--Es,(tx,TX)<--Ev, if t=x && T0=T1 && TX=T2};

// x.sel.sel = null;
tassign_xselsel_null::str,str,str,dfii -> dfii;
tassign_xselsel_null(x,sel1,sel2,((Ev0,Es0),is0)) =
  let aliasset=xsel_aliasvarset(x,sel1,((Ev0,Es0),is0)); in
  print("ALIASSET:") print(aliasset)
  if(aliasset={}) then
    let G1=tassign_x_ysel("_1$",x,sel1,((Ev0,Es0),is0)); in
    let G2=tassign_xsel_null("_1$",sel2,G1); in
    let G3=tundeclare_x("_1$",G2); in
    G3
  else
    ssuniongraphset({tassign_xsel_null(v0,sel2,((Ev0,Es0),is0))!!(v0,_) <-- aliasset})
  endif;

// x = y;
tassign_x_y::str,str,dfii->dfii;
tassign_x_y(x,y,G) =
  if x = y then
    G 
  else
    let G1=assign_x_y("_$",y,G); in
    let G2=assign_x_null(x,G1); in
    let G3=assign_x_y(x,y,G2); in
      assign_x_null("_$",G3)
  endif 
;  

// x.sel = y;
tassign_xsel_y::str,str,str,dfii->dfii;
tassign_xsel_y(x,selp,y,G) =
  let G1=assign_x_y("_$",y,G); in
  let G2=assign_xsel_null(x,selp,G1); in
  let G3=assign_xsel_y(x,selp,"_$",G2); in
    assign_x_null("_$",G3);

// x = y.sel;
tassign_x_ysel::str,str,str,dfii -> dfii;
tassign_x_ysel(x,y,selp,G) =
  let G1=assign_x_ysel("_$",y,selp,G); in
  let G2=assign_x_null(x,G1); in
  let G3=assign_x_y(x,"_$",G2); in
    assign_x_null("_$",G3);

// x = new;
tassign_x_new::str,dfii->dfii;
tassign_x_new(x,G) =
    let G1=assign_x_null(x,G); in
      assign_x_new(x,G1);

// x.sel = new;
tassign_xsel_new::str,str,dfii->dfii;
tassign_xsel_new(x,selp,G) =
    let G1=assign_xsel_null(x,selp,G); in
    let G2=assign_x_new("_$",G1); in
    let G3=assign_xsel_y(x,selp,"_$",G2); in
      assign_x_null("_$",G3);

// ----------------------------------------------------------------------
// Low-level functions, without temporaries (do not handle special cases)
// ----------------------------------------------------------------------

// x = null;
assign_x_null::str,dfii -> dfii;
assign_x_null(x,((Ev0,Es0),is0)) =
  let Ev1={(y,rem(x,W))!!(y,W) <-- Ev0, if !(y=x)};
    Es1={(rem(x,V),sel0,rem(x,W))!!(V,sel0,W) <-- Es0};
    is1={rem(x,n) !! n <-- is0};
  in ((Ev1,Es1),is1);

// x.sel = null;
assign_xsel_null::str,str,dfii -> dfii;
assign_xsel_null(x,selp,((Ev0,Es0),is0)) =
         let Es1 = edgesetminus(Es0,{(X0,sel0,ANY0) !! (X0,sel0,ANY0) <-- Es0, if x ? X0 && sel0=selp}); in
         let is1 = nodesetminus(is0,{n !! n <-- is0, if (!iis(Es1,n)) && no_outedge_exists(Es1,n)});
         in ((Ev0,Es1),is1);

// an outedge is an edge starting at the summary node '{}' and ending in 'n'
// we check this for a given set of edges 'Es'
no_outedge_exists::triple_l,VarSet -> bool;
no_outedge_exists(Es,n)=
  {"1" !! (X0,sel0,Y0) <-- Es, if X0={} && Y0=n} = {}; // the set of found outedges must be empty

// x = new
assign_x_new::str,dfii->dfii;
assign_x_new(x,((Ev0,Es0),is0)) =
  ((union(Ev0,{(x,{x})}),Es0),is0);

// x = y;
assign_x_y::str,str,dfii -> dfii;
assign_x_y(x,y,((Ev0,Es0),is0)) =
  let Ev1=union({(za,msgc(x,y,Z))!!(za,Z) <-- Ev0},
              {(x,msgc(x,y,Z))!!(y1,Z) <-- Ev0, if y1=y});
    Es1={(msgc(x,y,Z1),sel0,msgc(x,y,Z2))!!(Z1,sel0,Z2) <-- Es0};
    is1={msgc(x,y,Z)!!Z <-- is0};
    in ((Ev1,Es1),is1);

// x.sel = y;
assign_xsel_y::str,str,str,dfii -> dfii;
assign_xsel_y(x,selp,y,((Ev0,Es0),is0)) =
  let Es1 = union(Es0,{(X0,selp,Y0) !! (xa,X0) <-- Ev0, (ya,Y0) <-- Ev0,
                                       if xa=x && ya=y && compatible2(X0,Y0)}
                 ); in
  let is1 = union(is0,{n !! (ya,n) <-- Ev0, if ya=y && iis(Es1,n)}); in 
    ((Ev0,Es1),is1);
  
// x = y.sel;
assign_x_ysel::str,str,str,dfii -> dfii;
assign_x_ysel(x,y,selp,((Ev0,Es0),is0)) = 
  let G=((Ev0,Es0),is0); in
    let Ev1 = union(Ev0,union(
        {(x,h(x,Z))!!(ya,Y0) <-- Ev0, (Y1,sel0,Z) <-- Es0,
                 if ya=y && Y0=Y1 && selp=sel0},
        {(za,h(x,Z))!!(ya,Y0) <-- Ev0, (Y1,sel0,Z1) <-- Es0, (za,Z) <-- Ev0,
                 if y=ya && Y0=Y1 && selp=sel0 && Z1=Z}));

       temp = {aux_as(x,y,Y0,selp,Z,G) !! (ya,Y0) <-- Ev0, (Y2,sel0,Z) <-- Es0, 
                                    if y=ya && Y0=Y2 && selp=sel0};
       in      
       let Es1 = union(
                   (edgesetminus(Es0,{(Y0,sel0,Z)!!(Y0,sel0,Z) <-- Es0, if (y ? Y0) && sel0=selp})),
	           ssunion(temp)); in
       let is2=new_is(is0,x); in // (alternative) FAKE LINE (workaround for what seems to be a PAG bug)
       let is1={s !! s <-- NEs(Es1), if rem(x,s) ? is0}; in
          ((Ev1,Es1),is1);

// ----------------------------------------------
// Auxiliary functions for extracting information
// ----------------------------------------------

N::duo_l,triple_l -> NodeSet;
N(Ev,Es) = union({n!!(x,n)<--Ev},NEs(Es));

NEs::triple_l -> NodeSet;
NEs(Es) = union({s!!(s,a,e)<--Es},{e!!(s,a,e)<--Es});

edgesetminus::triple_l,triple_l -> triple_l;
edgesetminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

edgesetunion::triple_l,triple_l -> triple_l;
edgesetunion(S1,S2) = union(S1,S2);

nodesetminus::NodeSet,NodeSet -> NodeSet;
nodesetminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

ssunion::TripleSetSet -> triple_l;
ssunion(ss) = { e !! s <-- ss, e <-- s };

ssunionpairset::PairSetSet -> duo_l;
ssunionpairset(ss) = { e !! s <-- ss, e <-- s };

ssunionnodeset::NodeSetSet -> NodeSet;
ssunionnodeset(ss) = { e !! s <-- ss, e <-- s };

ssuniongraphset::dfiiSet -> dfii;
ssuniongraphset(gset) = 
  let EvSet={ Ev0 !! ((Ev0,Es0),is0) <-- gset}; in
  let EsSet={ Es0 !! ((Ev0,Es0),is0) <-- gset}; in
  let isSet={ is0 !! ((Ev0,Es0),is0) <-- gset}; in
  let Es2=ssunion(EsSet); in
  let Ev2=ssunionpairset(EvSet); in
  let is2=ssunionnodeset(isSet); in
  ((Ev2,Es2),is2);
  

// ----------------------------------------------------
// Auxiliary functions for low-level transfer functions
// ----------------------------------------------------

semeq::VarSet,VarSet -> bool;
semeq(X,Y) =
  X=Y;  

semneq::VarSet,VarSet -> bool;
semneq(X,Y) = 
  (!(X = Y)) || (X={} && Y={});

compatible3::VarSet,VarSet,VarSet -> bool;
compatible3(X,Y,Z) =
     (X=Y || intersect(X,Y)={}) 
  && (X=Z || intersect(X,Z)={})
  && (Y=Z || intersect(Y,Z)={});

compatible2::VarSet,VarSet -> bool;
compatible2(X,Y) = 
  X=Y || intersect(X,Y)={};

rem::str,VarSet -> VarSet;
rem(x,Z) = 
  { v !! v <-- Z, if !(x=v) }; // Z-{x};

//del::VarSet,str -> VarSet;
//del(t,x) = t # x;

h::str,VarSet -> VarSet;
h(x,Z) = union(Z,{x});

msgc::str,str,VarSet -> VarSet;
msgc(x,y,Z) =
 if y ? Z then union(Z,{x})
 else Z
 endif;

iis::triple_l,VarSet -> bool;
iis(Es,Z) =
  let exist = { "1" !! (Z1,sel1,Z31) <-- Es, (Z2,sel2,Z32) <-- Es,
                if Z31=Z && Z32=Z && compatible3(Z1,Z2,Z) 
                   &&( semneq(Z1,Z2) || !(sel1=sel2))}; in
      !(exist = {});
           

compat_in::duo,triple,triple,dfii -> bool;
compat_in((_,Y),(Y2,sel0,Z),(W,sel1,Z3),((Ev0,Es0),is0)) =
    Y=Y2 && Z=Z3
    && compatible3(Y,Z,W)
    && semneq(Z,W)
    && ((semeq(Y,W) && sel0=sel1) || (Z ? is0));

compat_out::duo,triple,triple,dfii -> bool;
/*
MS: error found 27.11.06: commented out is the old code
compat_out((_,Y),(Y2,sel0,Z),(W,sel1,Z3),((Ev0,Es0),is0)) = 
*/
compat_out((_,Y),(Y2,sel0,Z),(Z3,sel1,W),((Ev0,Es0),is0)) =
    Y=Y2 && Z=Z3
    && compatible3(Y,Z,W) 
    && semneq(Z,W)
    && (semneq(Y,Z) || !(sel0=sel1));

compat_self::duo,triple,triple,dfii -> bool;
compat_self((_,Y),(Y2,sel0,Z),(Z31,sel1,Z32),((Ev0,Es0),is0)) =
    Y=Y2 && Z=Z31 && Z=Z32 && Z31=Z32
      && compatible2(Y,Z)
      && ((semeq(Y,Z) && sel0=sel1) || (Z ? is0));

aux_as::str,str,VarSet,str,VarSet,dfii -> triple_l;
aux_as(x,yp,Y,selp,Z,((Ev0,Es0),is0)) =
 let newin = {(W,sel1,h(x,Z)) !! (W,sel1,Z3) <-- Es0,
         if Z=Z3
         && compat_in((yp,Y),(Y,selp,Z),(W,sel1,Z),((Ev0,Es0),is0))};
    newself = {(h(x,Z),sel1,h(x,Z)) !! (Z31,sel1,Z32) <-- Es0,
        if Z=Z31 && Z=Z32
         && compat_self((yp,Y),(Y,selp,Z),(Z,sel1,Z),((Ev0,Es0),is0))};
    newout = {(h(x,Z),sel1,W) !! (Z3,sel1,W) <-- Es0,
        if Z=Z3
         && compat_out((yp,Y),(Y,selp,Z),(Z,sel1,W),((Ev0,Es0),is0))};
    in
    union(union(newin,newself),newout);

new_is(rest,x) = { ha # x !! ha <-- rest }; // should become obsolete (TODO?)

mybot::->dfi; 
mybot() = bot;

// -------------------------------------------------
// GARBAGE COLLECTION functions (not used currently)
// -------------------------------------------------

gc::dfii -> dfii;
gc(((EV,ES),I)) = let newev = reach({a !! (x,a) <-- EV},ES) ;
                         in let 
                              ES_ = { obj !! (x,_,y) as obj  <-- ES, 
                                             if x ? newev,
                                             if y ? newev };
                              IS_ = intersect(I , newev); 
                              in ((EV,ES_),IS_);
   
gc_up(info) = let info2 <= info;  in  lift(gc(info2));

reach(ev,es) = let newev = union({ x !! (y,_,x) <-- es, if y ? ev } , ev);
               in if ev != newev 
                     then reach(newev,es) else newev endif;


// ----------------------------------------------------------------------
// SUPPORT FUNCTIONS
// CALLED BY APPLICATION

extract4::duo_l1 -> strl;
extract4(rest) = mkset([ a !! (a,c) <- rest ]);


extract_nodes::graph -> printtype;
extract_nodes((EV,ES))  = 
   [ x !! x <-- union(union({ a !! (a,_,_) <-- ES},{ c !! (_,_,c) <-- ES}),{b !! (_,b) <-- EV}) ];


getlist1::graph -> duo_l1;
getlist1((EV,ES)) = [ x!! x <-- EV];
getlist2::graph -> TripleList;
getlist2((EV,ES)) = [x!!x<--ES];

getlist3::NodeSet-> printtype;
getlist3(iss) = [ x !! x <-- iss];


// AUXILIARY FUNCTIONS FOR SUPPORT FUNCTIONS

//member::str,strl->bool;
member::str,strl->bool;
member(a,b:c) = if a=b then true else member(a,c) endif;
member(a,[])  = false;

mkset::strl->strl;
mkset(a:b) = if member(a,b) then mkset(b) else a: mkset(b) endif;
mkset([])  = [];


// ----------------------------------------------------------------------
// External C-functions

is_unary :: Expression -> bool;
is_binary :: Expression -> bool;
unary_get_child :: Expression -> Expression;
binary_get_left_child :: Expression -> Expression;
binary_get_right_child :: Expression -> Expression;

// ----------------------------------------------------------------------

// not implemented yet. should become a support function
//is_constructor(name) = 


tmpvar::str->str;
tmpvar(n) = "_$".n;
