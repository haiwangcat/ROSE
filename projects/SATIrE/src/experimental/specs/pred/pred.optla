GLOBAL
  numtypes: unum#
  numexprs: unum#

BLOCK
label     : snum#

PROBLEM Types_and_Expressions
  direction: forward
  carrier: CarrierType
  init: bot
  combine: comb
  retfunc: comb
  init_start: lift({})
  widening: wide
  equal: eq

TRANSFER

ScopeStatement(IfStmt(ExprStatement(cond))),true_edge:
  let en = expr_to_exprnum(cond); in
  let es = exprnum_to_str(en); in
    lift(forcepredicate(drop(@),label,(es,1,en)));

ScopeStatement(IfStmt(ExprStatement(cond))),false_edge:
  let en = expr_to_exprnum(cond); in
  let es = exprnum_to_str(en); in
    lift(forcepredicate(drop(@),label,(es,0,en)));


ScopeStatement(WhileStmt(ExprStatement(cond))),true_edge:
  let en = expr_to_exprnum(cond); in
  let es = exprnum_to_str(en); in
    lift(forcepredicate(drop(@),label,(es,1,en)));

ScopeStatement(WhileStmt(ExprStatement(cond))),false_edge:
  let en = expr_to_exprnum(cond); in
  let es = exprnum_to_str(en); in
    lift(forcepredicate(drop(@),label,(es,0,en)));

ExprStatement(AssignOp(VarRefExp(cvarname),rhsexpr)), _:
  let var = val-aststring(cvarname); in
  let en = expr_to_exprnum(rhsexpr); in
  let es = exprnum_to_str(en); in
    lift(updatemodvar(drop(@),label,var));
    //lift(force_assignmentpredicate(updatemodvar(drop(@),label,var),label,var,rhsexpr));

_, _: @;

SUPPORT

setminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

/*
force_assignmentpredicate::ExprSet, snum, str, Expr -> ExprSet;
force_assignmentpredicate(info,label,var,rhsExpr) =
  // set all assignments with var on the lhs to '2'
  // check if var in rhsExpr (if yes: do-not-include, if no: '1')
  if is_var_in_expression(var,rhsExpr) then
    do not include
  else
    add with '1'

*/  

forcepredicate::ExprSet, snum, Expr -> ExprSet;
forcepredicate(info,label,(exprstr,boolval,exprnum)) =
  union(setminus(info,{(exprstr,0,exprnum),(exprstr,1,exprnum),(exprstr,2,exprnum)}),{(exprstr,boolval,exprnum)});

/* iterate over all expressions and update the boolvalue of each expression
 * depending on whether the variable 'var' is used in the expression or not. */
updatemodvar::ExprSet, snum, str -> ExprSet;
updatemodvar(info,label,var) =
  { (exprstr,mod_var_expr(var,exprnum,boolval),exprnum) !! (exprstr,boolval,exprnum) <-- info, if mod_var_expr(var,exprnum,boolval)!=2 };

mod_var_expr::str,snum, snum -> snum;
mod_var_expr(var, exprnum, 2) = 2;
mod_var_expr(var, exprnum, boolval) =
  let expr=exprnum_to_expr(exprnum); in 
  let exprstr=exprnum_to_str(exprnum); in 
  print("mod_var_expr:") print(var) print(",") print(exprstr) print(",") print(boolval) print("---> ")
  if is_var_in_expression(var,expr) then 
    print("2\n") 2
  else 
    print(boolval) print("\n") boolval
  endif;

comb :: CarrierType, CarrierType -> CarrierType;
comb(a,b) = 
  if a = bot // this is actually a lub, needs to be fixed
    then b
  else 
    if b = bot then 
      a 
    else let S1 <= a;
             S2 <= b; in
         lift(intersect(S1,S2))
    endif
  endif;
/*
  if a = bot 
    then b
  else 
    if b = bot then 
      a 
    else let S1 <= a;
             S2 <= b; in
	 let bothSet={(es1,calc_pred_bool(b1,b2),en1) !! (es1,b1,en1) <-- S1, (es2,b2,en2) <-- S2, if en1=en2}; in
         let bothSetENs={en0 !! (es0,b0,en0) <-- bothSet}; in // generates a set of snums --> set(snum) in .set required!
         let subS1={(es1,2,en1) !! (es1,b1,en1) <-- S1, if !(en1?bothSetENs)}; // must-analysis, therefore we set '2' if it's not in both sets S1,S2
             subS2={(es2,2,en2) !! (es2,b2,en2) <-- S2, if !(en2?bothSetENs)}; in
             lift(union(bothSet,union(subS1,subS2)))
     endif
  endif;
*/

calc_pred_bool::snum,snum -> snum;
calc_pred_bool(b1,b2) =
  if b1=b2 then 
    b1
  else
    2
  endif;

wide :: CarrierType, CarrierType -> CarrierType;
wide(x,y) = y;

eq :: CarrierType, CarrierType -> bool;
eq(x,y) = (x = y);

typenum_to_type :: snum -> Type;
type_to_typenum :: Type -> snum;
typenum_to_str :: snum -> str;
exprnum_to_expr :: snum -> Expression;
expr_to_exprnum :: Expression -> snum;
exprnum_to_str :: snum -> str;
expr_type :: Expression -> Type;
exprnum_typenum :: snum -> snum;
is_subtype_of :: Type, Type -> bool;
is_subtypenum_of :: snum, snum -> bool;

is_var_in_expression::str, Expression -> bool;
is_var_in_expression(var,exp) =
case exp of
  /* arithmetic SL1 operators */
  AddOp(a,b)              => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  MultiplyOp(a,b)         => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  SubtractOp(a,b)         => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  DivideOp(a,b)           => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  ModOp(a,b)              => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  MinusOp(a)              => is_var_in_expression(var,a); /* unary minus */
  UnaryAddOp(a)           => is_var_in_expression(var,a); /* unary plus */

  /* relational SL1 operators */
  EqualityOp(a,b)         => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  LessThanOp(a,b)         => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  GreaterThanOp(a,b)      => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  NotEqualOp(a,b)         => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  LessOrEqualOp(a,b)      => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  GreaterOrEqualOp(a,b)   => is_var_in_expression(var,a) || is_var_in_expression(var,b);

  /* logical operators */
  AndOp(a,b)              => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  OrOp(a,b)               => is_var_in_expression(var,a) || is_var_in_expression(var,b);
  NotOp(a)                => is_var_in_expression(var,a);

  /* int value; use val-int(value) for converting value to snum */
  IntVal(value)           => false;     

  /* use of a variable; use val-aststring(varname) for converting varname to str */
  VarRefExp(cvarname)      => let refvar = val-aststring(cvarname); in
                              if refvar=var then true else false endif;

  /* boolean value (represented as int 0,1); use val-int(value) for converting to snum */
  BoolValExp(value)       => false; 

  /* default case: no expression matches;
  _                       => error("Unkown expression in is_var_in_expression.") false;

  /* other C/C++ operators are: 
     CastExp(_, _), PlusAssignOp(_, _), MinusAssignOp(_, _),  MultAssignOp(_, _),
     DivAssignOp(_, _) ,  ModAssignOp(_, _), MinusMinusOp(_), PlusPlusOp(_)
  */
endcase;
