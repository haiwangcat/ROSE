GLOBAL
  numtypes: snum#
  numexprs: snum#

BLOCK
label     : snum#

PROBLEM Types_and_Expressions
  direction: forward
  carrier: CarrierType
  init: bot
  combine: comb
  init_start: lift({((0,0),{(0,"null")})})
  widening: wide
  equal: eq

TRANSFER

ScopeStatement(IfStmt(ExprStatement(ExpressionRoot(cond)))),_:
  let en = expr_to_exprnum(cond); in
  let es = exprnum_to_str(en); in
    lift(update(drop(@),label,(en,es)));


ScopeStatement(WhileStmt(ExprStatement(ExpressionRoot(cond)))),_:
  let en = expr_to_exprnum(cond); in
  let es = exprnum_to_str(en); in
    lift(update(drop(@),label,(en,es)));

/*
ExprStatement(ExpressionRoot(expr)), _:
  let en = expr_to_exprnum(expr); in
  let es = exprnum_to_str(en);

  in
      lift(update(drop(@),label,(en,es)));
*/

_, _: @;

SUPPORT

setminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

update::EdgeExprSetPairSet, snum, Expr -> EdgeExprSetPairSet;
update(info,label,expr) =
  { ((lab2,label),union(setminus(exprset,{(0,"null")}),{expr})) !! ((lab1,lab2),exprset) <-- info, if};

comb :: CarrierType, CarrierType -> CarrierType;
comb(x,y) = x lub y;

wide :: CarrierType, CarrierType -> CarrierType;
wide(x,y) = y;

eq :: CarrierType, CarrierType -> bool;
eq(x,y) = (x = y);

typenum_to_type :: snum -> Type;
type_to_typenum :: Type -> snum;
typenum_to_str :: snum -> str;
exprnum_to_expr :: snum -> Expression;
expr_to_exprnum :: Expression -> snum;
exprnum_to_str :: snum -> str;
expr_type :: Expression -> Type;
exprnum_typenum :: snum -> snum;
is_subtype_of :: Type, Type -> bool;
is_subtypenum_of :: snum, snum -> bool;
