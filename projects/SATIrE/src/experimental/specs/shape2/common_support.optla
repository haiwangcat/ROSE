// common support functions

// Author: Viktor Pavlu
// E-mail: e0425543@student.tuwien.ac.at
// Year  : 2006, 2007, 2008

extract_stackedge_set::ShapeGraph->StackEdgeSet;
extract_stackedge_set(((se,_),_)) = se;

extract_stackedges::ShapeGraph->StackEdgeList;
extract_stackedges(((se,_),_)) = [x !! x <-- se];

extract_heapnodes::ShapeGraph->NodeList;
extract_heapnodes(((EV,ES),_))  =
  [ x !! x <-- union(union({ a !! (a,_,_) <-- ES},{ c !! (_,_,c) <-- ES}),{b !! (_,b) <-- EV}) ];

extract_src_sel::ShapeGraph->NodeSelList;
extract_src_sel(((_,H),_))  =
  [x !! x <-- {(src,sel) !! (src,sel,_) <-- H}];

extract_heapedges::ShapeGraph->HeapEdgeList;
extract_heapedges(((_,ES),_)) = [x !! x <-- ES];

extract_is_shared::ShapeGraph->NodeList;
extract_is_shared((_,iss)) = [x !! x <-- iss];

src_sel_exists::Node,VariableId,ShapeGraph->bool;
src_sel_exists(src,sel,((_,H0),_)) = {e !! (nv,sv,_) as e <-- H0, if (nv = src) && (sv = sel)} != {};

var_sel_exists::VariableId,VariableId,ShapeGraph->bool;
var_sel_exists(x,sel,((_,H0),_)) = {e !! (nv,sv,_) as e <-- H0, if (x ? nv) && (sv = sel)} != {};

heapedges_by_var_sel::VariableId,VariableId,HeapEdgeSet->HeapEdgeSet;
heapedges_by_var_sel(x,sel,edges) = {e !! (nv,sv,_) as e <-- edges, if (x ? nv) && (sv = sel)};

heapedge_by_var_sel::VariableId,VariableId,HeapEdgeSet->HeapEdge;
heapedge_by_var_sel(x,sel,edges) = hd([e !! e <-- heapedges_by_var_sel(x,sel,edges)]);

no_duplicates::VarList->VarList;
no_duplicates(list) = [x !! x <-- {y !! y <- list}];

sgSet_to_sgList::ShapeGraphSet->ShapeGraphList;
sgSet_to_sgList(sgs) = [sg !! sg <-- sgs];

//srw_extract_summaryGraph::ShapeGraph->ShapeGraphList;
//srw_extract_summaryGraph(sg) = [sg];
//srw_extract_shapeGraphs::ShapeGraph->ShapeGraphList;
//srw_extract_shapeGraphs(sg) = [x !! x <-- srwSG_to_nnhSG(sg)];

//nnh_extract_summaryGraph::ShapeGraphSet->ShapeGraphList;
//nnh_extract_summaryGraph(sg) = [nnhSG_to_srwSG(sg)];
//nnh_extract_shapeGraphs::ShapeGraphSet->ShapeGraphList;
//nnh_extract_shapeGraphs(sg) = [x !! x <-- sg];

// convert nnh to srw graph
// nnh: set of graphs, each selector points to one node
// srw: single graph, each selector can point to many nodes

nnhSG_to_srwSG::ShapeGraphSet->ShapeGraph;
nnhSG_to_srwSG(graphs) = rec_join_shapegraphs( (({},{}),{}), [x !! x <-- graphs]);

rec_join_shapegraphs::ShapeGraph,ShapeGraphList->ShapeGraph;
rec_join_shapegraphs(sg, []) = sg;
rec_join_shapegraphs(((S0,H0),is0), ((S1,H1),is1):cdr) =
  rec_join_shapegraphs(((union(S0,S1),union(H0,H1)),union(is0,is1)), cdr);

// convert srw to nnh graph
// nnh: set of graphs, each selector points to one node
// srw: single graph, each selector can point to many nodes
srwSG_to_nnhSG::ShapeGraph->ShapeGraphSet;
srwSG_to_nnhSG(((S1,H1),IS1) as SG1) =
  let vars         = vars_by_stackedges(S1);
      heap_sources = extract_src_sel(SG1); in
  let S2_sgs  = gen_stack_edges(vars, S1);
      H2_sgs  = gen_heap_edges(heap_sources, H1);
      IS2_sgs = gen_powerset([sharing !! sharing <-- IS1]); in
  let SG2_sgs = map_cartesian([S2_sgs, H2_sgs, IS2_sgs]); in
  let nnh_sgs = {sg !! sg <-- SG2_sgs, if is_compatible(sg)}; in
  //let dummy   = assert("srw0->nnh->srw == srw0", nnhSG_to_srwSG(nnh_sgs) = SG1); in
  nnh_sgs;

gen_stack_edges::VarList,StackEdgeSet->ShapeGraphSet; 
gen_stack_edges(    [],     _) = {};
gen_stack_edges(var:Vs, edges) = 
  // generate all choices for outgoing edges of var
  // combine recursively with all choices for other edges (vars \ var)
  let outedges_of_var = stackedges_by_var(var,edges); in
  // every edge could be (a) absent or (b) pointing to any one of the many
  // targets that are represented by a single static heap
  //let outedge_sgs     = {State2G({outedge}) !! outedge <-- outedges_of_var}; in
  let outedge_sgs     = union({State2G({})},{State2G({outedge}) !! outedge <-- outedges_of_var}); in  // FIXME put in for correctness; but way too slow!
  cartesian(outedge_sgs, gen_stack_edges(Vs,edges));
  // 
  // could be faster as the shape graph that will be searched
  // in all following recursions is made smaller.
  // but it may also not be faster when the reduction of the
  // shape graph takes too much time
  // (same can be done to gen_heap_edges)
  // needs investigation:
  //let remaining_edges = stackedge_subtract(edges, outedges_of_var); in
  //cartesian(outedge_sgs, gen_stack_edges(Vs,remaining_edges));

gen_heap_edges::NodeSelList,HeapEdgeSet->ShapeGraphSet;
gen_heap_edges(            [],         _) = {};
gen_heap_edges((src,sel):Rest,heap_edges) = 
  // generate all choices for an edge (src,sel)
  // for src != {}: ensure that (src,sel) is 0 or 1 time in the SG
  // for src  = {}: |(src,sel)| > 1 is ok, ie. {},sel may be nondeterministic
  // combine recursively with all choices for other edges (Rest)
  let outedges    = heapedges_by_src_sel(src,sel,heap_edges); in
  //let outedge_sgs = {Heap2G({e}) !! e <-- outedges}; in
  let outedge_sgs = union({Heap2G({})}, {Heap2G({e}) !! e <-- outedges}); in  // FIXME put in again for correctness. but only once running time is no more of concern
  cartesian(outedge_sgs, gen_heap_edges(Rest,heap_edges));

gen_powerset::NodeList->ShapeGraphSet;
gen_powerset(  []) = {};
gen_powerset(n:Ns) = cartesian({Sharing2G({}),Sharing2G({n})}, gen_powerset(Ns));




old_srwSG_to_nnhSG::ShapeGraph->ShapeGraphSet;
old_srwSG_to_nnhSG(((ES,EH),IS)) =
  {((ESn,EHn),IS) !!
    ESn <- transform_stackedges(ES),
    EHn <- transform_heapedges(
      reachable_heapedges({n !! (_,n) <-- ESn}, EH), // only pass reachable edges
                          {n !! (_,n) <-- ESn})      // startnodes (reachable via ES)
  };

// -- transform the stackedges
transform_stackedges::StackEdgeSet->StackEdgeSetList;
transform_stackedges(ES) = rec_transform_stackedges(ES, {});

rec_transform_stackedges::StackEdgeSet,StackEdgeSet->StackEdgeSetList;
rec_transform_stackedges(      {}, res_Graph) = [res_Graph];
rec_transform_stackedges(in_Graph, res_Graph) =
  let var   = hd(vars_by_stackedges(in_Graph)); in // pick a variable var
  let edges = stackedges_by_var(var,in_Graph); in  // select all out-edges of var
  [rg !! (_,node) as edge <-- edges,
    rg <- rec_transform_stackedges(
  //  stackedge_subtract(in_Graph, {edge}), //stackedges_by_vars(node,in_Graph)), //FIXME mit [b]
    stackedge_subtract(in_Graph, stackedges_by_vars(node,in_Graph)), //FIXME ohne [b]
    union(res_Graph, stackedges_by_dest(node, in_Graph))
  )];

// -- transform the heapedges
transform_heapedges::HeapEdgeSet,NodeSet->HeapEdgeSetList;
transform_heapedges(EH,startnodes) = rec_transform_heapedges(EH,startnodes,{});

rec_transform_heapedges::HeapEdgeSet,NodeSet,HeapEdgeSet->HeapEdgeSetList;
rec_transform_heapedges(      {},          _, res_Graph) = [res_Graph];
rec_transform_heapedges(in_Graph, startnodes, res_Graph) =
  let out_edges = [e !! e <-- reachable_heapedges(startnodes, in_Graph)]; in
  if out_edges = [] then
    [res_Graph]
  else
    let src_sel_pattern = hd(out_edges); in
    let src             = src_of_heapedge(src_sel_pattern);
        sel             = sel_of_heapedge(src_sel_pattern); in
    let edges           = heapedges_by_src_sel(src,sel,in_Graph); in
    [rg !! (_,_,dest) as edge <-- edges,
      rg <- rec_transform_heapedges(
        heapedge_subtract(in_Graph, edges),
          union(startnodes, {dest}),
          union(res_Graph, {edge})
      )
    ]
  endif;

// ----------------------------------------
// Auxiliary functions for graph conversion
// ----------------------------------------

cartesian::ShapeGraphSet,ShapeGraphSet -> ShapeGraphSet;
cartesian({}, B) = B;
cartesian( A,{}) = A;
cartesian( A, B) = { ((union(S1,S2),union(H1,H2)), union(is1,is2)) !! ((S1,H1),is1) <-- A, ((S2,H2),is2) <-- B};

//  // vpavlu 2009-03-29: cartesian product of ShapeGraphSets is the
//  // generalisation of the candidate generation code used for the
//  // materialisation
//  cartesian::ShapeGraphSet,ShapeGraphSet -> ShapeGraphSet;
//  cartesian({}, B) = B;
//  cartesian( A,{}) = A;
//  cartesian( A, B) = cartesian_l([sg_a !! sg_a <-- A],[sg_b !! sg_b <-- B]);
//  
//  // AList x BList --> (a x BList) + (AList x BList)
//  //               combine a(i) with each b in BList + recursion for remaining a(i+1..n)
//  cartesian_l::ShapeGraphList,ShapeGraphList -> ShapeGraphSet;
//  cartesian_l(  [], Bs) = {}; // done, we already had all combinations
//  cartesian_l(a:As, Bs) = union(cartesian_r(a,Bs), cartesian_l(As,Bs));
//  
//  // a x BList --> (a x b) + (a x BList)
//  //           combine a with b(i) + recursion for remaining b(i+1..n)
//  cartesian_r::ShapeGraph,ShapeGraphList -> ShapeGraphSet;
//  cartesian_r(a,   []) = {}; // done, we already had all combinations
//  cartesian_r(a, b:Bs) = union({combSG(a,b)}, cartesian_r(a,Bs));
//  
//  // like comb, but for ShapeGraph not carrier
//  combSG::ShapeGraph,ShapeGraph -> ShapeGraph;
//  combSG( ((S1,H1),is1), ((S2,H2),is2) ) = ((union(S1,S2),union(H1,H2)), union(is1,is2));

// reduces a list of operands with cartesian(_,_)
map_cartesian::ShapeGraphSetList->ShapeGraphSet;
map_cartesian([])   = {};
map_cartesian(g:[]) = g;
map_cartesian(g:Gs) =
  if ShapeGraphSetList_len(Gs) = 1 then
    cartesian(g,hd(Gs))
  else
    map_cartesian([cartesian(g,hd(Gs))] ++ tl(Gs))
  endif;

// create ShapeGraph from only one given component (State, Heap oder Sharing)
State2G::StackEdgeSet->ShapeGraph;
State2G(edges)   = ((edges,{}),{});
Heap2G::HeapEdgeSet->ShapeGraph;
Heap2G(edges)    = (({},edges),{});
Sharing2G::NodeSet->ShapeGraph;
Sharing2G(nodes) = (({},{}),nodes);


HeapEdgeSet_len::HeapEdgeList->snum;
HeapEdgeSet_len([]) = 0;
HeapEdgeSet_len(car:cdr) = 1 + HeapEdgeSet_len(cdr);

ShapeGraphSetList_len::ShapeGraphSetList->snum;
ShapeGraphSetList_len([]) = 0;
ShapeGraphSetList_len(car:cdr) = 1 + ShapeGraphSetList_len(cdr);

shapeGraph_list_member::ShapeGraph,ShapeGraphList->bool;
shapeGraph_list_member(a,b:c) = if a=b then true else shapeGraph_list_member(a,c) endif;
shapeGraph_list_member(a,[])  = false;

mk_unique_shapeGraph_list::ShapeGraphList->ShapeGraphList;
mk_unique_shapeGraph_list(a:b) = if shapeGraph_list_member(a,b) then mk_unique_shapeGraph_list(b) else a: mk_unique_shapeGraph_list(b) endif;
mk_unique_shapeGraph_list([])  = [];

// all stackedges that originiate from <var>
stackedges_by_var::VariableId,StackEdgeSet->StackEdgeSet;
stackedges_by_var(var,edges) = {e !! (v,_) as e <-- edges, if v = var};

// all stackedges that originiate from <var>, as list
stackedgelist_by_var::VariableId,StackEdgeSet->StackEdgeList;
stackedgelist_by_var(var,edges) = [e !! (v,_) as e <-- edges, if v = var];

// all stackedges that originate from any of <vars>
stackedges_by_vars::Node,StackEdgeSet->StackEdgeSet;
stackedges_by_vars(vars,edges) = {e !! (_,n) as e <-- edges, if !(intersect(vars,n) = {})};

// all stackedges that point to <node>
stackedges_by_dest::Node,StackEdgeSet->StackEdgeSet;
stackedges_by_dest(dest,edges) = {e !! (_,d) as e <-- edges, if d = dest};

// all vars of stackedges
vars_by_stackedges::StackEdgeSet->VarList;
//vars_by_stackedges(ES) = no_duplicates([v !! (v,n) <-- ES]);
vars_by_stackedges(S) = [v1 !! v1 <-- {v2 !! (v2,_) <-- S}];

// all vars of stackedges (as set)
nodes_by_stackedges::StackEdgeSet->NodeSet;
nodes_by_stackedges(S) = {nx !! (_,nx) <-- S};

// all vars of heapedges (as set)
nodes_by_heapedges::HeapEdgeSet->NodeSet;
nodes_by_heapedges(H) = {n !! n <-- union({nv !! (nv,_,_) <-- H},{nw !! (_,_,nw) <-- H})};

stackedge_subtract::StackEdgeSet,StackEdgeSet->StackEdgeSet;
stackedge_subtract(S1,S2) = {x!!x<--S1, if !(x ? S2)};

heapedge_subtract::HeapEdgeSet,HeapEdgeSet->HeapEdgeSet;
heapedge_subtract(S1,S2) = {x!!x<--S1, if !(x ? S2)};

heapedges_by_src::Node,HeapEdgeSet->HeapEdgeSet;
heapedges_by_src(src,edges) = {e !! (s,_,_) as e <-- edges, if s = src};

heapedges_by_dest::Node,HeapEdgeSet->HeapEdgeSet;
heapedges_by_dest(dest,edges) = {e !! (_,_,d) as e <-- edges, if d = dest};

heapedges_by_src_sel::Node,VariableId,HeapEdgeSet->HeapEdgeSet;
heapedges_by_src_sel(src,sel,edges) = {e !! (srcx,selx,_) as e <-- edges, if srcx = src && selx = sel};

heapedgelist_by_src_sel::Node,VariableId,HeapEdgeSet->HeapEdgeList;
heapedgelist_by_src_sel(src,sel,edges) = [e !! (srcx,selx,_) as e <-- edges, if srcx = src && selx = sel];

src_of_heapedge::HeapEdge->Node;
src_of_heapedge((src,_,_)) = src;

sel_of_heapedge::HeapEdge->VariableId;
sel_of_heapedge((_,sel,_)) = sel;

dest_of_heapedge::HeapEdge->Node;
dest_of_heapedge((_,_,dest)) = dest;

dest_of_stackedge::StackEdge->Node;
dest_of_stackedge((_,dest)) = dest;

reachable_heapedges::NodeSet,HeapEdgeSet->HeapEdgeSet;
reachable_heapedges(nodes, es) =
  flatten_heapedge_set({heapedges_by_src(src, es) !! src <-- reachable_heapnodes(nodes,es)});

reachable_heapnodes::NodeSet,HeapEdgeSet->NodeSet;
reachable_heapnodes(nodes,es) =
  let new_nodes = union({dest !! (src,_,dest) <-- es, if src ? nodes}, nodes); in
  if nodes != new_nodes then reachable_heapnodes(new_nodes,es) else new_nodes endif;

flatten_heapedge_set::HeapEdgeSetSet->HeapEdgeSet;
flatten_heapedge_set(sets) = rec_flatten_heapedge_set([s !! s <-- sets],{});

rec_flatten_heapedge_set::HeapEdgeSetList,HeapEdgeSet->HeapEdgeSet;
rec_flatten_heapedge_set(    [],set) = set;
rec_flatten_heapedge_set(s:sets,set) = rec_flatten_heapedge_set(sets, union(set,s));

is_pointer_expression::Expression->bool;
is_pointer_expression(VarRefExp(_) as ref_x) = !is_tmpvarid(varref_varid(ref_x));
is_pointer_expression(ArrowExp(_,_)) = true;
is_pointer_expression(DotExp(_,_)) = true;
//is_pointer_expression(e) = let dummy = print("non-pointer expr:") print(expr_asttext(e)) false; in false;
is_pointer_expression(_) = false;

// ------------------------------------------------
// is_may_alias / is_must_alias (on shapegraphsets)
// ------------------------------------------------

is_no_alias_graphset::Expression,Expression,ShapeGraphSet->bool;
is_no_alias_graphset(a,b,sgs) = !is_may_alias_graphset(a,b,sgs);

// a,b are may aliases
// if there EXISTS one graph in which a and b refer to the same node
//
// is_may_alias_graphset(a,b,sgs) = {g !! g <-- sgs, if is_same_node(Alias_May,a,b,g)} != {};
// 2009-04-29: lazy alias checking (alias_performance_hack_2)
is_may_alias_graphset::Expression,Expression,ShapeGraphSet->bool;
is_may_alias_graphset(a,b,sgs) = is_may_alias_graphset_lazy(a,b,[sg !! sg <-- sgs]);

is_may_alias_graphset_lazy::Expression,Expression,ShapeGraphList->bool;
is_may_alias_graphset_lazy(a,b,[])      = false;
is_may_alias_graphset_lazy(a,b,g:grest) = if is_same_node(Alias_May,a,b,g) then true else is_may_alias_graphset_lazy(a,b,grest) endif;

// a,b are must aliases
// if there exists no graph in which a and b refer NOT to the same node (ie they do refer in all nodes)
//
// is_must_alias(a,b,sgs) = {g !! g <-- sgs, if !is_same_node(Alias_Must,a,b,g)} = {};
// 2009-04-29: lazy alias checking (alias_performance_hack_2)
is_must_alias_graphset::Expression,Expression,ShapeGraphSet->bool;
is_must_alias_graphset(a,b,sgs) =
  if "{ANALYSIS}" = "nnh99" then
    // in nnh analysis: do the check
    is_must_alias_graphset_lazy(a,b,[sg !! sg <-- sgs])
  else
    // in srw analysis: skip the check, there are no must_aliases in srw graphs
    false
  endif;

is_must_alias_graphset_lazy::Expression,Expression,ShapeGraphList->bool;
is_must_alias_graphset_lazy(a,b,[])      = false;
is_must_alias_graphset_lazy(a,b,g:grest) =
  if is_same_node(Alias_Must,a,b,g) then
    if [] = grest then true else is_must_alias_graphset_lazy(a,b,grest) endif
  else
    false
  endif;

// returns true if both expressions refer to the same node
is_same_node::EnumAlias,Expression,Expression,ShapeGraph->bool;
is_same_node(alias_type,expr_a,expr_b,(_,is0) as sg) =
  //let dummy = println("is_same_node: ", alias_type, ",", expr_asttext(expr_a), ",", expr_asttext(expr_b)) false; in

  let null = {add_tmpvarid_like_expr(expr_a)}; in  // will be used to indicate "node not found" case
  let a_nodes      = nodes_visited_by_expr(expr_a,sg,null); // is reversed
      b_nodes      = nodes_visited_by_expr(expr_b,sg,null); // is reversed
      a_sels       = reverse(selectors_visited_by_expr(expr_a));
      b_sels       = reverse(selectors_visited_by_expr(expr_b)); in
  let res = rec_is_same_node(alias_type, {} ? is0, a_sels, a_nodes, b_sels, b_nodes, null); in
  //let dummy = if res then
  //  print(alias_type) print(":\n")
  //  print("  ")print(expr_asttext(expr_a)) print("\n")
  //  print("  ")print(expr_asttext(expr_b)) print("\n")
  //  print("in ")print(sg)
  //  print("\n")
  //  println("result = ", res) false else false endif; in
  res;

rec_is_same_node::EnumAlias,bool, VarList,NodeList, VarList,NodeList, Node->bool;
rec_is_same_node(_, _, _, [], _,  _, _) = false;
rec_is_same_node(_, _, _,  _, _, [], _) = false;
rec_is_same_node(alias_type, summary_is_shared, a_sels, a:a_rest, b_sels, b:b_rest, null) =
  if a != b || a = null || b = null then
    // different nodes or not in graph at all
    false 
  else
    // nodes are equal
    if a != {} then
      // same node and not the summary node, hooray!
      true
    else
      // both paths lead to the summary node
      if Alias_May = alias_type && summary_is_shared then
        // when the summary node is shared, any two paths leading
        // to the summary node POSSIBLY end at the same summary node
        true
      else
        if option_aliases_commontail then 
          // a and b can still be aliases if the paths minus the
          // last selector ended at the same node if the same
          // selector was used on both paths
          // (nb: while the selectors are identical on both paths, the elements
          // in the selector- and nodelists can be dropped -- investigate: faster??)
          if a_sels = [] || b_sels = [] || hd(a_sels) != hd(b_sels) then
            false
          else
            rec_is_same_node(alias_type, summary_is_shared, tl(a_sels), a_rest, tl(b_sels), b_rest, null)
          endif
        else
          // without the common tail improvement:
          if Alias_Must = alias_type then false else true endif  // FIXME
        endif
      endif
    endif
  endif;

// returns list of names where expressions like
// (*(a->b)).c->d yield
// [a,b,c,d]
selectors_visited_by_expr::Expression->VarList;
selectors_visited_by_expr(e) =
  let list = rec_selectors_visited_by_expr(e, expr_depth(e)); in
  //let dummy = print("for expression: ") print(e) print("\n") false; in
  //let dummy = print("we found: ") print(list) print("\n\n") false; in
  // a->n1->n2->n3->n4 == [a,n1,n2,n3,n4]
  list;

rec_selectors_visited_by_expr::Expression,snum->VarList;
rec_selectors_visited_by_expr(_, -1) = []; // intentionally -1, topmost case in iteration
rec_selectors_visited_by_expr(e, e_cursor) =
  let inner_e  = expr_at(e,e_cursor); in
  let new_list = case inner_e of
    VarRefExp(_) as ref_x                                   => [varref_varid(ref_x)];
    ArrowExp(VarRefExp(_) as ref_x,VarRefExp(_) as ref_sel) => [varref_varid(ref_x),varref_varid(ref_sel)];
    DotExp(PointerDerefExp(_),VarRefExp(_) as ref_sel)      => [varref_varid(ref_sel)];
    _ => print(inner_e) print(": ") error("unhandled expression.");
  endcase; in
  new_list ++ rec_selectors_visited_by_expr(e, e_cursor - 1);

// returns list of all heapnodes on a path given by the expression
// [node(n), node(n-1), node(n-2), ..., node(0)]
nodes_visited_by_expr::Expression,ShapeGraph,Node->NodeList;
nodes_visited_by_expr(e,g,null) =
  let nodes = rec_nodes_visited_by_expr(e, expr_depth(e),g,[],null); in
  //let dummy = print("for expr: ") print(e) print("\n") false; in
  //let dummy = print("found nd: ") print(nodes) print("\n\n\n") false; in
  nodes;

rec_nodes_visited_by_expr::Expression,snum,ShapeGraph,NodeList,Node->NodeList;
rec_nodes_visited_by_expr(_,       -1, _, trail,    _) = trail; // intentionally -1, beyond topmost case in iteration
rec_nodes_visited_by_expr(e, e_cursor, g, trail, null) =
  let inner_e  = expr_at(e,e_cursor); in
  let new_list = case inner_e of

    VarRefExp(_) as ref_x =>
      let x   = varref_varid(ref_x); in
      if var_exists(x,g) then [node_by_var(x,g)] else [] endif;

    ArrowExp(VarRefExp(_) as ref_x,VarRefExp(_) as ref_sel) =>
      let x   = varref_varid(ref_x);
          sel = varref_varid(ref_sel); in
      if var_exists(x,g) then
        let src = node_by_var(x,g); in
        if src_sel_exists(src,sel,g) then [node_by_src_sel(src,sel,g), src] else [] endif
      else
        []
      endif; 

    DotExp(PointerDerefExp(_),VarRefExp(_) as ref_sel) =>
      let x   = hd(trail);
          sel = varref_varid(ref_sel); in
      if src_sel_exists(x,sel,g) then [node_by_src_sel(x,sel,g)] else [] endif;

    _ => print(inner_e) print(": ") error("unhandled expression.");
  endcase; in
  if [] = new_list then
    [null] ++ trail
  else
    rec_nodes_visited_by_expr(e, e_cursor - 1, g, new_list ++ trail, null)
  endif;


// ----------------------------------------------
// is_may_alias / is_must_alias (on summarygraph)
// ----------------------------------------------

is_may_alias_summarygraph::Expression,Expression,ShapeGraph -> bool;
is_may_alias_summarygraph(a,b,((S,H),IS) as g) =
  //let dummy = println("graph=", g) false; in
  //let dummy = println("is_may: ", expr_asttext(a), ",", expr_asttext(b)) false; in
  let res =
  let sels_a = selectors_visited_by_expr(a);
      sels_b = selectors_visited_by_expr(b); in
  let var_a  = hd(sels_a); 
      var_b  = hd(sels_b);
      rest_a = tl(sels_a);
      rest_b = tl(sels_b); in
  if var_exists(var_a,g) && var_exists(var_b,g) then
    //let dummy = println("0: found vars ", var_a, " , ", var_b) false; in
    hcd_foreach_lhs_stackedge(stackedgelist_by_var(var_a,S), rest_a,
                              stackedgelist_by_var(var_b,S), rest_b, g)
  else
    //let dummy = println("0: not found vars ", var_a, " , ", var_b) false; in
    false
  endif;
  //in let dummy = println("result = ", res,"\n\n") false; 
  in res;

pointerexp_varid::Expression->VariableId;
pointerexp_varid(VarRefExp(_) as ref) = varref_varid(ref);
pointerexp_varid(ArrowExp(ref,_)) = varref_varid(ref);
pointerexp_varid(DotExp(ref,_)) = varref_varid(ref);
pointerexp_varid(e) = print(expr_asttext(e)) print(": ") error("unhandled expression");

// calls hcd_rhs_stackedge for each of the edges in edges_a, depth first
hcd_foreach_lhs_stackedge::StackEdgeList,VarList,StackEdgeList,VarList,ShapeGraph -> bool;
hcd_foreach_lhs_stackedge(           [],      _,       _,      _, _) = error("stackedge not found");
hcd_foreach_lhs_stackedge(edge_a:rest_a, sels_a, edges_b, sels_b, ((S,H),IS) as g) =
  if hcd_foreach_rhs_stackedge(dest_of_stackedge(edge_a), sels_a, edges_b, sels_b, g) then
    //let dummy = println("1: rhs_stackedge yes") false; in
    true
  else
    if rest_a != [] then
      //let dummy = println("1: trying next lhs_stackedge") false; in
      hcd_foreach_lhs_stackedge(rest_a, sels_a, edges_b, sels_b, g)
    else
      //let dummy = println("1: all lhs_stackedges tried") false; in
      false
    endif
  endif;

// calls has_common_destination for each of the edges in edges_b, depth first
hcd_foreach_rhs_stackedge::Node,VarList,StackEdgeList,VarList,ShapeGraph -> bool;
hcd_foreach_rhs_stackedge(_,      _,            [],      _,               _) = error("stackedge not found");
hcd_foreach_rhs_stackedge(a, sels_a, edge_b:rest_b, sels_b, ((S,H),IS) as g) =
  if has_common_destination(a, sels_a, dest_of_stackedge(edge_b), sels_b, g) then
    //let dummy = println("2: has_common_dest yes") false; in
    true
  else
    if rest_b != [] then
      //let dummy = println("2: trying next rhs_stackedge") false; in
      hcd_foreach_rhs_stackedge(a, sels_a, rest_b, sels_b, g)
    else
      //let dummy = println("2: all rhs_stackedges tried") false; in
      false
    endif
  endif;

// depth-first search on lhs, then rhs
// then checks wether destinations on lhs and rhs are the same node
has_common_destination::Node,VarList,Node,VarList,ShapeGraph -> bool;
has_common_destination(a,           [], b,           [],               _) =
  //let dummy = println("x: a = b : ", a, " = ", b, " -> ", a=b) false; in
  //a = b && a != {};
  a = b;  // two expressions leading to {} MAY be aliases in presence of a
          // common tail. this test, however, is not aware of common tails,
          // so the answer has to be a conservative one: may-alias, true.

has_common_destination(a,           [], b, sel_b:rest_b, ((S,H),IS) as g) =
  //let dummy = println("x: has_common_dest(", a, ", [],", b, ",", sel_b, ":", rest_b, ",g)") false; in
  if src_sel_exists(b,sel_b,g) then
    //let dummy = println("x:   rhs ", b,"->",sel_b," found, going further") false; in
    hcd_foreach_rhs_heapedge(a, [], heapedgelist_by_src_sel(b,sel_b,H), rest_b, g)
  else
    //let dummy = println("x:   rhs ", b,"->",sel_b," not found, backtracking") false; in
    false
  endif;
  
has_common_destination(a, sel_a:rest_a, b, sels_b, ((S,H),IS) as g) = 
  //let dummy = println("3: has_common_dest(", a, ",",sel_a,":",rest_a,",",b,",",sels_b,",g)") false; in
  if src_sel_exists(a,sel_a,g) then
    //let dummy = println("x:   lhs ", a,"->",sel_a," found, going further") false; in
    hcd_foreach_lhs_heapedge(heapedgelist_by_src_sel(a,sel_a,H), rest_a, b, sels_b, g)
  else
    //let dummy = println("x:   lhs ", a,"->",sel_a," not found, backtracking") false; in
    false
  endif;

hcd_foreach_lhs_heapedge::HeapEdgeList,VarList,Node,VarList,ShapeGraph -> bool;
hcd_foreach_lhs_heapedge(              [],      _, _,      _,               _) = error("heapedge not found");
hcd_foreach_lhs_heapedge(edge:restedges_a, sels_a, b, sels_b, ((S,H),IS) as g) =
  if has_common_destination(dest_of_heapedge(edge), sels_a, b, sels_b, g) then
    //let dummy = println("3: has_common_dest yes") false; in
    true
  else
    if [] != restedges_a then
      //let dummy = println("3: trying next lhs_heapedge") false; in
      hcd_foreach_lhs_heapedge(restedges_a, sels_a, b, sels_b, g)
    else
      //let dummy = println("3: all lhs_heapedges tried") false; in
      false
    endif
  endif;


hcd_foreach_rhs_heapedge::Node,VarList,HeapEdgeList,VarList,ShapeGraph -> bool;
hcd_foreach_rhs_heapedge(_,      _,               [],      _,               _) = error("heapedge not found");
hcd_foreach_rhs_heapedge(a, sels_a, edge:restedges_b, sels_b, ((S,H),IS) as g) = 
  if has_common_destination(a, sels_a, dest_of_heapedge(edge), sels_b, g) then
    //let dummy = println("4: has_common_dest yes") false; in
    true
  else
    if [] != restedges_b then
      //let dummy = println("4: trying next rhs_heapedge") false; in
      hcd_foreach_rhs_heapedge(a, sels_a, restedges_b, sels_b, g)
    else
      //let dummy = println("4: all rhs_heapedges tried") false; in
      false
    endif
  endif;


var_exists::VariableId,ShapeGraph->bool;
var_exists(x,((S0,_),_)) =  {e !! (y,ny) as e <-- S0, if (x=y)} != {};

node_by_var::VariableId,ShapeGraph->Node;
node_by_var(x, g) = hd(nodelist_by_var(x,g));

nodelist_by_var::VariableId,ShapeGraph->NodeList;
nodelist_by_var(x,((S0,_),_) as g) = [nk !! (k,nk) <-- S0, if (k=x)];

node_by_src_sel::Node,VariableId,ShapeGraph->Node;
node_by_src_sel(x,sel,((_,H0),_)) = hd([nk !! (x1,sel1,nk) <-- H0, if x1 = x && sel1 = sel]);

// -------------------
// is_compatible check
// -------------------

is_compatible::ShapeGraph->bool;
is_compatible(((S0,H0),is0) as g) =
  let vars = union(is0,union(nodes_by_stackedges(S0),nodes_by_heapedges(H0))); in
  let res = if check_inv1(vars)
    && check_inv2(S0)
    && check_inv3(H0)
    && check_inv4([x !! x <-- is0],H0)
    && check_inv5(vars,H0,is0) then true else false endif; in
  //let dummy = debug_print_bool("materialisation", "inv1", check_inv1(vars)); in
  //let dummy = debug_print_bool("materialisation", "inv2", check_inv2(S0)); in
  //let dummy = debug_print_bool("materialisation", "inv3", check_inv3(H0)); in
  //let dummy = debug_print_bool("materialisation", "inv4", check_inv4([x !! x <-- is0],H0)); in
  //let dummy = debug_print_bool("materialisation", "inv5", check_inv5(vars,H0,is0)); in
  res;

// Inv1: two nodes a,b are either the same or have no common variables
check_inv1::NodeSet->bool;
check_inv1(vars) = {} = {false !! a <-- vars, b <-- vars, if (a != b) && intersect(a,b) != {}};

// Inv2: if x points to a node, the nodes name must contain x (naming convention)
check_inv2::StackEdgeSet->bool;
check_inv2(S) = S = {(x,nx) !! (x,nx) <-- S, if x ? nx};

// Inv3: no node,sel pair may point to more than one node except {},sel
check_inv3::HeapEdgeSet->bool;
check_inv3(H) =
  {} = {((nv1,sel1,nw1),(nv2,sel2,nw2)) !! (nv1,sel1,nw1) <-- H, (nv2,sel2,nw2) <-- H,
        if nv1 = nv2
        && sel1 = sel2
        && !(nw1 = nw2 || nv1 = {})}; // try to find edges that *violate* Inv3

// Inv4: if nx is shared, there exists either {},_,nw or >1 edges pointing to nx
check_inv4::NodeList, HeapEdgeSet->bool;
check_inv4(           [],_) = true;
check_inv4(shared_x:cdr, H) =
  ( {} != {e !! ({},_,nw) as e <-- H, if nw = shared_x}
    || n_into(shared_x,H) > 1)
  && check_inv4(cdr,H);

n_into::Node,HeapEdgeSet->snum;
n_into(nx,H0) = HeapEdgeSet_len([e !! (_,_,nw) as e <-- H0, if nw = nx]);

// Inv5: if two or more edges point to nx then nx is shared (if nx is not {})
check_inv5::NodeSet,HeapEdgeSet,NodeSet->bool;
check_inv5(vars,H0,is0) = {} = {nx !! nx <-- vars, if n_into(nx,H0) > 1 && nx != {} && !(nx ? is0)};


// minimalistic garbage collection: only removes unreachable {}->{} garbage loops
remove_garbage_loop::ShapeGraph->ShapeGraph;
remove_garbage_loop(((S,H),is0) as G) =
  // if gc is activated and there is no edge: name -> sel -> sumloc
  // then remove all sumloc -> sel -> sumloc (FIXME: and update sharing!)
  if option_perform_shape_gc
  && [] = [ edge !! (src,sel,dest) as edge <-- H, if src != {} && dest = {}] then
    let H1  = {edge !! (src,sel,dest) as edge <-- H, if !(src = {} && dest = {})}; in
    let is1 = intersect(is0, {nd !! nd <- extract_heapnodes(((S,H1),is0))}); in
    ((S,H1),is1)
  else
    G
  endif;

/*
gc::{DFI}->{DFI};
gc(lifted_sg) = if option_... then
  case drop(lifted_sg) of sgs => lift(remove_empty_graph({gc_sg(sg) !! sg <-- sgs})); endcase
else
  lift(remove_empty_graph(drop(lifted_sg)))
endif;


gc_sg::ShapeGraph->ShapeGraph;
gc_sg(((v,e),s) as sg) =
let
  var_nodes = {n !! (_,n) <-- v};
in let 
  v_new = v;
  e_new = reachable_heapedges(var_nodes,e);
  s_new = intersect(s,reachable_heapnodes(var_nodes,e));
in
  ((v_new,e_new),s_new);
*/


// vim: nowrap syn=haskell:
