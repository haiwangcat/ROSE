#!/bin/bash

# runs srw and nnh on all testcases in $TESTDIR
# that end with .C
# for each testcase these characteristics are recorded:
#   - time for analysis [sec]
#   - memory for analysis [megabytes]
#   - time for alias computation [sec]
#   - memory for alias computation [megabytes]
#   - number of may aliases
#   - number of must aliases
#
# usage:
#    ./measurements [OUTPUTDIR [REPORTNAME [CUSTOM_OPTIONS]]]
#
# results are written to %report<REPORTNAME>.txt
# CUSTOM_OPTIONS are passed through to the analyses to
# influence the analyses' behaviour
#

#TESTDIR=tests/benchmark
TESTDIR=tests/sas2010


cmdline="$0 $@"
outputdir=$1
shift
setting=$1
report=gen_report$setting.txt
shift
OPTIONS="--alias-statistics=$outputdir/tmp_alias_statistics$setting --statistics $@"

# --
nnh99=build/nnh99/nnh99
srw98=build/srw98/srw98

output_fields_per_row='testcase'
output_fields_per_analysis='time_analysis mem_analysis time_alias mem_alias may_alias must_alias'

function die {
  echo $@
  cat $outputdir/tmp_output$setting
  echo "ABORTED"
  exit 1
}

function run_analysis {
  binary=$1
  testcase=$2

  ANALYSIS_NAME=srw98
  echo "$binary" | grep nnh99 > /dev/null 2>&1 && ANALYSIS_NAME=nnh99

  cmd="$binary $OPTIONS $testcase"
  echo -n $cmd
  time $cmd > $outputdir/tmp_output$setting 2>&1
  rc=$?
  echo

  # put in default values
  error_value='-'

  time_analysis="$error_value"
  mem_analysis="$error_value"

  time_alias="$error_value"
  mem_alias="$error_value"

  may_alias="$error_value"
  must_alias="$error_value"

  if [ $rc -eq 0 ]; then
    # analysis suceeded, output is in tmp_output
    # grep measurements
    str=`cat $outputdir/tmp_output$setting | awk "/Run of analysis $ANALYSIS_NAME:/ {print \\$7, \\$11}"`
    time_analysis=`echo $str | cut -f 1 -d ' '`
    mem_analysis=`echo $str | cut -f 2 -d ' '`

    str=`cat $outputdir/tmp_output$setting | awk "/Annotate AST with alias pairs:/ {print \\$8, \\$12}"`
    time_alias=`echo $str | cut -f 1 -d ' '`
    mem_alias=`echo $str | cut -f 2 -d ' '`

    may_alias=`cat $outputdir/tmp_alias_statistics$setting | awk "/sum\(post may_alias\):/ {print \\$3}"`
    must_alias=`cat $outputdir/tmp_alias_statistics$setting | awk "/sum\(post must_alias\):/ {print \\$3}"`
  fi

  val_line=''
  for field in $output_fields_per_analysis; do
    val_line="${val_line}${dollar}${field}${tab}"
  done
  eval echo -ne "$val_line" >> $outputdir/$report
}


echo
echo "calling analyses to collect benchmark data"
echo

# write comment to $report
echo "# generated by $cmdline" > $outputdir/$report
echo -n "# started at " >> $outputdir/$report
date >> $outputdir/$report
echo '#' >> $outputdir/$report

function add_prefix_to_header_fields {
  ANALYSIS_NAME=$1
  for fieldname in $output_fields_per_analysis; do
    echo -ne "${ANALYSIS_NAME}_${fieldname}\t" >> $outputdir/$report
  done
}

# write title row to $report
echo -ne "$output_fields_per_row\t" >> $outputdir/$report
add_prefix_to_header_fields "nnh99"
add_prefix_to_header_fields "srw98"
echo >> $outputdir/$report

dollar='$'
tab='\\t'

# write data rows to $report
find -L $TESTDIR -type f -name \*.C | sort | while IFS= read -r testcase; do
  for col in ${output_fields_per_row}; do
    eval echo -ne "${dollar}${col}${tab}" >> $outputdir/$report
  done
  run_analysis "$nnh99" "$testcase"
  run_analysis "$srw98" "$testcase"
  echo >> $outputdir/$report
done

# write final comment to $report
echo '#' >> $outputdir/$report
echo -n "# finished at " >> $outputdir/$report
date >> $outputdir/$report
echo '# vim: ts=50 nowrap:' >> $outputdir/$report

# insert some lines for
# vim to not interpret
# the previous line as
# a modeline for this
# file

rm -f $outputdir/tmp_alias_statistics$setting
rm -f $outputdir/tmp_output$setting

