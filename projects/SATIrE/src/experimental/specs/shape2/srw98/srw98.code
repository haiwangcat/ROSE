// Author: Markus Schordan, Viktor Pavlu
// E-mail: markus@complang.tuwien.ac.at
// Year  : 2006, 2007, 2008

SET
#include "../common.set"

DOMAIN
ShapeGraphLifted = flat(ShapeGraph)
ENDDOMAIN

UNIVERSAL
option_keep_tempvars                : bool#
option_keep_helpvars                : bool#
option_aliases_commontail           : bool#
option_perform_shape_gc             : bool#

option_debugmessage_astmatch        : bool#
option_debugmessage_assign          : bool#
option_debugmessage_tassign         : bool#
option_debugmessage_lowlevel        : bool#
option_debugmessage_materialisation : bool#

option_omit_conversion_to_nnh       : bool#

GLOBAL
globals: *VariableSymbolNT#

BLOCK
label: snum#

PROBLEM srw98
  prefix    : srw98
  direction : forward
  carrier   : ShapeGraphLifted
  init      : bot
  init_start: lift((({},{}),{}))
  combine   : comb
  retfunc   : comb
  widening  : wide
  equal     : eq

TRANSFER
#include "../common_transfer.optla"

SUPPORT
comb::ShapeGraphLifted,ShapeGraphLifted->ShapeGraphLifted;
comb(a,bot) = a;
comb(a,top) = top;
comb(bot,b) = b;
comb(top,b) = top;
comb(  a,b) = case drop(a),drop(b) of ((V1,E1),I1),((V2,E2),I2) => lift(((union(V1,V2),union(E1,E2)),union(I1,I2))); endcase;

wide::ShapeGraphLifted,ShapeGraphLifted->ShapeGraphLifted;
wide(a,b) = b;

eq(a,b) = a=b;

tassign_x_null::VariableId,ShapeGraph->ShapeGraph;
tassign_xsel_null::VariableId,VariableId,ShapeGraph->ShapeGraph;
tassign_x_new::VariableId,ShapeGraph->ShapeGraph;
tassign_xsel_new::VariableId,VariableId,ShapeGraph->ShapeGraph;
tassign_x_y::VariableId,VariableId,ShapeGraph->ShapeGraph;
tassign_x_ysel::VariableId,VariableId,VariableId,ShapeGraph->ShapeGraph;
tassign_xsel_y::VariableId,VariableId,VariableId,ShapeGraph->ShapeGraph;
#include "../common_tassign.optla"
#include "../common_support.optla"
#include "../common_normalisation.optla"
#include "../common_debug.optla"

extract_graphs::ShapeGraph->SrwNnhPair;
extract_graphs(sg) =
  if option_omit_conversion_to_nnh then
    (sg, [])
  else
    (sg,sgSet_to_sgList(srwSG_to_nnhSG(sg)))
  endif;


carrier_to_summarygraph::ShapeGraphLifted->ShapeGraph;
carrier_to_summarygraph(lifted_sg) = drop(lifted_sg);

carrier_to_graphset::ShapeGraphLifted->ShapeGraphSet;
carrier_to_graphset(lifted_sg) = srwSG_to_nnhSG_simplified(drop(lifted_sg));
//carrier_to_graphset(lifted_sg) = srwSG_to_nnhSG(drop(lifted_sg)); // FIXME terminiert nicht unter 15min (bei 1200x130 scheitert das cartesian)

// ----- begin simplified version for alias checks -----
// generating the full set of all represented shape graphs is not feasible
// in acceptable time. for the computation of alias sets it is also not
// absolutely necessary:
//   every edge could be NULL in an SRW graph -> there are no must aliases.
//   it is therefore sufficient to check for may_aliases/no_aliases
//
// instead of generating the full set of shape graphs we only eliminate the
// indeterminism from the graph, ie. all src,sel pairs that have more than
// one target.
// then one additional graph, the empty shape graph, is added to the set
// of graphs on which alias testing is performed. this ensures that no must_aliases
// are included.

// alias_performance_hack_1
// 2009-04-29: lazy alias checking (alias_performance_hack_2)
srwSG_to_nnhSG_simplified::ShapeGraph->ShapeGraphSet;
srwSG_to_nnhSG_simplified(((S1,H1),IS1) as SG1) =
  let vars         = vars_by_stackedges(S1);
      heap_sources = extract_src_sel(SG1); in
  let S2_sgs  = gen_stack_edges_simplified(vars, S1);
      H2_sgs  = gen_heap_edges_simplified(heap_sources, H1);
      IS2_sgs = {Sharing2G(IS1)}; in
  let SG2_sgs = map_cartesian([S2_sgs, H2_sgs, IS2_sgs]); in
  let nnh_sgs = {sg !! sg <-- SG2_sgs, if is_compatible(sg)}; in
  nnh_sgs;

gen_stack_edges_simplified::VarList,StackEdgeSet->ShapeGraphSet;
gen_stack_edges_simplified(    [],     _) = {};
gen_stack_edges_simplified(var:Vs, edges) =
  let outedges_of_var = stackedges_by_var(var,edges); in
  let outedge_sgs     = {State2G({outedge}) !! outedge <-- outedges_of_var}; in
  cartesian(outedge_sgs, gen_stack_edges_simplified(Vs,edges));

gen_heap_edges_simplified::NodeSelList,HeapEdgeSet->ShapeGraphSet;
gen_heap_edges_simplified(            [],         _) = {};
gen_heap_edges_simplified((src,sel):Rest,heap_edges) =
  let outedges    = heapedges_by_src_sel(src,sel,heap_edges); in
  let outedge_sgs = {Heap2G({e}) !! e <-- outedges}; in
  cartesian(outedge_sgs, gen_heap_edges_simplified(Rest,heap_edges));
// ----- end -----

// simple garbage collector
simple_gc::ShapeGraphLifted->ShapeGraphLifted;
simple_gc(top) = top;
simple_gc(bot) = bot;
simple_gc(lifted_g) =
  case drop(lifted_g) of sg =>
    lift(remove_garbage_loop(sg));
  endcase;


// ----------------------------------------
// Analysis Entry Point: Transfer Functions
// ----------------------------------------

assign_x_null::VariableId,ShapeGraph->ShapeGraph;
assign_x_null(x,((Ev0,Es0),is0)) =
  let Ev1 = {(y,rem(x,W))!!(y,W) <-- Ev0, if !(y=x)};
      Es1 = {(rem(x,V),sel0,rem(x,W))!!(V,sel0,W) <-- Es0};
      is1 = {rem(x,n) !! n <-- is0}; in
  ((Ev1,Es1),is1);

assign_xsel_null::VariableId,VariableId,ShapeGraph->ShapeGraph;
assign_xsel_null(x,selp,((Ev0,Es0),is0)) =
  let Es1 = edgesetminus(Es0,{(X0,sel0,ANY0) !! (X0,sel0,ANY0) <-- Es0, if x ? X0 && sel0=selp}); in
  let is1 = nodesetminus(is0,{n !! n <-- is0, if (!iis(Es1,n)) && no_outedge_exists(Es1,n)}); in
  ((Ev0,Es1),is1);

no_outedge_exists::HeapEdgeSet,Node->bool;
no_outedge_exists(Es,n)=
  {true !! (X0,sel0,Y0) <-- Es, if X0={} && Y0=n} = {};

assign_x_new::VariableId,ShapeGraph->ShapeGraph;
assign_x_new(x,((Ev0,Es0),is0)) =
  ((union({(x,{x})}, Ev0), Es0),is0);

assign_x_y::VariableId,VariableId,ShapeGraph->ShapeGraph;
assign_x_y(x,y,((Ev0,Es0),is0)) =
  let Ev1 = union({(za,msgc(x,y,Z))!!(za,Z) <-- Ev0},
                  {(x,msgc(x,y,Z))!!(y1,Z) <-- Ev0, if y1=y});
      Es1 = {(msgc(x,y,Z1),sel0,msgc(x,y,Z2))!!(Z1,sel0,Z2) <-- Es0};
      is1 = {msgc(x,y,Z)!!Z <-- is0}; in
  ((Ev1,Es1),is1);

assign_xsel_y::VariableId,VariableId,VariableId,ShapeGraph->ShapeGraph;
assign_xsel_y(x,selp,y,((Ev0,Es0),is0)) =
  let Es1 = union(Es0,{(X0,selp,Y0) !! (xa,X0) <-- Ev0, (ya,Y0) <-- Ev0, if xa=x && ya=y && compatible2(X0,Y0)}); in
  let is1 = union(is0,{n !! (ya,n) <-- Ev0, if ya=y && iis(Es1,n)}); in
  ((Ev0,Es1),is1);

assign_x_ysel::VariableId,VariableId,VariableId,ShapeGraph->ShapeGraph;
assign_x_ysel(x,y,ysel,((Ev0,Es0),is0)) =
  let G    = ((Ev0,Es0),is0); in
  let Ev1  = union(Ev0,union(
                         {(x,h(x,Z))!!(ya,Y0) <-- Ev0, (Y1,sel0,Z) <-- Es0, if ya=y && Y0=Y1 && ysel=sel0},
                         {(za,h(x,Z))!!(ya,Y0) <-- Ev0, (Y1,sel0,Z1) <-- Es0, (za,Z) <-- Ev0, if y=ya && Y0=Y1 && ysel=sel0 && Z1=Z}));
      temp = {aux_as(x,y,Y0,ysel,Z,G) !! (ya,Y0) <-- Ev0, (Y2,sel0,Z) <-- Es0, if y=ya && Y0=Y2 && ysel=sel0}; in
  let Es1  = union((edgesetminus(Es0,{(Y0,sel0,Z)!!(Y0,sel0,Z) <-- Es0, if (y ? Y0) && sel0=ysel})), ssunion(temp));
      is1  = new_is(is0,x); in
  ((Ev1,Es1),is1);

N::StackEdgeSet,HeapEdgeSet->NodeSet;
N(Ev,Es) = union({n!!(x,n)<--Ev},NEs(Es));

NEs::HeapEdgeSet->NodeSet;
NEs(Es) = union({s!!(s,a,e)<--Es},{e!!(s,a,e)<--Es});

edgesetminus::HeapEdgeSet,HeapEdgeSet->HeapEdgeSet;
edgesetminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

//stackedgesetminus::StackEdgeSet,StackEdgeSet->StackEdgeSet;
//stackedgesetminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

nodesetminus::NodeSet,NodeSet->NodeSet;
nodesetminus(S1,S2) = {x!!x<--S1, if !(x ? S2)};

ssunion::HeapEdgeSetSet->HeapEdgeSet;
ssunion(ss) = { e !! s <-- ss, e <-- s };

// -------------------
// auxiliary functions
// -------------------

semeq::Node,Node->bool;
semeq(X,Y) = X=Y;

semneq::Node,Node->bool;
semneq(X,Y) =
  (!(X = Y)) || (X={} && Y={});

compatible3::Node,Node,Node->bool;
compatible3(X,Y,Z) =
     (X=Y || intersect(X,Y)={})
  && (X=Z || intersect(X,Z)={})
  && (Y=Z || intersect(Y,Z)={});

compatible2::Node,Node->bool;
compatible2(X,Y) =
  X=Y || intersect(X,Y)={};

rem::VariableId,Node->Node;
rem(x,Z) =
  { v !! v <-- Z, if !(x=v) };

h::VariableId,Node->Node;
h(x,Z) = union(Z,{x});

msgc::VariableId,VariableId,Node->Node;
msgc(x,y,Z) =
 if y ? Z then union(Z,{x})
 else Z
 endif;

iis::HeapEdgeSet,Node->bool;
iis(Es,Z) =
  let exist = {true !! (Z1,sel1,Z31) <-- Es, (Z2,sel2,Z32) <-- Es,
                       if Z31=Z && Z32=Z && compatible3(Z1,Z2,Z)
                       &&( semneq(Z1,Z2) || !(sel1=sel2))}; in
  !(exist = {});

compat_in::StackEdge,HeapEdge,HeapEdge,ShapeGraph->bool;
compat_in((_,Y),(Y2,sel0,Z),(W,sel1,Z3),((Ev0,Es0),is0)) =
  Y=Y2 && Z=Z3
  && compatible3(Y,Z,W)
  && semneq(Z,W)
  && ((semeq(Y,W) && sel0=sel1) || (Z ? is0));

compat_out::StackEdge,HeapEdge,HeapEdge,ShapeGraph->bool;
compat_out((_,Y),(Y2,sel0,Z),(Z1,sel1,W),((Ev0,Es0),is0)) =
  Y=Y2 && Z=Z1
  && compatible3(Y,Z,W)
  && semneq(Z,W)
  && (semneq(Y,Z) || !(sel0=sel1));

compat_self::StackEdge,HeapEdge,HeapEdge,ShapeGraph->bool;
compat_self((_,Y),(Y2,sel0,Z),(Z31,sel1,Z32),((Ev0,Es0),is0)) =
  Y=Y2 && Z=Z31 && Z=Z32 && Z31=Z32
    && compatible2(Y,Z)
    && ((semeq(Y,Z) && sel0=sel1) || (Z ? is0));

aux_as::VariableId,VariableId,Node,VariableId,Node,ShapeGraph->HeapEdgeSet;
aux_as(x,yp,Y,selp,Z,((Ev0,Es0),is0)) =
  let newin = {(W,sel1,h(x,Z)) !! (W,sel1,Z1) <-- Es0,
                if Z=Z1
                && compat_in((yp,Y),(Y,selp,Z),(W,sel1,Z),((Ev0,Es0),is0))};
      newself = {(h(x,Z),sel1,h(x,Z)) !! (Z21,sel1,Z22) <-- Es0,
                if Z=Z21 && Z=Z22
                && compat_self((yp,Y),(Y,selp,Z),(Z,sel1,Z),((Ev0,Es0),is0))};
      newout  = {(h(x,Z),sel1,W) !! (Z3,sel1,W) <-- Es0,
                if Z=Z3
                && compat_out((yp,Y),(Y,selp,Z),(Z,sel1,W),((Ev0,Es0),is0))}; in
  union(union(newin,newself),newout);

new_is(rest,x) = { ha # x !! ha <-- rest };

// vim: ts=2 sts=2 sw=2 expandtab:
