#
# Makefile_template
# Author: Viktor Pavlu, 2009
#

ANALYSIS='please set ANALYSIS and call from Makefile'
CARRIER='please set CARRIER and call from Makefile'
LOWEREDCARRIER='please set CARRIER and call from Makefile'
BUILD='please set BUILD and call from Makefile'

ANALYSIS_MARKUP={ANALYSIS}
CARRIER_MARKUP={DFI}
LOWEREDCARRIER_MARKUP={LOWEREDDFI}

define FUNC_EXPAND
	sed "$(1)" -e "s/$(CARRIER_MARKUP)/$(CARRIER)/g" \
             -e "s/$(LOWEREDCARRIER_MARKUP)/$(LOWEREDCARRIER)/g" \
             -e "s/$(ANALYSIS_MARKUP)/$(ANALYSIS)/g" > "$(2)"
endef


.PHONY: shape clean info

info:
	@echo
	@echo "  This is the Makefile template only. Please"
	@echo "  do not call this directly but let the main"
	@echo "  Makefile include the template"
	@echo

$(BUILD)/:
	mkdir -p $(BUILD)
	
$(BUILD)/$(ANALYSIS)/: $(BUILD)/
	mkdir -p $(BUILD)/$(ANALYSIS)



# -- common files need to be copied to builddir --
FILES_COMMON=attributes \
             ShapeAnalyzerOptions.h \
						 ShapeCommandLineParser.h \
             ShapeAnalysisDriver.h \
						 PagAttributes.C \
						 satire_legacy.h \
						 AliasStatistics.C


define TEMPLATE_COMMON
$(BUILD)/$(ANALYSIS)/$(1): $(1)
	cp $(1) $(BUILD)/$(ANALYSIS)/
	touch -c $(BUILD)/$(ANALYSIS)/main.C
endef

$(foreach file,$(FILES_COMMON),$(eval $(call TEMPLATE_COMMON,$(file))))


# -- per-analysis custom files need to be copied to builddir --

FILES_CUSTOM=Makefile.custom

define TEMPLATE_CUSTOM
$(BUILD)/$(ANALYSIS)/$(1): $(ANALYSIS)/$(1)
	cp $(ANALYSIS)/$(1) $(BUILD)/$(ANALYSIS)/
endef

$(foreach file,$(FILES_CUSTOM),$(eval $(call TEMPLATE_CUSTOM,$(file))))


# -- in substitution files {CARRIER_MARKUP} and {ANALYSIS_MARKUP} are expanded --

FILES_SUBST=visualisation.c visualisation.h ShapeImplementation.C

define TEMPLATE_SUBST
$(BUILD)/$(ANALYSIS)/$(1): $(1)
	$(call FUNC_EXPAND,$$<,$$@)
	touch -c $(BUILD)/$(ANALYSIS)/main.C
endef

$(foreach file,$(FILES_SUBST),$(eval $(call TEMPLATE_SUBST,$(file))))




# -- .optla is generated from .code file and all .optla--

$(BUILD)/$(ANALYSIS)/$(ANALYSIS).optla: $(ANALYSIS)/$(ANALYSIS).code \
              common.set \
              common_debug.optla \
							common_tassign.optla \
							common_normalisation.optla \
							common_support.optla \
							common_transfer.optla 
	cpp -C -P $< | \
  sed -e "s/$(CARRIER_MARKUP)/$(CARRIER)/g" \
      -e "s/$(LOWEREDCARRIER_MARKUP)/$(LOWEREDCARRIER)/g" \
      -e "s/$(ANALYSIS_MARKUP)/$(ANALYSIS)/g" | \
  grep -v "prefix *: *$(ANALYSIS)" > $@

# -- Makefile indicates wether newanalysis has already been run --
$(BUILD)/$(ANALYSIS)/Makefile: $(BUILD)/$(ANALYSIS)/$(ANALYSIS).optla
	pushd .; cd $(BUILD)/; newanalysis "$(ANALYSIS)"; popd
	$(call FUNC_EXPAND,nnh99_main.C,$(BUILD)/$(ANALYSIS)/main.C)


shape: $(BUILD)/$(ANALYSIS)/ \
       $(addprefix $(BUILD)/$(ANALYSIS)/,$(FILES_COMMON) $(FILES_CUSTOM) $(FILES_SUBST)) \
			 $(BUILD)/$(ANALYSIS)/$(ANALYSIS).optla \
			 $(BUILD)/$(ANALYSIS)/Makefile
	make -C $(BUILD)/$(ANALYSIS)

clean:
	[ ! -e "$(BUILD)/$(ANALYSIS)/" ] || make clean -C $(BUILD)/$(ANALYSIS)/



# vim: noexpandtab:
