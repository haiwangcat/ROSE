// Author: Viktor Pavlu
// E-mail: e0425543@student.tuwien.ac.at
// Year  : 2006--2008

SET
#include "../common.set"

DOMAIN
ShapeGraphSetLifted = flat(ShapeGraphSet)
ENDDOMAIN

UNIVERSAL
option_keep_tempvars                : bool#
option_keep_helpvars                : bool#
option_aliases_commontail           : bool#
option_perform_shape_gc             : bool#

option_debugmessage_astmatch        : bool#
option_debugmessage_assign          : bool#
option_debugmessage_tassign         : bool#
option_debugmessage_lowlevel        : bool#
option_debugmessage_materialisation : bool#

option_omit_conversion_to_srw       : bool#

GLOBAL
globals     : *VariableSymbolNT#

BLOCK
label       : snum#

PROBLEM nnh99
prefix    : nnh99
direction : forward
carrier   : ShapeGraphSetLifted
init      : bot
init_start: lift({(({},{}),{})})
combine   : comb
retfunc   : comb
widening  : wide
equal     : eq

TRANSFER
#include "../common_transfer.optla"

SUPPORT
comb::ShapeGraphSetLifted,ShapeGraphSetLifted->ShapeGraphSetLifted;
comb(a,bot) = a;
comb(a,top) = top;
comb(bot,b) = b;
comb(top,b) = top;
comb(  a,b) = lift(union(drop(a),drop(b)));

wide::ShapeGraphSetLifted,ShapeGraphSetLifted->ShapeGraphSetLifted;
wide(a,b) = b;

eq(a,b) = a=b;

tassign_x_null::VariableId,ShapeGraphSet->ShapeGraphSet;
tassign_xsel_null::VariableId,VariableId,ShapeGraphSet->ShapeGraphSet;
tassign_x_new::VariableId,ShapeGraphSet->ShapeGraphSet;
tassign_xsel_new::VariableId,VariableId,ShapeGraphSet->ShapeGraphSet;
tassign_x_y::VariableId,VariableId,ShapeGraphSet->ShapeGraphSet;
tassign_x_ysel::VariableId,VariableId,VariableId,ShapeGraphSet->ShapeGraphSet;
tassign_xsel_y::VariableId,VariableId,VariableId,ShapeGraphSet->ShapeGraphSet;
#include "../common_tassign.optla"
#include "../common_support.optla"
#include "../common_normalisation.optla"
#include "../common_debug.optla"

extract_graphs::ShapeGraphSet->SrwNnhPair;
extract_graphs(sg) =
  if option_omit_conversion_to_srw then
    ((({},{}),{}), sgSet_to_sgList(sg))
  else
    (nnhSG_to_srwSG(sg), sgSet_to_sgList(sg))
  endif;

carrier_to_graphset::ShapeGraphSetLifted->ShapeGraphSet;
carrier_to_graphset(lifted_sg) = drop(lifted_sg);

carrier_to_summarygraph::ShapeGraphSetLifted->ShapeGraph;
carrier_to_summarygraph(lifted_sg) = nnhSG_to_srwSG(drop(lifted_sg));

simple_gc::ShapeGraphSetLifted->ShapeGraphSetLifted;
simple_gc(top) = top;
simple_gc(bot) = bot;
simple_gc(lifted_g) =
  case drop(lifted_g) of sgs =>
    lift({remove_garbage_loop(sg) !! sg <-- sgs});
  endcase;



// ----------------------------------------
// Analysis Entry Point: Transfer Functions
// ----------------------------------------

assign_x_null::VariableId,ShapeGraphSet->ShapeGraphSet;
assign_x_null(x,gset) =
  let dummy = debug_print_ShapeGraphSet("tassign","      input", gset); in
  let dummy = debug_print_str("tassign","      x_null    ".varid_str(x)."\n"); in
  let res = enunion([fassign_x_null(x,g) !! g <-- gset]); in
  let dummy = debug_print_ShapeGraphSet("tassign","      result", res); in
  res;

assign_x_new::VariableId,ShapeGraphSet->ShapeGraphSet;
assign_x_new(x,gset) =
  let dummy = debug_print_ShapeGraphSet("tassign","      input", gset); in
  let dummy = debug_print_str("tassign","      x_new     ".varid_str(x)."\n"); in
  let res = enunion([fassign_x_new(x,g) !! g <-- gset]); in
  let dummy = debug_print_ShapeGraphSet("tassign","      result", res); in
  res;

assign_xsel_null::VariableId,VariableId,ShapeGraphSet->ShapeGraphSet;
assign_xsel_null(x,sel,gset) =
  let dummy = debug_print_ShapeGraphSet("tassign","      input", gset); in
  let dummy = debug_print_str("tassign","      xsel_null ".varid_str(x)."->".varid_str(sel)."\n"); in
  let res = enunion([fassign_xsel_null(x,sel,g) !! g <-- gset]); in
  let dummy = debug_print_ShapeGraphSet("tassign","      result", res); in
  res;

assign_x_y::VariableId,VariableId,ShapeGraphSet->ShapeGraphSet;
assign_x_y(x,y,gset) =
  let dummy = debug_print_ShapeGraphSet("tassign","      input", gset); in
  let dummy = debug_print_str("tassign","      x_y       ".varid_str(x)." ".varid_str(y)."\n"); in
  let res = enunion([fassign_x_y(x,y,g) !! g <-- gset]); in
  let dummy = debug_print_ShapeGraphSet("tassign","      result", res); in
  res;

assign_x_ysel::VariableId,VariableId,VariableId,ShapeGraphSet->ShapeGraphSet;
assign_x_ysel(x,y,sel,gset) =
  let dummy = debug_print_ShapeGraphSet("tassign","      input", gset); in
  let dummy = debug_print_str("tassign","      x_ysel     ".varid_str(x)." ".varid_str(y)."->".varid_str(sel)."\n"); in
  let res = enunion([fassign_x_ysel(x,y,sel,g) !! g <-- gset]); in
  let dummy = debug_print_ShapeGraphSet("tassign","      result", res); in
  res;

assign_xsel_y::VariableId,VariableId,VariableId,ShapeGraphSet->ShapeGraphSet;
assign_xsel_y(x,sel,y,gset) =
  let dummy = debug_print_ShapeGraphSet("tassign","      input", gset); in
  let dummy = debug_print_str("tassign","      xsel_y     ".varid_str(x)."->".varid_str(sel)." ".varid_str(y)."\n"); in
  let res = enunion([fassign_xsel_y(x,sel,y,g) !! g <-- gset]); in
  let dummy = debug_print_ShapeGraphSet("tassign","      result", res); in
  res;

enunion::ShapeGraphSetList->ShapeGraphSet;
enunion([]) = {};
enunion(car:cdr) = union(car,enunion(cdr));



fassign_x_null::VariableId,ShapeGraph->ShapeGraphSet;
fassign_x_null(x,g) =
  let dummy = debug_print_ShapeGraph("lowlevel","          in", g); in
  let dummy = debug_print_str("lowlevel","          fassign_x_null ".varid_str(x)."\n"); in
  let res = {kill_x(x,g)}; in
  let dummy = debug_print_ShapeGraphSet("lowlevel","          rs", res); in
  res;

fassign_x_y::VariableId,VariableId,ShapeGraph->ShapeGraphSet;
fassign_x_y(x,y,((S1,H1),is1) as gi) =
  let dummy = debug_print_ShapeGraph("lowlevel","          in", gi); in
  let dummy = debug_print_str("lowlevel","          fassign_x_y ".varid_str(x)." ".varid_str(y)."\n"); in
  let res =
  let S2  = union(
             {(z,gxy(x,y,nz)) !! (z,nz) <-- S1},                      // add x to all edges where y is already
             {(x,gxy(x,y,ny)) !! (y1,ny) <-- S1, if (y1 = y)});       // add a new edge (x,{x,y,...}) to where y pointed to
      H2  = {(gxy(x,y,nv),sel,gxy(x,y,nw)) !! (nv,sel,nw) <-- H1}; // add x to all edges where y is already
      is2 = {gxy(x,y,nz) !! nz <-- is1}; in
  {((S2,H2),is2)}; in
  let dummy = debug_print_ShapeGraphSet("lowlevel","          rs", res); in
  res;

fassign_x_ysel::VariableId,VariableId,VariableId,ShapeGraph->ShapeGraphSet;
fassign_x_ysel(x,y,ysel,((S1,H1),is1) as g) = // it is guaranteed that x!=y
  let dummy = debug_print_ShapeGraph("lowlevel","          in", g); in
  let dummy = debug_print_str("lowlevel","          fassign_x_ysel ".varid_str(x)." ".varid_str(y)."->".varid_str(ysel)."\n"); in
  /* three cases: (see popa, chapter 2.6 shape analysis, [x:=y.sel])
   * case 1: there is no (_,{y,_}) <-- S or no ({y,_},ysel, _) <-- H
   * case 2: there is    (_,{y,_}) <-- S   and ({y,_},ysel, u) <-- H where u != {}
   * case 3: there is    (_,{y,_}) <-- S   and ({y,_},ysel,{}) <-- H where u == {}
   */
  let res = if !var_exists(y,g) then
    // case 1a: uninitialised variable (null pointer deref in var)
    // FIXME nur weil leere graphen im set??  print("warn: dereferencing of uninitialised variable: ".varid_str(y)."\n")
    {kill_x(x,g)}
  else
    if !var_sel_exists(y,ysel,g) then
      // case 1b: non-pointer value in field (eg. y->ysel is NULL)
      {kill_x(x,g)}
    else
      case heapedge_by_var_sel(y,ysel,H1) of
        // case 3: materialisation of x from {}
        (_,_,{}) =>
          materialise(x,y,ysel,g);

        // case 2: rename u to include {x}, add (x,union(u,{x}) to S
        (_,_,u) =>
          let S2  = union({(z,hxU(x,u,nz)) !! (z,nz) <-- S1}, {(x,hxU(x,u,u))});
              H2  = {(hxU(x,u,nv),sel1,hxU(x,u,nw)) !! (nv,sel1,nw) <-- H1};
              is2 = {hxU(x,u,nz) !! nz <-- is1}; in
          {((S2,H2),is2)};

      endcase
    endif
  endif; in
  let dummy = debug_print_ShapeGraphSet("lowlevel","          rs", res); in
  res;

fassign_xsel_null::VariableId,VariableId,ShapeGraph->ShapeGraphSet;
fassign_xsel_null(x,s,((S0,H0),is0) as g) =
  let dummy = debug_print_ShapeGraph("lowlevel","          in", g); in
  let dummy = debug_print_str("lowlevel","          fassign_xsel_null ".varid_str(x)."->".varid_str(s)."\n"); in
  let res = if !var_exists(x,g) || !var_sel_exists(x,s,g) then
    {g} // identity case as x.sel is not in graph
  else
    // edge (nx,sel,nu) <-- H0 and must be removed
    let edge = heapedge_by_var_sel(x,s,H0); in
    case edge of
      (nx,sel,nu) =>
        let S1  = S0;
            H1  = {e !! (nv,sel1,nw) as e <-- H0, if !(nx=nv && sel=sel1)}; in
        let is1 = if (nu ? is0)
                  && n_into(nu,H1) <= 1
                  && {} = {e !! (nk,_,nl) as e <-- H1, if (nk={}) && (nl=nu)} then // or same: && {} = {sel2 !! ({},sel2,nu) <-- H1} then
                    is0 # nu
                  else
                    is0
                  endif; in
        {((S1,H1),is1)};
    endcase
  endif; in
  let dummy = debug_print_ShapeGraphSet("lowlevel","          rs", res); in
  res;

fassign_xsel_y::VariableId,VariableId,VariableId,ShapeGraph->ShapeGraphSet;
fassign_xsel_y(x,sel,y,((S1,H1),is1) as g) =
  let dummy = debug_print_ShapeGraph("lowlevel","          in", g); in
  let dummy = debug_print_str("lowlevel","          fassign_xsel_y ".varid_str(x)."->".varid_str(sel)." ".varid_str(y)."\n"); in
  let res = if !var_exists(x,g) || !var_exists(y,g) then
    // in both cases identity, as kill_xsel has already been performed
    {g}
  else
    let S2 = S1;
        nx = node_by_var(x,g);
        ny = node_by_var(y,g); in
    let H2  = union(H1, {(nx,sel,ny)}); in
    let is2 = if n_into(ny,H1) >= 1 then union(is1,{ny}) else is1 endif; in
    {((S2,H2),is2)}
  endif; in
  let dummy = debug_print_ShapeGraphSet("lowlevel","          rs", res); in
  res;

fassign_x_new::VariableId,ShapeGraph->ShapeGraphSet;
fassign_x_new(x,((S1,H1),is1) as g) =
  let dummy = debug_print_ShapeGraph("lowlevel","          in", g); in
  let dummy = debug_print_str("lowlevel","          fassign_x_new ".varid_str(x)."\n"); in
  let res = {((union(S1,{(x,{x})}),H1),is1)}; in
  let dummy = debug_print_ShapeGraphSet("lowlevel","          rs", res); in
  res;

get_extern_edges   :: HeapEdgeSet -> HeapEdgeSet;
get_intern_edges   :: HeapEdgeSet -> HeapEdgeSet;
get_ingoing_edges  :: HeapEdgeSet -> HeapEdgeSet;
get_outgoing_edges :: HeapEdgeSet -> HeapEdgeSet;
  // vpavlu 2009-03-29: all {x} occurrences in the heap are already removed, so
  // it is sufficient to check against {} to determine the edge class.
get_extern_edges(edges)   = {edge_ex !! (nv,sel,nw) as edge_ex <-- edges, if (nv != {}) && (nw != {})};
get_intern_edges(edges)   = {edge_in !! (nv,sel,nw) as edge_in <-- edges, if (nv  = {}) && (nw  = {})};
get_ingoing_edges(edges)  = {edge_gi !! (nv,sel,nw) as edge_gi <-- edges, if (nv != {}) && (nw  = {})};
get_outgoing_edges(edges) = {edge_go !! (nv,sel,nw) as edge_go <-- edges, if (nv  = {}) && (nw != {})};


materialise::VariableId,VariableId,VariableId,ShapeGraph->ShapeGraphSet;
materialise(x,y,sel,((S1,H1),is1) as G1) =
  // generate candidate shape graphs for the materialisation:
  //  - S2 is S1 + (x,{x}) edge
  //  - H2
  //    .) extern edges remain unchanged by materialisation
  //    .) ingoing edges k-{} remain ingoing edges
  //       - as the statement was [x = y->sel] it is certain that the edge (y,sel,{}) becomes (y,sel,{x})
  //       - but all other sources could point to {} or {x} after materialisation.
  //    .) outgoing edges {}-k remain outgoing edges
  //       - ({},sel,k) becomes ({},sel,k) or ({x},sel,k) or both, if sharing permits it
  //    .) intern edges {}-{} remain intern edges
  //       - ({},sel,{}) become ({},sel,{}),({},sel,{x}),({x},sel,{}),({x},sel,{x}) and combinations if sharing permits it
  //
  //    for edges starting at {}: they need not be deterministic! (all other edges must be)
  //    ie. N-sel1-{a}, N-sel2-{b} for sel1 = sel2 is only possible for N={}, not if N is a named node
  //  - is2 is is1 if {} was unshared,
  //        and is1 + {}, is1 + {x}, is1+{}+{x} if {} was shared.

  // --S2--
  let S2_sgs          = {State2G( S1~(x,{x}) )}; in

  // --H2.extern--
  let H2extern_sgs    = {Heap2G(get_extern_edges(H1))}; in

  // --H2.intern--
  let H1intern        = get_intern_edges(H1); in
  let H2intern_sgs    = map_cartesian(gen_sgl_for_intern_edges([e !! e <-- H1intern],{x},is1)); in

  // --H2.ingoing--
  let dummy           = assert("make sure {y}--sel-->{} is in heap", var_sel_exists(y,sel,G1)); in
  let old_edge        = heapedge_by_var_sel(y,sel,H1);  // {y}--sel-->{}
      new_edge        = (node_by_var(y,G1),sel,{x}); in // {y}--sel-->{x}

  // all ingoing edges (k,sel,{}) are ingoing edges after the materialisation.
  // (a) (y,sel,{}) can only become (y,sel,{x}) as the stmt was [x = y->sel]
  // the old edge is CHANGED into the new edge, not added, to fulfill determinism requirement
  let H2ingoing_sgs_a = {Heap2G({new_edge})}; in

  // (b) but all other ingoing edges could point to {x} or {} after materialistion.
  // "all other edges" -> remove old_edge before generating to avoid duplicate edges
  // and thus non-determinism (would violate Inv3)
  let H1ingoing       = get_ingoing_edges(H1) # old_edge; in
  let H2ingoing_sgs_b = map_cartesian(gen_sgl_for_ingoing_edges([e !! e <-- H1ingoing],{x},is1)); in

  let H2ingoing_sgs   = cartesian(H2ingoing_sgs_a, H2ingoing_sgs_b); in

  // --H2.outgoing--
  let H1outgoing      = get_outgoing_edges(H1); in
  let H2outgoing_sgs  = map_cartesian(gen_sgl_for_outgoing_edges([e !! e <-- H1outgoing],{x},is1)); in

  // --is2--
  let is2_sgs = if {} ? is1 then
  {
    Sharing2G( union(is1,{{}})),    // {} shared
    Sharing2G( union(is1,{{x}})),   // {x} shared
    Sharing2G( union(is1,{{},{x}})) // or both shared
  }
  else
  {
    Sharing2G( is1 )                // neither {} nor {x} shared
  }
  endif; in

  // generate combinations
  let sgs = map_cartesian([S2_sgs, H2extern_sgs, H2intern_sgs, H2ingoing_sgs, H2outgoing_sgs, is2_sgs]); in

  //{ G2 !! G2 <-- sgs, if is_compatible(G2)};
  { G2 !! G2 <-- sgs, if is_accepted(x,y,sel,G1,G2)};


is_accepted::VariableId,VariableId,VariableId,ShapeGraph,ShapeGraph->bool;
is_accepted(x,y,sel,G1,((S2,H2),is2) as G2) =
  let res = if is_compatible(G2)
  && kill_x(x,G2) = G1
  && (x,{x}) ? S2
  && var_exists(y,G2)
  && (node_by_var(y,G2),sel,{x}) ? H2 then true else false endif; in
  let dummy = debug_print_bool("materialisation","is_compatible ",is_compatible(G2)); in
  let dummy = debug_print_bool("materialisation","kill_x(G2)=G1 ",kill_x(x,G2) = G1); in
  let dummy = debug_print_bool("materialisation","x->{x} exists ",(x,{x}) ? S2); in
  let dummy = debug_print_bool("materialisation","y-{y,?} exists",var_exists(y,G2)); in
  let dummy = debug_print_bool("materialisation","y->sel = x    ",(node_by_var(y,G2),sel,{x}) ? H2); in
  res;

gen_sgl_for_intern_edges::HeapEdgeList,Node,NodeSet -> ShapeGraphSetList;
gen_sgl_for_intern_edges(          [],_,  _) = [];
gen_sgl_for_intern_edges((n,sel,m):Es,x,is1) =
  let dummy = assert("internal_edge(n,_,m) has n = {} && m = {}", n = {} && m = {}); in
  // generate a set of all shape graphs
  // that are the result of materialising x
  // from {} in the internal edge e ({},sel,{})

  let sgs = if {} ? is1 then
  // if the summary location was shared then
  // either {} or {x} or both must be shared
  // in the generated graphs
  {
    Heap2G({({},sel,{})}),
    Heap2G({({},sel, x)}),
    Heap2G({( x,sel,{})}),
    Heap2G({( x,sel, x)}),

    Heap2G({({},sel,{}), ({},sel,x)}),
    Heap2G({({},sel,{}), ( x,sel,{})}),
    Heap2G({({},sel,{}), ( x,sel,x)}),
    Heap2G({({},sel, x), ( x,sel,{})}),
    Heap2G({({},sel, x), ( x,sel, x)}),
    //Heap2G({( x,sel,{}), ( x,sel, x)}),                           // non-deterministic, thus incompatible

    Heap2G({({},sel,{}), ({},sel, x), ( x,sel,{})}),
    Heap2G({({},sel,{}), ({},sel, x), ( x,sel, x)})
    //Heap2G({({},sel, x), ( x,sel,{}), ( x,sel, x)}),              // non-deterministic, thus incompatible

    //Heap2G({({},sel,{}), ({},sel, x), ( x,sel,{}), ( x,sel, x)})  // non-deterministic, thus incompatible
  }
  else

  // unshared summary location, so {x} must also
  // remain unshared! and there is already one heap
  // edge y->next (because we materialise only for x = y->next)
  // so {x} can not be target of *another* heap edge
  {
    Heap2G({({},sel,{})}),
    //Heap2G({({},sel, x)}),                                        // would make {x} shared
    Heap2G({( x,sel,{})}),
    //Heap2G({( x,sel, x)}),                                        // would make {x} shared

    //Heap2G({({},sel,{}), ({},sel,x)}),                            // would make {x} shared
    Heap2G({({},sel,{}), ( x,sel,{})})
    //Heap2G({({},sel,{}), ( x,sel,x)}),                            // would make {x} shared
    //Heap2G({({},sel, x), ( x,sel,{})}),                           // would make {x} shared
    //Heap2G({({},sel, x), ( x,sel, x)}),                           // would make {x} shared
    //Heap2G({( x,sel,{}), ( x,sel, x)}),                           // non-deterministic, thus incompatible

    //Heap2G({({},sel,{}), ({},sel, x), ( x,sel,{})}),              // would make {x} shared
    //Heap2G({({},sel,{}), ({},sel, x), ( x,sel, x)}),              // would make {x} shared
    //Heap2G({({},sel, x), ( x,sel,{}), ( x,sel, x)}),              // non-deterministic, thus incompatible

    //Heap2G({({},sel,{}), ({},sel, x), ( x,sel,{}), ( x,sel, x)})  // non-deterministic, thus incompatible
  }
  endif; in
  [sgs] ++ gen_sgl_for_intern_edges(Es,x,is1);


gen_sgl_for_ingoing_edges::HeapEdgeList,Node,NodeSet -> ShapeGraphSetList;
gen_sgl_for_ingoing_edges(  [],_,  _) = [];
gen_sgl_for_ingoing_edges((n,sel,m):Es,x,is1) =
  let dummy = assert("ingoing_edge(n,_,m) has n != {} && m = {}", n != {} && m = {}); in

  let sgs = if {} ? is1 then
  // if the summary location was shared then
  // either {} or {x} or both must be shared
  // in the generated graphs
  {
    Heap2G({( n,sel,{})}),
    Heap2G({( n,sel, x)})

    //Heap2G({(n,sel,{}), (n,sel,x)})                               // non-deterministic, thus incompatible
  }
  else

  // unshared summary location, so {x} must also
  // remain unshared! and there is already one heap
  // edge y->next (because we materialise only for x = y->next)
  // so {x} can not be target of *another* heap edge
  {
    Heap2G({(n,sel,{})})
    //Heap2G({(n,sel, x)}),                                        // would make {x} shared
  }
  endif; in
  [sgs] ++ gen_sgl_for_ingoing_edges(Es,x,is1);


gen_sgl_for_outgoing_edges::HeapEdgeList,Node,NodeSet -> ShapeGraphSetList;
gen_sgl_for_outgoing_edges(  [],_,  _) = [];
gen_sgl_for_outgoing_edges((n,sel,m):Es,x,is1) =
  let dummy = assert("outgoing_edge(n,_,m) has n = {} && m != {}", n = {} && m != {}); in

  let sgs = if m ? is1 then
  // here we test the target m for sharing
  // before materialisation. if it was shared,
  // it must continue to be shared after
  // materialisation:
  {
    Heap2G({({},sel,m)}),             // can make m shared if two nodes in {} point to m
    Heap2G({( x,sel,m)}),             // this alone would not make m shared, but we must
                                      // include it nevertheless as there could be external
                                      // edges that contribute to the sharing. nodes that
                                      // don't fit with the explicit sharing info will be
                                      // rejected by the is_compatible test.
    Heap2G({({},sel,m), (x,sel,m)})   // of course, two edges to m make it shared
  }
  else
  // only one edge may point to m
  {
    Heap2G({({},sel,m)}),             // this time, {} must represent only on node
    Heap2G({( x,sel,m)})              // {}->m is replaced by {x}->m, ok
  }
  endif; in
  [sgs] ++ gen_sgl_for_outgoing_edges(Es,x,is1);


// -------------------
// auxiliary functions
// -------------------

kill_x::VariableId,ShapeGraph->ShapeGraph;
kill_x(x,((S0,H0),is0)) =
  let S1  = {(z,rem(x,nz)) !! (z,nz) <-- S0, if !(z=x)};
      H1  = {(rem(x,nv),sel,rem(x,nw)) !! (nv,sel,nw) <-- H0};
      is1 = {rem(x,nx) !! nx <-- is0}; in
  ((S1,H1),is1);

// remove x from {x,...}  (called kx in nnh)
rem::VariableId,Node->Node;
rem(x,Z) = Z # x;

// add x to Z if y is already there
gxy::VariableId,VariableId,Node->Node;
gxy(x,y,Z) = if (y ? Z) then union(Z,{x}) else Z endif;

// add x to U if U = Z
hxU::VariableId,Node,Node->Node;
hxU(x,U,Z) = if (Z = U) then union(U,{x}) else Z endif;


// vim: ts=2 sts=2 sw=2 expandtab:
