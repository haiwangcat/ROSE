// common normalisation for shape analyses

// Author: Viktor Pavlu
// E-mail: e0425543@student.tuwien.ac.at
// Year  : 2006, 2007, 2008

// ----------------------------------------------------------
// assign normalises to handle arbitrarily nested expressions
// ----------------------------------------------------------

delete_vars::{DFI},*VariableSymbolNT->{DFI};
delete_vars(g,[!]) = g;
delete_vars(g,VariableSymbol(_) as v::vs) = delete_vars(delete_var(g,varsym_varid(v)), vs);

delete_var::{DFI},VariableId->{DFI};
delete_var(top,_) = top;
delete_var(bot,_) = bot;
delete_var(  g,v) = lift(tassign_x_null(v,drop(g)));

assign::Expression,Expression,{DFI}-> {DFI};
assign(_,_,top) = top;
assign(_,_,bot) = bot;
assign(lhs,rhs,lifted_g) =
  let dummy = debug_print_str("astmatch", expr_asttext(lhs)." = ".expr_asttext(rhs)."\n"); in

  // allocate one tempvar for each normalisation step
  let lhs_vars = allocate_tmpvars(lhs,expr_depth(lhs));
      rhs_vars = allocate_tmpvars(rhs,expr_depth(rhs)); in
  // parse expression, collect transfer function calls as opcode list
  let lhs_ops  = reverse(normalisation_ops(Side_LHS,lhs,expr_depth(lhs),lhs_vars));
      rhs_ops  = reverse(normalisation_ops(Side_RHS,rhs,expr_depth(rhs),rhs_vars)); in
  // all normalisation steps are given as opcodes except the last step,
  // the one connecting lhs and rhs. it is only given as fragments:
  // i.e. lhs is LHS_XSEL and
  //      rhs is RHS_Y
  //      then the full opcode would be XSEL_Y
  let L = hd(lhs_ops);
      R = hd(rhs_ops); in
  let last_op = case (R)!1!2 of

    RHS_NULL => if (L)!1!2 = LHS_X then
        [(OP_X_NULL,    [pick_arg(L,1)])] else
        [(OP_XSEL_NULL, [pick_arg(L,1),pick_arg(L,2)])] endif;

    RHS_NEW => if (L)!1!2 = LHS_X then
        [(OP_X_NEW,     [pick_arg(L,1)])] else
        [(OP_XSEL_NEW,  [pick_arg(L,1),pick_arg(L,2)])] endif;

    RHS_Y => if (L)!1!2 = LHS_X then
        [(OP_X_Y,       [pick_arg(L,1),pick_arg(R,1)])] else
        [(OP_XSEL_Y,    [pick_arg(L,1),pick_arg(L,2),pick_arg(R,1)])] endif
        // remove temps as every def of a temp is only used once
        ++ if is_tmpvarid(pick_arg(R,1)) && !option_keep_tempvars then
             [(OP_X_NULL,[pick_arg(R,1)])]
           else
             []
           endif;

    RHS_YSEL => if (L)!1!2 = LHS_X then
        [(OP_X_YSEL,    [pick_arg(L,1),pick_arg(R,1),pick_arg(R,2)])]
      else
        // additional normalisation step when x.sel and y.sel meet
        let tmp = add_tmpvarid_like_expr(expr_at(lhs,0)); in
        [(OP_X_YSEL, [tmp,pick_arg(R,1),pick_arg(R,2)])] ++
        [(OP_XSEL_Y, [pick_arg(L,1),pick_arg(L,2),tmp])] ++
        if option_keep_tempvars then [] else [(OP_X_NULL, [tmp])] endif
      endif;

    _ => print((R)!1!2) print(": ") error("unknown opcode\n");
  endcase; in
  let ops_transfer = reverse(tl(lhs_ops)) ++ reverse(tl(rhs_ops)) ++ last_op; in
  let ops_cleanup  = cleanup_ops(lhs_vars ++ rhs_vars); in
  execute_instructionlist(ops_transfer ++ ops_cleanup,lifted_g);

// call transfer functions according to given instruction in instructionlist
execute_instructionlist::InstructionList,{DFI}->{DFI};
execute_instructionlist(           [], g) = g;
execute_instructionlist((op,args):cdr, g) =
  let new_g = case op of
    OP_X_NULL    => tassign_x_null(pick(args,1),drop(g));
    OP_X_NEW     => tassign_x_new(pick(args,1),drop(g));
    OP_X_Y       => tassign_x_y(pick(args,1),pick(args,2),drop(g));
    OP_X_YSEL    => tassign_x_ysel(pick(args,1),pick(args,2),pick(args,3),drop(g));
    OP_XSEL_NULL => tassign_xsel_null(pick(args,1),pick(args,2),drop(g));
    OP_XSEL_NEW  => tassign_xsel_new(pick(args,1),pick(args,2),drop(g));
    OP_XSEL_Y    => tassign_xsel_y(pick(args,1),pick(args,2),pick(args,3),drop(g));
    OP_XSEL_YSEL => error("OP_XSEL_YSEL should have been normalised already.");
    _            => print(op) print(": ") error("unknown opcode");
  endcase; in
  execute_instructionlist(cdr,lift(new_g));

// -----------------------------------------------------------
// normalisation function, generates the normalisation opcodes
// -----------------------------------------------------------

normalisation_ops::EnumSide,Expression,snum,VarList->InstructionList;
normalisation_ops(Side_LHS, e, 0, tmpvars) = // create fragment as last opcode
  case expr_at(e,0) of
    VarRefExp(_) as ref_x                                   => [(LHS_X, [varref_varid(ref_x)])];
    ArrowExp(VarRefExp(_) as ref_x,VarRefExp(_) as ref_sel) => [(LHS_XSEL, [varref_varid(ref_x),varref_varid(ref_sel)])];
    DotExp(PointerDerefExp(_),VarRefExp(_) as ref_sel)      => [(LHS_XSEL, [pick(tmpvars,1),varref_varid(ref_sel)])];
    ex                                                      => print(expr_asttext(ex)) print(": ") error("unhandled lhs expression");
  endcase;

normalisation_ops(Side_RHS, e, 0, tmpvars) = // create fragment as last opcode
  case expr_at(e,0) of
    VarRefExp(_) as ref_x                                   => [(RHS_Y,    [varref_varid(ref_x)])];
    ArrowExp(VarRefExp(_) as ref_x,VarRefExp(_) as ref_sel) => [(RHS_YSEL, [varref_varid(ref_x),varref_varid(ref_sel)])];
    DotExp(PointerDerefExp(_),VarRefExp(_) as ref_sel)      => [(RHS_YSEL, [pick(tmpvars,1),varref_varid(ref_sel)])];

    NewExp(_,_,_)                                           => [(RHS_NEW,  [])];
    IntVal(_)                                               => [(RHS_NULL, [])];
    BoolValExp(_)                                           => [(RHS_NULL, [])];

    EqualityOp(_,_)                                         => [(RHS_NULL, [])];

    SubtractOp(_,_)                                         => [(RHS_NULL, [])];
    AddOp(_,_)                                              => [(RHS_NULL, [])];
    DivideOp(_,_)                                           => [(RHS_NULL, [])];
    MultiplyOp(_,_)                                         => [(RHS_NULL, [])];

    CastExp(inner_e,_)                                      => normalisation_ops(Side_RHS, inner_e, 0, tmpvars);
    AssignInitializer(inner_e)                              => normalisation_ops(Side_RHS, inner_e, 0, tmpvars);

    /* 
      for thesis: abort, flag error for all expressions that are not
                  explicitly covered by this normalisation function

      more practical: cover relevant pointer expressions, assign NULL
                      in all other cases. then the analysis won't
                      quit every time an new expression is encountered

                      see analyzer/astaccess/satire/syn
                      to identify "relevant" expressions
    */
    ex                                                      => print(expr_asttext(ex)) print(": ") error("unhandled rhs expression");
  endcase;

normalisation_ops(side,_,0,_) =
  print(side) print(": ") error("unknown EnumSide value.");

normalisation_ops(side, e, e_cursor, tmpvars) = // create opcodes for normalisation steps
  let tmp = pick(tmpvars,e_cursor); in
  case expr_at(e,e_cursor) of
    ArrowExp(VarRefExp(_) as ref_x,VarRefExp(_) as ref_sel) => [(OP_X_YSEL, [tmp,varref_varid(ref_x),varref_varid(ref_sel)])];       // $tmp = x.sel
    DotExp(PointerDerefExp(_),VarRefExp(_) as ref_sel)      => [(OP_X_YSEL, [tmp,pick(tmpvars,e_cursor+1),varref_varid(ref_sel)])];  // $tmp = $prev_tmp.sel
    ex                                                      => print(expr_asttext(ex)) print(": ") error("unhandled expression");
  endcase ++ normalisation_ops(side, e, e_cursor - 1, tmpvars);

// ----------------------------------------------------------
// cleanup function generates opcodes that remove temporaries
// ----------------------------------------------------------

cleanup_ops::VarList->InstructionList;
cleanup_ops([])       = [];
cleanup_ops(var:rest) = [(OP_X_NULL, [var])] ++ cleanup_ops(rest);

// ------------------------------
// normalisation helper functions
// ------------------------------

// allocates typed temporary variables for nested expressions
allocate_tmpvars::Expression,snum->VarList;
allocate_tmpvars(_,0) = [];
allocate_tmpvars(e,e_cursor) = allocate_tmpvars(e,e_cursor - 1) ++ [ add_tmpvarid_like_expr(expr_at(e,e_cursor)) ];

// creates tmpvar with same type as given variable (x)
add_tmpvarid_like_varid::VariableId->VariableId;
add_tmpvarid_like_varid(var) = add_tmpvarid(exprid_typeid(varid_exprid(var)));

// creates tmpvar with same type as given expression (x.sel)
add_tmpvarid_like_expr::Expression->VariableId;
add_tmpvarid_like_expr(expr) = add_tmpvarid(type_typeid(expr_type(expr)));

pick::VarList,snum->VariableId;
pick(     [],_) = error("pick below lower bound.");
pick(     _, 0) = error("pick above upper bound.");
pick(car:cdr,1) = car;
pick(car:cdr,n) = pick(cdr, n - 1);

pick_arg::Instruction,snum->VariableId;
pick_arg((_,args),i) = pick(args,i);

min::snum,snum->snum;
min(a,b) = if a < b then a else b endif;

// 0 for (x) and (x.sel)
// higher numbers for more nested expressions
expr_depth::Expression->snum;
expr_depth(e) = case e of
    ArrowExp(VarRefExp(_),VarRefExp(_)) => 0;
    ArrowExp(child,_) => 1 + expr_depth(child);
    DotExp(PointerDerefExp(child),_) => 1 + expr_depth(child);
    _ => 0;
endcase;

// returns the expression at the given depth. 0 is outermost expression
expr_at::Expression,snum->Expression;
expr_at(e,nesting_level) =
  let descending_steps = min(nesting_level, expr_depth(e)); in
  rec_expr_at(e, descending_steps);

rec_expr_at::Expression,snum->Expression;
rec_expr_at(e,0) = e;
rec_expr_at(DotExp(PointerDerefExp(child),_),descending_steps) = rec_expr_at(child, descending_steps - 1);
rec_expr_at(ArrowExp(child,_),descending_steps) = rec_expr_at(child, descending_steps - 1);

// returns innermost expression
expr_innermost::Expression->Expression;
expr_innermost(e) = expr_at(e, expr_depth(e));

