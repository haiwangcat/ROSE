// common TRANSFER matcher for shape analyses

// Author: Viktor Pavlu
// E-mail: e0425543@student.tuwien.ac.at
// Year  : 2006, 2007, 2008

// assignments
ExprStatement(AssignOp(lhs,rhs) as e),_:
  simple_gc(assign(lhs,rhs,@));

// scope
DeclareStmt(VariableSymbol(var) as varsym,type),_: @;
UndeclareStmt(local_vars),_:
  simple_gc(delete_vars(@, local_vars));

// before procedure call: $arg = expr
ArgumentAssignment(lhs,rhs),_: simple_gc(assign(lhs,rhs,@));

// local_edge: from Call to Return
FunctionCall(fn,vars),local_edge: bot;

// call_edge: from Call to Entry
FunctionCall(fn,vars),call_edge: @;

// start of procedure
FunctionEntry(funcname),_: @;

// at beginning of procedure: localvar = $arg, $arg = null
ParamAssignment(VariableSymbol(_) as sym_var,VariableSymbol(_) as sym_tmp),_:
  let var = varsym_varid(sym_var);
      tmp = varsym_varid(sym_tmp); in
  simple_gc(delete_var(lift(tassign_x_y(var,tmp,drop(@))),tmp));

// end of procedure.
FunctionExit(funcname,local_vars), return_edge: simple_gc(delete_vars(@, local_vars));

// join node for local_edge and call_edge
FunctionReturn(funcname,local_vars), _: simple_gc(delete_vars(@, local_vars));

// after return: $retvar_for_callsite = $retvar, $retvar = null
ReturnAssignment(VariableSymbol(_) as sym_ret,VariableSymbol(_) as sym_tmp),_:
  let ret = varsym_varid(sym_ret);
      tmp = varsym_varid(sym_tmp); in
  simple_gc(delete_var(lift(tassign_x_y(ret,tmp,drop(@))),tmp));




//ExprStatement(_),_: @;
//ScopeStatement(WhileStmt(exprExprStatement)),_: @;
//WhileJoin(),_: @;

// default action
//stmt,edge:
//  print("error ") print(stmt_asttext(stmt)) print(",") print(edge) print(" -- ") error("unhandled statement,edge pair");

stmt,edge: @;
