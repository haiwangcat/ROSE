SYNTAX
START:Statement

Statement : ExprStatement ( expression:Expression )
 | LabelStatement (  )
 | CaseOptionStmt ( key:Expression )
 | DefaultOptionStmt (  )
 | BreakStmt (  )
 | ContinueStmt (  )
 | ReturnStmt ( expression:Expression )
 | GotoStatement (  )
 | ForInitStatement ( init_stmt:Statement* )
 | ClinkageStartStatement (  )
 | DeclarationStatement (  )
 | ScopeStatement ( node:ScopeStatementNT )
 | NullStatement (  )
 | DeclareStmt ( var:VariableSymbolNT, type:Type )
 | UndeclareStmt ( vars:VariableSymbolNT* )
 | ExternalCall ( function:Expression, params:VariableSymbolNT*, type:Type )
 | ExternalReturn ( function:Expression, params:VariableSymbolNT*, type:Type )
 | ConstructorCall ( name:aststring, type:Type )
 | DestructorCall ( name:aststring, type:Type )
 | ArgumentAssignment ( lhs:Expression, rhs:Expression )
 | ReturnAssignment ( lhs:VariableSymbolNT, rhs:VariableSymbolNT )
 | ParamAssignment ( lhs:VariableSymbolNT, rhs:VariableSymbolNT )
 | LogicalIf ( condition:Expression )
 | IfJoin (  )
 | WhileJoin (  )
 | FunctionEntry ( funcname:aststring )
 | FunctionExit ( funcname:aststring, params:VariableSymbolNT* )
 | FunctionCall ( funcname:aststring, params:VariableSymbolNT* )
 | FunctionReturn ( funcname:aststring, params:VariableSymbolNT* )
 ;

DeclarationStatement : VariableDeclaration ( variables:InitializedNameNT* )
 | VariableDefinition ( vardefn:InitializedNameNT, bitfield:UnsignedLongValNT )
 | EnumDeclaration (  )
 | AsmStmt ( operands:Expression* )
 | NamespaceDeclarationStatement ( definition:NamespaceDefinitionStatementNT )
 | NamespaceAliasDeclarationStatement (  )
 | UsingDirectiveStatement (  )
 | UsingDeclarationStatement (  )
 | FunctionParameterList ( args:InitializedNameNT* )
 | CtorInitializerList ( ctors:InitializedNameNT* )
 | PragmaDeclaration ( pragma:PragmaNT )
 ;

ScopeStatementNT : Global ( declarations:DeclarationStatement* )
 | IfStmt ( conditional:Statement )
 | ForStatement ( for_init_stmt:ForInitStatementNT, test:Expression, increment:Expression )
 | FunctionDefinition (  )
 | WhileStmt ( condition:Statement )
 | DoWhileStmt ( condition:Statement )
 | SwitchStatement ( item_selector:Statement )
 | CatchOptionStmt ( condition:VariableDeclarationNT )
 | NamespaceDefinitionStatement ( declarations:DeclarationStatement* )
 ;

// GB (2009-06-16): Restored ExprListExp since it can occur inside
// initializer expressions. ExprListExpNT had to go; in a number of places,
// there are Expressions that can only be ExprListExps, but PAG's type
// system is too rigid to express this.
Expression : VarRefExp ( name:aststring )
 | ExprListExp ( expressions:Expression* )
 | ClassNameRefExp (  )
 | FunctionRefExp (  )
 | MemberFunctionRefExp (  )
 | FunctionCallExp ( function:Expression, args:Expression )
 | SizeOfOp ( operand_expr:Expression )
 | ConditionalExp ( conditional_exp:Expression, true_exp:Expression, false_exp:Expression )
 | NewExp ( placement_args:Expression, constructor_args:ConstructorInitializerNT, builtin_args:Expression )
 | DeleteExp ( variable:Expression )
 | ThisExp ( type:Type ) // unused; we have a variable "this" instead
 | RefExp (  )
 | VarArgStartOp ( lhs_operand:Expression, rhs_operand:Expression )
 | VarArgOp ( operand_expr:Expression )
 | VarArgEndOp ( operand_expr:Expression )
 | VarArgCopyOp ( lhs_operand:Expression, rhs_operand:Expression )
 | VarArgStartOneOperandOp ( operand_expr:Expression )
// GB (2008-02-14): Replaced this useless production with the stuff it was
// supposed to expand to.
// | Initializer (  )
 | AggregateInitializer ( initializers:Expression )
// GB (2008-02-14): This node will never appear in the ICFG as the
// constructor call is resolved to a function call.
// | ConstructorInitializer ( args:Expression )
 | AssignInitializer ( operand_i:Expression )
 | BoolValExp ( value:astint )
 | StringVal ( value:aststring )
 | ShortVal ( value:astshort )
 | CharVal ( value:astchar )
 | UnsignedCharVal ( value:astuchar )
 | WcharVal ( value:astulong )
 | UnsignedShortVal ( value:astushort )
 | IntVal ( value:astint )
 | EnumVal ( value:astint )
 | UnsignedIntVal ( value:astuint )
 | LongIntVal ( value:astlong )
 | LongLongIntVal ( value:astllong )
 | UnsignedLongLongIntVal ( value:astullong )
 | UnsignedLongVal ( value:astulong )
 | FloatVal ( value:astfloat )
 | DoubleVal ( value:astdouble )
 | LongDoubleVal ( value:astldouble )
 | ArrowExp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | DotExp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | DotStarOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | ArrowStarOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | EqualityOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | LessThanOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | GreaterThanOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | NotEqualOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | LessOrEqualOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | GreaterOrEqualOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | AddOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | SubtractOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | MultiplyOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | DivideOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | IntegerDivideOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | ModOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | AndOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | OrOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | BitXorOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | BitAndOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | BitOrOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | CommaOpExp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | LshiftOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | RshiftOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | PntrArrRefExp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | ScopeOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | AssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | PlusAssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | MinusAssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | AndAssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | IorAssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | MultAssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | DivAssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | ModAssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | XorAssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | LshiftAssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | RshiftAssignOp ( lhs_operand_i:Expression, rhs_operand_i:Expression )
 | MinusOp ( operand_i:Expression )
 | UnaryAddOp ( operand_i:Expression )
 | NotOp ( operand_i:Expression )
 | PointerDerefExp ( operand_i:Expression )
 | AddressOfOp ( operand_i:Expression )
 | MinusMinusOp ( operand_i:Expression )
 | PlusPlusOp ( operand_i:Expression )
 | BitComplementOp ( operand_i:Expression )
 | CastExp ( operand_i:Expression, type:Type )
 | ThrowOp ( operand_i:Expression )
 | NullExpression (  )
 ;

//PartialFunctionType : PartialFunctionModifierType ( ref_to:ReferenceType, ptr_to:PointerType, modifiers:ModifierNodesNT, typedefs:TypedefSeq, return_type:Type, orig_return_type:Type )
// ;

// GB (2008-02-14): Changed type of initptr from Initializer to Expression
// because the former does not exist anymore as a standalone production.
// Introducing indirection in the form of InitializerNT would have led to a
// *lot* of typing in analysis specifications.
InitializedNameNT : InitializedName ( name:aststring, initptr:Expression )
 ;

UnsignedLongValNT : UnsignedLongVal ( value:astulong )
 ;

NamespaceDefinitionStatementNT : NamespaceDefinitionStatement ( declarations:DeclarationStatement* )
 ;

PragmaNT : Pragma (  )
 ;

ForInitStatementNT : ForInitStatement ( init_stmt:Statement* )
 ;

VariableDeclarationNT : VariableDeclaration ( variables:InitializedNameNT* )
 ;

VariableSymbolNT : VariableSymbol ( name:aststring )
 ;

FunctionSymbolNT : FunctionSymbol ( name:aststring )
 ;

// GB (2009-05-12): There is no node like this, but the location_funcsyms
// support function returns a list of function symbols; this rule makes sure
// that PIG generates code for this type.
FunctionSymbolNTListNT : FunctionSymbolNTList ( fs:FunctionSymbolNT* )
 ;

ConstructorInitializerNT : ConstructorInitializer ( args:Expression )
 ;

Type : ArrayType ( base_type:Type, size:astint )  // size: -1 if unknown!
 | BasicType ( typename:aststring )
 | FunctionType ( return_type:Type, arguments:Type* )
 | NamedType ( name:aststring )
 | PointerType ( base_type:Type )
 | ReferenceType ( base_type:Type )
 | ModifierType ( base_type:Type )
 ;

astint     == snum;
aststring  == str;
astshort   == snum;
astchar    == chr;
astuchar   == chr;
astushort  == unum;
astuint    == unum;
astlong    == snum;
astllong   == snum;
astullong  == unum;
astulong   == unum;
astfloat   == real;
astdouble  == real;
astldouble == real;
