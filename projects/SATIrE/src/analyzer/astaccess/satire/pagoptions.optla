// ---- SATIrE attribute declarations ----
GLOBAL
globals: *VariableSymbolNT #
numtypes: unum #
numexprs: unum #

ROUTINE
procnum: snum #

BLOCK
label: snum #

POSITION
position: snum #
context: ContextInfo #


// ---- dummy problem declaration ----
PROBLEM SATIrE_dummy_analysis
    carrier:    ExpressionId
    direction:  forward
    combine:    satire_dummy_comb
    retfunc:    satire_dummy_comb
    widening:   satire_dummy_wide
    equal:      satire_dummy_eq
    init:       bot
    init_start: bot


// ---- dummy transfer section, never executed ----
TRANSFER
stmt, _:
    println("*** error: executing transfer function for statement '",
            stmt_asttext(stmt),
            "' in SATIrE_dummy_analysis!")
    error("dying");


SUPPORT
// ---- SATIrE auxiliary function declarations ----
extern noprefix   is_unary                 :: Expression -> bool;
extern noprefix   is_binary                :: Expression -> bool;
extern noprefix   is_value                 :: Expression -> bool;
extern noprefix   unary_get_child          :: Expression -> Expression;
extern noprefix   unary_is_prefix          :: Expression -> bool;
extern noprefix   binary_get_left_child    :: Expression -> Expression;
extern noprefix   binary_get_right_child   :: Expression -> Expression;
extern noprefix   is_subtype_of            :: Type, Type -> bool;
extern noprefix   expr_type                :: Expression -> Type;
extern noprefix   global_get_type          :: VariableSymbolNT -> Type;
extern noprefix   global_has_initializer   :: VariableSymbolNT -> bool;
extern noprefix   global_get_initializer   :: VariableSymbolNT -> Expression;
extern noprefix   global_has_defining_declaration
                                           :: VariableSymbolNT -> bool;
extern noprefix   varsym_varid             :: VariableSymbolNT -> VariableId;
extern noprefix   varref_varid             :: Expression -> VariableId;
extern noprefix   expr_exprid              :: Expression -> ExpressionId;
extern noprefix   exprid_expr              :: ExpressionId -> Expression;
extern noprefix   is_tmpvarid              :: VariableId -> bool;
extern noprefix   is_heapvarid             :: VariableId -> bool;
extern noprefix   varid_str                :: VariableId -> str;
extern noprefix   exprid_str               :: ExpressionId -> str;
extern noprefix   varid_exprid             :: VariableId -> ExpressionId;
extern noprefix   type_typeid              :: Type -> TypeId;
extern noprefix   typeid_type              :: TypeId -> Type;
extern noprefix   typeid_str               :: TypeId -> str;
extern noprefix   exprid_typeid            :: ExpressionId -> TypeId;
extern noprefix   add_tmpvarid             :: TypeId -> VariableId;
extern noprefix   is_integer_type          :: Type -> bool;
extern noprefix   stmt_asttext             :: Statement -> str;
extern noprefix   expr_asttext             :: Expression -> str;
extern noprefix   varid_has_location       :: VariableId -> bool;
extern noprefix   varid_has_location_cs :: VariableId, ContextInfo -> bool;
extern noprefix   varid_location           :: VariableId -> Location;
extern noprefix   varid_location_cs  :: VariableId, ContextInfo -> Location;
extern noprefix   exprid_has_location      :: ExpressionId -> bool;
extern noprefix   exprid_location          :: ExpressionId -> Location;
extern noprefix   exprid_location_cs :: ExpressionId, ContextInfo -> Location;
extern noprefix   location_varsyms         :: Location -> *VariableSymbolNT;
extern noprefix   location_funcsyms        :: Location -> *FunctionSymbolNT;
extern noprefix   may_be_aliased           :: Location -> bool;
extern noprefix   is_array_location        :: Location -> bool;
extern noprefix   is_ptr_location          :: Location -> bool;
extern noprefix   dereference              :: Location -> Location;


// ---- dummy combination and equality function declarations ----
satire_dummy_comb :: ExpressionId, ExpressionId -> ExpressionId;
satire_dummy_comb(a, b) = a;
satire_dummy_wide :: ExpressionId, ExpressionId -> ExpressionId;
satire_dummy_wide(a, b) = b;
satire_dummy_eq :: ExpressionId, ExpressionId -> bool;
satire_dummy_eq(a, b) = (a = b);

// vim: syntax=fula
