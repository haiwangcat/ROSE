#!/bin/bash

# Basic test script
# (C) 2007 Adrian Prantl, Viktor Pavlu

FILES=`find tests -name \*.[cC] 2>/dev/null` `find tests -name \*.c[px][px] 2>/dev/null`
CURRENTDIR=`pwd`
ANALYSIS=`basename $CURRENTDIR`

# this is included in front of each command-line
CMDLINE_PREFIX="--output-gdl=test.gdl --output-term=test.pl --analysis-files=all --output-text --gdl-preinfo --gdl-postinfo"
# command-line options with arity 1
UNARY_OPTIONS=""
# command-line options that come in pairs
BINARY_OPTIONS=""

# include custom options, if any
if [ -f runtests.custom ]
then
    tmp_prefix=$CMDLINE_PREFIX
    tmp_unary=$UNARY_OPTIONS
    tmp_binary=$BINARY_OPTIONS
    source runtests.custom
	CMDLINE_PREFIX="$tmp_prefix $CMDLINE_PREFIX"
    UNARY_OPTIONS="$tmp_unary $UNARY_OPTIONS"
    BINARY_OPTIONS="$tmp_binary $BINARY_OPTIONS"
fi

TMPFILE=/tmp/runtests.pag.$RANDOM
CMDFILE=/tmp/runtests.cmd.$RANDOM

rm -f $TMPFILE
rm -f $CMDFILE

# glue BINARY_OPTIONS pairwise together
ARGS="$UNARY_OPTIONS"
prev=""
for tok in $BINARY_OPTIONS; do
    if [ "x$prev" = x ]; then
        prev=$tok
    else
        ARGS="$ARGS $prev:$tok"
        prev=""
    fi
done

# FIXME compute subsets of UNARY_OPTIONS and BINARY_OPTIONS

runAnalysis() {
    opts=$1
	cmd="./$ANALYSIS $file --statistics $CMDLINE_PREFIX ${opts//:/ }" # split binary options again

	printf "$cmd..."
	# execute and time with 'time'
	/usr/bin/time --format="%S %U %e" $cmd 1>/dev/null 2>$TMPFILE

	rc=$?

	time_sys=` cat $TMPFILE | awk 'END {print $1}'`
	time_user=`cat $TMPFILE | awk 'END {print $2}'`
	time_wall=`cat $TMPFILE | awk 'END {print $3}'`

	echo " done in $time_wall secs."

	if [ $rc -eq 127 ]; then
		cat $TMPFILE
		exit 127
	fi
	if [ $rc -eq 0 ]; then
		time_pag_run=` cat $TMPFILE | awk '/analyzer done in .* sec/ {print $5;exit}'`
		time_pag_init=`cat $TMPFILE | awk '/initalizing/ {gsub("sec",""); print $1; exit}'`  # initalizing(!)
		time_pag_iter=`cat $TMPFILE | awk '/initalizing/ {gsub("sec",""); print $3; exit}'`  # initalizing(!)
		time_pag_gc=`  cat $TMPFILE | awk '/garbage collection/ {gsub("s garbage",""); print $1; exit}'` 
		mem_allocd=`   cat $TMPFILE | awk '/allocated/ {gsub("MB",""); print $1; exit}'`
	else
		time_pag_run=0
		time_pag_init=0
		time_pag_iter=0
		time_pag_gc=0
		mem_allocd=0
	fi

	# verbose output for script development (will also be displayed in statistics at end)
	# echo " pag_run = $time_pag_run"
	# echo "pag_init = $time_pag_init"
	# echo "pag_iter = $time_pag_iter"
	# echo "  pag_gc = $time_pag_gc"
	# echo "     mem = $mem_allocd"
	# echo "     sys = $time_sys"
	# echo "    user = $time_user"
	# echo "    wall = $time_wall"
	
	# append to report file
	printf "$rc\t$time_sys\t$time_user\t$time_wall\t$time_pag_run\t$time_pag_init\t$time_pag_iter\t$time_pag_gc\t$mem_allocd\t$cmd\n" >> $CMDFILE
}

for file in $FILES; do
    # echo "--- testing $ANALYSIS on file $file ---"
    # for each option
    for argset in $ARGS; do
	    runAnalysis $argset
    done 
	# even no options (only the prefix)
	if [ "x$ARGS" = x ]; then
	    runAnalysis ""
	fi
done

# create report  script
AWKFILE=/tmp/runtests.awk.$RANDOM
cat >$AWKFILE <<EndOfAWK
BEGIN {
    min_time_user  = 9999
    min_time_wall  = 9999
    min_time_pag   = 9999
    min_mem_allocd = 9999
}
{
    time_sys      += \$2
    time_user     += \$3
    time_wall     += \$4
    time_pag_run  += \$5
    time_pag_init += \$6
    time_pag_iter += \$7
    time_pag_gc   += \$8
    mem_allocd    += \$9

    min_time_user = min_time_user < \$3 ? min_time_user : \$3
    max_time_user = max_time_user > \$3 ? max_time_user : \$3

    min_time_wall = min_time_wall < \$4 ? min_time_wall : \$4
    max_time_wall = max_time_wall > \$4 ? max_time_wall : \$4

    min_time_pag  = min_time_pag < \$5 ? min_time_pag : \$5
    max_time_pag  = max_time_pag > \$5 ? max_time_pag : \$5

    min_mem_allocd  = min_mem_allocd < \$9 ? min_mem_allocd : \$9
    max_mem_allocd  = max_mem_allocd > \$9 ? max_mem_allocd : \$9

    i++
}
END {
    if (i == 0) {
        min_time_wall  = max_time_wall  = time_wall = 0;
        min_time_user  = max_time_user  = time_user = 0;
        min_time_pag   = max_time_pag   = time_pag_run = 0;
        min_mem_allocd = max_mem_allocd = mem_allocd = 0;
        i = 1;
    }
    printf "%st_wall   min avg max = %f %f %f secs\n", prefix, min_time_wall,  time_wall    / i, max_time_wall
    printf "%st_user   min avg max = %f %f %f secs\n", prefix, min_time_user,  time_user    / i, max_time_user
    printf "%st_pag    min avg max = %f %f %f secs\n", prefix, min_time_pag,   time_pag_run / i, max_time_pag
    printf "%salloc'd  min avg max = %f %f %f MB\n",   prefix, min_mem_allocd, mem_allocd   / i, max_mem_allocd
}
EndOfAWK

OUTPUT_COLUMNS_SUCCESS="\$4,\$3,\$5,\$9,\$10"
OUTPUT_HEADERS_SUCCESS="t_wall\tt_user\tt_pag\talloc'd\tcommandline"
OUTPUT_COLUMNS_FAILURE="\$10"
OUTPUT_HEADERS_FAILURE="commandline"

echo "########################################################################"
echo "# SATIrE automagic test report, `date`"
echo "########################################################################"
echo

TOTAL=`cat $CMDFILE |wc -l`
GOOD=`awk 'BEGIN{s=0}($1==0){s++}END{print s}' $CMDFILE ` 
BAD=` awk 'BEGIN{s=0}($1!=0){s++}END{print s}' $CMDFILE ` 
GOOD_PERC=`echo scale=2\; $GOOD*100/$TOTAL|bc`
BAD_PERC=`echo scale=2\; $BAD*100/$TOTAL|bc`

echo "--- [$GOOD/$TOTAL] succeeded ($GOOD_PERC%) ---"
if [ "$GOOD" != "0" ]; then
    printf "$OUTPUT_HEADERS_SUCCESS\n"
    awk "BEGIN{FS=\"\\t\"; OFS=\"\\t\"}(\$1==0){print $OUTPUT_COLUMNS_SUCCESS}" $CMDFILE
fi

echo "--- [$BAD/$TOTAL] failed ($BAD_PERC%) ---"
if [ "$BAD" != "0" ]; then
    printf "$OUTPUT_HEADERS_FAILURE\n"
    awk "BEGIN{FS=\"\\t\"; OFS=\"\\t\"}(\$1!=0){print $OUTPUT_COLUMNS_FAILURE}" $CMDFILE
fi

echo "--- $ANALYSIS runtests statistics ---" 
awk '($1==0){print $0}' $CMDFILE | awk -v prefix="" -f $AWKFILE
# awk '($1!=0){print $0}' $CMDFILE | awk -v prefix="failed " -f $AWKFILE
awk '{s+=$4}END{printf "total t_wall: %s secs",s}' $CMDFILE

rm -f $TMPFILE
rm -f $CMDFILE
rm -f $AWKFILE

echo
echo "########################################################################"

if [ "$BAD" != "0" ]; then
  # GB (2008-07-15): Added the use of this environment variable to make sure
  # that we can run noninteractive tests.
    if [ x$SATIRE_BATCH_TESTING != xtrue ]; then
        echo "Press <Ctrl-C> to abort or <Return> to continue"
        read
    else
      # There is a problem, and we are running batch tests: die!
        exit 1
    fi
fi

# vim: ts=4 sts=4 sw=4:
