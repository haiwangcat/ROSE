// Copyright 2005,2006,2007 Markus Schordan, Gergo Barany
// $Id: pigparser.y++,v 1.2 2008-11-04 10:04:27 gergo Exp $

// MS230107: replaced yyin with synin

%token ID
%token NUM
%token STR
%token PERCENT
%token CSOURCE
%token EXTERN_C
%token PER_CONSTRUCTOR
%token LIST
%token MACRO
%token HEAD
%token BODY

%start specfile

%{
#include <limits.h>
#include <stdio.h>
#include <ctype.h>
#include <cstring>

#include <iostream>
#include <fstream>
#include <vector>
#include <utility>

#include "spec.h"
#include "Rule.h"
#include "yystype.h"
#include "GrammarIr.h"
#include "generate.h"

extern unsigned long line, col;

GGrammar* synParse(void);

int yyparse();
int yylex();
int yyerror(const char *s);

std::string synfile;
std::string specfile;

std::string hpre, cpre, hpost, cpost;

std::vector<RuleDef *> *ruledefs;
std::vector<std::vector<RuleDef *> *> allrules;
std::string rulename = "";
%}

%type <idstrnum> idorstr idornum ID STR NUM
%type <idstrlist> idorstrlist
%type <code> code CSOURCE ruletype HEAD BODY
%type <rules> head
%type <extern_c> extern_c
%type <per_constructor> per_constructor
%type <islist> listkeyword
%type <macro> macro

%%

specfile    : code code specs code code 
            {
                hpre = $1; cpre = $2; hpost = $4; cpost = $5;
            }
            ;

code        : CSOURCE ;

specs       : PERCENT
            {
                ruledefs = new std::vector<RuleDef *>();
                allrules.push_back(ruledefs);
                rulename = "";
            }
              spec
            | specs PERCENT
            {
                ruledefs = new std::vector<RuleDef *>();
                allrules.push_back(ruledefs);
                rulename = "";
            }
              spec
            ;

spec        : extern_c per_constructor listkeyword macro head code
            {
                for (std::vector<Rule *>::iterator i = (*$5).begin();
                    i != (*$5).end(); ++i)
                {
                    RuleDef *r = new RuleDef(*i, splice(std::string($6)));
                    ruledefs->push_back(r);
                }
                (*ruledefs)[0]->first->extern_c = $1;
                (*ruledefs)[0]->first->per_constructor = $2;
                (*ruledefs)[0]->first->islist = $3;
                (*ruledefs)[0]->first->macro = $4;
            }
            | spec head code
            {
                for (std::vector<Rule *>::iterator i = (*$2).begin();
                    i != (*$2).end(); ++i)
                {
                    RuleDef *r = new RuleDef(*i, splice(std::string($3)));
                    ruledefs->push_back(r);
                }
            }
            ;

extern_c    : { $$ = false; }
            | EXTERN_C { $$ = true; }
            ;

per_constructor
            : { $$ = false; }
            | PER_CONSTRUCTOR { $$ = true; }
            ;

listkeyword : { $$ = false; }
            | LIST { $$ = true; }
            ;

macro       : { $$ = false; }
            | MACRO { $$ = true; }
            ;

ruletype    : HEAD
            | BODY
            ;

head        : ID ':' ruletype '(' ID ',' /* node first */
                     idorstr ',' /* type */
                     idorstrlist ',' /* constructor */
                     idornum ',' /* constructor index */
                     idorstr ',' /* field */
                     idornum ',' /* field index */
                     idorstr ')' /* field type */
            {
                if (rulename == "")
                {
                    rulename = $1.id;
                }
                else if (rulename != $1.id)
                {
                    std::cerr << specfile << ":"
                        << $1.line << ":" << $1.col << ": "
                        << "warning: rule name " << $1.id
                        << " used in section " << rulename
                        << std::endl;
                }
                else if (strcmp($3, "body") != 0)
                {
                    std::cerr << specfile << ":"
                        << $1.line << ":" << $1.col << ": "
                        << "warning: " << rulename << ":"
                        << $3 << " should be called " << rulename
                        << ":body" << std::endl;
                }
                $$ = new std::vector<Rule *>();
                for (std::vector<struct isn>::iterator i = $9->begin();
                    i != $9->end(); ++i)
                {
                    $$->push_back(new Rule(std::string($1.id),
                        std::string($5.id), $7, *i, $11, $13, $15, $17));
                }
            }
            ;

idornum     : ID    { $$ = $1; }
            | NUM   { $$ = $1; }
            | '_'   { $$.type = T_ID; $$.id = "_"; }
            ;

idorstr     : ID
            | STR
            | '_'   { $$.type = T_ID; $$.id = "_"; }
            ;

idorstrlist : idorstr
            {
                $$ = new std::vector<struct isn>();
                $$->push_back($1);
            }
            | idorstrlist '|' idorstr { $1->push_back($3); $$ = $1; }
            ;

%%

int yyerror(const char *s)
{
    if (yychar < UCHAR_MAX && isprint(yychar))
        printf("%s: syntax error: line %lu, col %lu, '%c' (%d): %s\n",
	        specfile.c_str(), line, col, yychar, yychar, s);
    else
        printf("%s: syntax error: line %lu, col %lu, token %d: %s\n",
                specfile.c_str(), line, col, yychar, s);
    exit(2);
}

void outfile(std::ofstream &outfile, bool flag);
void usage();

int main(int argc, char *argv[])
{
    extern FILE *pigin;
    extern FILE *synin;
    int c;
    bool preprocess_code = false;
    bool ignore_multiples = false;

    while ((c = getopt(argc, argv, "ip")) != -1)
    {
        if (c == 'p')
            preprocess_code = true;
        else if (c == 'i')
            ignore_multiples = true;
        else
        {
            usage();
            exit(1);
        }
    }
    if (argv[optind] == NULL || argv[optind+1] == NULL)
    {
        usage();
        exit(1);
    }
    synfile = argv[optind];
    specfile = argv[optind+1];
    
    int errno;
    errno = 0;
    if ((synin = fopen(synfile.c_str(), "r")) == NULL)
    {
        std::cerr << "pig: could not open file '" << synfile << "'";
        if (errno != 0)
            std::cerr << ": " << strerror(errno) << std::endl;
        else
            std::cerr << std::endl;
        return 1;
    }
    errno = 0;
    if ((pigin = fopen(specfile.c_str(), "r")) == NULL)
    {
        std::cerr << "pig: could not open file '" << specfile << "'";
        if (errno != 0)
            std::cerr << ": " << strerror(errno) << std::endl;
        else
            std::cerr << std::endl;
        return 1;
    }

    int parse = pigparse();
    fclose(pigin);

    if (parse == 0)
    {
        GGrammar *synfile = synParse(); // different function than synparse()
        if (synfile != NULL)
        {
            generateEverything(synfile, allrules, preprocess_code,
                hpre, cpre, hpost, cpost, ignore_multiples);
            fclose(synin);
        }
        else
        {
            printf("Parsing of syn file failed.\n");
            fclose(synin);
            return 2;
        }
    }
    else
    {
        printf("Parsing of pig file failed.\n");
        return 2;
    }
}

void outfile(std::ofstream &outfile, bool macro)
{
    unsigned int i;

    std::vector<std::vector<RuleDef *> *>::iterator pos = allrules.begin();
    while (pos != allrules.end())
    {
        std::vector<RuleDef *>::const_iterator posi = (*pos)->begin();

        RuleDef *head = (*posi);
        ++posi;
/* printing macros:
        hfile &&  hfmacro: print it
        hfile && !hfmacro: print prototype
       !hfile &&  hfmacro: print empty macro definition
       !hfile && !hfmacro: print function definition
*/
        if (macro && head->first->macro)
        {
            i = 0;
            while (posi != (*pos)->end())
            {
                outfile << head->first->macrohead(i++) << '\\' << std::endl
                    << head->second << '\\' << std::endl << (*posi)->second
                    << std::endl;
                ++posi;
            }
        }
        else if (macro && !head->first->macro)
        {
            i = 0;
            while (posi != (*pos)->end())
            {
                outfile << head->first->macrohead(i++) << '\\'
                    << std::endl << head->second << ';' << std::endl;
                ++posi;
            }
        }
        else if (!macro && head->first->macro)
        {
            i = 0;
            while (posi != (*pos)->end())
            {
                outfile << head->first->macrohead(i++) << std::endl;
                ++posi;
            }
        }
        else if (!macro && !head->first->macro)
        {
            i = 0;
            while (posi != (*pos)->end())
            {
                outfile << head->first->macrohead(i++) << '\\' << std::endl
                    << head->second << '\\' << std::endl << (*posi)->second
                    << std::endl;
                ++posi;
            }
        }
        outfile << std::endl;
        ++pos;
    }
}

void usage()
{
    std::cerr << "usage: pig [options] <syn-file> <spec-file>"
        << std::endl
        << "options:" << std::endl
        << "\t-i: dont't warn about ('ignore') multiple matches" << std::endl
        << "\t-p: preprocess generated macros" << std::endl;
}
