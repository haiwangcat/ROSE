%{
// Copyright 2005,2006,2007 Markus Schordan, Gergo Barany
// $Id: pigscanner.l++,v 1.1 2007-09-20 09:25:32 adrian Exp $

#include <string.h>
#include <stdlib.h>
#include <iostream>

#include "yystype.h"
#include "pigparser.h"
#include "spec.h"

#define COL (col += yyleng)
#define input yyinput
%}

digit       [0-9]
hexdigit    [0-9A-Fa-f]
octdigit    [0-7]
letter      [A-Za-z]

id          {letter}({letter}|{digit}|_)*
num         {digit}+

    unsigned long line = 1;
    unsigned long col = 1;
    std::string code;

%%

extern_c    return EXTERN_C;
per_constructor return PER_CONSTRUCTOR;
list        return LIST;
macro       return MACRO;
head        piglval.code = "head"; return HEAD;
body        piglval.code = "body"; return BODY;
{id}        {
            COL;
            piglval.idstrnum.type = T_ID;
            piglval.idstrnum.id = strdup(yytext);
            piglval.idstrnum.line = line;
            piglval.idstrnum.col = col;
            return ID;
            }
{num}       {
            COL;
            piglval.idstrnum.type = T_NUM;
            piglval.idstrnum.num = strtoul(yytext, NULL, 10);
            piglval.idstrnum.line = line;
            piglval.idstrnum.col = col;
            return NUM;
            }
\"[^"]*\"   {
            COL;
            piglval.idstrnum.type = T_STR;
            piglval.idstrnum.str = strdup(yytext+1);
            piglval.idstrnum.str[strlen(piglval.idstrnum.str)-1] = '\0';
            piglval.idstrnum.line = line;
            piglval.idstrnum.col = col;
            return STR;
            }
"%%"        COL; return PERCENT;
"%{"        {
            int c;

            yytext[yyleng] = '\0';
            yyleng = 0;
            code = "";
            while (1)
            {
                while ((c = input()) != 0 && c != '}')
                {
                    if (c == '\n')
                    {
                        if (code != "")
                            code += c;
                        line++;
                        col = 1;
                    }
                    else
                    {
                        code += c;
                        col++;
                    }
                }
                if (c == '}' && code[code.length()-1] == '%')
                {
                    col++;
                    code.erase(code.length()-1, 1);
                    while (code[code.length()-1] == '\n')
                        code.erase(code.length()-1, 1);
                    piglval.code = strdup(code.c_str());
                    return CSOURCE;
                }
                else if (c == 0)
                {
                    REJECT;
                }
                else
                {
                    col++;
                    code += c;
                }
            }
            }
"//".*      ;
"/*"        {
            int c, last = 0;

            yytext[yyleng] = '\0';
            yyleng = 0;
            code = "";
            while (1)
            {
                while ((c = input()) != 0 && c != '/')
                {
                    if (c == '\n')
                    {
                        line++;
                        col = 1;
                    }
                    else
                    {
                        col++;
                    }
                    last = c;
                }
                if (c == '/' && last == '*')
                {
                    col++;
                    break;
                }
                else if (c == 0)
                {
                    REJECT;
                }
                else
                {
                    col++;
                }
            }
            }
[(),_:|]    COL; return yytext[0];
\n          col = 1; line++;
[ \t]       COL;
.           {
            printf("lexical error: line %lu, col %lu, '%c'\n",
                line, col, yytext[0]);
            exit(1);
            }

%%

int pigwrap(void)
{
    return 1;
}
