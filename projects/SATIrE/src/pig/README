This is pig, the PAG Interface Generator.

The directory grato must be available in the same directory as pig.
Running make here requires that a makefile is available at ../grato/Makefile


Please type make.


The rest of this README file is out of date, several things have
changed. DON'T READ IT.

To build pig, type
    make
and ignore the warnings emitted during compilation. This creates the
executable pig used to generate code from interface specifications.

pig takes two file names as arguments. The first is the syn file
describing the structure of the abstract syntax trees; since real
syn file parsing is not built into pig yet, this is just a series of
macro calls to be expanded by the C preprocessor for now.
The second argument is the specification file that tells pig which
functions or macros to define and how.

In the specification file, C code blocks are enclosed in %{ %}. The
file begins with two such blocks, continues with an arbitrary number
of function specifications (each introduced by the token %%), and
ends in two more C blocks. The first two such blocks contain code
that is to be copied verbatim to the beginning of the syntree.h and
syntree.c files, in this order; the last two blocks contain code for
the ends of syntree.h and syntree.c. The code inbetween is generated
by pig.

The specification for function foo begins with a definition for
foo_head, optionally preceded by the macro keyword, and any number
of foo_body clauses, each taking variables or constants as
arguments and having a C block as their body. An example (taken from
clax.pig in the examples directory) looks like this:
    %%
    macro get_head(NODE, TYPE, CONSTR, _, FIELD, FIELDI, _)
    %{
    PIG_define TYPE##_##CONSTR##_get_##FIELD(NODE)
    %}

    get_body(NODE, _, _, _, _, FIELDI, _)
    %{
        (tree_get_son((NODE), FIELDI))
    %}
Any identifier is a variable (_ is the anonymous variable),
constants are numeric constants or identifiers enclosed in double
quotes. ## is the C preprocessor's token pasting operator.
In the example, a pattern for macros is defined. When this pattern
is instantiated with certain values, the head and a matching body
are instantiated and pasted together onto a single line. For
instance, instantiating this with TYPE="Program", CONSTR="M_Program",
FIELD="name", FIELDI=0 yields (replacing PIG_define by #define, as
pig does) the C macro
    #define Program_M_Program_get_name(NODE) (tree_get_son((NODE),0)

Macros can be specialized if not all AST accesses are of the same
form. For example, one might additionally define
    get_body(NODE, "DWIM", _, _, 3, _, _)
    %{
        /* special access method */
    %}
if the third field of "DWIM" nodes must be accessed in some special
way.

Given the syn and spec files, pig produces two files syntree.h and
syntree.c (currently named pig_syntree.* and accompanied by
temporary files pig_temp_* that might be useful for debugging pig).
These files contain the code given by the user in the verbatim C
code blocks as well as:
    - a definition for each macro and a prototype for each function
      defined by the syn and spec files (in the .h file), and
    - macro definitions and invocations that expand to the function
      definitions specified by the syn and spec files (in the .c
      file).
Alternatively, the .c file can be made to contain not macros but
real function definitions. This is achieved by using pig's -p flag,
telling it to run the C preprocessor on this portion of the file.

The C code in the verbatim blocks an the beginning and end of the
spec file can be arbitrary code as long as it does not contain the
characters %}. (Later versions of pig will be smart enough to ignore
these inside strings or comments.)
The code for function/macro heads/bodies has the additional
restrictions that PIG_define must be used instead of #define and
that the code must be suitable for splicing onto a single logical
line; in particular, this excludes most preprocessor trickery.

A simple example for the CLAX language can be found in the examples
directory; just type
    pig syn clax.pig
or
    pig -p syn clax.pig
and inspect and compare the results.
The clax.pig file describes all patterns needed for the CLAX
language, while the (hand-written) syn file contains just a small
part of the many macro invocations needed to create all function or
macro instances. Once pig is capable of really parsing syn files, a
large amount of code will be generated automatically.
