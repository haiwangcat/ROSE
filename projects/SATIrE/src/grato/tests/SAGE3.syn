// Abstract C++ Attribute Grammar 
SYNTAX
START: SgNode
SgNode : SgSupport
    | SgLocatedNode
    | SgSymbol
    ;
SgSupport : SgName  (  ) 
    | SgSymbolTable  (  ) 
    | SgInitializedName  ( initptr:SgInitializer ) 
    | SgFile  ( root:SgGlobal ) 
    | SgProject  ( fileList:SgFile ) 
    | SgOptions  (  ) 
    | SgBaseClass  ( base_class:SgClassDeclaration ) 
    | SgTemplateParameter  ( expression:SgExpression, defaultExpressionParameter:SgExpression, templateDeclaration:SgTemplateDeclaration, defaultTemplateDeclarationParameter:SgTemplateDeclaration ) 
    | SgTemplateArgument  ( expression:SgExpression, templateInstantiation:SgTemplateInstantiationDecl ) 
    | SgFunctionParameterTypeList  (  ) 
    | SgAttribute
    | SgModifier
    ;
SgAttribute : SgPragma  (  ) 
    | SgBitAttribute
    ;
SgBitAttribute : SgFuncDecl_attr  (  ) 
    | SgClassDecl_attr  (  ) 
    ;
SgModifier : SgModifierNodes  (  ) 
    | SgConstVolatileModifier  (  ) 
    | SgStorageModifier  (  ) 
    | SgAccessModifier  (  ) 
    | SgFunctionModifier  (  ) 
    | SgUPC_AccessModifier  (  ) 
    | SgSpecialFunctionModifier  (  ) 
    | SgElaboratedTypeModifier  (  ) 
    | SgLinkageModifier  (  ) 
    | SgBaseClassModifier  (  ) 
    | SgDeclarationModifier  (  ) 
    ;
SgLocatedNode : SgStatement
    | SgExpression
    ;
SgStatement : SgExprStatement  ( expression_root:SgExpressionRoot ) 
    | SgLabelStatement  (  ) 
    | SgCaseOptionStmt  ( key_root:SgExpressionRoot, body:SgBasicBlock ) 
    | SgTryStmt  ( body:SgBasicBlock, catch_statement_seq_root:SgCatchStatementSeq ) 
    | SgDefaultOptionStmt  ( body:SgBasicBlock ) 
    | SgBreakStmt  (  ) 
    | SgContinueStmt  (  ) 
    | SgReturnStmt  ( expression_root:SgExpressionRoot ) 
    | SgGotoStatement  (  ) 
    | SgSpawnStmt  ( the_func_root:SgExpressionRoot ) 
    | SgForInitStatement  ( init_stmt:SgStatement*  ) 
    | SgCatchStatementSeq  ( catch_statement_seq:SgStatement*  ) 
    | SgClinkageStartStatement  (  ) 
    | SgDeclarationStatement
    | SgScopeStatement
    ;
SgDeclarationStatement : SgVariableDeclaration  ( variables:SgInitializedName*  ) 
    | SgVariableDefinition  ( vardefn:SgInitializedName, bitfield:SgUnsignedLongVal ) 
    | SgEnumDeclaration  (  ) 
    | SgAsmStmt  ( expr_root:SgExpressionRoot ) 
    | SgTemplateDeclaration  (  ) 
    | SgNamespaceDeclarationStatement  ( definition:SgNamespaceDefinitionStatement ) 
    | SgNamespaceAliasDeclarationStatement  (  ) 
    | SgUsingDirectiveStatement  (  ) 
    | SgUsingDeclarationStatement  (  ) 
    | SgFunctionParameterList  ( args:SgInitializedName*  ) 
    | SgCtorInitializerList  ( ctors:SgInitializedName*  ) 
    | SgPragmaDeclaration  ( pragma:SgPragma ) 
    | SgClassDeclaration
    | SgFunctionDeclaration
    ;
SgClassDeclaration : SgTemplateInstantiationDecl  ( definition:SgClassDefinition ) 
    ;
SgFunctionDeclaration : SgTemplateInstantiationFunctionDecl  ( parameterList:SgFunctionParameterList, definition:SgFunctionDefinition ) 
    | SgMemberFunctionDeclaration
    ;
SgMemberFunctionDeclaration : SgTemplateInstantiationMemberFunctionDecl  ( parameterList:SgFunctionParameterList, definition:SgFunctionDefinition, CtorInitializerList:SgCtorInitializerList ) 
    ;
SgScopeStatement : SgGlobal  ( declarations:SgDeclarationStatement*  ) 
    | SgBasicBlock  ( statements:SgStatement*  ) 
    | SgIfStmt  ( conditional:SgStatement, true_body:SgBasicBlock, false_body:SgBasicBlock ) 
    | SgForStatement  ( for_init_stmt:SgForInitStatement, test_expr_root:SgExpressionRoot, increment_expr_root:SgExpressionRoot, loop_body:SgBasicBlock ) 
    | SgFunctionDefinition  ( body:SgBasicBlock ) 
    | SgWhileStmt  ( condition:SgStatement, body:SgBasicBlock ) 
    | SgDoWhileStmt  ( condition:SgStatement, body:SgBasicBlock ) 
    | SgSwitchStatement  ( item_selector_root:SgExpressionRoot, body:SgBasicBlock ) 
    | SgCatchOptionStmt  ( condition:SgVariableDeclaration, body:SgBasicBlock ) 
    | SgNamespaceDefinitionStatement  ( declarations:SgDeclarationStatement*  ) 
    | SgClassDefinition
    ;
SgClassDefinition : SgTemplateInstantiationDefn  ( members:SgDeclarationStatement*  ) 
    ;
SgExpression : SgExprListExp  ( expressions:SgExpression*  ) 
    | SgVarRefExp  (  ) 
    | SgClassNameRefExp  (  ) 
    | SgFunctionRefExp  (  ) 
    | SgMemberFunctionRefExp  (  ) 
    | SgFunctionCallExp  ( function:SgExpression, args:SgExprListExp ) 
    | SgSizeOfOp  ( operand_expr:SgExpression ) 
    | SgConditionalExp  ( conditional_exp:SgExpression, true_exp:SgExpression, false_exp:SgExpression ) 
    | SgNewExp  ( placement_args:SgExprListExp, constructor_args:SgConstructorInitializer, builtin_args:SgExpression ) 
    | SgDeleteExp  ( variable:SgExpression ) 
    | SgThisExp  (  ) 
    | SgRefExp  (  ) 
    | SgVarArgStartOp  ( lhs_operand:SgExpression, rhs_operand:SgExpression ) 
    | SgVarArgOp  ( operand_expr:SgExpression ) 
    | SgVarArgEndOp  ( operand_expr:SgExpression ) 
    | SgVarArgCopyOp  ( lhs_operand:SgExpression, rhs_operand:SgExpression ) 
    | SgVarArgStartOneOperandOp  ( operand_expr:SgExpression ) 
    | SgInitializer
    | SgValueExp
    | SgBinaryOp
    | SgUnaryOp
    ;
SgInitializer : SgAggregateInitializer  ( initializers:SgExprListExp ) 
    | SgConstructorInitializer  ( args:SgExprListExp ) 
    | SgAssignInitializer  ( operand_i:SgExpression ) 
    ;
SgValueExp : SgBoolValExp  (  ) 
    | SgStringVal  (  ) 
    | SgShortVal  (  ) 
    | SgCharVal  (  ) 
    | SgUnsignedCharVal  (  ) 
    | SgWcharVal  (  ) 
    | SgUnsignedShortVal  (  ) 
    | SgIntVal  (  ) 
    | SgEnumVal  (  ) 
    | SgUnsignedIntVal  (  ) 
    | SgLongIntVal  (  ) 
    | SgLongLongIntVal  (  ) 
    | SgUnsignedLongLongIntVal  (  ) 
    | SgUnsignedLongVal  (  ) 
    | SgFloatVal  (  ) 
    | SgDoubleVal  (  ) 
    | SgLongDoubleVal  (  ) 
    ;
SgBinaryOp : SgArrowExp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgDotExp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgDotStarOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgArrowStarOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgEqualityOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgLessThanOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgGreaterThanOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgNotEqualOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgLessOrEqualOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgGreaterOrEqualOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgAddOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgSubtractOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgMultiplyOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgDivideOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgIntegerDivideOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgModOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgAndOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgOrOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgBitXorOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgBitAndOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgBitOrOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgCommaOpExp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgLshiftOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgRshiftOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgPntrArrRefExp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgScopeOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgPlusAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgMinusAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgAndAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgIorAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgMultAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgDivAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgModAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgXorAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgLshiftAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    | SgRshiftAssignOp  ( lhs_operand_i:SgExpression, rhs_operand_i:SgExpression ) 
    ;
SgUnaryOp : SgExpressionRoot  ( operand_i:SgExpression ) 
    | SgMinusOp  ( operand_i:SgExpression ) 
    | SgUnaryAddOp  ( operand_i:SgExpression ) 
    | SgNotOp  ( operand_i:SgExpression ) 
    | SgPointerDerefExp  ( operand_i:SgExpression ) 
    | SgAddressOfOp  ( operand_i:SgExpression ) 
    | SgMinusMinusOp  ( operand_i:SgExpression ) 
    | SgPlusPlusOp  ( operand_i:SgExpression ) 
    | SgBitComplementOp  ( operand_i:SgExpression ) 
    | SgCastExp  ( operand_i:SgExpression ) 
    | SgThrowOp  ( operand_i:SgExpression ) 
    ;
SgSymbol : SgVariableSymbol  (  ) 
    | SgClassSymbol  ( declaration:SgClassDeclaration ) 
    | SgTemplateSymbol  ( declaration:SgTemplateDeclaration ) 
    | SgEnumSymbol  ( declaration:SgEnumDeclaration ) 
    | SgEnumFieldSymbol  (  ) 
    | SgLabelSymbol  ( declaration:SgLabelStatement ) 
    | SgDefaultSymbol  (  ) 
    | SgNamespaceSymbol  ( declaration:SgNamespaceDeclarationStatement ) 
    | SgFunctionSymbol
    ;
SgFunctionSymbol : SgMemberFunctionSymbol  ( declaration:SgFunctionDeclaration ) 
    ;
SgPartialFunctionType : SgPartialFunctionModifierType  ( ref_to:SgReferenceType, ptr_to:SgPointerType, modifiers:SgModifierNodes, typedefs:SgTypedefSeq, return_type:SgType, orig_return_type:SgType ) 
    ;

