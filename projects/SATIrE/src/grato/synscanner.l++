/**************************************************************
* Author: Markus Schordan, 2005                               *
**************************************************************/

/**************************
* LEX-SCANNER FOR GRAMMAR *
**************************/

%{
#include <cstdio>
#include <cstdlib>
#include <cstring>

#include "parser_decls.h"
#include "synparser.h"

YY_BUFFER_STATE gInputBuffer;

//static char *lookup(char *);    /* lookup function for identifiers */

%}

%option yylineno
%option noyywrap
%option 8bit
%option noreject
%option never-interactive

digit                   [0-9]
letter                  [a-zA-Z_]
hexdigit                [a-fA-F0-9]
linecomment		\/\/.*
comment         	\/\*([^*]|\*+[^*\/])*\*+\/
opencomment     	\/\*([^*]|\*+[^*\/])*(\**)

%%

"|"			{ return ('|'); }
":"			{ return (':'); }
";"			{ return (';'); }
"("			{ return ('('); }
")"			{ return (')'); }
"*"			{ return ('*'); }
"+"			{ return ('+'); }
"?"			{ return ('?'); }
","			{ return (','); }

"START"			{ return (START); }
"SYNTAX"		{ return (SYNTAX); }
"=="			{ return (EQUAL2); }

{letter}({letter}|{digit})*  { synlval.cstring = strdup(yytext); return IDENT; }
{linecomment}		;
{comment}		;
{opencomment}   	{ printf("scanner failed because of open comment:\"%s\".\n",yytext); exit(1);}


[ \t\r]                      ; /* white space */
\n                           ; 
.                            printf("ERROR 1: Lexical error! : <%s>\n",yytext); exit(1);

%%

void
InitializeLexer(const std::string& tokenizeString)
{
  yylineno = 1;
  const char* inputBytes = tokenizeString.c_str();
  gInputBuffer = yy_scan_bytes(inputBytes, tokenizeString.length());
}

void
FinishLexer()
{
  yy_delete_buffer(gInputBuffer);
}
