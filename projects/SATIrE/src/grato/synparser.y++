// Copyright 2005,2006,2007 Markus Schordan, Gergo Barany
// $Id: synparser.y++,v 1.1 2007-09-20 09:25:32 adrian Exp $

/**************************************************************
* Author: Markus Schordan, 2005                               *
***************************************************************/

%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <fstream>

#include "parser_decls.h"

using namespace std;

GGrammar* result=0;
GEquationList* equList=0;

%}

%union {
  char* cstring;
  RegexOperator regop;
  GSymbolList* s_symbolList;
  GProductionRhsList* gProductionRhsList;
  GProductionRhs* gProductionRhs;
  GProductionList* gProductionList;
  GEquationList* eqs;
  GNonTerminal* gNonTerminal;
}

%type <gProductionRhs> production_rhs
%type <gProductionRhsList> production_rhs_list
%type <gProductionList> production_list productions_section
%type <gNonTerminal> start_section
%type <cstring> terminal nonterminal
%type <regop> regex_operator
%type <s_symbolList> children_list children_list_item

%token '|' ':' ';' '(' ')' '*' '+' '?' ','
%token <cstring> IDENT 
%token START SYNTAX EQUAL2

%start mystart

%%

mystart		: SYNTAX
                  start_section 
                  productions_section 

		{ result=new GGrammar($3,equList,$2); }
		;

start_section	: START ':' nonterminal 
		{ $$=new GNonTerminal($3); }
		;

productions_section: production_list 
		{ 
			$$=$1;
			/*@i @productions_section.eqs@=@production_list.eqs@;*/
		}
		;

production_list	: /* empty */ 
		{ 
			$$=new GProductionList(); 
			equList=new GEquationList();
		}
		| production_list nonterminal ':' production_rhs_list ';'
		{
			$1->push_back(new GProduction(new GNonTerminal($2),$4));
			$$=$1;
		}
		| production_list IDENT EQUAL2 IDENT ';'
		{
		        $$=$1;
			equList->push_back(new GEquation($2,$4));
		}
		;

terminal	: IDENT { $$=$1; }
		;

nonterminal	: IDENT { $$=$1; }
		;

production_rhs_list: production_rhs 
		{ 
			$$=new GProductionRhsList($1); 
		}
		| production_rhs_list '|' production_rhs
		{ 
		  	$1->push_back($3);
			$$=$1;
		}
		;

production_rhs	: nonterminal
		{ 
			$$=new GProductionRhs(new GNonTerminal($1));
		}
		| terminal '(' children_list ')' 
		{ 
			$$=new GProductionRhs(new GTerminal($1,$3));
		}
		;

children_list	: /* empty */
		{
			$$=new list<GSymbol*>();
		}
		| children_list_item
		{
			$$=$1;
		}
		;

children_list_item: IDENT ':' nonterminal regex_operator
		{
			$$=new list<GSymbol*>;
			$$->push_back(new GNonTerminal($1,$3,$4));
		}
		| children_list_item ',' IDENT ':' nonterminal regex_operator
		{
			$$=$1;
			$$->push_back(new GNonTerminal($3,$5,$6));
		}
		;

regex_operator	: /*empty*/ { $$=REGEX_ONE; }
		| '*' { $$=REGEX_STAR; }
	       	| '+' { $$=REGEX_PLUS; }
		| '?' { $$=REGEX_OPT; }
		;

%%

void
synerror(const char* errorMessage)
{
  /* yylineno, errorMessage, yytext */
  fprintf(stderr,"%d: %s at %s\n",synlineno,errorMessage,syntext);
}

GGrammar *synParse(void)
{
    int parseok = !yyparse();
    if (!parseok)
        std::cerr << "syn parsing failed!" << std::endl;

    return result;
}

