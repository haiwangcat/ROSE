--------------
Compiling ARAL
--------------

'make' creates the command 'aral' that allows to parse and re-generate
ARAL files.

'make check' performs a number of checks with the files in the 'tests'
directory.

'make clean' removes all generated files.

This distribution contains of:
aralscanner.l     : Front End (Flex file for lexical analysis)
aralparser.yxx    : Front End (Bison file for syntax analysis and creating
                               the ARAL-IR in memory)
aralparser_decls.h: Header file which is used by scanner and parser.
aralir.h          : ARAL-IR + Visitors + Back End
aralir.C          : ARAL-IR + Visitors + Back End
aral.C            : short main-routine that shows how to use the ARAL-IR
example1.C	  : well-documented example program that shows how to access
                    the information in an ARAL file. It also contains the
		    PointsToInfoCollector visitor, that extracts information
                    from pointsto-analysis-results and prints it.
runtests          : test-script that runs several tests
Makefile          : targets are: 'all' 'clean' 'check'

--------------
ARAL Front End
--------------
To create the ARAL-IR from an ARAL file the parser must be invoked
with Aral::Translator::frontEnd();
If no parse-error occurred, the Front End returns a pointer to the
root of the ARAL-IR of type Aral::Analysis*.
The ARAL-IR, once available in memory, can be deleted by calling
the destructor of the root object. The destructors are implemented to
perform a deep-destruct.

-------
Aral-IR
-------
Every IR node has a method accept(AbstractVisitor& v) that can be used
to invoke a traversal on the ARAL-IR. Three pre-defined Visitors exist.
a) AbstractDataVisitor (only pure abstract methods)
b) EmptyDataVisitor
c) DataToStringVisitor;

ad a)
Each method has 2-3 visit methods.
* preVisitX
* inVisitX
* postVisitX

where X is the name of the resepective ARAL class.

- If a node is a leaf node or has only one child it has a pre and post
visit methods.
- If a node is a container node or has at least two
children it also has an inVisit method.

The Visitor performs a combined pre/in/post order traversal in one pass.

ad b)
Is a visitor that has only empty methods. If you are writing your own
Visitor, you have to implemented a number of visit-methods. In this
case it is best to start with this EmptyVisitor.

ad c)
This is the pre-defined Visitor that generates ARAL, i.e. the ARAL
Back End implementation. It also servers as an example to see how the
Visitor can be used to translate the ARAL-IR to some other format. For
example, instead of generating a string you could map ARAL to your own
internal representation.

All Aral nodes (of type Aral::Data) have the following methods:

std::string toString() : translates the ARAL-IR subtree to Aral-Syntax and
                         returns it as a std::string.

Aral::Data* deepCopy() : clones the ARAL-IR subtree and returns a
                         pointer to the cloned sub tree.
void accept(Aral::AbstractDataVisitor&) : accepts any Visitor class that inherits
                         from AbstractDataVisitor, or EmptyDataVisitor, 
                         or DataToStringVisitor. See above for details.
Data* getParent();     : returns the parent of an ARAL-IR node. The parents are always
                         automatically set internally by operations on the ARAL-IR.

void autoLinkParent(Data*) : for internal use of maintaining parent pointers.
virtual bool isEqual(Data*): for internal use (not finished yet)
bool isLessThan(Data*)     : for internal use (not finished yet)

-------------
ARAL Back End
-------------

The Back End can be invoked by calling Aral::Translator::backEnd(root)
where root is the root node of the ARAL-IR. The Back End is
implemented by calling the toString function on the root object. The
toString function is implemented by using the DataToStringVisitor.
The Back End generates the ARAL file in a fixed layout and returns a
std::string.

