ANALYSIS
IDMAP
map(label, string): {default->"" \ @259->"alf_label_148", @260->"alf_label_147", @264->"alf_label_146", @266->"alf_label_146", @220->"alf_label_141", @219->"alf_label_140", @221->"alf_label_139", @215->"alf_label_137", @216->"alf_label_136", @222->"alf_label_135", @225->"alf_label_134", @227->"alf_label_133", @229->"alf_label_133", @234->"alf_label_131", @235->"alf_label_129", @237->"alf_label_127", @238->"alf_label_128", @241->"alf_label_125", @242->"alf_label_124", @243->"alf_label_123", @244->"alf_label_122", @247->"alf_label_121", @250->"alf_label_119", @251->"alf_label_118", @252->"alf_label_117", @253->"alf_label_116", @254->"alf_label_115", @255->"alf_label_114", @256->"alf_label_113", @257->"alf_label_112", @258->"alf_label_111", @206->"alf_label_108", @204->"alf_label_106", @200->"alf_label_105", @198->"alf_label_101", @196->"alf_label_99", @170->"alf_label_96", @168->"alf_label_94", @171->"alf_label_93", @172->"alf_label_92", @173->"alf_label_91", @174->"alf_label_90", @175->"alf_label_89", @176->"alf_label_88", @177->"alf_label_87", @178->"alf_label_86", @179->"alf_label_85", @180->"alf_label_84", @181->"alf_label_83", @182->"alf_label_82", @183->"alf_label_81", @184->"alf_label_80", @185->"alf_label_79", @186->"alf_label_78", @187->"alf_label_77", @188->"alf_label_76", @189->"alf_label_74", @143->"alf_label_72", @144->"alf_label_72", @147->"alf_label_71", @148->"alf_label_70", @150->"alf_label_69", @151->"alf_label_69", @154->"alf_label_68", @141->"alf_label_66", @162->"alf_label_64", @160->"alf_label_62", @159->"alf_label_61", @161->"alf_label_60", @163->"alf_label_59", @56->"alf_label_57", @67->"alf_label_54", @67->"alf_label_54", @62->"alf_label_52", @63->"alf_label_51", @70->"alf_label_50", @71->"alf_label_49", @74->"alf_label_47", @79->"alf_label_46", @82->"alf_label_44", @81->"alf_label_43", @86->"alf_label_42", @87->"alf_label_41", @91->"alf_label_39", @95->"alf_label_38", @96->"alf_label_37", @97->"alf_label_36", @99->"alf_label_35", @99->"alf_label_35", @105->"alf_label_33", @106->"alf_label_33", @109->"alf_label_32", @110->"alf_label_31", @115->"alf_label_29", @113->"alf_label_27", @116->"alf_label_26", @118->"alf_label_25", @118->"alf_label_25", @121->"alf_label_24", @122->"alf_label_23", @123->"alf_label_22", @124->"alf_label_21", @125->"alf_label_20", @126->"alf_label_19", @127->"alf_label_18", @128->"alf_label_17", @129->"alf_label_16", @46->"alf_label_13", @47->"alf_label_12", @48->"alf_label_11", @44->"alf_label_9", @26->"alf_label_7", @26->"alf_label_7", @29->"alf_label_6", @30->"alf_label_5", @31->"alf_label_4", @32->"alf_label_3", @33->"alf_label_2", @34->"alf_label_1", @36->"alf_label_0", @36->"alf_label_0"};

map(varid, string): {default->"" \ #108->"InBuff::108", #116->"InCnt::116", #104->"OutBuff::104", #112->"apsim_InCnt::112", #181->"apsim_bound111::181", #402->"bits::402", #169->"block_compress::169", #405->"bp::405", #2147483647->"buf::2147483647", #377->"buf::377", #398->"buf::398", #147->"bytes_out::147", #174->"c::174", #2147483647->"c::2147483647", #367->"c::367", #167->"checkpoint::167", #248->"clear_flg::248", #2147483647->"code::2147483647", #381->"code::381", #161->"codetab::161", #105->"comp_text_buffer::105", #117->"count::117", #189->"disp::189", #173->"ent::173", #150->"exit_stat::150", #159->"fcode::159", #456->"force::456", #154->"free_ent::154", #452->"fsize::452", #201->"hshift::201", #2147483647->"hsize::2147483647", #217->"hsize::217", #348->"hsize::348", #193->"hsize_reg::193", #156->"htab::156", #284->"htab_p::284", #127->"i::127", #157->"i::157", #279->"i::279", #370->"i::370", #148->"in_count::148", #437->"lmask::437", #287->"m1::287", #120->"maxbits::120", #236->"maxcode::236", #119->"maxmaxcode::119", #2147483647->"n::2147483647", #371->"n::371", #237->"n_bits::237", #453->"nomagic::453", #252->"offset::252", #457->"ofname::457", #109->"orig_text_buffer::109", #177->"out_count::177", #455->"quiet::455", #425->"r_off::425", #255->"rat::255", #246->"ratio::246", #430->"rmask::430", #132->"seed::132", #144->"tabort::144", #454->"zcat_flg::454"};

RESULT NAME interval
TYPE <tuple(funcid, int(32))>
     map(varid, tuple(lift(int(32)), lift(int(32))))
DATA
END

RESULT NAME pointsto_locations
TYPE location = int(32);
     funcname = string;
     set(tuple(location, list(varid), list(funcname)))
DATA
program noflow {(157,[#127],[]), (156,[#181],[]), (155,[#189],[]), (154,[#279],[]), (153,[],[]), (152,[#284],[]), (151,[#371],[]), (150,[#370],[]), (149,[#255],[]), (148,[#157],[]), (147,[#159],[]), (146,[#437],[]), (145,[#437],[]), (144,[#430],[]), (143,[#430],[]), (142,[#425],[]), (140,[#405],[]), (139,[#402],[]), (138,[#398],[]), (137,[#398],[]), (134,[#370],[]), (133,[#370],[]), (132,[#287],[]), (130,[#284],[]), (129,[#287],[]), (127,[#284],[]), (126,[#279],[]), (125,[#279],[]), (124,[#255],[]), (123,[#252],[]), (122,[#248],[]), (121,[#246],[]), (120,[#237],[]), (119,[#236],[]), (118,[#217],[]), (117,[#201],[]), (116,[#193],[]), (115,[#189],[]), (114,[#181],[]), (113,[#177],[]), (112,[#174],[]), (111,[#173],[]), (110,[#169],[]), (109,[#167],[]), (108,[#161],[]), (107,[#161],[]), (106,[#159],[]), (105,[#157],[]), (104,[#156],[]), (103,[#156],[]), (102,[#154],[]), (101,[#150],[]), (100,[#148],[]), (99,[#147],[]), (98,[#144],[]), (97,[#132],[]), (96,[#127],[]), (95,[#120],[]), (94,[#119],[]), (93,[#117],[]), (92,[#116],[]), (91,[#112],[]), (90,[#109],[]), (89,[#109],[]), (88,[#108],[]), (87,[#105],[]), (86,[#105],[]), (85,[#104],[]), (82,[],["output"]), (80,[],[]), (79,[#381],[]), (78,[],["output"]), (76,[],[]), (75,[#381],[]), (74,[],["writebytes"]), (72,[],[]), (71,[#371],[]), (70,[#377],[]), (69,[],["writebytes"]), (67,[],[]), (66,[#371],[]), (65,[#377],[]), (64,[],["writebytes"]), (62,[],[]), (61,[#371],[]), (60,[#377],[]), (59,[],["putbyte"]), (57,[],[]), (56,[#367],[]), (55,[],["putbyte"]), (53,[],[]), (52,[#367],[]), (51,[],["getbyte"]), (49,[],[]), (48,[],["getbyte"]), (46,[],[]), (45,[],["getbyte"]), (43,[],[]), (42,[],["cl_hash"]), (40,[],[]), (39,[#348],[]), (38,[],["cl_hash"]), (36,[],[]), (35,[#348],[]), (34,[],["cl_hash"]), (32,[],[]), (31,[#348],[]), (30,[],["cl_block"]), (28,[],[]), (27,[],["cl_block"]), (25,[],[]), (24,[],["compress"]), (22,[],[]), (21,[],["compress"]), (19,[],[]), (18,[],["initbuffer"]), (16,[],[]), (15,[],["initbuffer"]), (13,[],[]), (12,[],["main"]), (10,[],[]), (9,[],["main"]), (7,[],[])};
END

RESULT NAME pointsto_relations
TYPE location = int(32);
     points_to = tuple(location, location);
     set(points_to)
DATA
program noflow {(152,153), (145,146), (143,144), (140,138), (137,138), (130,104), (127,104), (107,108), (103,104), (89,90), (88,90), (86,87), (85,87), (82,80), (78,76), (74,72), (70,138), (69,67), (65,138), (64,62), (59,57), (55,53), (51,49), (48,46), (45,43), (42,40), (38,36), (34,32), (30,28), (27,25), (24,22), (21,19), (18,16), (15,13), (12,10), (9,7)};
END

RESULT NAME variable_locations
TYPE location = int(32);
     <tuple(funcid, int(32))>
     set(tuple(varid, location))
DATA
program noflow <(#0,0)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#117,93), (#252,123), (#148,100), (#147,99), (#177,113), (#437,145), (#430,143)},
               <(#1,0)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#132,97), (#127,96), (#144,98), (#252,123), (#148,100), (#147,99), (#177,113), (#437,145), (#430,143)},
               <(#2,0)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#252,123), (#148,100), (#147,99), (#177,113), (#159,106), (#157,105), (#174,112), (#173,111), (#189,115), (#193,116), (#201,117), (#181,114), (#437,145), (#430,143)},
               <(#3,0)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#252,123), (#148,100), (#147,99), (#177,113), (#255,124), (#437,145), (#430,143)},
               <(#4,0)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#252,123), (#148,100), (#147,99), (#177,113), (#348,35), (#284,127), (#279,125), (#287,129), (#437,145), (#430,143)},
               <(#4,1)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#252,123), (#148,100), (#147,99), (#177,113), (#348,39), (#284,130), (#279,126), (#287,132), (#437,145), (#430,143)},
               <(#5,0)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#252,123), (#148,100), (#147,99), (#177,113), (#437,145), (#430,143)},
               <(#5,1)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#252,123), (#148,100), (#147,99), (#177,113), (#437,145), (#430,143)},
               <(#6,0)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#252,123), (#148,100), (#147,99), (#177,113), (#367,56), (#437,145), (#430,143)},
               <(#7,0)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#252,123), (#148,100), (#147,99), (#177,113), (#377,65), (#371,66), (#370,133), (#437,145), (#430,143)},
               <(#7,1)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#252,123), (#148,100), (#147,99), (#177,113), (#377,70), (#371,71), (#370,134), (#437,145), (#430,143)},
               <(#8,0)> {(#237,120), (#120,95), (#236,119), (#119,94), (#217,118), (#154,102), (#150,101), (#169,110), (#248,122), (#246,121), (#167,109), (#116,92), (#112,91), (#108,88), (#104,85), (#109,89), (#105,86), (#156,103), (#161,107), (#398,137), (#127,157), (#252,123), (#148,100), (#147,99), (#177,113), (#159,147), (#157,148), (#189,155), (#181,156), (#255,149), (#284,152), (#279,154), (#371,151), (#370,150), (#437,145), (#430,143), (#381,79), (#425,142), (#402,139), (#405,140)};
END

RESULT NAME callstrings
TYPE callsite = label;
     <tuple(funcid, int(32))>
     list(callsite)
DATA
function("cl_block") noflow <(#3,0)> [@26, @67];
function("cl_hash") noflow <(#4,1)> [@26, @67, @151],
                           <(#4,0)> [@26, @106];
function("compress") noflow <(#2,0)> [@26];
function("getbyte") noflow <(#5,1)> [@26, @118],
                           <(#5,0)> [@26, @99];
function("initbuffer") noflow <(#1,0)> [@36];
function("main") noflow <(#0,0)> [];
function("output") noflow <(#8,0)> [@26, @67, @144];
function("putbyte") noflow <(#6,0)> [@67, @144, @238];
function("writebytes") noflow <(#7,1)> [@67, @144, @266],
                              <(#7,0)> [@67, @144, @229];
END

END
