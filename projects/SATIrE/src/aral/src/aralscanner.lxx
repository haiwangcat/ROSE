/*********************************
* ARAL Scanner                   *
* Author: Markus Schordan, 2009. *
* (C) Markus Schordan            *
**********************************/

%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

#include <string>
#include <cstring>
#include "aralparser_decls.h"
#include "aralparser.h"

//YY_BUFFER_STATE gInputBuffer;

//static char *lookup(char *);    /* lookup function for identifiers */

%}

%option yylineno
%option noyywrap
%option 8bit
%option noreject
%option never-interactive


digit                   [0-9]
letter                  [a-zA-Z_]
hexdigit                [a-fA-F0-9]
single			[{}<>(),;:=+*/%^$-]

%%
"//".*                  ; /* comment */

"ANALYSIS"		{ return ANALYSIS; }
"CONFIG"		{ return CONFIG; }
"MAPPING"|"IDMAP"	{ return MAPPING; }
"RESULT"		{ return RESULT; }
"TYPE"			{ return TYPE; }
"DATA"			{ return DATA; }
"END"			{ return END; }
"NAME"			{ return NAME; }
"noflow"		{ return NOFLOW; }
"pre"			{ return PRE; }
"post"			{ return POST; }
"program"		{ return PROGRAM_LOCSPEC; }
"file"			{ return FILE_LOCSPEC; }
"function"		{ return FUNCTION_LOCSPEC; }

"label"			{ return TYPE_LABEL; }
"tuple"			{ return TYPE_TUPLE; }
"set"			{ return TYPE_SET; }
"map"			{ return TYPE_MAP; }
"list"			{ return TYPE_LIST; }
"lift"			{ return TYPE_LIFT; }
"int"			{ return TYPE_INT; }
"float"			{ return TYPE_FLOAT; }
"string"		{ return TYPE_STRING; }
"progid"		{ return TYPE_PROGID; }
"funcid"		{ return TYPE_FUNCID; }
"stmtid"		{ return TYPE_STMTID; }
"exprid"		{ return TYPE_EXPRID; }
"varid"			{ return TYPE_VARID; }

"default"		{ return DEFAULT; }
"->"			{ return RIGHTARROW; }
"\\"			{ return MAPSEPARATOR; /* deprecated */}
"<="			{ return LT; }
">="			{ return GT; }
"<>"			{ return NEQ; } 
"!="			{ return NEQ; /* deprecated */}
"and"			{ return AND; }
"or"			{ return OR; }
"not"			{ return NOT; }

{single}		{  return *araltext; }
\"[^"\n]**["\n]	{ int slen=strlen(araltext+1); char* snew=(char*)malloc(slen-1+1);strncpy(snew,araltext+1,slen-1);snew[slen-1]=0; arallval.string = snew; return STRING; }
"["			{ return '['; }
"]"			{ return ']'; }

"top"			      { return TOP; }
"bot"			      { return BOT; }
{letter}({letter}|{digit})*  { arallval.idstring = strdup(araltext); /* = lookup(araltext); */ return IDENT; }
{digit}{digit}*              { arallval.intval = atoi(araltext); return INTEGER; }
"@"{digit}{digit}*              { arallval.intval = atoi(araltext+1); return LABEL; }
"#"{digit}{digit}*              { arallval.intval = atoi(araltext+1); return IDCODE; }


[ \t\r]                      ; /* white space */
\n                           ; /* we are using #option yylineno */ 
.                            printf("ERROR 1: Lexical error! : <%s>\n",araltext); exit(1);

%%

#if 0
void
InitializeLexer(const std::string& tokenizeString)
{
  arallineno = 1;
  const char* inputBytes = tokenizeString.c_str();
  gInputBuffer = yy_scan_bytes(inputBytes, tokenizeString.length());
}

void
FinishLexer()
{
  yy_delete_buffer(gInputBuffer);
}
#endif

#if 0
/******************************************************************/
/* hash table management                                          */
/******************************************************************/

#define PRIME 211               /* hash table size */

static struct hash_entry {
   struct hash_entry *link;     /* link to next hash entry */
   char *ident;                 /* identifier */
} *hash_table[PRIME];           /* hash table */

/* 
 * hash function
 * algorithm by P.J.Weinberg
 */

static int hashpjw(char *s)
{
  char *p;
  unsigned h=0, g;

  for(p=s;*p;p++) {
    h = (h << 4)+ (*p);
    if(g=h&0xf0000000) {
      h ^= g>>24;
      h ^= g;
    }
  }
  return h % PRIME;
}

/* 
 * look up a identifier 
 */

char *lookup(char *ident)
{
  struct hash_entry *p;
  int i = hashpjw(ident);

  /* find identifier */
  for(p=hash_table[i];p!=NULL;p=p->link) 
    if(!strcmp(p->ident,ident)) 
      return p->ident; 

  /* no entry found => create new one */
  p = (struct hash_entry *)malloc(sizeof(struct hash_entry));
  assert(p!=NULL);
  p->ident = strdup(ident);
  assert(p->ident != NULL);
  p->link = hash_table[i];
  hash_table[i] = p; 

  return p->ident;
}

#endif
