%{ // -*- C++ -*-
/* 
Copyright 2006 Christoph Bonitz <christoph.bonitz@gmail.com>
     2007-2009 Adrian Prantl <adrian@complang.tuwien.ac.at>
*/
using namespace std;
#include <string>
#include <vector>
#include <iostream> 
#include "termite.h"
#include "termparser.tab.h++"

int colno = 0;

void count() {
  for (int i = 0; yytext[i] != '\0'; i++)
    if (yytext[i] == '\n')
      colno = 0;
    else if (yytext[i] == '\t')
      colno += 8 - (colno % 8);
    else
      colno++;
} 

%}
%option yylineno noyywrap

comment %[^\n]*
singlechar \"\\[0-9][0-9][0-9]\\\"
doublequoted \"([^\"\\]*(\\.[^\"\\]*)*)\"
quoted \'([^\'\\]*(\\.[^\'\\]*)*)\'
variable [A-Z][A-Za-z_]*
int \-?[0-9]+
float \-?[0-9]+\.[0-9]+
atom [a-z][A-Za-z_0-9]*
operator [\-\+\*\/\<\=\>\:\.\#]+

%%

{comment} { count(); }
[ \t\n]   { count(); }

{singlechar} {
          /* MS: FIX: the following comment MUST be a C-multi line comment 
             otherwise the prolog notation example leads to an error in 
             flex 2.5.4 (it did work in flex 2.5.35 as single line comments) */

          /* ISO Prolog insists on quoting Characters as "\123\" 
	     which leads to this strange ambiguity */
          count();
          yytext[5] = 0;
          yylval.intValue = (int)strtol(yytext+2, NULL, 10);
          return(INT);
        }
 
{doublequoted} {
       // FIXME write a more elegant regexp instead
       if ((yyleng > 7) && (yytext[1] == '\\') && 
          (yytext[2] >= '0') && (yytext[2] <= '9') &&
          (yytext[3] >= '0') && (yytext[3] <= '9') &&
          (yytext[4] >= '0') && (yytext[4] <= '9') &&
          (yytext[5] == '\\') && (yytext[6] == '"')) REJECT; // singlechar
 

        count();
        yytext++;
        *(yytext + yyleng - 2) = '\0';
        yylval.strValue = new string(yytext);
	return(STRING);
        }

{quoted} {
       // FIXME write a more elegant regexp instead
       if ((yyleng > 7) && (yytext[1] == '\\') && 
          (yytext[2] >= '0') && (yytext[2] <= '9') &&
          (yytext[3] >= '0') && (yytext[3] <= '9') &&
          (yytext[4] >= '0') && (yytext[4] <= '9') &&
          (yytext[5] == '\\') && (yytext[6] == '\'')) REJECT; // singlechar

        count();
        yytext++;
        *(yytext + yyleng - 2) = '\0';
        yylval.strValue = new string(yytext);
	return(ATOM);
        }

{variable} { count(); yylval.strValue = new string(yytext); return(VARIABLE); }
{int}      { count(); yylval.intValue = atoi(yytext);       return(INT);      }
{float}    { count(); yylval.floatValue = atof(yytext);     return(FLOAT);    }
{atom}     { count(); yylval.strValue = new string(yytext); return(ATOM);     }
{operator} { count(); yylval.strValue = new string(yytext); return(OPERATOR); }
.          { count(); return(yytext[0]); }

%%
