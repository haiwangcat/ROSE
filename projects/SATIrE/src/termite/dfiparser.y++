%{ /* -*- C++ -*-
   Copyright 2008 Adrian Prantl
   see COPYING in the root folder of the SATIrE project
*/
using namespace std;
#include <iostream>  
#include <deque>
#include <string>
#include "termite.h"

extern int   dfilex();
extern char* dfitext;
extern int   dfilineno;
PrologCompTerm*  dfiterm;
const char* dfi_name;
const char* dfi_analysisname;

void dfierror(const char *);

%}

/*Token declarations*/
%token <strValue> TOKEN
%token <strValue> TOP 
%token <strValue> BOT
%token <strValue> ASSIGN
%token <intValue> INT 
%token <strValue> UNDEF 
%token <strValue> SET_BEGIN
%token <strValue> SET_CLOSE
%token <strValue> LIFT_SET_BEGIN
%token <strValue> LIFT_SET_CLOSE
%token LABELS
%token FROM_TO
%token <strValue> EDGE
%token <strValue> CONTEXT
%token <strValue> MERGED

/*data structure*/
%union {
  int intValue;
  std::string* strValue;
  PrologTerm* singleTerm;
  std::deque<PrologTerm*>* termList;
}

/*nonterminal types*/
%type <singleTerm> start
%type <singleTerm> dfiseq
%type <termList>   dfis
%type <singleTerm> dfi
%type <singleTerm> edgespec
%type <singleTerm> contextspec
%type <singleTerm> result
%type <singleTerm> value
%type <singleTerm> topbot
%type <singleTerm> assignment
%type <termList>   assignments
%type <termList>   values

%%

/*grammar*/

start:
  LABELS INT FROM_TO INT ':' dfiseq { $$ = $6; }
  | dfiseq { $$ = $1; }
;

dfiseq:
  dfis {
    dfiterm = new PrologCompTerm(dfi_name);
    dfiterm->addSubterm(new PrologAtom(dfi_analysisname));
    dfiterm->addSubterm(new PrologList(*$1));
    $$ = dfiterm;
  }
;

dfis:
  dfi { $$ = new deque<PrologTerm*>(); $$->push_front($1); }
  | dfi dfis { $2->push_front($1); $$=$2; }
;

dfi:
  edgespec contextspec result {
    $$ = $3;
    if ($2 != NULL) {
      PrologInfixOperator* ifx = new PrologInfixOperator(":");
      ifx->addSubterm($2);
      ifx->addSubterm($$);
      $$ = ifx;
    }
    if ($1 != NULL) {
      PrologInfixOperator* ifx = new PrologInfixOperator(":");
      ifx->addSubterm($1);
      ifx->addSubterm($$);
      $$ = ifx;
    }
  }
;

edgespec:
  EDGE '(' TOKEN ')' ':' {
    PrologCompTerm* comp = new PrologCompTerm("edge");
    comp->addSubterm(new PrologAtom(*$3));
    $$ = comp;
  }
  | { $$ = NULL; }
;

contextspec:
  CONTEXT '(' INT ',' INT ')' ':' {
    PrologCompTerm* comp = new PrologCompTerm("context");
    comp->addSubterm(new PrologInt($3));
    comp->addSubterm(new PrologInt($5));
    $$ = comp;
  }
  | MERGED ':' { $$ = new PrologAtom("merged"); }
  | { $$ = NULL; }
;

result:
  '[' value ':' ']' { 
    PrologCompTerm* comp = new PrologCompTerm("map");
    comp->addSubterm($2);
    comp->addSubterm(new PrologList());
    $$ = comp;
 // dfiterm = new PrologCompTerm(dfi_name);
 // dfiterm->addSubterm($2); 
 // dfiterm->addSubterm(new PrologList());
    //cerr << dfiterm->getRepresentation() << endl;
  }
  | '[' value ':' assignments ']' { 
    PrologCompTerm* comp = new PrologCompTerm("map");
    comp->addSubterm($2);
    comp->addSubterm(new PrologList(*$4));
    $$ = comp;
 // dfiterm = new PrologCompTerm(dfi_name);
 // dfiterm->addSubterm($2); 
 // dfiterm->addSubterm(new PrologList(*$4));
    //cerr << dfiterm->getRepresentation() << endl;
  } 
  | value { 
    $$ = $1;
 // dfiterm = new PrologCompTerm(dfi_name);
 // dfiterm->addSubterm($1);
    //cerr << dfiterm->getRepresentation() << endl;
  } 
  | UNDEF { $$ = new PrologAtom("undefined dfi"); }
;

assignments:
  assignment ','  { $$ = new deque<PrologTerm*>(); $$->push_front($1); }
  | assignment ',' assignments { $3->push_front($1); $$=$3; }
;

assignment:
  value ASSIGN value { 
    PrologInfixOperator* ifx = new PrologInfixOperator("->");
    ifx->addSubterm($1);
    ifx->addSubterm($3);
    $$ = ifx;
  }
;

topbot: 
  TOP    { $$ = new PrologAtom("top"); }
  | BOT  { $$ = new PrologAtom("bot"); }
;

value:
  INT              { $$ = new PrologInt($1); }
  | TOKEN          { $$ = new PrologAtom(*$1); delete $1; }
  | topbot         { $$ = $1; }
  | '(' values ')' { $$ = new PrologList(*$2); }
  | SET_BEGIN values SET_CLOSE { 
      PrologCompTerm* t = new PrologCompTerm("set");
      t->addSubterm(new PrologList(*$2));
      $$ = t;
    }
  | LIFT_SET_BEGIN values LIFT_SET_CLOSE {
      PrologCompTerm* t = new PrologCompTerm("lifted_set");
      t->addSubterm(new PrologList(*$2));
      $$ = t;
    }
;

values:
  value              { $$ = new deque<PrologTerm*>(); $$->push_front($1); }
  | value ',' values { $3->push_front($1); $$=$3; }
  |                  { $$ = new deque<PrologTerm*>();}
;


%%

extern const char* dfi_input;
extern const char* dfi_input_start;

void dfierror(const char* msg) 
{
  cerr << std::string(msg) 
       << " near token \"" << dfitext << "\""
       << " (Ch#" << (int)dfitext[0] << ")"
       << " before \"" << dfi_input << "\"" << endl;
  cerr << "in DFI string \"" << dfi_input_start << "\"." << endl;
  dfiterm = new PrologCompTerm(dfi_name);
  dfiterm->addSubterm(new PrologAtom("parse error"));
  dfiterm->addSubterm(new PrologAtom(dfitext));
  exit(1);
}


