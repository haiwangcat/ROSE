------------------------------------------------------------
SATIrE: Static Analysis Tool Integration Engine
------------------------------------------------------------

SATIrE integrates static analysis tools into existing compiler
infrastructures.  Currently the focus is on integration of AbsInt's
Program Analysis Generator (PAG), the C/C++ infrastructure LLNL-ROSE,
and support for an external format (reading and writing) in Prolog
term syntax.

* Tested with Debian and Ubuntu 11.10
  (for exact program versions used in testing SATIrE 0.9.1 see ChangeLog)

------------------------------------------------------------
(0) UPGRADING AN EXISTING SATIrE INSTALLATION
------------------------------------------------------------

  If you are upgrading from an earlier version of SATIrE

  a) Go to your OLD SATIrE drectory and uninstall the old version
     make uninstall

  you can now continue with 1.b)

------------------------------------------------------------
(1) INSTALLATION
------------------------------------------------------------

 a) Before you can install SATIrE

    i)  you must install BOOST - http://www.boost.org

    Set the evironment variable LD_LIBRARY_PATH:
    export LD_LIBRARY_PATH=/usr/local/boost-1.45.0/lib

    ii) you must install LLNL-ROSE - http://www.rosecompiler.org

    The following ROSE configure options are sufficient for working with
    SATIrE (features such as Java, Haskell, Python support can be turned off)
    ROSE configure line: 
    rose-0.9.5a-17156/configure CXX=g++-4.4 CC=gcc-4.4 --without-java \
      --with-boost=/usr/local/boost-1.45.0 --disable-projects-directory \
      --prefix=/usr/local/rose-0.9.5a --enable-opencl \
      --enable-edg-opencl --disable-tests-directory
 
    iii) optional integrated tools: PAG, Termite
    For both tools, SATIrE's configure script automatically detects the
           availability of each integrated tool and automatically deactivates
           dependent features.
    - PAG: SATIrE supports the use of AbsInt's PAG: http://www.absint.com/pag/
           For obtaining a copy of PAG you must contact AbsInt.
           If you do not have a copy of PAG, you can use the option
           '--without-pag' when running 'configure'. This will deactivate some
           features in SATIrE (e.g. PAG based analyses).
    - Termite: Termite is integrated in SATIrE, but requires Prolog to be
           installed. You can obtain swi-prolog with most Linux distributions.
           For example, with Ubuntu run: 'sudo apt-get install swi-prolog' to
           install swi-prolog. If you do not want to use Prolog, you can use
           the option '--without-swi-prolog' to deactivate all Prolog dependent
           features (e.g. this deactivates the loop bound analysis).

 b) Unpack the satire tar-ball with:
    tar xvzf SATIrE-0.9.1.tgz

 c) Go to the satire directory:
    cd SATIrE-0.9.1

 d) Configure the sources for your platform and set the install path prefix
    for ROSE and BOOST:
    example: 
      libtoolize
      autoreconf -i
      ./configure --prefix=/usr/local --with-rosedir=/usr/local/rose-0.8.5a/ \
                  --with-boostdir=/usr/local/boost-1.47.0
    If you have PAG installed also set the install path prefix for PAG:
    example: 
      libtoolize
      autoreconf -i
      ./configure --prefix=/usr/local --with-rosedir=/usr/local/rose/ \
                  --with-boostdir=/usr/local/boost-1.47.0 \
                  --with-pagdir=/usr/local/pag

    If you have Prolog installed set the following variable when running 
    configure: 
       PKG_CONFIG_PATH=/usr/lib/pkgconfig ./configure .. (as above)
    [this is reqired on some Linux system for determining the installed
     Prolog version. On Ubuntu it also works without specifying this variable]

    for more options of the provided configure script run (as usual):
    ./configure --help

    run 'make' for compiling all SATIrE modules and analyzers
    run 'make install' to install SATIrE to the location specified 
      by --prefix=<INSTALL_PREFIX>
    run 'make installcheck' to run SATIrE tests on the installation
    ('make check' does not perform all checks. Only 'make installcheck' does.]

------------------------------------------------------------
(2) GETTING STARTED WITH AN ANALYSIS THAT COMES WITH SATIrE
------------------------------------------------------------

 Several of the SATIrE-based analyses are accessable via the
 satire_driver program.

 Examples:

 Example 1: Perform a constant propagation analysis and generate the
            results as textual comments in the gerated cpp-file:
     <INSTALL_PREFIX>/bin/satire_driver \
     --analysis=constprop --output-text <FILE1.cpp>

 Example 2: Perform a pointsto analysis and visualize the computed
            information for a given program <FILE1.cpp> as DOT graph:
     <INSTALL_PREFIX>/bin/satire_driver \
     --analysis=pointsto --output-pointsto-graph=pointstograph <FILE1.cpp>
 
 Example 3: For the TERMITE-based loop bounds analysis a convenient 
            executable is available as <INSTALL_PREFIX>/bin/loopbounds.
            To show the results of a loopbound analysis for <FILE1.c> use:
     <INSTALL_PREFIX>/bin/loopbounds  <FILE1.c> | term2c

 For more examples consult the satire_manual.pdf in docs.

------------------------------------------------------------
(3) INVOKING ANALYSES THAT COME WITH SATIrE
------------------------------------------------------------

 a) For viewing the results of available analyses you can use the provided
    program satire_driver.
    run satire_driver --help for all options.

------------------------------------------------------------
(4) CRAFTING A NEW ANALYSIS USING PAG
------------------------------------------------------------

 a) Ensure that <INSTALL_PREFIX>/bin is in your environment variable path.

 b) mkdir <ANALYSIS_NAME>

 c) cd <ANALYSIS_NAME>

 d) Implement <ANALYSIS_NAME>.set and <ANALYSIS_NAME>.optla

 e) Run 'newanalysis' to have all required files copied into your
    directory. (you can rerun newanalysis later again)

    If you do modify the generated files do not want them to be overwritten
    in subsequent uses of new analysis use option '-u' (for update). 
    The option '-u' *must* be used if you are apply newanalysis to the examples
    srw98_shape and nnh99_shape to not overwrite main.C and main.h which are
    predefined for the two shape analyses. (Future versions of SATIrE will
    include a configure file that allows to handle such cases in a more 
    convenient way)

 f) Run 'make' to compile your analyzer

 g) Run your analyzer '<ANALYSIS_NAME> <INPUTFILE>'. The input file is a
    C/C++ source file and the executable analyzer has the name <ANALYSIS_NAME>.
    This will generate a file '<ANALYSIS_NAME>_result.gdl' which can be
    viewed with the tool aiSee.

    Note, the command 'newanalysis' never modifies *.set and *.optla files
    but does overwrite Makefile, main.C, main-support.C in the directory 
    where it is run. 

------------------------------------------------------------
(5) FURTHER INFORMATION & CONTACT
------------------------------------------------------------
  
 a) Documentation that comes with the distribution can be found
    in the directory 'docs'.
    satire_overview.pdf: gives an overview of the SATIrE infrastructure
    satire_cfgconstruction.pdf: describes the structure of the ICFG
    satire_attributes_auxiliary_functions: a text document on the auxiliary
          functions that can be used in PAG analysis specifications to 
          access various program information.
    termite.pdf: gives an overview of the various capabilites for program
          analysis and transformation using SATIrE and Termite's features.
    
 b) On the web information can be found at:
    http://www.complang.tuwien.ac.at/satire

 c) For questions, feedback, bug reports, or suggestions on SATIrE send
    email to: schordan@technikum-wien.at or adrian@llnl.gov

