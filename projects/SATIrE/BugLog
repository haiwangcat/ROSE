% SATIrE bug log $Id: BugLog,v 1.14 2008-08-04 13:26:59 gergo Exp $
% The intended syntax should be clear. It might be a good idea to add fields
% describing how to reproduce the error, i.e. a command line. (But we can't
% include sample input files in this file, or can we?)
% In the Status field, the opposite of "Resolved" is "BROKEN".

Logged:
    2008-03-10, GB
Symptoms:
    Duplicated goto edges in ICFG, expression and type numbering runs
    multiple times
Reason:
    CFGTraversal::getCFG is called multiple times and performs goto
    backpatching and expression numbering each time
Fix:
    Guard calls to these actions to execute them exactly once
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    ICFG builder exits with failure and the message "unknown object"
Reason:
    The support function calling_object_address returns NULL. This function
    computes the address of the object a method is invoked on; this address
    is then assigned to the method's this pointer. This address cannot be
    computed in all cases, in particular for static methods, or when
    invoking a method on the same object.
Fix:
    Handle these cases in calling_object_address (passing NULL as the this
    pointer for static methods), make the "unknown object" message more
    informative.
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    Final unparsing fails with some variant of "get_parent() != NULL"
    assertion
Reason:
    The ICFG builder appears to modify some parent pointers in the original
    AST, which is another big problem, but will be addressed separately.
Fix:
    If you must modify the original AST, at least fix the parent pointers
    afterwards. It turns out that ROSE's resetParentPointers function is
    quite elaborate, but does not handle all broken parent pointers;
    satireResetParentPointers was implemented to handle this.
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    Prolog term construction fails with "scope != NULL" assertion on
    SgMemberFunctionDeclaration
Reason:
    In some cases, the term builder copies sub-ASTs and performs some action
    on them. For SgMemberFunctionDeclaration, this includes calling
    get_class_scope on the copy, but in the (deep) AST copy, the parent
    pointer, which is the scope, is NULL. This might be a bug in
    ROSE-0.9.0b, as the copy statement also produces warnings like:
    WARNING: Scopes do NOT match! variable = 0x2aaaadaa2760 = n (could this
    be a static variable, or has the symbol table been setup before the
    scopes have been set?) 
    Error: Symbol not found for initializedName_copy = 0x2aaaadaa2760 = n
Fix:
    Manually copy the parent pointer.
Status:
    Resolved 2008-03-05, GB


Logged:
    2008-03-10, GB
Symptoms:
    ICFG builder fails with message "Error: base class
    SgExpression::replace_expression called, likely a mistake!" and
    assertion "rose-0.9.0b/src/ROSETTA/Grammar/Expression.code:999: virtual
    int SgExpression::replace_expression(SgExpression*, SgExpression*):
    Assertion `false' failed."
    (submitted by Stefan Stattelmann of AbsInt)
Reason:
    Some subclasses of SgExpression, in particular SgEnumVal, and apparently
    all other subclasses of SgValueExp as well, do not reimplement
    SgExpression::replace_expression. (BTW, replace_expression is marked as
    deprecated, but replaceChild, which we use and which calls
    replace_expression, isn't.) This might be an oversight because somebody
    thought that ValueExps don't have children; they have their
    originalExpressionTrees, however. Our attempt to replace the original
    expression tree (in the concrete case, this is a conditional expression)
    leads to the incorrect call to the abstract base class.
Fix:
    Wrapper satireReplaceChild around replaceChild that ignores requests to
    replace the originalExpressionTree in a SgValueExp; we don't use the
    original expression anyway. This wrapper might also come in handy if
    some day replaceChild were also deprecated and removed.
Status:
    Resolved 2008-03-10, GB


Logged:
    2008-03-10, GB
Symptoms:
    Unreachable nodes in the ICFG for programs like:
        if (cond)
            return foo;
        else
            return bar;
    CFG test emits warnings (as it should).
    (submitted, among others, by Stefan Stattelmann of AbsInt)
Reason:
    The ICFG builder always inserts an IfJoin node, even if it is not
    reachable due to jumps out of both branches.
Fix:
    Remove unreachable nodes from the ICFG. Even better: Handle this
    correctly when the ICFG builder is completely rewritten.
Status:
    Resolved 2008-03-11, GB


Logged:
    2008-03-11, GB
Symptoms:
    Variables within functions may remain declared at the end of the
    function. In particular, return from within a nested scope will skip
    undeclaration of all variables from enclosing scopes. This is a common
    case. See deepreturn.c for an example.
Reason:
    The ICFG builder only introduces undeclare nodes at the ends of blocks
    and immediately after returns (I think). These undeclare nodes contain
    only the variables declared in the same block.
Fix:
    Two possible fixes come to mind: Either be more sophisticated in filling
    undeclare nodes for returns, or simply add all of a function's variables
    to the undeclaration list in the end node. The latter seems simpler to
    get right, especially in the presence of gotos and the like.
    Later the same day: It turns out that the second of these fixes has been
    implemented for some time, it's just that the variables were not visible
    in the GDL visualization. They have always been present in the ICFG, and
    analyses processed them correctly.
Status:
    Resolved 2008-03-11, GB


Logged:
    2008-03-11, GB
Symptoms:
    make installcheck fails with: "rose-0.9.0b/src/backend/unparser/
    languageIndependenceSupport/name_qualification_support.C:441: SgName
    Unparser_Nameq::generateNameQualifier(SgDeclarationStatement*, const
    SgUnparse_Info&, bool): Assertion `info.get_declstatement_ptr() !=
    __null || nestedQualification == true' failed." when testing constprop
    on testsuite/success/classes3.C
Reason:
    Error in ROSE 0.9.0b, not in our code. Can be observed by simply calling
    the ROSE identityTranslator on the file.
Fix:
    Sent file to Dan.
Status:
    BROKEN as of 2008-03-12


Logged:
    2008-03-11, GB
Symptoms:
    make installcheck segfaults when testing constprop on
    testsuite/success/destructor.C
Reason:
    This was an issue with the visualization of the analysis results; PAG
    allocated buffers that were too small for some of our long variable
    names. The reason was that PAG's magic syntax_init function was never
    called, and this meant that the magic e_syntaxtype variable was not
    initialized correctly, and therefore PAG's allocator was confused about
    the sizes of some things.
Fix:
    Set the global syntaxtype and e_syntaxtype variables to -1; then PAG
    calls syntax_init, and all is well. This is not documented anywhere, of
    course, but reading obfuscated code is fun!
Status:
    Resolved 2008-05-08, GB


Logged:
    2008-03-12, GB
Symptoms:
    Argument assignments (at least for some constructor calls on non-pointer
    objects) and return nodes (at least for some constructor calls) contain
    wrong variables.
Reason:
    Argument assignments were broken partly because of a typo, and mainly
    because once more a deep copy statement did not copy a parent pointer.
    If such problems recur, we should consider wrapping the ROSE copy
    mechanism. Return nodes were broken because a few lines to update the
    list of variables were missing in the code that handles constructor
    calls.
Fix:
    Copy parent pointer, update variable list for return nodes.
Status:
    Resolved 2008-03-12, GB


Logged:
    2008-03-12, GB
Symptoms:
    C++ code of the form:
        a = new A();
    produces an ICFG like:
        ArgumentAssignment($A$this, new A());
        Call(A, [$A$this]);
        Return(A, [$A$this]);
        a = $A$this;
    This is not good because, unlike in all other cases, the ReturnStmt is
    *not* allowed to kill the variable $A$this in its param list because it
    is needed in the subsequent statement.
Reason:
    This point was not given enough thought when this part of the ICFG
    builder was written.
Fix:
    Change the ICFG builder to construct a structure preserving the property
    that the variables in a ReturnStmt may safely be killed. This is done by
    removing the 'this' pointer from the ReturnStmt's list iff the
    constructor call resulted from the application of the 'new' operator. In
    this case, the occurrence of $A$this in the subsequent statement is the
    only occurrence, it can therefore be killed at that point.
Status:
    Resolved 2008-03-13


Logged:
    2008-03-13, GB
Symptoms:
    Error message "error during ICFG construction: constructor has more
    arguments than parameters!"
Reason:
    The ICFG builder does not correctly resolve overloaded member
    function/constructor calls, thus the numbers of arguments and parameters
    may indeed differ. Overloaded member functions weren't always resolved
    correctly, either.
Fix:
    Correct comparison of names/mangled names and parameter types.
Status:
    Resolved 2008-03-13, GB


Logged:
    2008-03-13, GB
Symptoms:
    No direct ones. When using aisee to view the ICFG of a program
    containing overloaded functions, aisee complains that there are nodes
    (the functions' CFGs) with identical names: "Double defined node A::A".
Reason:
    The internal names of the functions are the same.
Fix:
    None really necessary since a) aisee is not our product, and b) names
    don't matter, the graph is correct. Still, when the ICFG builder is
    rewritten, this can be kept in mind. We could disambiguate function
    names by listing their parameters along with the name.
Status:
    Present but irrelevant as of 2008-03-13 (GB)


Logged:
    2008-03-26, GB
Symptoms:
    Virtual method calls that cross source file boundaries are not resolved
    correctly in the ICFG.
Reason:
    The ROSE AST does not share definitions of the same class when it is
    present in several source files, for instance by inclusion from the same
    header file. The ICFG builder's "subtype of" function uses simple
    pointer comparisons, which fail because of the lack of sharing.
Fix:
    Compare class names. Soon this will be done elegantly by the AST
    matching mechanism.
Status:
    Resolved 2008-03-18, GB


Logged:
    2008-03-26, GB
Symptoms:
    Iterator operations in loop heads such as:
        for (std::vector<int>::iterator i = v.begin(); i != v.end(); ++i)
    are not represented correctly in the ICFG. The call to begin() is
    missing, and the != operator is not evaluated before the first loop
    iteration.
Reason:
    Edges were set incorrectly by the ICFG builder. In the case of the call
    to begin, this led to unreachable code which was subsequently removed.
Fix:
    Set edges correctly.
Status:
    Resolved 2008-03-26, GB


Logged:
    2008-03-26, GB
Symptoms:
    In the ICFG, member function call arguments are assigned to the $this
    parameter instead of one of the "real" parameter variables.
Reason:
    The ICFG builder always generated a $this parameter for member function
    calls; however, it only generates an ArgumentAssignment to $this if the
    function call is not external. The evaluate_arguments function assigned
    the first argument expression to the $this parameter as it was the first
    in the list of parameters.
Fix:
    Tell evaluate_arguments to generate a $this parameter only for
    non-external member function calls.
Status:
    Resolved 2008-03-26, GB


Logged:
    2008-03-26, GB
Symptoms:
    Copy constructor calls for anonymous variables (where a function
    argument is copied, for instance) are somewhat strange in the ICFG.
    Copying a string will generate ICFG nodes like:
        ArgumentAssignment($string$this, &$anonymous_var_59);
        ArgumentAssignment($string$arg_0, some_string);
        ConstructorCall(string)
        ... exactly one use of $anonymous_var_59 ...
    The anonymous variable has no explicit declaration, and arguably two
    uses. One might say that the first occurrence, which is always in an
    ArgumentAssignment that assigns its address to a $this pointer, is a
    sort of implicit declaration, and the second occurrence is the one use.
    But this is not satisfactory.
Reason:
    This was a broken design, and we never came up with a better one.
Fix:
    unknown
Status:
    BROKEN as of 2008-03-26


Logged:
    2008-03-26, GB
Symptoms:
    Variables declared in a for loop's head are never undeclared in the
    ICFG.
Reason:
    This case was forgotten when undeclare statements were introduced.
    Presumably the issue also exists in while loops.
Fix:
    TODO: undeclare the variable; in both C++ and C99, the scope ends at the
    end of the loop (apparently this was not the case in pre-ISO C++)
Status:
    BROKEN as of 2008-03-26


Logged:
    2008-03-26, GB
Symptoms:
    ICFG builder emits warning message "TODO: not supported -> <something>".
    This message is not clear.
Reason:
    The ICFG builder encountered a statement it doesn't know how to handle;
    this can occur when a function is declared within another function, and
    when a try statement is encountered. The function declaration case is
    harmless and needs no warning, but we do not support exception handling.
Fix:
    Better error message; we will not handle exceptions (sorry). Also, no
    message is emitted for function declarations.
Status:
    Resolved 2008-03-26, GB


Logged:
    2008-03-26, GB
Symptoms:
    Error message:
        ExprTransformer.C:313: error during ICFG construction: found more
        than one constructor implementation for initializer ''
Reason:
    Some headers define constructors; if such a header is included multiple
    times, the constructor definition will appear in the AST multiple times.
    Thus we cannot assert that there is just one such definition.
Fix:
    Remove error message because this condition is not really an error.
Status:
    Resolved 2008-03-27, GB


Logged:
    2008-03-27, GB
Symptoms:
    Error message:
        error during ICFG construction: constructor has more arguments than
        parameters!
Reason:
    In the ROSE AST, declarations of default copy constructors have zero
    parameters, although calls correctly have one argument. Thus the normal
    code for resolving overloaded constructor calls fails.
Fix:
    Handle this special case in a special way; an external constructor call
    is emitted.
    TODO: Consider sending a bug report or a patch to Dan.
Status:
    Resolved 2008-03-27, GB


Logged:
    2008-04-07, GB
Symptoms:
    ICFG builder causes an assertion to fail:
        SgExpression* SgAssignInitializer::get_operand_i() const: Assertion
        `this != __null' failed.
    This happens while trying to create function call nodes for functions
    with variadic arguments.
    (Submitted by Stefan Stattelmann of AbsInt.)
Reason:
    If a function call in the AST has fewer arguments than the function's
    declaration has parameters, the ICFG builder used to assume that the
    remaining parameters have default values, and tried to access the
    default value through a SgAssignInitializer. There is no default value
    for a variadic argument list, however.
Fix:
    Don't try to find a default value for a variadic argument list.
Status:
    Resolved 2008-04-08, GB


Logged:
    2008-04-08, GB
Symptoms:
    The variable argument operations are not handled correctly in the ICFG.
Reason:
    This was never implemented. Note that it is quite nontrivial: It is not
    clear how information about a list of arguments could be used
    productively by a PAG analyzer.
Fix:
    Unknown (mainly a design issue, implementation should not be too hard).
Status:
    BROKEN as of 2008-04-08


Logged:
    2008-04-23, GB
Symptoms:
    Segfaults during annotation of the program with analysis results.
Reason:
    If the program contains unreachable ICFG nodes and we attempt to remove
    them, sometimes we fail to find a good spot to put an annotation.
Fix:
    Do not remove unreachable ICFG nodes. Analyses should be aware that they
    might encounter unreachable nodes, and accordingly, the initial data
    flow value should mean "unreachable".
Status:
    Resolved 2008-04-23, GB


Logged:
    2008-06-23, GB
Symptoms:
    Trying to remove return variable Ids at ReturnAssignment statements
    does not work. Same thing for argument variables.
Reason:
    $func$return variables are not unique per function, neither are
    $func$arg_n variables.
Fix:
    Replace the function-based $func$return and $func$arg_n variables by
    $tmpvar$return and $tmpvar$arg_n variables. While we're at it, also
    replace all $func$this pointers similarly. This allows correct handling
    of the above case, and it keeps working when a call goes to functions
    with different names, as with function pointers.
    These variables cannot be typed statically since different parts of the
    program try to write and read differently typed values from them. We
    give them type "void **", and where types of values are relevant to the
    analysis, it will have to take care of dragging types along. As the ICFG
    nodes for distinct function calls are never interleaved, this works well
    with nested calls like f(42, g(23)) and with recursion.
Status:
    Resolved 2008-06-25, GB


Logged:
    2008-06-23, GB
Symptoms:
    The constprop analysis is broken:
        x = top;
        if (opaque)
        {
         // pre:  x -> top
            x = 42;
         // post: x -> 42
        }
        else
        {
         // pre:  x -> top
            no_op;
         // post: x -> top
        }
     // post: x -> 42 because glb(42, top) = 42!
Reason:
    If we use top for unknown variable values, we cannot use glb as the
    combination operator.
Fix:
    Complete rewrite of constprop (yet again), now using lub as the
    combination operator, which will map the above case to top.
Status:
    Resolved 2008-06-25, GB


Logged:
    2008-07-14, GB
Symptoms:
    A DeclareStmt's pre and post info are identical (spotted by Markus).
Reason:
    In the ICFG builder, the declaration's pre info position was computed
    from a wrong ICFG node, before the correct one had even been created.
Fix:
    Compute the pre info attribute from the correct ICFG node.
Status:
    Resolved 2008-07-14, GB


Logged:
    2008-07-30, GB
Symptoms:
    Runtime error "Type -1 is out of range, max is 1000" when running a PAG
    analyzer.
Reason:
    The analysis attempts to use some SATIrE-defined type, but its allocator
    has not been initialized. This is due to attempted use of a type that
    has not been declared in the analysis.set file; it seems like this is
    only possible if one uses wrong declarations for SATIrE support
    functions. In particular, the error was observed when a user wrote the
    declaration
        exprid_typeid:: Expression -> TypeId;
    instead of the correct version
        exprid_typeid:: ExpressionId -> TypeId;
Fix:
    Nothing to do. We cannot enforce correct typing of the support
    functions, and while we could force all of our types to be initialized
    and possibly mask the error, the typing issue would still be present. As
    such, it's better to have the error message that indirectly points one
    to erroneous declarations in the analysis specification.
Status:
    Resolved 2008-07-30, GB


Logged:
    2008-08-04, GB
Symptoms:
    Analysis specifications have no access to some initializers for
    variables declared with the "static" storage specifier at file scope.
    (Reported by Stefan Stattelmann of AbsInt.)
Reason:
    This appeared to come up when using static variables with the same name
    in several files analyzed at once. As the variables had the same name,
    they were treated as the same, and an initializer in one file could
    override an initializer in another.
Fix:
    Do not "link", as it were, static variables anymore.
Status:
    Resolved 2008-08-04, GB


Logged:
    2008-08-04, GB
Symptoms:
    Local variables declared "static" are treated like normal local
    variables in the ICFG; in particular, there is no way for the analysis
    to tell that the initialization expression must be evaluated exactly
    once, before executing anything else.
Reason:
    No treatment for static yet.
Fix:
    Possibly: Put all static variables into the "global variables" list,
    since they are global in the sense of being available throughout the
    program's execution. They cannot be referred to from every scope, but
    that shouldn't matter to an analysis.
Status:
    BROKEN as of 2008-08-04
