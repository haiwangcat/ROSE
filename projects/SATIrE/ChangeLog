V0.9.1 2012-02-29 MS

* This version is the first release in ROSE/projects/SATIrE
	
* small fixes to make sure we pass all ROSE policies [MS]
	
* Termite FIX [MS]
  workaround for new bug in flex 2.5.4 (does not properly parse single line 
  comments in difference to flex 2.5.35)
  Problem: // "\123\"
	   above single line comment causes flex 2.5.4 to generate wrong code
	   using a C multiline comment fixes the problem

* ARAL FIX [MS]
  changed --prefix to -P in makefiles to support flex 2.5.4+.

V0.9.0 2012-01-11 MS,AP,GB,DE,FB

* Tested with: [MS]
  - ROSE 0.9.5a-17156
  - PAG 9.0.0.92248
  - flex 2.5.35
  - bison 2.4.1
  - g++ 4.4.6 (ROSE supports g++ up to 4.4, but not 4.6 yet)
  - Boost 1.47.0 (1.48.0+ requires g++ 4.6+)

* Termite compiler warnings [MS]
  - fixed all compiler warninges in Termite headers and implementations

* DOT outout of ICFG [MS]
  - an output of the icfg can be generated with the satire_driver now
  - the output is a clustered graph where each cluster represents a function
  - new satire_driver option: --output-dot-icfg=<FILENAME>

* Provided analyzers [GB]
  - A number of SATIrE analyzers are now compiled into a shared library for
    easy combination with other analyzers.
  - satire_driver program provides command-line access to predefined
    analyzers and many other SATIrE library features.

* Build system [AP,GB]
  - Using libtool to create dynamic libraries.

* CLANG support [DE,FB,AP]
  - Integration of clang frontend from the LLVM project.
    Check out 'make clang'.
  - Analyzers can now take TERMITE files as input. (New option
	--input-termite-ast=<FILE>)
  - With above two features it is now possible to build an analyzer
	without using the EDG frontend.

* TuBound Analyzers [AP]
  - The loop analysis core from TuBound is now available as a standalone
	tool, check out tools/loopbounds.
  - The wcetC backend is now available under tools/wcetcc.

* Termite [AP,GB]
  - New (optional) dependency: SWI-Prolog >= 5.6
    (auto-detected by ./configure, or use --with-swi-prolog=[yes,no])
	* When enabled, all Term I/O will be handled by libpl, bringing
	speed and stability improvements.
	* This also paves the road for PROLOG-based analyses and
	transformations to be run directly within an analyzer.
  - Replaced all of the numerical constants for type modifiers with more
    descriptive atoms.
  - Correct generation of container nodes even when the list of successors
    is empty (arity used to be broken).
  - Added preprocessing info nodes.
  - New termite_lint utility checks for sanity of Termite terms.
  - Termite now comes with a manual.
	Check out docs/termite.pdf and docs/termite-html/index.html!
  - Greatly reduced memory footprint and execution speed

* Building SATIrE without PAG [GB]
  - SATIrE can now be built without requiring PAG; use --without-pag
    configure flag. C++ source code can check for definition of the HAVE_PAG
    macro (to some true value) for conditional compilation.

* Information about interprocedural contexts [GB]
  - New data flow analysis attribute "position" can be used to get
    information about the interprocedural analysis context
  - Experimental --output-call-strings command line flag prints a
    representation of PAG's call strings
  - After context-sensitive data flow analysis, the ICFG now contains a
    collection of Context objects (Context.h) that contain call string
    information.
  - Data-flow analysis results are output context-sensitively (including
    Termite annotations).

* Highly experimental context-sensitive points-to analysis [GB]
  - Extension of existing points-to analysis with context information from
    PAG, for better support of data-flow analyzers.

V0.8.5 2008-11-22 GB,AP,VP,MS

* Tested with: [MS]
  - ROSE 0.9.3a-1593
  - PAG 9.0.0.92248
  - flex 2.5.33
  - bison 2.3
  - g++ 4.2.0 (>= 4.2.0 required by ROSE with EDG binaries)
  - Boost 1_36 (>= 1_35 required by ROSE)

* Experimental points-to/alias analysis for C programs [GB]
  - specify --run-pointsto-analysis command line flag, PAG analyses then
    have access to the new Location type and associated auxiliary functions;
    see docs/satire_attributes_auxiliary_functions for details and
    examples/pointsto_live_variables for a small example
  - specify --resolve-funcptr-calls command line flag to connect
    ExternalCall nodes with all the possible target function entry nodes as
    determined by points-to analysis
  - both of these work for C programs (not C++) without calls to external
    functions

* Changes in PAG analyzer integration architecture [GB,VP]
  - analyzers are encapsulated as C++ objects, and it will soon be possible
    to mix and match/distribute analyzers as a library with a simple header
    file

* Predefined SATIrE attribute, type, and auxiliary function declarations [GB]
  - using new features provided by PAG 9.0.0.92248, SATIrE's attributes, types,
    and auxiliary functions are now declared automatically; user-defined
    declarations are no longer necessary (or allowed)

* Termite [AP]
  - better float/double support
  - clang patch pre-release

V0.8.4 2008-09-26 GB,AP,MS

* Tested with: [MS]
  - ROSE 0.9.3a-1593
  - PAG 8.7.6.17
  - flex 2.5.33
  - bison 2.3
  - g++ 4.2.0 (>= 4.2.0 required by ROSE with EDG binaries)
  - Boost 1_36 (>= 1_35 required by ROSE)

* General changes [GB,AP]
  - parallel builds with 'make -j N' work now
  - made SATIrE work with ROSE 0.9.3a (build 1593); changes are incompatible
    to older versions!
  - better handling of switch statements in ICFG (including Duff's Device)

* Termite [AP]
  - fixed the quoting of Prolog atoms.

V0.8.3 2008-08-14 GB,VP,MS

* Tested with: [MS]
 - ROSE 0.9.1a
 - PAG 8.7.6.17
 - flex 2.5.33
 - bison 2.3
 - g++ 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)

* strongly recommended user changes:
  - change analysis specifications to use new Id types and associated
    functions; the deprecated exprnum/typenum functions will be removed from
    the next release

* Example analyses [GB,MS,VP]
  - fixed bugs and style issues in constprop [GB]
  - Updated sl2rd [MS]
    + to use VariableId instead of strings
    + to handle additional cases of temporary variables (utilizing the new
      support function is_tmpvarid(v) )
    + early version to separate RD information on local and call edge (the 
      final version requires some addtional support functions for temporary 
      variables)
    + to handle global variables (including the initialization of the 
      analysis)
  - Updated shape analyses [VP]
    + to use VariableId instead of strings for variables
    + adapted transfer functions to use TypeId, ExprId
    + normalization:
      * added new normalization of data access expressions because tmpvars 
        does no longer allow to guess on names of the next temporary vars.
      * it is now more elegant, more compact.
      * generates better sequence of transfer functions
  - identified "Setpower too big" error (fixed in PAG 8.7.6.17)
    + NNH: --output-gdl=<file> generates now set of NNH shape graphs by
      default (default is --individualgraphs --no-summarygraph)
    + SRW: --output-gdl=<file> generates now set of NNH shape graphs by
      default (default ist --no-individualgraphs --summarygraph)
	
* Better support for combined analyses [GB]
  - correct prefixing of SATIrE support functions

* New PAG analysis support features [GB]
  - TypeId as abstract type identifier
  - side-effecting(!) add_tmpvarid support function
  - total ordering on each Id type
  - deprecated exprnum/typenum functions emit warnings; suppress with
    --no-warn-deprecated command line flag (even better: change the analysis
    specification!)
  - new support functions stmt_asttext, expr_asttext to visualize AST
    structure for easier development of matching patterns

* ICFG builder changes [GB]
  - replaced function-specific $func$return, $func$arg_n, and $func$this
    variables by generic $tmpvar$ variables; this allows for calling
    functions without knowing their name (through pointers, for instance)
  - better resolution of calls to static functions
  - better resolution of static file-scope variables and their initializers

* PAG memory management command line flags [GB]
  - for setting initial memory size:
      --pag-memsize-mb=N     allocate N MB of memory
      --pag-memsize-perc=N   allocate N% of total system memory (autodetected)
    (default memory size is 5 MB)
  - for setting aggressiveness of memory growth:
      --pag-memsize-grow=N   grow memory if less than N% are free after a GC
    (default growth is 30%)

* Termite: [AP]
  - Support for multiple input files
  - Changed all occurrences of PrologString to PrologAtom
    (all names in the term representation are now 'singlequoted')

V0.8.2 2008-06-02 GB,MS,AP

* required user changes:
  - change analysis specifications to take the new ExternalReturn statement
    into account
  - change analysis specifications to take into account that the numexprs
    and numtypes attributes are now of type unum instead of snum; all
    support functions related to expression and type numbers now take unum
    rather than snum; also, there is a new support function varsym_varid (see
    file docs/satire_attributes_auxiliary_functions)
  - for existing analyses, call newanalysis or manually change
    main-support.C (according to the template) to reflect a change in the
    interface of the CFGTraversal class

* recommended user changes:
  - change analysis specifications to use the new ExpressionId and
    VariableId instead of str. Note that the gdl file generation automatically
    displays the string representation of the mapped IDs. You can use the
    new command line options to display the IDs as well.
        
* new command line options [GB,MS]
  --check-icfg: Command line flag to control ICFG consistency checks
  --gdl-nodeformat=FORMAT: allows to specify how node information should be
                           displayed in a gdl file.
                           FORMAT=varid|varname|exprid|exprsource
                                 |asttext|no-varid|no-varname
                                 |no-exprid|no-exprsource|no-asttext
  --input-binary-ast=FILE/--output-binary-ast=FILE: support for ROSE's
    binary AST I/O mechanism which can be a little faster than building the
    AST from source code

* New PAG analysis specification features [GB]
  - replaced single ExternalCall node by ExternalCall/ExternalReturn pair
  - added attribute  ROUTINE procnum: snum #  to access the number of the
    current procedure from PAG analyses
  - introduced experimental VariableId type that can be used in analysis
    specifications, see docs/satire_attributes_auxiliary_functions; using
    integral identifiers for variables/expressions/types is expected to be
    deprecated at some point

* ICFG builder improvements [GB]
  - no longer removing unreachable ICFG nodes because that may hinder
    correct annotation of the program
  - replaced slow expression numbering mechanism by Mihai Ghete's faster AST
    hashing
  - fixed ICFG builder failures related to default constructor arguments
  - some refactoring and dramatic improvements in method lookup
  - reintroduced UndeclareStmts which had somehow gone missing
  - improved the handling of node lists for PAG analyses, the new way doesn't
    leak memory anymore

* Testsuite improvements [GB]
  - separate histograms are generated for execution time and memory usage
  - GNUplot input files remain on disk and can be tweaked by the user

* Reorganized Testsuite [AP]
  - added separate directories for different bechnmark suites

* Example analyses [GB,MS]
  - added experimental avalable expressions analysis [not in distribution]
  - changed constprop to use variable IDs; expression numbering must be
    enabled!
  - changed sl1rd and sl2rd to use VariableId instead of str.

* Build system improvements [GB]
  - fixed autoconf warnings by introducing <satire_rose.h>
  - everything is now compiled with the -Werror flag, so code that produces
    warnings is forbidden
  - suppressed (but did not fix!) warnings for code generated by PAG


V0.8.1 2008-04-11 GB,AP,VP,MS

* Combined PAG analyses [GB]
  - added experimental script 'newcombinedanalysis' to generate directories
    and support files for combining PAG analyses
  - modified 'newanalysis' and skeleton files to support combined analyses

* Analyzer statistics [GB]
  - added support for the ROSE performance timer to SATIrE; use --statistics
    option to print timing information for your analyzer

* Testsuite Statistics Report [AP]
  - Nice GNUplot histograms will be generated by make installcheck

* Extended Shape analyses with statistics [VP]
  - Added statistics about computed graphs and may/must alias information
        
* ICFG builder improvements [GB]
  - tuned computation of expression and type sets; the ICFG builder is now
    roughly 5 to 10 times faster
  - added analyzer command line flag --no-number-expressions to turn off
    expression numbering for analyses that don't need it
  - replaced most const char * strings by std::string
  - removed memory leaks
  - implemented IcfgTraversal class for simple traversal of the ICFG (see
    CFGTraversal.h)
  - ROSE-style reflection for SATIrE-specific statements: traversal methods,
    is... type casts, class_name methods

* Bug fixes [GB]
  - correct handling of $Foo$this pointer in all contexts
  - resolution of overloaded constructor and overloaded member function calls
  - correct handling of function calls in for loop initializers and conditions
  - better error message than "TODO: not supported ->" for strange
    statements in functions
  - see file BugLog for details

* Termite [AP]
  - removed wrong successor check in SgReturnStmt
  - added base type to typedef_type!2

V0.8.0 2008-03-11 MS,GB,AP

* required user changes:
  - change analysis specifications to support AssignInitializer/AggregateInitializer nodes
  - change command line options according to new options (see 'youranalyzer --help')
  - you must apply command 'newanalysis' without option '-u' to regenerate main.C

* Changed and added command line options [MS]
  - names of output files for source,term,gdl can now be specified
  - options for specifying naming conventions for multiple output files

* Added support for multiple input and multiple output files [MS]
  - multiple input files are represented in one single AST
  - analysis is performed on one single ICFG
  - multiple output file generation (source code annotation, see --output-sourceprefix)
  - one single GDL file is generated (for single as well as for multiple input files)
        
* ICFG: added better support for initializers [GB]
  - added aggregate initializers for arrays/structs
  - *all* initializer expressions are now wrapped inside appropriate initializer nodes
    rather than representing them as simple assignments as before

* Test of installation [AP]
  - new directories:
        testsuite/success
        testsuite/failure
        testsuite/dontrun
  - examples/testsuite.sh will be called by 'make installcheck'

* Termite [AP]
  - support for SgEllipse
  - bug fixes in DFIparser

* Bug fixes [GB]
  - corrected various issues that caused ROSE assertions to fail
  - removed ICFG nodes that were unreachable due to explicit returns in the
    middle of functions
  - added detailed log of bugs reported and fixed (file BugLog)
  - ICFG visualization: function exit nodes now have a correct list of
    variables to undeclare
  - see file BugLog for further details

V0.7.9 2008-02-08 MS,GB,AP

* upgrade to PAG 7.3.8.55 [MS]
  - added new functions kfg_routine_is_loop and kfg_routine_is_infeasible
    to file astaccess/pag_support.C (thanks to AbsInt for detailed info on new PAG version)
  - changed type bool to PAG_BOOL in
        srw98_shape/main.C: PAG_BOOL get_universal_attribute__kill_norm_temps()
        nnh99_shape/main.C: PAG_BOOL get_universal_attribute__kill_norm_temps()
        nnh99_shape/main.C: PAG_BOOL get_universal_attribute__kill_empty_graph()
        nnh99_shape/main.C: PAG_BOOL get_universal_attribute__kill_unreachable_nodes()
  - changed Makefile.in-template to use CUSTOM_CFLAGS for main.C and main-support.C
    allowing to eliminate all redeclaration warnings
        
* upgrade to ROSE 0.9.0b [MS,GB,AP]
  - extended IR interface [MS]
    + added fragmentToString function and made it the only function to create
      string representations of AST subtrees in SATIrE [MS]
    + improved performance of unparseToString (eliminated deep copy of AST fragments) [MS]
  - upgraded handling of variable names to ROSE 0.9.0b and improved handling of scopes [MS]
  - upgraded ICFG generation with new type information of ROSE 0.9.0b and adapted use of 
    unparseToString functions [GB]
  - upgraded termite to work with ROSE 0.9.0b: [AP]
        + generate symbol table entries for function declarations
        + generate symbol table entries for class declarations
        + parent scopes for namespace declarations are not necessary any more
        + because of some printf statements in the new ROSE code,
          term2rose and rose2term no longer read/write from/to stdin/out
        
* Termite: 
 - improved term quoting [AP]
 - new lex/yacc parser for PAG data flow information dfi_[parser|scanner] [AP]
        
        
* Tested with:
 - ROSE 0.9.0b
 - PAG 7.3.8.55
 - flex 2.5.33
 - bison 2.3
 - g++ 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)

        
V0.7.8 2008-01-24 AP, GB, VP, MS

* Added Makefile.custom to shape analyses to allow customized
  settings in Makfile [MS,VP]
        
* Updated docs/cfgconstruction.ps for DeclareStmt, ExternalCall, 
  FunctionEntry, FunctionExit, FunctionCall, FunctionReturn [MS]

* Added graph visualization for srw98_shape and nnh99_shape.
  The gdl files now show the shape graphs for each node.
  For the srw98 analysis a single graph is shown for each node.
  For the nnh99 analysis a set of graphs is shown for each node.
  (the summary graph shows the union of the set of graphs)
  [VP,MS]

* Post-processing of may/must analysis information:
  Open issues: 
    - For must-alias pair computation of the SRW98 analysis
      we assume that existing edges do not represent null values.
      This will be fixed in one of the next releases.
    - One kind of may-aliases is not reported yet: access paths
      that lead to an unshared summary node, but do share a common
      node on their path.
  [VP]
        
* Term Representation: 
  Support for more data types (StringVal, ...) [AP]
  Various bugfixes

* Term Representation: Added a compiletime-switch
  -DCOMPACT_TERM_REPRESENTATION wich changes the external term
  representation to a more convenient format. [AP]

* Added a global attribute and some auxiliary functions for access to global
  variables from PAG analysis specifications. [GB]

* Added file docs/satire_attributes_auxiliary_functions as documentation of
  all attributes and auxiliary functions provided by SATIrE. [GB]

* Tested with:
 - ROSE 0.8.10e
 - PAG 6.1.6.96
 - flex 2.5.33
 - bison 2.3
 - g++ 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)

        
V0.7.7 2007-11-12 VP, AP, MS

* added srw98_shape, nnh99_shape [VP,MS]
* extended newanalysis with option -u [AP]
* added --wholeprogram option to the analyzer [AP]
* fixed ./configure checks for ROSE and PAG [AP] (thanks to Michael Tautschnig, TU Munich)

* Tested with:
 - ROSE 0.8.10e
 - PAG 6.1.6.96
 - flex 2.5.33
 - bison 2.3
 - g++ 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)

        
V0.7.6 2007-10-23 GB, MS, AP

* required user changes:
  - change analysis specifications that match on the ExternalCall constructor

* Added the function expression and the parameter list to the ExternalCall
  constructor. [GB]
* Improved ICFG construction for logical expressions; the result assigned to
  the logical variable is now always a boolean constant. Right-associative
  expressions like a || (b && c) are still evaluated in a wrong order,
  however. [GB]
* Added the -rpath linker flag in several makefiles to encode the path to
  the ROSE libraries in binaries we generate. This should make use of the
  LD_LIBRARY_PATH variable unnecessary. [GB]

* Changed skeleton files such that generated analyzers 
  now operate on all source code that is included with directives 
  (e.g. header files, included C++ files, etc.) [MS]

* Fixed newanalysis to operate without parameters [MS]

* Fixed termite to handle missing file infos [AP]

* Tested with:
 - ROSE 0.8.10e
 - PAG 6.1.6.96
 - flex 2.5.33
 - bison 2.3
 - g++ 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)


V0.7.5 2007-10-16 AP,MS

* required user changes: [AP]
        configuration: environment must be configured using configure
                       NO environment variables need to be set

        using newanalysis: parameters are now optional
          newanalysis [analysis-directory-name] [carrier-type-name]
        
* reworked entire build system to use GNU autotools [AP]
* added Termite: src/termite [AP]
* analysis results are exported to term representation [AP]
* added --termoutput analysis switch [AP]

* Tested with: [MS]
 - ROSE 0.8.10e
 - PAG 6.1.6.96
 - flex 2.5.33
 - bison 2.3
 - g++ 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)


V0.7.4 2007-07-15 MS

* required user changes:
  - Modify optla file(s): remove ExpressionRoot( ) 
  - Rerun newanalysis (skeleton files were modified)

* Adapted SATIrE interfaces from ROSE 0.8.8a to ROSE 0.8.10e
  - rewrote analyzer/icfgbuilder
    + rewrote the icfg generation to use one uniform interface
    + added new SATIrE-ROSE interfacing class Ir
    + changed code to use new ROSE-AST features
    + changed code to comply with strict ROSE 0.8.10e AST checks
  - changed analyzer/astaccess 
    + eliminated the use of SgRootExpression
    + changed code to create and access new IR structure 
  - upgraded analyzer/annotation code to gcc 4.1.1+
  - updated analyzer/skeletons (used by newanalysis)
  - changed examples analyses to not use RootExpression

* Tested with:
 - ROSE 0.8.10e
 - PAG 6.1.6.96
 - flex 2.5.33
 - bison 2.3
 - g++ 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)


V0.7.3 2007-05-22 MS

* required user changes: none

* Added support for specific C versions
  new command line options:
    --language c++
    --language c89
    --language c99

* Tested with:
  - ROSE 0.8.8a (requires g++ 3.3-5.x)
  - PAG 0.9.7.843d
  - flex 2.5.31
  - bison 1.875d
  - g++ 3.5.5
        

V0.7.2 2007-05-10 MS,GB

* required user changes: none

* Added support for syntactic lists in PAG specifications [GB]
* Changed --prefix=syn to -Psyn in grato/Makefile [MS]
* Fixed problem with file "other.h" (added to src/analyzer/astaccess) [MS]
        
* Tested with:
  - ROSE 0.8.8a (requires g++ 3.3-5.x)
  - PAG 0.9.7.843d
  - flex 2.5.31
  - bison 1.875d
  - g++ 3.5.5
        

V0.7.1 2007-03-20 MS

* required user changes: none

* Changed main.C-template to not compile generated C/C++ files
* Changed all example-analyses in directory examples. Now only files *.set,
        *.optla, and 'runtests' are in the directory and all other files are
        generated by invoking 'newanalysis' for each analysis example. Each
        of the example-analysis directories can now be copied verbatim and
        appear like an user-defined analysis. However, after 'make' in
        directory examples all required files are generated and after
        'make clean' all generated files are removed. Thus, the examples
        can be run within the distribution package or outside after
        copying one of the directories (with files *.set, *.optla, runtests)
* Fixed src/analyzer/astaccess/Makefile (to set variable PIG)
* Added ast_support_funcs.h (with new headers for support functions)
        main.h-template was modified to include above file

* Tested with:
  - ROSE 0.8.8a (requires g++ 3.3-5.x)
  - PAG 0.9.7.843d
  - flex 2.5.31
  - bison 1.875d
  - g++ 3.5.5
        

V0.7.0 2007-03-09 MS,GB

* Initial release

* Tested with:
  - ROSE 0.8.8a (requires g++ 3.3-5.x)
  - PAG 0.9.7.843d
  - flex 2.5.31
  - bison 1.875d
  - g++ 3.5.5
