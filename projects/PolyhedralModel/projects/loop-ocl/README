
* Author:
  Tristan Vanderbruggen
  University of Delaware
  vanderbruggentristan@gmail.com (tristan@udel.edu)

* Polygraph Extractor:

    We call "Polygraph" a (preprocessed) version of the Generalized Dependency Graph (GDG)
obtains by Dependencies Analysis in the Polyhedral Model. It is preprocessed to be used
as a characterization of Statically Controlled Programs (SCoP) in machine learning using
Support Vector Machine.
    The goal to this work is to make it possible to explore performance prediction using
the highly complex mathematical structure of the GDG.

    We added to the original GDG structure a parse tree of each statement as it is focus
on loop nest structure and data access.

  - Polygraph raw-format:

****************************************

NBR_VAR (uint)

NBR_STMT (uint)

#########
# STMT 1
ID (uint)
DOMAIN (isl_set)
SCATERING (isl_multi_aff)
PARSE-TREE (LISP style)

.
.
.

#########
# STMT n
ID (uint)
DOMAIN (isl_set)
SCATERING (isl_multi_aff)
PARSE-TREE (LISP style)

NBR_DEP (uint)

#########
# DEP 1
ID (uint)
SRC (uint)
SINK (uint)
VAR (uint)
DEP (isl_map)

.
.
.

#########
# DEP n
ID (uint)
SRC (uint)
SINK (uint)
VAR (uint)
TYPE (enum)
DEP (isl_map)

****************************************

  - Detail on the Parse Tree:

      - Each operator is assign a unique ID (op ID (c1) [(c2) [(c3)]] ) up to three children
              (FIXME function call
                         right now we only consider "sqrt" like function call: one argument => unary op
                         first improvement: unique function ID
              )
      - Leave are data accesses: (access VAR isl_multi_aff)


